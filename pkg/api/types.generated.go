/*
Copyright 2015 The Kubernetes Authors All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package api

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg3_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg2_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg7_fields "k8s.io/kubernetes/pkg/fields"
	pkg6_labels "k8s.io/kubernetes/pkg/labels"
	pkg8_runtime "k8s.io/kubernetes/pkg/runtime"
	pkg1_types "k8s.io/kubernetes/pkg/types"
	pkg5_util "k8s.io/kubernetes/pkg/util"
	"reflect"
	"runtime"
	pkg4_inf "speter.net/go/exp/math/dec/inf"
	time "time"
)

const (
	codecSelferC_UTF81234         = 1
	codecSelferC_RAW1234          = 0
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 4 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			4, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg3_resource.Quantity
		var v1 pkg2_unversioned.Time
		var v2 pkg7_fields.Selector
		var v3 pkg6_labels.Selector
		var v4 pkg8_runtime.Object
		var v5 pkg1_types.UID
		var v6 pkg5_util.IntOrString
		var v7 pkg4_inf.Dec
		var v8 time.Time
		_, _, _, _, _, _, _, _, _ = v0, v1, v2, v3, v4, v5, v6, v7, v8
	}
}

func (x *ObjectMeta) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [13]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Name != ""
			yyq2[1] = x.GenerateName != ""
			yyq2[2] = x.Tenant != ""
			yyq2[3] = x.Namespace != ""
			yyq2[4] = x.SelfLink != ""
			yyq2[5] = x.UID != ""
			yyq2[6] = x.ResourceVersion != ""
			yyq2[7] = x.Generation != 0
			yyq2[8] = true
			yyq2[9] = x.DeletionTimestamp != nil
			yyq2[10] = x.DeletionGracePeriodSeconds != nil
			yyq2[11] = len(x.Labels) != 0
			yyq2[12] = len(x.Annotations) != 0
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(13)
			} else {
				var yynn2 int = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
			}
			if yyr2 || yy2arr2 {
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[0] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[1] {
					r.EncodeString(codecSelferC_UTF81234, string("generateName"))
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[2] {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Tenant))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[2] {
					r.EncodeString(codecSelferC_UTF81234, string("tenant"))
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Tenant))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[3] {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[3] {
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[4] {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[4] {
					r.EncodeString(codecSelferC_UTF81234, string("selfLink"))
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[5] {
					yym19 := z.EncBinary()
					_ = yym19
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[5] {
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					yym20 := z.EncBinary()
					_ = yym20
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[6] {
					yym22 := z.EncBinary()
					_ = yym22
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[6] {
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					yym23 := z.EncBinary()
					_ = yym23
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[7] {
					yym25 := z.EncBinary()
					_ = yym25
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[7] {
					r.EncodeString(codecSelferC_UTF81234, string("generation"))
					yym26 := z.EncBinary()
					_ = yym26
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[8] {
					yy28 := &x.CreationTimestamp
					yym29 := z.EncBinary()
					_ = yym29
					if false {
					} else if z.HasExtensions() && z.EncExt(yy28) {
					} else if yym29 {
						z.EncBinaryMarshal(yy28)
					} else if !yym29 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy28)
					} else {
						z.EncFallback(yy28)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[8] {
					r.EncodeString(codecSelferC_UTF81234, string("creationTimestamp"))
					yy30 := &x.CreationTimestamp
					yym31 := z.EncBinary()
					_ = yym31
					if false {
					} else if z.HasExtensions() && z.EncExt(yy30) {
					} else if yym31 {
						z.EncBinaryMarshal(yy30)
					} else if !yym31 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy30)
					} else {
						z.EncFallback(yy30)
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[9] {
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym33 := z.EncBinary()
						_ = yym33
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym33 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym33 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[9] {
					r.EncodeString(codecSelferC_UTF81234, string("deletionTimestamp"))
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym34 := z.EncBinary()
						_ = yym34
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym34 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym34 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[10] {
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy36 := *x.DeletionGracePeriodSeconds
						yym37 := z.EncBinary()
						_ = yym37
						if false {
						} else {
							r.EncodeInt(int64(yy36))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[10] {
					r.EncodeString(codecSelferC_UTF81234, string("deletionGracePeriodSeconds"))
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy38 := *x.DeletionGracePeriodSeconds
						yym39 := z.EncBinary()
						_ = yym39
						if false {
						} else {
							r.EncodeInt(int64(yy38))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[11] {
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym41 := z.EncBinary()
						_ = yym41
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[11] {
					r.EncodeString(codecSelferC_UTF81234, string("labels"))
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym42 := z.EncBinary()
						_ = yym42
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[12] {
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym44 := z.EncBinary()
						_ = yym44
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[12] {
					r.EncodeString(codecSelferC_UTF81234, string("annotations"))
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym45 := z.EncBinary()
						_ = yym45
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				}
			}
			if yysep2 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ObjectMeta) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym46 := z.DecBinary()
	_ = yym46
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl47 := r.ReadMapStart()
			if yyl47 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl47, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl47 := r.ReadArrayStart()
			if yyl47 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl47, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectMeta) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys48Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys48Slc
	var yyhl48 bool = l >= 0
	for yyj48 := 0; ; yyj48++ {
		if yyhl48 {
			if yyj48 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys48Slc = r.DecodeBytes(yys48Slc, true, true)
		yys48 := string(yys48Slc)
		switch yys48 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "generateName":
			if r.TryDecodeAsNil() {
				x.GenerateName = ""
			} else {
				x.GenerateName = string(r.DecodeString())
			}
		case "tenant":
			if r.TryDecodeAsNil() {
				x.Tenant = ""
			} else {
				x.Tenant = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "selfLink":
			if r.TryDecodeAsNil() {
				x.SelfLink = ""
			} else {
				x.SelfLink = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "generation":
			if r.TryDecodeAsNil() {
				x.Generation = 0
			} else {
				x.Generation = int64(r.DecodeInt(64))
			}
		case "creationTimestamp":
			if r.TryDecodeAsNil() {
				x.CreationTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv57 := &x.CreationTimestamp
				yym58 := z.DecBinary()
				_ = yym58
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv57) {
				} else if yym58 {
					z.DecBinaryUnmarshal(yyv57)
				} else if !yym58 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv57)
				} else {
					z.DecFallback(yyv57, false)
				}
			}
		case "deletionTimestamp":
			if r.TryDecodeAsNil() {
				if x.DeletionTimestamp != nil {
					x.DeletionTimestamp = nil
				}
			} else {
				if x.DeletionTimestamp == nil {
					x.DeletionTimestamp = new(pkg2_unversioned.Time)
				}
				yym60 := z.DecBinary()
				_ = yym60
				if false {
				} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
				} else if yym60 {
					z.DecBinaryUnmarshal(x.DeletionTimestamp)
				} else if !yym60 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.DeletionTimestamp)
				} else {
					z.DecFallback(x.DeletionTimestamp, false)
				}
			}
		case "deletionGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.DeletionGracePeriodSeconds != nil {
					x.DeletionGracePeriodSeconds = nil
				}
			} else {
				if x.DeletionGracePeriodSeconds == nil {
					x.DeletionGracePeriodSeconds = new(int64)
				}
				yym62 := z.DecBinary()
				_ = yym62
				if false {
				} else {
					*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "labels":
			if r.TryDecodeAsNil() {
				x.Labels = nil
			} else {
				yyv63 := &x.Labels
				yym64 := z.DecBinary()
				_ = yym64
				if false {
				} else {
					z.F.DecMapStringStringX(yyv63, false, d)
				}
			}
		case "annotations":
			if r.TryDecodeAsNil() {
				x.Annotations = nil
			} else {
				yyv65 := &x.Annotations
				yym66 := z.DecBinary()
				_ = yym66
				if false {
				} else {
					z.F.DecMapStringStringX(yyv65, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys48)
		} // end switch yys48
	} // end for yyj48
	if !yyhl48 {
		r.ReadEnd()
	}
}

func (x *ObjectMeta) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj67 int
	var yyb67 bool
	var yyhl67 bool = l >= 0
	yyj67++
	if yyhl67 {
		yyb67 = yyj67 > l
	} else {
		yyb67 = r.CheckBreak()
	}
	if yyb67 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj67++
	if yyhl67 {
		yyb67 = yyj67 > l
	} else {
		yyb67 = r.CheckBreak()
	}
	if yyb67 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.GenerateName = ""
	} else {
		x.GenerateName = string(r.DecodeString())
	}
	yyj67++
	if yyhl67 {
		yyb67 = yyj67 > l
	} else {
		yyb67 = r.CheckBreak()
	}
	if yyb67 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Tenant = ""
	} else {
		x.Tenant = string(r.DecodeString())
	}
	yyj67++
	if yyhl67 {
		yyb67 = yyj67 > l
	} else {
		yyb67 = r.CheckBreak()
	}
	if yyb67 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj67++
	if yyhl67 {
		yyb67 = yyj67 > l
	} else {
		yyb67 = r.CheckBreak()
	}
	if yyb67 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SelfLink = ""
	} else {
		x.SelfLink = string(r.DecodeString())
	}
	yyj67++
	if yyhl67 {
		yyb67 = yyj67 > l
	} else {
		yyb67 = r.CheckBreak()
	}
	if yyb67 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj67++
	if yyhl67 {
		yyb67 = yyj67 > l
	} else {
		yyb67 = r.CheckBreak()
	}
	if yyb67 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj67++
	if yyhl67 {
		yyb67 = yyj67 > l
	} else {
		yyb67 = r.CheckBreak()
	}
	if yyb67 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Generation = 0
	} else {
		x.Generation = int64(r.DecodeInt(64))
	}
	yyj67++
	if yyhl67 {
		yyb67 = yyj67 > l
	} else {
		yyb67 = r.CheckBreak()
	}
	if yyb67 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.CreationTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv76 := &x.CreationTimestamp
		yym77 := z.DecBinary()
		_ = yym77
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv76) {
		} else if yym77 {
			z.DecBinaryUnmarshal(yyv76)
		} else if !yym77 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv76)
		} else {
			z.DecFallback(yyv76, false)
		}
	}
	yyj67++
	if yyhl67 {
		yyb67 = yyj67 > l
	} else {
		yyb67 = r.CheckBreak()
	}
	if yyb67 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.DeletionTimestamp != nil {
			x.DeletionTimestamp = nil
		}
	} else {
		if x.DeletionTimestamp == nil {
			x.DeletionTimestamp = new(pkg2_unversioned.Time)
		}
		yym79 := z.DecBinary()
		_ = yym79
		if false {
		} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
		} else if yym79 {
			z.DecBinaryUnmarshal(x.DeletionTimestamp)
		} else if !yym79 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.DeletionTimestamp)
		} else {
			z.DecFallback(x.DeletionTimestamp, false)
		}
	}
	yyj67++
	if yyhl67 {
		yyb67 = yyj67 > l
	} else {
		yyb67 = r.CheckBreak()
	}
	if yyb67 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.DeletionGracePeriodSeconds != nil {
			x.DeletionGracePeriodSeconds = nil
		}
	} else {
		if x.DeletionGracePeriodSeconds == nil {
			x.DeletionGracePeriodSeconds = new(int64)
		}
		yym81 := z.DecBinary()
		_ = yym81
		if false {
		} else {
			*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj67++
	if yyhl67 {
		yyb67 = yyj67 > l
	} else {
		yyb67 = r.CheckBreak()
	}
	if yyb67 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Labels = nil
	} else {
		yyv82 := &x.Labels
		yym83 := z.DecBinary()
		_ = yym83
		if false {
		} else {
			z.F.DecMapStringStringX(yyv82, false, d)
		}
	}
	yyj67++
	if yyhl67 {
		yyb67 = yyj67 > l
	} else {
		yyb67 = r.CheckBreak()
	}
	if yyb67 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Annotations = nil
	} else {
		yyv84 := &x.Annotations
		yym85 := z.DecBinary()
		_ = yym85
		if false {
		} else {
			z.F.DecMapStringStringX(yyv84, false, d)
		}
	}
	for {
		yyj67++
		if yyhl67 {
			yyb67 = yyj67 > l
		} else {
			yyb67 = r.CheckBreak()
		}
		if yyb67 {
			break
		}
		z.DecStructFieldNotFound(yyj67-1, "")
	}
	r.ReadEnd()
}

func (x *Volume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym86 := z.EncBinary()
		_ = yym86
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep87 := !z.EncBinary()
			yy2arr87 := z.EncBasicHandle().StructToArray
			var yyq87 [17]bool
			_, _, _ = yysep87, yyq87, yy2arr87
			const yyr87 bool = false
			yyq87[1] = x.VolumeSource.HostPath != nil && x.HostPath != nil
			yyq87[2] = x.VolumeSource.EmptyDir != nil && x.EmptyDir != nil
			yyq87[3] = x.VolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq87[4] = x.VolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq87[5] = x.VolumeSource.GitRepo != nil && x.GitRepo != nil
			yyq87[6] = x.VolumeSource.Secret != nil && x.Secret != nil
			yyq87[7] = x.VolumeSource.NFS != nil && x.NFS != nil
			yyq87[8] = x.VolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq87[9] = x.VolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq87[10] = x.VolumeSource.PersistentVolumeClaim != nil && x.PersistentVolumeClaim != nil
			yyq87[11] = x.VolumeSource.RBD != nil && x.RBD != nil
			yyq87[12] = x.VolumeSource.Cinder != nil && x.Cinder != nil
			yyq87[13] = x.VolumeSource.CephFS != nil && x.CephFS != nil
			yyq87[14] = x.VolumeSource.Flocker != nil && x.Flocker != nil
			yyq87[15] = x.VolumeSource.DownwardAPI != nil && x.DownwardAPI != nil
			yyq87[16] = x.VolumeSource.FC != nil && x.FC != nil
			if yyr87 || yy2arr87 {
				r.EncodeArrayStart(17)
			} else {
				var yynn87 int = 1
				for _, b := range yyq87 {
					if b {
						yynn87++
					}
				}
				r.EncodeMapStart(yynn87)
			}
			if yyr87 || yy2arr87 {
				yym89 := z.EncBinary()
				_ = yym89
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				yym90 := z.EncBinary()
				_ = yym90
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			var yyn91 bool
			if x.VolumeSource.HostPath == nil {
				yyn91 = true
				goto LABEL91
			}
		LABEL91:
			if yyr87 || yy2arr87 {
				if yyn91 {
					r.EncodeNil()
				} else {
					if yyq87[1] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq87[1] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					if yyn91 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn92 bool
			if x.VolumeSource.EmptyDir == nil {
				yyn92 = true
				goto LABEL92
			}
		LABEL92:
			if yyr87 || yy2arr87 {
				if yyn92 {
					r.EncodeNil()
				} else {
					if yyq87[2] {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq87[2] {
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					if yyn92 {
						r.EncodeNil()
					} else {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn93 bool
			if x.VolumeSource.GCEPersistentDisk == nil {
				yyn93 = true
				goto LABEL93
			}
		LABEL93:
			if yyr87 || yy2arr87 {
				if yyn93 {
					r.EncodeNil()
				} else {
					if yyq87[3] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq87[3] {
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					if yyn93 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn94 bool
			if x.VolumeSource.AWSElasticBlockStore == nil {
				yyn94 = true
				goto LABEL94
			}
		LABEL94:
			if yyr87 || yy2arr87 {
				if yyn94 {
					r.EncodeNil()
				} else {
					if yyq87[4] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq87[4] {
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					if yyn94 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn95 bool
			if x.VolumeSource.GitRepo == nil {
				yyn95 = true
				goto LABEL95
			}
		LABEL95:
			if yyr87 || yy2arr87 {
				if yyn95 {
					r.EncodeNil()
				} else {
					if yyq87[5] {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq87[5] {
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					if yyn95 {
						r.EncodeNil()
					} else {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn96 bool
			if x.VolumeSource.Secret == nil {
				yyn96 = true
				goto LABEL96
			}
		LABEL96:
			if yyr87 || yy2arr87 {
				if yyn96 {
					r.EncodeNil()
				} else {
					if yyq87[6] {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq87[6] {
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					if yyn96 {
						r.EncodeNil()
					} else {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn97 bool
			if x.VolumeSource.NFS == nil {
				yyn97 = true
				goto LABEL97
			}
		LABEL97:
			if yyr87 || yy2arr87 {
				if yyn97 {
					r.EncodeNil()
				} else {
					if yyq87[7] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq87[7] {
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					if yyn97 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn98 bool
			if x.VolumeSource.ISCSI == nil {
				yyn98 = true
				goto LABEL98
			}
		LABEL98:
			if yyr87 || yy2arr87 {
				if yyn98 {
					r.EncodeNil()
				} else {
					if yyq87[8] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq87[8] {
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					if yyn98 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn99 bool
			if x.VolumeSource.Glusterfs == nil {
				yyn99 = true
				goto LABEL99
			}
		LABEL99:
			if yyr87 || yy2arr87 {
				if yyn99 {
					r.EncodeNil()
				} else {
					if yyq87[9] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq87[9] {
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					if yyn99 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn100 bool
			if x.VolumeSource.PersistentVolumeClaim == nil {
				yyn100 = true
				goto LABEL100
			}
		LABEL100:
			if yyr87 || yy2arr87 {
				if yyn100 {
					r.EncodeNil()
				} else {
					if yyq87[10] {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq87[10] {
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					if yyn100 {
						r.EncodeNil()
					} else {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn101 bool
			if x.VolumeSource.RBD == nil {
				yyn101 = true
				goto LABEL101
			}
		LABEL101:
			if yyr87 || yy2arr87 {
				if yyn101 {
					r.EncodeNil()
				} else {
					if yyq87[11] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq87[11] {
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					if yyn101 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn102 bool
			if x.VolumeSource.Cinder == nil {
				yyn102 = true
				goto LABEL102
			}
		LABEL102:
			if yyr87 || yy2arr87 {
				if yyn102 {
					r.EncodeNil()
				} else {
					if yyq87[12] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq87[12] {
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					if yyn102 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn103 bool
			if x.VolumeSource.CephFS == nil {
				yyn103 = true
				goto LABEL103
			}
		LABEL103:
			if yyr87 || yy2arr87 {
				if yyn103 {
					r.EncodeNil()
				} else {
					if yyq87[13] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq87[13] {
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					if yyn103 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn104 bool
			if x.VolumeSource.Flocker == nil {
				yyn104 = true
				goto LABEL104
			}
		LABEL104:
			if yyr87 || yy2arr87 {
				if yyn104 {
					r.EncodeNil()
				} else {
					if yyq87[14] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq87[14] {
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					if yyn104 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn105 bool
			if x.VolumeSource.DownwardAPI == nil {
				yyn105 = true
				goto LABEL105
			}
		LABEL105:
			if yyr87 || yy2arr87 {
				if yyn105 {
					r.EncodeNil()
				} else {
					if yyq87[15] {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq87[15] {
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					if yyn105 {
						r.EncodeNil()
					} else {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn106 bool
			if x.VolumeSource.FC == nil {
				yyn106 = true
				goto LABEL106
			}
		LABEL106:
			if yyr87 || yy2arr87 {
				if yyn106 {
					r.EncodeNil()
				} else {
					if yyq87[16] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq87[16] {
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					if yyn106 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yysep87 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Volume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym107 := z.DecBinary()
	_ = yym107
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl108 := r.ReadMapStart()
			if yyl108 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl108, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl108 := r.ReadArrayStart()
			if yyl108 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl108, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Volume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys109Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys109Slc
	var yyhl109 bool = l >= 0
	for yyj109 := 0; ; yyj109++ {
		if yyhl109 {
			if yyj109 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys109Slc = r.DecodeBytes(yys109Slc, true, true)
		yys109 := string(yys109Slc)
		switch yys109 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPath":
			if x.VolumeSource.HostPath == nil {
				x.VolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if x.VolumeSource.EmptyDir == nil {
				x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.VolumeSource.GCEPersistentDisk == nil {
				x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.VolumeSource.AWSElasticBlockStore == nil {
				x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if x.VolumeSource.GitRepo == nil {
				x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if x.VolumeSource.Secret == nil {
				x.VolumeSource.Secret = new(SecretVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.VolumeSource.NFS == nil {
				x.VolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.VolumeSource.ISCSI == nil {
				x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.VolumeSource.Glusterfs == nil {
				x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if x.VolumeSource.PersistentVolumeClaim == nil {
				x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.VolumeSource.RBD == nil {
				x.VolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.VolumeSource.Cinder == nil {
				x.VolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.VolumeSource.CephFS == nil {
				x.VolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.VolumeSource.Flocker == nil {
				x.VolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if x.VolumeSource.DownwardAPI == nil {
				x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if x.VolumeSource.FC == nil {
				x.VolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys109)
		} // end switch yys109
	} // end for yyj109
	if !yyhl109 {
		r.ReadEnd()
	}
}

func (x *Volume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj127 int
	var yyb127 bool
	var yyhl127 bool = l >= 0
	yyj127++
	if yyhl127 {
		yyb127 = yyj127 > l
	} else {
		yyb127 = r.CheckBreak()
	}
	if yyb127 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj127++
	if yyhl127 {
		yyb127 = yyj127 > l
	} else {
		yyb127 = r.CheckBreak()
	}
	if yyb127 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj127++
	if yyhl127 {
		yyb127 = yyj127 > l
	} else {
		yyb127 = r.CheckBreak()
	}
	if yyb127 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	yyj127++
	if yyhl127 {
		yyb127 = yyj127 > l
	} else {
		yyb127 = r.CheckBreak()
	}
	if yyb127 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj127++
	if yyhl127 {
		yyb127 = yyj127 > l
	} else {
		yyb127 = r.CheckBreak()
	}
	if yyb127 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj127++
	if yyhl127 {
		yyb127 = yyj127 > l
	} else {
		yyb127 = r.CheckBreak()
	}
	if yyb127 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	yyj127++
	if yyhl127 {
		yyb127 = yyj127 > l
	} else {
		yyb127 = r.CheckBreak()
	}
	if yyb127 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	yyj127++
	if yyhl127 {
		yyb127 = yyj127 > l
	} else {
		yyb127 = r.CheckBreak()
	}
	if yyb127 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj127++
	if yyhl127 {
		yyb127 = yyj127 > l
	} else {
		yyb127 = r.CheckBreak()
	}
	if yyb127 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj127++
	if yyhl127 {
		yyb127 = yyj127 > l
	} else {
		yyb127 = r.CheckBreak()
	}
	if yyb127 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj127++
	if yyhl127 {
		yyb127 = yyj127 > l
	} else {
		yyb127 = r.CheckBreak()
	}
	if yyb127 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	yyj127++
	if yyhl127 {
		yyb127 = yyj127 > l
	} else {
		yyb127 = r.CheckBreak()
	}
	if yyb127 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj127++
	if yyhl127 {
		yyb127 = yyj127 > l
	} else {
		yyb127 = r.CheckBreak()
	}
	if yyb127 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj127++
	if yyhl127 {
		yyb127 = yyj127 > l
	} else {
		yyb127 = r.CheckBreak()
	}
	if yyb127 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj127++
	if yyhl127 {
		yyb127 = yyj127 > l
	} else {
		yyb127 = r.CheckBreak()
	}
	if yyb127 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj127++
	if yyhl127 {
		yyb127 = yyj127 > l
	} else {
		yyb127 = r.CheckBreak()
	}
	if yyb127 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	yyj127++
	if yyhl127 {
		yyb127 = yyj127 > l
	} else {
		yyb127 = r.CheckBreak()
	}
	if yyb127 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	for {
		yyj127++
		if yyhl127 {
			yyb127 = yyj127 > l
		} else {
			yyb127 = r.CheckBreak()
		}
		if yyb127 {
			break
		}
		z.DecStructFieldNotFound(yyj127-1, "")
	}
	r.ReadEnd()
}

func (x *VolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym145 := z.EncBinary()
		_ = yym145
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep146 := !z.EncBinary()
			yy2arr146 := z.EncBasicHandle().StructToArray
			var yyq146 [16]bool
			_, _, _ = yysep146, yyq146, yy2arr146
			const yyr146 bool = false
			yyq146[0] = x.HostPath != nil
			yyq146[1] = x.EmptyDir != nil
			yyq146[2] = x.GCEPersistentDisk != nil
			yyq146[3] = x.AWSElasticBlockStore != nil
			yyq146[4] = x.GitRepo != nil
			yyq146[5] = x.Secret != nil
			yyq146[6] = x.NFS != nil
			yyq146[7] = x.ISCSI != nil
			yyq146[8] = x.Glusterfs != nil
			yyq146[9] = x.PersistentVolumeClaim != nil
			yyq146[10] = x.RBD != nil
			yyq146[11] = x.Cinder != nil
			yyq146[12] = x.CephFS != nil
			yyq146[13] = x.Flocker != nil
			yyq146[14] = x.DownwardAPI != nil
			yyq146[15] = x.FC != nil
			if yyr146 || yy2arr146 {
				r.EncodeArrayStart(16)
			} else {
				var yynn146 int = 0
				for _, b := range yyq146 {
					if b {
						yynn146++
					}
				}
				r.EncodeMapStart(yynn146)
			}
			if yyr146 || yy2arr146 {
				if yyq146[0] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq146[0] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr146 || yy2arr146 {
				if yyq146[1] {
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq146[1] {
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				}
			}
			if yyr146 || yy2arr146 {
				if yyq146[2] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq146[2] {
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr146 || yy2arr146 {
				if yyq146[3] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq146[3] {
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr146 || yy2arr146 {
				if yyq146[4] {
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq146[4] {
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				}
			}
			if yyr146 || yy2arr146 {
				if yyq146[5] {
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq146[5] {
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				}
			}
			if yyr146 || yy2arr146 {
				if yyq146[6] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq146[6] {
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr146 || yy2arr146 {
				if yyq146[7] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq146[7] {
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr146 || yy2arr146 {
				if yyq146[8] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq146[8] {
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr146 || yy2arr146 {
				if yyq146[9] {
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq146[9] {
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				}
			}
			if yyr146 || yy2arr146 {
				if yyq146[10] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq146[10] {
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr146 || yy2arr146 {
				if yyq146[11] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq146[11] {
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr146 || yy2arr146 {
				if yyq146[12] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq146[12] {
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr146 || yy2arr146 {
				if yyq146[13] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq146[13] {
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr146 || yy2arr146 {
				if yyq146[14] {
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq146[14] {
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr146 || yy2arr146 {
				if yyq146[15] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq146[15] {
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yysep146 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *VolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym163 := z.DecBinary()
	_ = yym163
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl164 := r.ReadMapStart()
			if yyl164 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl164, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl164 := r.ReadArrayStart()
			if yyl164 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl164, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys165Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys165Slc
	var yyhl165 bool = l >= 0
	for yyj165 := 0; ; yyj165++ {
		if yyhl165 {
			if yyj165 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys165Slc = r.DecodeBytes(yys165Slc, true, true)
		yys165 := string(yys165Slc)
		switch yys165 {
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys165)
		} // end switch yys165
	} // end for yyj165
	if !yyhl165 {
		r.ReadEnd()
	}
}

func (x *VolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj182 int
	var yyb182 bool
	var yyhl182 bool = l >= 0
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	for {
		yyj182++
		if yyhl182 {
			yyb182 = yyj182 > l
		} else {
			yyb182 = r.CheckBreak()
		}
		if yyb182 {
			break
		}
		z.DecStructFieldNotFound(yyj182-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym199 := z.EncBinary()
		_ = yym199
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep200 := !z.EncBinary()
			yy2arr200 := z.EncBasicHandle().StructToArray
			var yyq200 [11]bool
			_, _, _ = yysep200, yyq200, yy2arr200
			const yyr200 bool = false
			yyq200[0] = x.GCEPersistentDisk != nil
			yyq200[1] = x.AWSElasticBlockStore != nil
			yyq200[2] = x.HostPath != nil
			yyq200[3] = x.Glusterfs != nil
			yyq200[4] = x.NFS != nil
			yyq200[5] = x.RBD != nil
			yyq200[6] = x.ISCSI != nil
			yyq200[7] = x.Cinder != nil
			yyq200[8] = x.CephFS != nil
			yyq200[9] = x.FC != nil
			yyq200[10] = x.Flocker != nil
			if yyr200 || yy2arr200 {
				r.EncodeArrayStart(11)
			} else {
				var yynn200 int = 0
				for _, b := range yyq200 {
					if b {
						yynn200++
					}
				}
				r.EncodeMapStart(yynn200)
			}
			if yyr200 || yy2arr200 {
				if yyq200[0] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq200[0] {
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr200 || yy2arr200 {
				if yyq200[1] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq200[1] {
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr200 || yy2arr200 {
				if yyq200[2] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq200[2] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr200 || yy2arr200 {
				if yyq200[3] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq200[3] {
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr200 || yy2arr200 {
				if yyq200[4] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq200[4] {
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr200 || yy2arr200 {
				if yyq200[5] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq200[5] {
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr200 || yy2arr200 {
				if yyq200[6] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq200[6] {
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr200 || yy2arr200 {
				if yyq200[7] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq200[7] {
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr200 || yy2arr200 {
				if yyq200[8] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq200[8] {
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr200 || yy2arr200 {
				if yyq200[9] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq200[9] {
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr200 || yy2arr200 {
				if yyq200[10] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq200[10] {
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yysep200 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym212 := z.DecBinary()
	_ = yym212
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl213 := r.ReadMapStart()
			if yyl213 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl213, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl213 := r.ReadArrayStart()
			if yyl213 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl213, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys214Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys214Slc
	var yyhl214 bool = l >= 0
	for yyj214 := 0; ; yyj214++ {
		if yyhl214 {
			if yyj214 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys214Slc = r.DecodeBytes(yys214Slc, true, true)
		yys214 := string(yys214Slc)
		switch yys214 {
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys214)
		} // end switch yys214
	} // end for yyj214
	if !yyhl214 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj226 int
	var yyb226 bool
	var yyhl226 bool = l >= 0
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	for {
		yyj226++
		if yyhl226 {
			yyb226 = yyj226 > l
		} else {
			yyb226 = r.CheckBreak()
		}
		if yyb226 {
			break
		}
		z.DecStructFieldNotFound(yyj226-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeClaimVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym238 := z.EncBinary()
		_ = yym238
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep239 := !z.EncBinary()
			yy2arr239 := z.EncBasicHandle().StructToArray
			var yyq239 [2]bool
			_, _, _ = yysep239, yyq239, yy2arr239
			const yyr239 bool = false
			yyq239[1] = x.ReadOnly != false
			if yyr239 || yy2arr239 {
				r.EncodeArrayStart(2)
			} else {
				var yynn239 int = 1
				for _, b := range yyq239 {
					if b {
						yynn239++
					}
				}
				r.EncodeMapStart(yynn239)
			}
			if yyr239 || yy2arr239 {
				yym241 := z.EncBinary()
				_ = yym241
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("claimName"))
				yym242 := z.EncBinary()
				_ = yym242
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			}
			if yyr239 || yy2arr239 {
				if yyq239[1] {
					yym244 := z.EncBinary()
					_ = yym244
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq239[1] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym245 := z.EncBinary()
					_ = yym245
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep239 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym246 := z.DecBinary()
	_ = yym246
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl247 := r.ReadMapStart()
			if yyl247 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl247, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl247 := r.ReadArrayStart()
			if yyl247 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl247, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys248Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys248Slc
	var yyhl248 bool = l >= 0
	for yyj248 := 0; ; yyj248++ {
		if yyhl248 {
			if yyj248 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys248Slc = r.DecodeBytes(yys248Slc, true, true)
		yys248 := string(yys248Slc)
		switch yys248 {
		case "claimName":
			if r.TryDecodeAsNil() {
				x.ClaimName = ""
			} else {
				x.ClaimName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys248)
		} // end switch yys248
	} // end for yyj248
	if !yyhl248 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj251 int
	var yyb251 bool
	var yyhl251 bool = l >= 0
	yyj251++
	if yyhl251 {
		yyb251 = yyj251 > l
	} else {
		yyb251 = r.CheckBreak()
	}
	if yyb251 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ClaimName = ""
	} else {
		x.ClaimName = string(r.DecodeString())
	}
	yyj251++
	if yyhl251 {
		yyb251 = yyj251 > l
	} else {
		yyb251 = r.CheckBreak()
	}
	if yyb251 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj251++
		if yyhl251 {
			yyb251 = yyj251 > l
		} else {
			yyb251 = r.CheckBreak()
		}
		if yyb251 {
			break
		}
		z.DecStructFieldNotFound(yyj251-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym254 := z.EncBinary()
		_ = yym254
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep255 := !z.EncBinary()
			yy2arr255 := z.EncBasicHandle().StructToArray
			var yyq255 [5]bool
			_, _, _ = yysep255, yyq255, yy2arr255
			const yyr255 bool = false
			yyq255[0] = x.Kind != ""
			yyq255[1] = x.APIVersion != ""
			yyq255[2] = true
			yyq255[3] = true
			yyq255[4] = true
			if yyr255 || yy2arr255 {
				r.EncodeArrayStart(5)
			} else {
				var yynn255 int = 0
				for _, b := range yyq255 {
					if b {
						yynn255++
					}
				}
				r.EncodeMapStart(yynn255)
			}
			if yyr255 || yy2arr255 {
				if yyq255[0] {
					yym257 := z.EncBinary()
					_ = yym257
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq255[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym258 := z.EncBinary()
					_ = yym258
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr255 || yy2arr255 {
				if yyq255[1] {
					yym260 := z.EncBinary()
					_ = yym260
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq255[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym261 := z.EncBinary()
					_ = yym261
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr255 || yy2arr255 {
				if yyq255[2] {
					yy263 := &x.ObjectMeta
					yy263.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq255[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy264 := &x.ObjectMeta
					yy264.CodecEncodeSelf(e)
				}
			}
			if yyr255 || yy2arr255 {
				if yyq255[3] {
					yy266 := &x.Spec
					yy266.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq255[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy267 := &x.Spec
					yy267.CodecEncodeSelf(e)
				}
			}
			if yyr255 || yy2arr255 {
				if yyq255[4] {
					yy269 := &x.Status
					yy269.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq255[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy270 := &x.Status
					yy270.CodecEncodeSelf(e)
				}
			}
			if yysep255 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym271 := z.DecBinary()
	_ = yym271
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl272 := r.ReadMapStart()
			if yyl272 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl272, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl272 := r.ReadArrayStart()
			if yyl272 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl272, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys273Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys273Slc
	var yyhl273 bool = l >= 0
	for yyj273 := 0; ; yyj273++ {
		if yyhl273 {
			if yyj273 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys273Slc = r.DecodeBytes(yys273Slc, true, true)
		yys273 := string(yys273Slc)
		switch yys273 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv276 := &x.ObjectMeta
				yyv276.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeSpec{}
			} else {
				yyv277 := &x.Spec
				yyv277.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeStatus{}
			} else {
				yyv278 := &x.Status
				yyv278.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys273)
		} // end switch yys273
	} // end for yyj273
	if !yyhl273 {
		r.ReadEnd()
	}
}

func (x *PersistentVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj279 int
	var yyb279 bool
	var yyhl279 bool = l >= 0
	yyj279++
	if yyhl279 {
		yyb279 = yyj279 > l
	} else {
		yyb279 = r.CheckBreak()
	}
	if yyb279 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj279++
	if yyhl279 {
		yyb279 = yyj279 > l
	} else {
		yyb279 = r.CheckBreak()
	}
	if yyb279 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj279++
	if yyhl279 {
		yyb279 = yyj279 > l
	} else {
		yyb279 = r.CheckBreak()
	}
	if yyb279 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv282 := &x.ObjectMeta
		yyv282.CodecDecodeSelf(d)
	}
	yyj279++
	if yyhl279 {
		yyb279 = yyj279 > l
	} else {
		yyb279 = r.CheckBreak()
	}
	if yyb279 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeSpec{}
	} else {
		yyv283 := &x.Spec
		yyv283.CodecDecodeSelf(d)
	}
	yyj279++
	if yyhl279 {
		yyb279 = yyj279 > l
	} else {
		yyb279 = r.CheckBreak()
	}
	if yyb279 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeStatus{}
	} else {
		yyv284 := &x.Status
		yyv284.CodecDecodeSelf(d)
	}
	for {
		yyj279++
		if yyhl279 {
			yyb279 = yyj279 > l
		} else {
			yyb279 = r.CheckBreak()
		}
		if yyb279 {
			break
		}
		z.DecStructFieldNotFound(yyj279-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym285 := z.EncBinary()
		_ = yym285
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep286 := !z.EncBinary()
			yy2arr286 := z.EncBasicHandle().StructToArray
			var yyq286 [15]bool
			_, _, _ = yysep286, yyq286, yy2arr286
			const yyr286 bool = false
			yyq286[1] = x.PersistentVolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq286[2] = x.PersistentVolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq286[3] = x.PersistentVolumeSource.HostPath != nil && x.HostPath != nil
			yyq286[4] = x.PersistentVolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq286[5] = x.PersistentVolumeSource.NFS != nil && x.NFS != nil
			yyq286[6] = x.PersistentVolumeSource.RBD != nil && x.RBD != nil
			yyq286[7] = x.PersistentVolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq286[8] = x.PersistentVolumeSource.Cinder != nil && x.Cinder != nil
			yyq286[9] = x.PersistentVolumeSource.CephFS != nil && x.CephFS != nil
			yyq286[10] = x.PersistentVolumeSource.FC != nil && x.FC != nil
			yyq286[11] = x.PersistentVolumeSource.Flocker != nil && x.Flocker != nil
			yyq286[12] = len(x.AccessModes) != 0
			yyq286[13] = x.ClaimRef != nil
			yyq286[14] = x.PersistentVolumeReclaimPolicy != ""
			if yyr286 || yy2arr286 {
				r.EncodeArrayStart(15)
			} else {
				var yynn286 int = 1
				for _, b := range yyq286 {
					if b {
						yynn286++
					}
				}
				r.EncodeMapStart(yynn286)
			}
			if yyr286 || yy2arr286 {
				if x.Capacity == nil {
					r.EncodeNil()
				} else {
					x.Capacity.CodecEncodeSelf(e)
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("capacity"))
				if x.Capacity == nil {
					r.EncodeNil()
				} else {
					x.Capacity.CodecEncodeSelf(e)
				}
			}
			var yyn288 bool
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				yyn288 = true
				goto LABEL288
			}
		LABEL288:
			if yyr286 || yy2arr286 {
				if yyn288 {
					r.EncodeNil()
				} else {
					if yyq286[1] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq286[1] {
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					if yyn288 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn289 bool
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				yyn289 = true
				goto LABEL289
			}
		LABEL289:
			if yyr286 || yy2arr286 {
				if yyn289 {
					r.EncodeNil()
				} else {
					if yyq286[2] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq286[2] {
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					if yyn289 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn290 bool
			if x.PersistentVolumeSource.HostPath == nil {
				yyn290 = true
				goto LABEL290
			}
		LABEL290:
			if yyr286 || yy2arr286 {
				if yyn290 {
					r.EncodeNil()
				} else {
					if yyq286[3] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq286[3] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					if yyn290 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn291 bool
			if x.PersistentVolumeSource.Glusterfs == nil {
				yyn291 = true
				goto LABEL291
			}
		LABEL291:
			if yyr286 || yy2arr286 {
				if yyn291 {
					r.EncodeNil()
				} else {
					if yyq286[4] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq286[4] {
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					if yyn291 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn292 bool
			if x.PersistentVolumeSource.NFS == nil {
				yyn292 = true
				goto LABEL292
			}
		LABEL292:
			if yyr286 || yy2arr286 {
				if yyn292 {
					r.EncodeNil()
				} else {
					if yyq286[5] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq286[5] {
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					if yyn292 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn293 bool
			if x.PersistentVolumeSource.RBD == nil {
				yyn293 = true
				goto LABEL293
			}
		LABEL293:
			if yyr286 || yy2arr286 {
				if yyn293 {
					r.EncodeNil()
				} else {
					if yyq286[6] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq286[6] {
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					if yyn293 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn294 bool
			if x.PersistentVolumeSource.ISCSI == nil {
				yyn294 = true
				goto LABEL294
			}
		LABEL294:
			if yyr286 || yy2arr286 {
				if yyn294 {
					r.EncodeNil()
				} else {
					if yyq286[7] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq286[7] {
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					if yyn294 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn295 bool
			if x.PersistentVolumeSource.Cinder == nil {
				yyn295 = true
				goto LABEL295
			}
		LABEL295:
			if yyr286 || yy2arr286 {
				if yyn295 {
					r.EncodeNil()
				} else {
					if yyq286[8] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq286[8] {
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					if yyn295 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn296 bool
			if x.PersistentVolumeSource.CephFS == nil {
				yyn296 = true
				goto LABEL296
			}
		LABEL296:
			if yyr286 || yy2arr286 {
				if yyn296 {
					r.EncodeNil()
				} else {
					if yyq286[9] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq286[9] {
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					if yyn296 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn297 bool
			if x.PersistentVolumeSource.FC == nil {
				yyn297 = true
				goto LABEL297
			}
		LABEL297:
			if yyr286 || yy2arr286 {
				if yyn297 {
					r.EncodeNil()
				} else {
					if yyq286[10] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq286[10] {
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					if yyn297 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn298 bool
			if x.PersistentVolumeSource.Flocker == nil {
				yyn298 = true
				goto LABEL298
			}
		LABEL298:
			if yyr286 || yy2arr286 {
				if yyn298 {
					r.EncodeNil()
				} else {
					if yyq286[11] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq286[11] {
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					if yyn298 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr286 || yy2arr286 {
				if yyq286[12] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym300 := z.EncBinary()
						_ = yym300
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq286[12] {
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym301 := z.EncBinary()
						_ = yym301
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr286 || yy2arr286 {
				if yyq286[13] {
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq286[13] {
					r.EncodeString(codecSelferC_UTF81234, string("claimRef"))
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr286 || yy2arr286 {
				if yyq286[14] {
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq286[14] {
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeReclaimPolicy"))
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				}
			}
			if yysep286 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym304 := z.DecBinary()
	_ = yym304
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl305 := r.ReadMapStart()
			if yyl305 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl305, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl305 := r.ReadArrayStart()
			if yyl305 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl305, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys306Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys306Slc
	var yyhl306 bool = l >= 0
	for yyj306 := 0; ; yyj306++ {
		if yyhl306 {
			if yyj306 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys306Slc = r.DecodeBytes(yys306Slc, true, true)
		yys306 := string(yys306Slc)
		switch yys306 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv307 := &x.Capacity
				yyv307.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if x.PersistentVolumeSource.HostPath == nil {
				x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.PersistentVolumeSource.Glusterfs == nil {
				x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.PersistentVolumeSource.NFS == nil {
				x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.PersistentVolumeSource.RBD == nil {
				x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.PersistentVolumeSource.ISCSI == nil {
				x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.PersistentVolumeSource.Cinder == nil {
				x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.PersistentVolumeSource.CephFS == nil {
				x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if x.PersistentVolumeSource.FC == nil {
				x.PersistentVolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.PersistentVolumeSource.Flocker == nil {
				x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv319 := &x.AccessModes
				yym320 := z.DecBinary()
				_ = yym320
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv319), d)
				}
			}
		case "claimRef":
			if r.TryDecodeAsNil() {
				if x.ClaimRef != nil {
					x.ClaimRef = nil
				}
			} else {
				if x.ClaimRef == nil {
					x.ClaimRef = new(ObjectReference)
				}
				x.ClaimRef.CodecDecodeSelf(d)
			}
		case "persistentVolumeReclaimPolicy":
			if r.TryDecodeAsNil() {
				x.PersistentVolumeReclaimPolicy = ""
			} else {
				x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys306)
		} // end switch yys306
	} // end for yyj306
	if !yyhl306 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj323 int
	var yyb323 bool
	var yyhl323 bool = l >= 0
	yyj323++
	if yyhl323 {
		yyb323 = yyj323 > l
	} else {
		yyb323 = r.CheckBreak()
	}
	if yyb323 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv324 := &x.Capacity
		yyv324.CodecDecodeSelf(d)
	}
	yyj323++
	if yyhl323 {
		yyb323 = yyj323 > l
	} else {
		yyb323 = r.CheckBreak()
	}
	if yyb323 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj323++
	if yyhl323 {
		yyb323 = yyj323 > l
	} else {
		yyb323 = r.CheckBreak()
	}
	if yyb323 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj323++
	if yyhl323 {
		yyb323 = yyj323 > l
	} else {
		yyb323 = r.CheckBreak()
	}
	if yyb323 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj323++
	if yyhl323 {
		yyb323 = yyj323 > l
	} else {
		yyb323 = r.CheckBreak()
	}
	if yyb323 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj323++
	if yyhl323 {
		yyb323 = yyj323 > l
	} else {
		yyb323 = r.CheckBreak()
	}
	if yyb323 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj323++
	if yyhl323 {
		yyb323 = yyj323 > l
	} else {
		yyb323 = r.CheckBreak()
	}
	if yyb323 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj323++
	if yyhl323 {
		yyb323 = yyj323 > l
	} else {
		yyb323 = r.CheckBreak()
	}
	if yyb323 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj323++
	if yyhl323 {
		yyb323 = yyj323 > l
	} else {
		yyb323 = r.CheckBreak()
	}
	if yyb323 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj323++
	if yyhl323 {
		yyb323 = yyj323 > l
	} else {
		yyb323 = r.CheckBreak()
	}
	if yyb323 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj323++
	if yyhl323 {
		yyb323 = yyj323 > l
	} else {
		yyb323 = r.CheckBreak()
	}
	if yyb323 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj323++
	if yyhl323 {
		yyb323 = yyj323 > l
	} else {
		yyb323 = r.CheckBreak()
	}
	if yyb323 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj323++
	if yyhl323 {
		yyb323 = yyj323 > l
	} else {
		yyb323 = r.CheckBreak()
	}
	if yyb323 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv336 := &x.AccessModes
		yym337 := z.DecBinary()
		_ = yym337
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv336), d)
		}
	}
	yyj323++
	if yyhl323 {
		yyb323 = yyj323 > l
	} else {
		yyb323 = r.CheckBreak()
	}
	if yyb323 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ClaimRef != nil {
			x.ClaimRef = nil
		}
	} else {
		if x.ClaimRef == nil {
			x.ClaimRef = new(ObjectReference)
		}
		x.ClaimRef.CodecDecodeSelf(d)
	}
	yyj323++
	if yyhl323 {
		yyb323 = yyj323 > l
	} else {
		yyb323 = r.CheckBreak()
	}
	if yyb323 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.PersistentVolumeReclaimPolicy = ""
	} else {
		x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
	}
	for {
		yyj323++
		if yyhl323 {
			yyb323 = yyj323 > l
		} else {
			yyb323 = r.CheckBreak()
		}
		if yyb323 {
			break
		}
		z.DecStructFieldNotFound(yyj323-1, "")
	}
	r.ReadEnd()
}

func (x PersistentVolumeReclaimPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym340 := z.EncBinary()
	_ = yym340
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeReclaimPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym341 := z.DecBinary()
	_ = yym341
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PersistentVolumeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym342 := z.EncBinary()
		_ = yym342
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep343 := !z.EncBinary()
			yy2arr343 := z.EncBasicHandle().StructToArray
			var yyq343 [3]bool
			_, _, _ = yysep343, yyq343, yy2arr343
			const yyr343 bool = false
			yyq343[0] = x.Phase != ""
			yyq343[1] = x.Message != ""
			yyq343[2] = x.Reason != ""
			if yyr343 || yy2arr343 {
				r.EncodeArrayStart(3)
			} else {
				var yynn343 int = 0
				for _, b := range yyq343 {
					if b {
						yynn343++
					}
				}
				r.EncodeMapStart(yynn343)
			}
			if yyr343 || yy2arr343 {
				if yyq343[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq343[0] {
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr343 || yy2arr343 {
				if yyq343[1] {
					yym346 := z.EncBinary()
					_ = yym346
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq343[1] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym347 := z.EncBinary()
					_ = yym347
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr343 || yy2arr343 {
				if yyq343[2] {
					yym349 := z.EncBinary()
					_ = yym349
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq343[2] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym350 := z.EncBinary()
					_ = yym350
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yysep343 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym351 := z.DecBinary()
	_ = yym351
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl352 := r.ReadMapStart()
			if yyl352 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl352, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl352 := r.ReadArrayStart()
			if yyl352 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl352, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys353Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys353Slc
	var yyhl353 bool = l >= 0
	for yyj353 := 0; ; yyj353++ {
		if yyhl353 {
			if yyj353 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys353Slc = r.DecodeBytes(yys353Slc, true, true)
		yys353 := string(yys353Slc)
		switch yys353 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumePhase(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys353)
		} // end switch yys353
	} // end for yyj353
	if !yyhl353 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj357 int
	var yyb357 bool
	var yyhl357 bool = l >= 0
	yyj357++
	if yyhl357 {
		yyb357 = yyj357 > l
	} else {
		yyb357 = r.CheckBreak()
	}
	if yyb357 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumePhase(r.DecodeString())
	}
	yyj357++
	if yyhl357 {
		yyb357 = yyj357 > l
	} else {
		yyb357 = r.CheckBreak()
	}
	if yyb357 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj357++
	if yyhl357 {
		yyb357 = yyj357 > l
	} else {
		yyb357 = r.CheckBreak()
	}
	if yyb357 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	for {
		yyj357++
		if yyhl357 {
			yyb357 = yyj357 > l
		} else {
			yyb357 = r.CheckBreak()
		}
		if yyb357 {
			break
		}
		z.DecStructFieldNotFound(yyj357-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym361 := z.EncBinary()
		_ = yym361
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep362 := !z.EncBinary()
			yy2arr362 := z.EncBasicHandle().StructToArray
			var yyq362 [4]bool
			_, _, _ = yysep362, yyq362, yy2arr362
			const yyr362 bool = false
			yyq362[0] = x.Kind != ""
			yyq362[1] = x.APIVersion != ""
			yyq362[2] = true
			if yyr362 || yy2arr362 {
				r.EncodeArrayStart(4)
			} else {
				var yynn362 int = 1
				for _, b := range yyq362 {
					if b {
						yynn362++
					}
				}
				r.EncodeMapStart(yynn362)
			}
			if yyr362 || yy2arr362 {
				if yyq362[0] {
					yym364 := z.EncBinary()
					_ = yym364
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq362[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym365 := z.EncBinary()
					_ = yym365
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr362 || yy2arr362 {
				if yyq362[1] {
					yym367 := z.EncBinary()
					_ = yym367
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq362[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym368 := z.EncBinary()
					_ = yym368
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr362 || yy2arr362 {
				if yyq362[2] {
					yy370 := &x.ListMeta
					yym371 := z.EncBinary()
					_ = yym371
					if false {
					} else if z.HasExtensions() && z.EncExt(yy370) {
					} else {
						z.EncFallback(yy370)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq362[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy372 := &x.ListMeta
					yym373 := z.EncBinary()
					_ = yym373
					if false {
					} else if z.HasExtensions() && z.EncExt(yy372) {
					} else {
						z.EncFallback(yy372)
					}
				}
			}
			if yyr362 || yy2arr362 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym375 := z.EncBinary()
					_ = yym375
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym376 := z.EncBinary()
					_ = yym376
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			}
			if yysep362 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym377 := z.DecBinary()
	_ = yym377
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl378 := r.ReadMapStart()
			if yyl378 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl378, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl378 := r.ReadArrayStart()
			if yyl378 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl378, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys379Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys379Slc
	var yyhl379 bool = l >= 0
	for yyj379 := 0; ; yyj379++ {
		if yyhl379 {
			if yyj379 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys379Slc = r.DecodeBytes(yys379Slc, true, true)
		yys379 := string(yys379Slc)
		switch yys379 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv382 := &x.ListMeta
				yym383 := z.DecBinary()
				_ = yym383
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv382) {
				} else {
					z.DecFallback(yyv382, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv384 := &x.Items
				yym385 := z.DecBinary()
				_ = yym385
				if false {
				} else {
					h.decSlicePersistentVolume((*[]PersistentVolume)(yyv384), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys379)
		} // end switch yys379
	} // end for yyj379
	if !yyhl379 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj386 int
	var yyb386 bool
	var yyhl386 bool = l >= 0
	yyj386++
	if yyhl386 {
		yyb386 = yyj386 > l
	} else {
		yyb386 = r.CheckBreak()
	}
	if yyb386 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj386++
	if yyhl386 {
		yyb386 = yyj386 > l
	} else {
		yyb386 = r.CheckBreak()
	}
	if yyb386 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj386++
	if yyhl386 {
		yyb386 = yyj386 > l
	} else {
		yyb386 = r.CheckBreak()
	}
	if yyb386 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv389 := &x.ListMeta
		yym390 := z.DecBinary()
		_ = yym390
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv389) {
		} else {
			z.DecFallback(yyv389, false)
		}
	}
	yyj386++
	if yyhl386 {
		yyb386 = yyj386 > l
	} else {
		yyb386 = r.CheckBreak()
	}
	if yyb386 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv391 := &x.Items
		yym392 := z.DecBinary()
		_ = yym392
		if false {
		} else {
			h.decSlicePersistentVolume((*[]PersistentVolume)(yyv391), d)
		}
	}
	for {
		yyj386++
		if yyhl386 {
			yyb386 = yyj386 > l
		} else {
			yyb386 = r.CheckBreak()
		}
		if yyb386 {
			break
		}
		z.DecStructFieldNotFound(yyj386-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeClaim) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym393 := z.EncBinary()
		_ = yym393
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep394 := !z.EncBinary()
			yy2arr394 := z.EncBasicHandle().StructToArray
			var yyq394 [5]bool
			_, _, _ = yysep394, yyq394, yy2arr394
			const yyr394 bool = false
			yyq394[0] = x.Kind != ""
			yyq394[1] = x.APIVersion != ""
			yyq394[2] = true
			yyq394[3] = true
			yyq394[4] = true
			if yyr394 || yy2arr394 {
				r.EncodeArrayStart(5)
			} else {
				var yynn394 int = 0
				for _, b := range yyq394 {
					if b {
						yynn394++
					}
				}
				r.EncodeMapStart(yynn394)
			}
			if yyr394 || yy2arr394 {
				if yyq394[0] {
					yym396 := z.EncBinary()
					_ = yym396
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq394[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym397 := z.EncBinary()
					_ = yym397
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr394 || yy2arr394 {
				if yyq394[1] {
					yym399 := z.EncBinary()
					_ = yym399
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq394[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym400 := z.EncBinary()
					_ = yym400
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr394 || yy2arr394 {
				if yyq394[2] {
					yy402 := &x.ObjectMeta
					yy402.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq394[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy403 := &x.ObjectMeta
					yy403.CodecEncodeSelf(e)
				}
			}
			if yyr394 || yy2arr394 {
				if yyq394[3] {
					yy405 := &x.Spec
					yy405.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq394[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy406 := &x.Spec
					yy406.CodecEncodeSelf(e)
				}
			}
			if yyr394 || yy2arr394 {
				if yyq394[4] {
					yy408 := &x.Status
					yy408.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq394[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy409 := &x.Status
					yy409.CodecEncodeSelf(e)
				}
			}
			if yysep394 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeClaim) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym410 := z.DecBinary()
	_ = yym410
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl411 := r.ReadMapStart()
			if yyl411 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl411, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl411 := r.ReadArrayStart()
			if yyl411 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl411, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys412Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys412Slc
	var yyhl412 bool = l >= 0
	for yyj412 := 0; ; yyj412++ {
		if yyhl412 {
			if yyj412 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys412Slc = r.DecodeBytes(yys412Slc, true, true)
		yys412 := string(yys412Slc)
		switch yys412 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv415 := &x.ObjectMeta
				yyv415.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeClaimSpec{}
			} else {
				yyv416 := &x.Spec
				yyv416.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeClaimStatus{}
			} else {
				yyv417 := &x.Status
				yyv417.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys412)
		} // end switch yys412
	} // end for yyj412
	if !yyhl412 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj418 int
	var yyb418 bool
	var yyhl418 bool = l >= 0
	yyj418++
	if yyhl418 {
		yyb418 = yyj418 > l
	} else {
		yyb418 = r.CheckBreak()
	}
	if yyb418 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj418++
	if yyhl418 {
		yyb418 = yyj418 > l
	} else {
		yyb418 = r.CheckBreak()
	}
	if yyb418 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj418++
	if yyhl418 {
		yyb418 = yyj418 > l
	} else {
		yyb418 = r.CheckBreak()
	}
	if yyb418 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv421 := &x.ObjectMeta
		yyv421.CodecDecodeSelf(d)
	}
	yyj418++
	if yyhl418 {
		yyb418 = yyj418 > l
	} else {
		yyb418 = r.CheckBreak()
	}
	if yyb418 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeClaimSpec{}
	} else {
		yyv422 := &x.Spec
		yyv422.CodecDecodeSelf(d)
	}
	yyj418++
	if yyhl418 {
		yyb418 = yyj418 > l
	} else {
		yyb418 = r.CheckBreak()
	}
	if yyb418 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeClaimStatus{}
	} else {
		yyv423 := &x.Status
		yyv423.CodecDecodeSelf(d)
	}
	for {
		yyj418++
		if yyhl418 {
			yyb418 = yyj418 > l
		} else {
			yyb418 = r.CheckBreak()
		}
		if yyb418 {
			break
		}
		z.DecStructFieldNotFound(yyj418-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeClaimList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym424 := z.EncBinary()
		_ = yym424
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep425 := !z.EncBinary()
			yy2arr425 := z.EncBasicHandle().StructToArray
			var yyq425 [4]bool
			_, _, _ = yysep425, yyq425, yy2arr425
			const yyr425 bool = false
			yyq425[0] = x.Kind != ""
			yyq425[1] = x.APIVersion != ""
			yyq425[2] = true
			if yyr425 || yy2arr425 {
				r.EncodeArrayStart(4)
			} else {
				var yynn425 int = 1
				for _, b := range yyq425 {
					if b {
						yynn425++
					}
				}
				r.EncodeMapStart(yynn425)
			}
			if yyr425 || yy2arr425 {
				if yyq425[0] {
					yym427 := z.EncBinary()
					_ = yym427
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq425[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym428 := z.EncBinary()
					_ = yym428
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr425 || yy2arr425 {
				if yyq425[1] {
					yym430 := z.EncBinary()
					_ = yym430
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq425[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym431 := z.EncBinary()
					_ = yym431
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr425 || yy2arr425 {
				if yyq425[2] {
					yy433 := &x.ListMeta
					yym434 := z.EncBinary()
					_ = yym434
					if false {
					} else if z.HasExtensions() && z.EncExt(yy433) {
					} else {
						z.EncFallback(yy433)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq425[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy435 := &x.ListMeta
					yym436 := z.EncBinary()
					_ = yym436
					if false {
					} else if z.HasExtensions() && z.EncExt(yy435) {
					} else {
						z.EncFallback(yy435)
					}
				}
			}
			if yyr425 || yy2arr425 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym438 := z.EncBinary()
					_ = yym438
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym439 := z.EncBinary()
					_ = yym439
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			}
			if yysep425 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeClaimList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym440 := z.DecBinary()
	_ = yym440
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl441 := r.ReadMapStart()
			if yyl441 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl441, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl441 := r.ReadArrayStart()
			if yyl441 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl441, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys442Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys442Slc
	var yyhl442 bool = l >= 0
	for yyj442 := 0; ; yyj442++ {
		if yyhl442 {
			if yyj442 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys442Slc = r.DecodeBytes(yys442Slc, true, true)
		yys442 := string(yys442Slc)
		switch yys442 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv445 := &x.ListMeta
				yym446 := z.DecBinary()
				_ = yym446
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv445) {
				} else {
					z.DecFallback(yyv445, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv447 := &x.Items
				yym448 := z.DecBinary()
				_ = yym448
				if false {
				} else {
					h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv447), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys442)
		} // end switch yys442
	} // end for yyj442
	if !yyhl442 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj449 int
	var yyb449 bool
	var yyhl449 bool = l >= 0
	yyj449++
	if yyhl449 {
		yyb449 = yyj449 > l
	} else {
		yyb449 = r.CheckBreak()
	}
	if yyb449 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj449++
	if yyhl449 {
		yyb449 = yyj449 > l
	} else {
		yyb449 = r.CheckBreak()
	}
	if yyb449 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj449++
	if yyhl449 {
		yyb449 = yyj449 > l
	} else {
		yyb449 = r.CheckBreak()
	}
	if yyb449 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv452 := &x.ListMeta
		yym453 := z.DecBinary()
		_ = yym453
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv452) {
		} else {
			z.DecFallback(yyv452, false)
		}
	}
	yyj449++
	if yyhl449 {
		yyb449 = yyj449 > l
	} else {
		yyb449 = r.CheckBreak()
	}
	if yyb449 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv454 := &x.Items
		yym455 := z.DecBinary()
		_ = yym455
		if false {
		} else {
			h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv454), d)
		}
	}
	for {
		yyj449++
		if yyhl449 {
			yyb449 = yyj449 > l
		} else {
			yyb449 = r.CheckBreak()
		}
		if yyb449 {
			break
		}
		z.DecStructFieldNotFound(yyj449-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeClaimSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym456 := z.EncBinary()
		_ = yym456
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep457 := !z.EncBinary()
			yy2arr457 := z.EncBasicHandle().StructToArray
			var yyq457 [3]bool
			_, _, _ = yysep457, yyq457, yy2arr457
			const yyr457 bool = false
			yyq457[0] = len(x.AccessModes) != 0
			yyq457[1] = true
			yyq457[2] = x.VolumeName != ""
			if yyr457 || yy2arr457 {
				r.EncodeArrayStart(3)
			} else {
				var yynn457 int = 0
				for _, b := range yyq457 {
					if b {
						yynn457++
					}
				}
				r.EncodeMapStart(yynn457)
			}
			if yyr457 || yy2arr457 {
				if yyq457[0] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym459 := z.EncBinary()
						_ = yym459
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq457[0] {
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym460 := z.EncBinary()
						_ = yym460
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr457 || yy2arr457 {
				if yyq457[1] {
					yy462 := &x.Resources
					yy462.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq457[1] {
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					yy463 := &x.Resources
					yy463.CodecEncodeSelf(e)
				}
			}
			if yyr457 || yy2arr457 {
				if yyq457[2] {
					yym465 := z.EncBinary()
					_ = yym465
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq457[2] {
					r.EncodeString(codecSelferC_UTF81234, string("volumeName"))
					yym466 := z.EncBinary()
					_ = yym466
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				}
			}
			if yysep457 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeClaimSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym467 := z.DecBinary()
	_ = yym467
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl468 := r.ReadMapStart()
			if yyl468 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl468, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl468 := r.ReadArrayStart()
			if yyl468 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl468, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys469Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys469Slc
	var yyhl469 bool = l >= 0
	for yyj469 := 0; ; yyj469++ {
		if yyhl469 {
			if yyj469 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys469Slc = r.DecodeBytes(yys469Slc, true, true)
		yys469 := string(yys469Slc)
		switch yys469 {
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv470 := &x.AccessModes
				yym471 := z.DecBinary()
				_ = yym471
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv470), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv472 := &x.Resources
				yyv472.CodecDecodeSelf(d)
			}
		case "volumeName":
			if r.TryDecodeAsNil() {
				x.VolumeName = ""
			} else {
				x.VolumeName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys469)
		} // end switch yys469
	} // end for yyj469
	if !yyhl469 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj474 int
	var yyb474 bool
	var yyhl474 bool = l >= 0
	yyj474++
	if yyhl474 {
		yyb474 = yyj474 > l
	} else {
		yyb474 = r.CheckBreak()
	}
	if yyb474 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv475 := &x.AccessModes
		yym476 := z.DecBinary()
		_ = yym476
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv475), d)
		}
	}
	yyj474++
	if yyhl474 {
		yyb474 = yyj474 > l
	} else {
		yyb474 = r.CheckBreak()
	}
	if yyb474 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv477 := &x.Resources
		yyv477.CodecDecodeSelf(d)
	}
	yyj474++
	if yyhl474 {
		yyb474 = yyj474 > l
	} else {
		yyb474 = r.CheckBreak()
	}
	if yyb474 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.VolumeName = ""
	} else {
		x.VolumeName = string(r.DecodeString())
	}
	for {
		yyj474++
		if yyhl474 {
			yyb474 = yyj474 > l
		} else {
			yyb474 = r.CheckBreak()
		}
		if yyb474 {
			break
		}
		z.DecStructFieldNotFound(yyj474-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeClaimStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym479 := z.EncBinary()
		_ = yym479
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep480 := !z.EncBinary()
			yy2arr480 := z.EncBasicHandle().StructToArray
			var yyq480 [3]bool
			_, _, _ = yysep480, yyq480, yy2arr480
			const yyr480 bool = false
			yyq480[0] = x.Phase != ""
			yyq480[1] = len(x.AccessModes) != 0
			yyq480[2] = len(x.Capacity) != 0
			if yyr480 || yy2arr480 {
				r.EncodeArrayStart(3)
			} else {
				var yynn480 int = 0
				for _, b := range yyq480 {
					if b {
						yynn480++
					}
				}
				r.EncodeMapStart(yynn480)
			}
			if yyr480 || yy2arr480 {
				if yyq480[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq480[0] {
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr480 || yy2arr480 {
				if yyq480[1] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym483 := z.EncBinary()
						_ = yym483
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq480[1] {
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym484 := z.EncBinary()
						_ = yym484
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr480 || yy2arr480 {
				if yyq480[2] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq480[2] {
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yysep480 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeClaimStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym486 := z.DecBinary()
	_ = yym486
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl487 := r.ReadMapStart()
			if yyl487 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl487, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl487 := r.ReadArrayStart()
			if yyl487 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl487, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys488Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys488Slc
	var yyhl488 bool = l >= 0
	for yyj488 := 0; ; yyj488++ {
		if yyhl488 {
			if yyj488 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys488Slc = r.DecodeBytes(yys488Slc, true, true)
		yys488 := string(yys488Slc)
		switch yys488 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv490 := &x.AccessModes
				yym491 := z.DecBinary()
				_ = yym491
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv490), d)
				}
			}
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv492 := &x.Capacity
				yyv492.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys488)
		} // end switch yys488
	} // end for yyj488
	if !yyhl488 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj493 int
	var yyb493 bool
	var yyhl493 bool = l >= 0
	yyj493++
	if yyhl493 {
		yyb493 = yyj493 > l
	} else {
		yyb493 = r.CheckBreak()
	}
	if yyb493 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
	}
	yyj493++
	if yyhl493 {
		yyb493 = yyj493 > l
	} else {
		yyb493 = r.CheckBreak()
	}
	if yyb493 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv495 := &x.AccessModes
		yym496 := z.DecBinary()
		_ = yym496
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv495), d)
		}
	}
	yyj493++
	if yyhl493 {
		yyb493 = yyj493 > l
	} else {
		yyb493 = r.CheckBreak()
	}
	if yyb493 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv497 := &x.Capacity
		yyv497.CodecDecodeSelf(d)
	}
	for {
		yyj493++
		if yyhl493 {
			yyb493 = yyj493 > l
		} else {
			yyb493 = r.CheckBreak()
		}
		if yyb493 {
			break
		}
		z.DecStructFieldNotFound(yyj493-1, "")
	}
	r.ReadEnd()
}

func (x PersistentVolumeAccessMode) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym498 := z.EncBinary()
	_ = yym498
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeAccessMode) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym499 := z.DecBinary()
	_ = yym499
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym500 := z.EncBinary()
	_ = yym500
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym501 := z.DecBinary()
	_ = yym501
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumeClaimPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym502 := z.EncBinary()
	_ = yym502
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeClaimPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym503 := z.DecBinary()
	_ = yym503
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *HostPathVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym504 := z.EncBinary()
		_ = yym504
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep505 := !z.EncBinary()
			yy2arr505 := z.EncBasicHandle().StructToArray
			var yyq505 [1]bool
			_, _, _ = yysep505, yyq505, yy2arr505
			const yyr505 bool = false
			if yyr505 || yy2arr505 {
				r.EncodeArrayStart(1)
			} else {
				var yynn505 int = 1
				for _, b := range yyq505 {
					if b {
						yynn505++
					}
				}
				r.EncodeMapStart(yynn505)
			}
			if yyr505 || yy2arr505 {
				yym507 := z.EncBinary()
				_ = yym507
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				yym508 := z.EncBinary()
				_ = yym508
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yysep505 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *HostPathVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym509 := z.DecBinary()
	_ = yym509
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl510 := r.ReadMapStart()
			if yyl510 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl510, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl510 := r.ReadArrayStart()
			if yyl510 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl510, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HostPathVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys511Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys511Slc
	var yyhl511 bool = l >= 0
	for yyj511 := 0; ; yyj511++ {
		if yyhl511 {
			if yyj511 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys511Slc = r.DecodeBytes(yys511Slc, true, true)
		yys511 := string(yys511Slc)
		switch yys511 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys511)
		} // end switch yys511
	} // end for yyj511
	if !yyhl511 {
		r.ReadEnd()
	}
}

func (x *HostPathVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj513 int
	var yyb513 bool
	var yyhl513 bool = l >= 0
	yyj513++
	if yyhl513 {
		yyb513 = yyj513 > l
	} else {
		yyb513 = r.CheckBreak()
	}
	if yyb513 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj513++
		if yyhl513 {
			yyb513 = yyj513 > l
		} else {
			yyb513 = r.CheckBreak()
		}
		if yyb513 {
			break
		}
		z.DecStructFieldNotFound(yyj513-1, "")
	}
	r.ReadEnd()
}

func (x *EmptyDirVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym515 := z.EncBinary()
		_ = yym515
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep516 := !z.EncBinary()
			yy2arr516 := z.EncBasicHandle().StructToArray
			var yyq516 [1]bool
			_, _, _ = yysep516, yyq516, yy2arr516
			const yyr516 bool = false
			if yyr516 || yy2arr516 {
				r.EncodeArrayStart(1)
			} else {
				var yynn516 int = 1
				for _, b := range yyq516 {
					if b {
						yynn516++
					}
				}
				r.EncodeMapStart(yynn516)
			}
			if yyr516 || yy2arr516 {
				x.Medium.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("medium"))
				x.Medium.CodecEncodeSelf(e)
			}
			if yysep516 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EmptyDirVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym518 := z.DecBinary()
	_ = yym518
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl519 := r.ReadMapStart()
			if yyl519 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl519, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl519 := r.ReadArrayStart()
			if yyl519 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl519, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys520Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys520Slc
	var yyhl520 bool = l >= 0
	for yyj520 := 0; ; yyj520++ {
		if yyhl520 {
			if yyj520 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys520Slc = r.DecodeBytes(yys520Slc, true, true)
		yys520 := string(yys520Slc)
		switch yys520 {
		case "medium":
			if r.TryDecodeAsNil() {
				x.Medium = ""
			} else {
				x.Medium = StorageMedium(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys520)
		} // end switch yys520
	} // end for yyj520
	if !yyhl520 {
		r.ReadEnd()
	}
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj522 int
	var yyb522 bool
	var yyhl522 bool = l >= 0
	yyj522++
	if yyhl522 {
		yyb522 = yyj522 > l
	} else {
		yyb522 = r.CheckBreak()
	}
	if yyb522 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Medium = ""
	} else {
		x.Medium = StorageMedium(r.DecodeString())
	}
	for {
		yyj522++
		if yyhl522 {
			yyb522 = yyj522 > l
		} else {
			yyb522 = r.CheckBreak()
		}
		if yyb522 {
			break
		}
		z.DecStructFieldNotFound(yyj522-1, "")
	}
	r.ReadEnd()
}

func (x StorageMedium) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym524 := z.EncBinary()
	_ = yym524
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *StorageMedium) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym525 := z.DecBinary()
	_ = yym525
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Protocol) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym526 := z.EncBinary()
	_ = yym526
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Protocol) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym527 := z.DecBinary()
	_ = yym527
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym528 := z.EncBinary()
		_ = yym528
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep529 := !z.EncBinary()
			yy2arr529 := z.EncBasicHandle().StructToArray
			var yyq529 [4]bool
			_, _, _ = yysep529, yyq529, yy2arr529
			const yyr529 bool = false
			yyq529[1] = x.FSType != ""
			yyq529[2] = x.Partition != 0
			yyq529[3] = x.ReadOnly != false
			if yyr529 || yy2arr529 {
				r.EncodeArrayStart(4)
			} else {
				var yynn529 int = 1
				for _, b := range yyq529 {
					if b {
						yynn529++
					}
				}
				r.EncodeMapStart(yynn529)
			}
			if yyr529 || yy2arr529 {
				yym531 := z.EncBinary()
				_ = yym531
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("pdName"))
				yym532 := z.EncBinary()
				_ = yym532
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			}
			if yyr529 || yy2arr529 {
				if yyq529[1] {
					yym534 := z.EncBinary()
					_ = yym534
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq529[1] {
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					yym535 := z.EncBinary()
					_ = yym535
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr529 || yy2arr529 {
				if yyq529[2] {
					yym537 := z.EncBinary()
					_ = yym537
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq529[2] {
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					yym538 := z.EncBinary()
					_ = yym538
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr529 || yy2arr529 {
				if yyq529[3] {
					yym540 := z.EncBinary()
					_ = yym540
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq529[3] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym541 := z.EncBinary()
					_ = yym541
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep529 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym542 := z.DecBinary()
	_ = yym542
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl543 := r.ReadMapStart()
			if yyl543 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl543, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl543 := r.ReadArrayStart()
			if yyl543 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl543, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys544Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys544Slc
	var yyhl544 bool = l >= 0
	for yyj544 := 0; ; yyj544++ {
		if yyhl544 {
			if yyj544 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys544Slc = r.DecodeBytes(yys544Slc, true, true)
		yys544 := string(yys544Slc)
		switch yys544 {
		case "pdName":
			if r.TryDecodeAsNil() {
				x.PDName = ""
			} else {
				x.PDName = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys544)
		} // end switch yys544
	} // end for yyj544
	if !yyhl544 {
		r.ReadEnd()
	}
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj549 int
	var yyb549 bool
	var yyhl549 bool = l >= 0
	yyj549++
	if yyhl549 {
		yyb549 = yyj549 > l
	} else {
		yyb549 = r.CheckBreak()
	}
	if yyb549 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.PDName = ""
	} else {
		x.PDName = string(r.DecodeString())
	}
	yyj549++
	if yyhl549 {
		yyb549 = yyj549 > l
	} else {
		yyb549 = r.CheckBreak()
	}
	if yyb549 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj549++
	if yyhl549 {
		yyb549 = yyj549 > l
	} else {
		yyb549 = r.CheckBreak()
	}
	if yyb549 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj549++
	if yyhl549 {
		yyb549 = yyj549 > l
	} else {
		yyb549 = r.CheckBreak()
	}
	if yyb549 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj549++
		if yyhl549 {
			yyb549 = yyj549 > l
		} else {
			yyb549 = r.CheckBreak()
		}
		if yyb549 {
			break
		}
		z.DecStructFieldNotFound(yyj549-1, "")
	}
	r.ReadEnd()
}

func (x *ISCSIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym554 := z.EncBinary()
		_ = yym554
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep555 := !z.EncBinary()
			yy2arr555 := z.EncBasicHandle().StructToArray
			var yyq555 [5]bool
			_, _, _ = yysep555, yyq555, yy2arr555
			const yyr555 bool = false
			yyq555[0] = x.TargetPortal != ""
			yyq555[1] = x.IQN != ""
			yyq555[2] = x.Lun != 0
			yyq555[3] = x.FSType != ""
			yyq555[4] = x.ReadOnly != false
			if yyr555 || yy2arr555 {
				r.EncodeArrayStart(5)
			} else {
				var yynn555 int = 0
				for _, b := range yyq555 {
					if b {
						yynn555++
					}
				}
				r.EncodeMapStart(yynn555)
			}
			if yyr555 || yy2arr555 {
				if yyq555[0] {
					yym557 := z.EncBinary()
					_ = yym557
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq555[0] {
					r.EncodeString(codecSelferC_UTF81234, string("targetPortal"))
					yym558 := z.EncBinary()
					_ = yym558
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
					}
				}
			}
			if yyr555 || yy2arr555 {
				if yyq555[1] {
					yym560 := z.EncBinary()
					_ = yym560
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq555[1] {
					r.EncodeString(codecSelferC_UTF81234, string("iqn"))
					yym561 := z.EncBinary()
					_ = yym561
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
					}
				}
			}
			if yyr555 || yy2arr555 {
				if yyq555[2] {
					yym563 := z.EncBinary()
					_ = yym563
					if false {
					} else {
						r.EncodeInt(int64(x.Lun))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq555[2] {
					r.EncodeString(codecSelferC_UTF81234, string("lun"))
					yym564 := z.EncBinary()
					_ = yym564
					if false {
					} else {
						r.EncodeInt(int64(x.Lun))
					}
				}
			}
			if yyr555 || yy2arr555 {
				if yyq555[3] {
					yym566 := z.EncBinary()
					_ = yym566
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq555[3] {
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					yym567 := z.EncBinary()
					_ = yym567
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr555 || yy2arr555 {
				if yyq555[4] {
					yym569 := z.EncBinary()
					_ = yym569
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq555[4] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym570 := z.EncBinary()
					_ = yym570
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep555 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ISCSIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym571 := z.DecBinary()
	_ = yym571
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl572 := r.ReadMapStart()
			if yyl572 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl572, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl572 := r.ReadArrayStart()
			if yyl572 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl572, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys573Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys573Slc
	var yyhl573 bool = l >= 0
	for yyj573 := 0; ; yyj573++ {
		if yyhl573 {
			if yyj573 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys573Slc = r.DecodeBytes(yys573Slc, true, true)
		yys573 := string(yys573Slc)
		switch yys573 {
		case "targetPortal":
			if r.TryDecodeAsNil() {
				x.TargetPortal = ""
			} else {
				x.TargetPortal = string(r.DecodeString())
			}
		case "iqn":
			if r.TryDecodeAsNil() {
				x.IQN = ""
			} else {
				x.IQN = string(r.DecodeString())
			}
		case "lun":
			if r.TryDecodeAsNil() {
				x.Lun = 0
			} else {
				x.Lun = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys573)
		} // end switch yys573
	} // end for yyj573
	if !yyhl573 {
		r.ReadEnd()
	}
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj579 int
	var yyb579 bool
	var yyhl579 bool = l >= 0
	yyj579++
	if yyhl579 {
		yyb579 = yyj579 > l
	} else {
		yyb579 = r.CheckBreak()
	}
	if yyb579 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TargetPortal = ""
	} else {
		x.TargetPortal = string(r.DecodeString())
	}
	yyj579++
	if yyhl579 {
		yyb579 = yyj579 > l
	} else {
		yyb579 = r.CheckBreak()
	}
	if yyb579 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.IQN = ""
	} else {
		x.IQN = string(r.DecodeString())
	}
	yyj579++
	if yyhl579 {
		yyb579 = yyj579 > l
	} else {
		yyb579 = r.CheckBreak()
	}
	if yyb579 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Lun = 0
	} else {
		x.Lun = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj579++
	if yyhl579 {
		yyb579 = yyj579 > l
	} else {
		yyb579 = r.CheckBreak()
	}
	if yyb579 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj579++
	if yyhl579 {
		yyb579 = yyj579 > l
	} else {
		yyb579 = r.CheckBreak()
	}
	if yyb579 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj579++
		if yyhl579 {
			yyb579 = yyj579 > l
		} else {
			yyb579 = r.CheckBreak()
		}
		if yyb579 {
			break
		}
		z.DecStructFieldNotFound(yyj579-1, "")
	}
	r.ReadEnd()
}

func (x *FCVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym585 := z.EncBinary()
		_ = yym585
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep586 := !z.EncBinary()
			yy2arr586 := z.EncBasicHandle().StructToArray
			var yyq586 [4]bool
			_, _, _ = yysep586, yyq586, yy2arr586
			const yyr586 bool = false
			yyq586[3] = x.ReadOnly != false
			if yyr586 || yy2arr586 {
				r.EncodeArrayStart(4)
			} else {
				var yynn586 int = 3
				for _, b := range yyq586 {
					if b {
						yynn586++
					}
				}
				r.EncodeMapStart(yynn586)
			}
			if yyr586 || yy2arr586 {
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym588 := z.EncBinary()
					_ = yym588
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("targetWWNs"))
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym589 := z.EncBinary()
					_ = yym589
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			}
			if yyr586 || yy2arr586 {
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy591 := *x.Lun
					yym592 := z.EncBinary()
					_ = yym592
					if false {
					} else {
						r.EncodeInt(int64(yy591))
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy593 := *x.Lun
					yym594 := z.EncBinary()
					_ = yym594
					if false {
					} else {
						r.EncodeInt(int64(yy593))
					}
				}
			}
			if yyr586 || yy2arr586 {
				yym596 := z.EncBinary()
				_ = yym596
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("fsType"))
				yym597 := z.EncBinary()
				_ = yym597
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			}
			if yyr586 || yy2arr586 {
				if yyq586[3] {
					yym599 := z.EncBinary()
					_ = yym599
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq586[3] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym600 := z.EncBinary()
					_ = yym600
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep586 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *FCVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym601 := z.DecBinary()
	_ = yym601
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl602 := r.ReadMapStart()
			if yyl602 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl602, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl602 := r.ReadArrayStart()
			if yyl602 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl602, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FCVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys603Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys603Slc
	var yyhl603 bool = l >= 0
	for yyj603 := 0; ; yyj603++ {
		if yyhl603 {
			if yyj603 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys603Slc = r.DecodeBytes(yys603Slc, true, true)
		yys603 := string(yys603Slc)
		switch yys603 {
		case "targetWWNs":
			if r.TryDecodeAsNil() {
				x.TargetWWNs = nil
			} else {
				yyv604 := &x.TargetWWNs
				yym605 := z.DecBinary()
				_ = yym605
				if false {
				} else {
					z.F.DecSliceStringX(yyv604, false, d)
				}
			}
		case "lun":
			if r.TryDecodeAsNil() {
				if x.Lun != nil {
					x.Lun = nil
				}
			} else {
				if x.Lun == nil {
					x.Lun = new(int)
				}
				yym607 := z.DecBinary()
				_ = yym607
				if false {
				} else {
					*((*int)(x.Lun)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys603)
		} // end switch yys603
	} // end for yyj603
	if !yyhl603 {
		r.ReadEnd()
	}
}

func (x *FCVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj610 int
	var yyb610 bool
	var yyhl610 bool = l >= 0
	yyj610++
	if yyhl610 {
		yyb610 = yyj610 > l
	} else {
		yyb610 = r.CheckBreak()
	}
	if yyb610 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TargetWWNs = nil
	} else {
		yyv611 := &x.TargetWWNs
		yym612 := z.DecBinary()
		_ = yym612
		if false {
		} else {
			z.F.DecSliceStringX(yyv611, false, d)
		}
	}
	yyj610++
	if yyhl610 {
		yyb610 = yyj610 > l
	} else {
		yyb610 = r.CheckBreak()
	}
	if yyb610 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Lun != nil {
			x.Lun = nil
		}
	} else {
		if x.Lun == nil {
			x.Lun = new(int)
		}
		yym614 := z.DecBinary()
		_ = yym614
		if false {
		} else {
			*((*int)(x.Lun)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	yyj610++
	if yyhl610 {
		yyb610 = yyj610 > l
	} else {
		yyb610 = r.CheckBreak()
	}
	if yyb610 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj610++
	if yyhl610 {
		yyb610 = yyj610 > l
	} else {
		yyb610 = r.CheckBreak()
	}
	if yyb610 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj610++
		if yyhl610 {
			yyb610 = yyj610 > l
		} else {
			yyb610 = r.CheckBreak()
		}
		if yyb610 {
			break
		}
		z.DecStructFieldNotFound(yyj610-1, "")
	}
	r.ReadEnd()
}

func (x *AWSElasticBlockStoreVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym617 := z.EncBinary()
		_ = yym617
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep618 := !z.EncBinary()
			yy2arr618 := z.EncBasicHandle().StructToArray
			var yyq618 [4]bool
			_, _, _ = yysep618, yyq618, yy2arr618
			const yyr618 bool = false
			yyq618[1] = x.FSType != ""
			yyq618[2] = x.Partition != 0
			yyq618[3] = x.ReadOnly != false
			if yyr618 || yy2arr618 {
				r.EncodeArrayStart(4)
			} else {
				var yynn618 int = 1
				for _, b := range yyq618 {
					if b {
						yynn618++
					}
				}
				r.EncodeMapStart(yynn618)
			}
			if yyr618 || yy2arr618 {
				yym620 := z.EncBinary()
				_ = yym620
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				yym621 := z.EncBinary()
				_ = yym621
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr618 || yy2arr618 {
				if yyq618[1] {
					yym623 := z.EncBinary()
					_ = yym623
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq618[1] {
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					yym624 := z.EncBinary()
					_ = yym624
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr618 || yy2arr618 {
				if yyq618[2] {
					yym626 := z.EncBinary()
					_ = yym626
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq618[2] {
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					yym627 := z.EncBinary()
					_ = yym627
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr618 || yy2arr618 {
				if yyq618[3] {
					yym629 := z.EncBinary()
					_ = yym629
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq618[3] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym630 := z.EncBinary()
					_ = yym630
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep618 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym631 := z.DecBinary()
	_ = yym631
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl632 := r.ReadMapStart()
			if yyl632 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl632, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl632 := r.ReadArrayStart()
			if yyl632 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl632, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys633Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys633Slc
	var yyhl633 bool = l >= 0
	for yyj633 := 0; ; yyj633++ {
		if yyhl633 {
			if yyj633 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys633Slc = r.DecodeBytes(yys633Slc, true, true)
		yys633 := string(yys633Slc)
		switch yys633 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys633)
		} // end switch yys633
	} // end for yyj633
	if !yyhl633 {
		r.ReadEnd()
	}
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj638 int
	var yyb638 bool
	var yyhl638 bool = l >= 0
	yyj638++
	if yyhl638 {
		yyb638 = yyj638 > l
	} else {
		yyb638 = r.CheckBreak()
	}
	if yyb638 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj638++
	if yyhl638 {
		yyb638 = yyj638 > l
	} else {
		yyb638 = r.CheckBreak()
	}
	if yyb638 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj638++
	if yyhl638 {
		yyb638 = yyj638 > l
	} else {
		yyb638 = r.CheckBreak()
	}
	if yyb638 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj638++
	if yyhl638 {
		yyb638 = yyj638 > l
	} else {
		yyb638 = r.CheckBreak()
	}
	if yyb638 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj638++
		if yyhl638 {
			yyb638 = yyj638 > l
		} else {
			yyb638 = r.CheckBreak()
		}
		if yyb638 {
			break
		}
		z.DecStructFieldNotFound(yyj638-1, "")
	}
	r.ReadEnd()
}

func (x *GitRepoVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym643 := z.EncBinary()
		_ = yym643
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep644 := !z.EncBinary()
			yy2arr644 := z.EncBasicHandle().StructToArray
			var yyq644 [2]bool
			_, _, _ = yysep644, yyq644, yy2arr644
			const yyr644 bool = false
			if yyr644 || yy2arr644 {
				r.EncodeArrayStart(2)
			} else {
				var yynn644 int = 2
				for _, b := range yyq644 {
					if b {
						yynn644++
					}
				}
				r.EncodeMapStart(yynn644)
			}
			if yyr644 || yy2arr644 {
				yym646 := z.EncBinary()
				_ = yym646
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("repository"))
				yym647 := z.EncBinary()
				_ = yym647
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			}
			if yyr644 || yy2arr644 {
				yym649 := z.EncBinary()
				_ = yym649
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("revision"))
				yym650 := z.EncBinary()
				_ = yym650
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
				}
			}
			if yysep644 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *GitRepoVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym651 := z.DecBinary()
	_ = yym651
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl652 := r.ReadMapStart()
			if yyl652 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl652, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl652 := r.ReadArrayStart()
			if yyl652 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl652, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys653Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys653Slc
	var yyhl653 bool = l >= 0
	for yyj653 := 0; ; yyj653++ {
		if yyhl653 {
			if yyj653 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys653Slc = r.DecodeBytes(yys653Slc, true, true)
		yys653 := string(yys653Slc)
		switch yys653 {
		case "repository":
			if r.TryDecodeAsNil() {
				x.Repository = ""
			} else {
				x.Repository = string(r.DecodeString())
			}
		case "revision":
			if r.TryDecodeAsNil() {
				x.Revision = ""
			} else {
				x.Revision = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys653)
		} // end switch yys653
	} // end for yyj653
	if !yyhl653 {
		r.ReadEnd()
	}
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj656 int
	var yyb656 bool
	var yyhl656 bool = l >= 0
	yyj656++
	if yyhl656 {
		yyb656 = yyj656 > l
	} else {
		yyb656 = r.CheckBreak()
	}
	if yyb656 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Repository = ""
	} else {
		x.Repository = string(r.DecodeString())
	}
	yyj656++
	if yyhl656 {
		yyb656 = yyj656 > l
	} else {
		yyb656 = r.CheckBreak()
	}
	if yyb656 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Revision = ""
	} else {
		x.Revision = string(r.DecodeString())
	}
	for {
		yyj656++
		if yyhl656 {
			yyb656 = yyj656 > l
		} else {
			yyb656 = r.CheckBreak()
		}
		if yyb656 {
			break
		}
		z.DecStructFieldNotFound(yyj656-1, "")
	}
	r.ReadEnd()
}

func (x *SecretVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym659 := z.EncBinary()
		_ = yym659
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep660 := !z.EncBinary()
			yy2arr660 := z.EncBasicHandle().StructToArray
			var yyq660 [1]bool
			_, _, _ = yysep660, yyq660, yy2arr660
			const yyr660 bool = false
			if yyr660 || yy2arr660 {
				r.EncodeArrayStart(1)
			} else {
				var yynn660 int = 1
				for _, b := range yyq660 {
					if b {
						yynn660++
					}
				}
				r.EncodeMapStart(yynn660)
			}
			if yyr660 || yy2arr660 {
				yym662 := z.EncBinary()
				_ = yym662
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("secretName"))
				yym663 := z.EncBinary()
				_ = yym663
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			}
			if yysep660 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *SecretVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym664 := z.DecBinary()
	_ = yym664
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl665 := r.ReadMapStart()
			if yyl665 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl665, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl665 := r.ReadArrayStart()
			if yyl665 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl665, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys666Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys666Slc
	var yyhl666 bool = l >= 0
	for yyj666 := 0; ; yyj666++ {
		if yyhl666 {
			if yyj666 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys666Slc = r.DecodeBytes(yys666Slc, true, true)
		yys666 := string(yys666Slc)
		switch yys666 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys666)
		} // end switch yys666
	} // end for yyj666
	if !yyhl666 {
		r.ReadEnd()
	}
}

func (x *SecretVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj668 int
	var yyb668 bool
	var yyhl668 bool = l >= 0
	yyj668++
	if yyhl668 {
		yyb668 = yyj668 > l
	} else {
		yyb668 = r.CheckBreak()
	}
	if yyb668 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	for {
		yyj668++
		if yyhl668 {
			yyb668 = yyj668 > l
		} else {
			yyb668 = r.CheckBreak()
		}
		if yyb668 {
			break
		}
		z.DecStructFieldNotFound(yyj668-1, "")
	}
	r.ReadEnd()
}

func (x *NFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym670 := z.EncBinary()
		_ = yym670
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep671 := !z.EncBinary()
			yy2arr671 := z.EncBasicHandle().StructToArray
			var yyq671 [3]bool
			_, _, _ = yysep671, yyq671, yy2arr671
			const yyr671 bool = false
			yyq671[2] = x.ReadOnly != false
			if yyr671 || yy2arr671 {
				r.EncodeArrayStart(3)
			} else {
				var yynn671 int = 2
				for _, b := range yyq671 {
					if b {
						yynn671++
					}
				}
				r.EncodeMapStart(yynn671)
			}
			if yyr671 || yy2arr671 {
				yym673 := z.EncBinary()
				_ = yym673
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("server"))
				yym674 := z.EncBinary()
				_ = yym674
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			}
			if yyr671 || yy2arr671 {
				yym676 := z.EncBinary()
				_ = yym676
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				yym677 := z.EncBinary()
				_ = yym677
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr671 || yy2arr671 {
				if yyq671[2] {
					yym679 := z.EncBinary()
					_ = yym679
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq671[2] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym680 := z.EncBinary()
					_ = yym680
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep671 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym681 := z.DecBinary()
	_ = yym681
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl682 := r.ReadMapStart()
			if yyl682 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl682, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl682 := r.ReadArrayStart()
			if yyl682 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl682, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys683Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys683Slc
	var yyhl683 bool = l >= 0
	for yyj683 := 0; ; yyj683++ {
		if yyhl683 {
			if yyj683 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys683Slc = r.DecodeBytes(yys683Slc, true, true)
		yys683 := string(yys683Slc)
		switch yys683 {
		case "server":
			if r.TryDecodeAsNil() {
				x.Server = ""
			} else {
				x.Server = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys683)
		} // end switch yys683
	} // end for yyj683
	if !yyhl683 {
		r.ReadEnd()
	}
}

func (x *NFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj687 int
	var yyb687 bool
	var yyhl687 bool = l >= 0
	yyj687++
	if yyhl687 {
		yyb687 = yyj687 > l
	} else {
		yyb687 = r.CheckBreak()
	}
	if yyb687 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Server = ""
	} else {
		x.Server = string(r.DecodeString())
	}
	yyj687++
	if yyhl687 {
		yyb687 = yyj687 > l
	} else {
		yyb687 = r.CheckBreak()
	}
	if yyb687 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj687++
	if yyhl687 {
		yyb687 = yyj687 > l
	} else {
		yyb687 = r.CheckBreak()
	}
	if yyb687 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj687++
		if yyhl687 {
			yyb687 = yyj687 > l
		} else {
			yyb687 = r.CheckBreak()
		}
		if yyb687 {
			break
		}
		z.DecStructFieldNotFound(yyj687-1, "")
	}
	r.ReadEnd()
}

func (x *GlusterfsVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym691 := z.EncBinary()
		_ = yym691
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep692 := !z.EncBinary()
			yy2arr692 := z.EncBasicHandle().StructToArray
			var yyq692 [3]bool
			_, _, _ = yysep692, yyq692, yy2arr692
			const yyr692 bool = false
			yyq692[2] = x.ReadOnly != false
			if yyr692 || yy2arr692 {
				r.EncodeArrayStart(3)
			} else {
				var yynn692 int = 2
				for _, b := range yyq692 {
					if b {
						yynn692++
					}
				}
				r.EncodeMapStart(yynn692)
			}
			if yyr692 || yy2arr692 {
				yym694 := z.EncBinary()
				_ = yym694
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("endpoints"))
				yym695 := z.EncBinary()
				_ = yym695
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			}
			if yyr692 || yy2arr692 {
				yym697 := z.EncBinary()
				_ = yym697
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				yym698 := z.EncBinary()
				_ = yym698
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr692 || yy2arr692 {
				if yyq692[2] {
					yym700 := z.EncBinary()
					_ = yym700
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq692[2] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym701 := z.EncBinary()
					_ = yym701
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep692 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *GlusterfsVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym702 := z.DecBinary()
	_ = yym702
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl703 := r.ReadMapStart()
			if yyl703 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl703, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl703 := r.ReadArrayStart()
			if yyl703 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl703, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys704Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys704Slc
	var yyhl704 bool = l >= 0
	for yyj704 := 0; ; yyj704++ {
		if yyhl704 {
			if yyj704 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys704Slc = r.DecodeBytes(yys704Slc, true, true)
		yys704 := string(yys704Slc)
		switch yys704 {
		case "endpoints":
			if r.TryDecodeAsNil() {
				x.EndpointsName = ""
			} else {
				x.EndpointsName = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys704)
		} // end switch yys704
	} // end for yyj704
	if !yyhl704 {
		r.ReadEnd()
	}
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj708 int
	var yyb708 bool
	var yyhl708 bool = l >= 0
	yyj708++
	if yyhl708 {
		yyb708 = yyj708 > l
	} else {
		yyb708 = r.CheckBreak()
	}
	if yyb708 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.EndpointsName = ""
	} else {
		x.EndpointsName = string(r.DecodeString())
	}
	yyj708++
	if yyhl708 {
		yyb708 = yyj708 > l
	} else {
		yyb708 = r.CheckBreak()
	}
	if yyb708 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj708++
	if yyhl708 {
		yyb708 = yyj708 > l
	} else {
		yyb708 = r.CheckBreak()
	}
	if yyb708 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj708++
		if yyhl708 {
			yyb708 = yyj708 > l
		} else {
			yyb708 = r.CheckBreak()
		}
		if yyb708 {
			break
		}
		z.DecStructFieldNotFound(yyj708-1, "")
	}
	r.ReadEnd()
}

func (x *RBDVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym712 := z.EncBinary()
		_ = yym712
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep713 := !z.EncBinary()
			yy2arr713 := z.EncBasicHandle().StructToArray
			var yyq713 [8]bool
			_, _, _ = yysep713, yyq713, yy2arr713
			const yyr713 bool = false
			yyq713[2] = x.FSType != ""
			yyq713[7] = x.ReadOnly != false
			if yyr713 || yy2arr713 {
				r.EncodeArrayStart(8)
			} else {
				var yynn713 int = 6
				for _, b := range yyq713 {
					if b {
						yynn713++
					}
				}
				r.EncodeMapStart(yynn713)
			}
			if yyr713 || yy2arr713 {
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym715 := z.EncBinary()
					_ = yym715
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym716 := z.EncBinary()
					_ = yym716
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			}
			if yyr713 || yy2arr713 {
				yym718 := z.EncBinary()
				_ = yym718
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				yym719 := z.EncBinary()
				_ = yym719
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			}
			if yyr713 || yy2arr713 {
				if yyq713[2] {
					yym721 := z.EncBinary()
					_ = yym721
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq713[2] {
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					yym722 := z.EncBinary()
					_ = yym722
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr713 || yy2arr713 {
				yym724 := z.EncBinary()
				_ = yym724
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("pool"))
				yym725 := z.EncBinary()
				_ = yym725
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
				}
			}
			if yyr713 || yy2arr713 {
				yym727 := z.EncBinary()
				_ = yym727
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("user"))
				yym728 := z.EncBinary()
				_ = yym728
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
				}
			}
			if yyr713 || yy2arr713 {
				yym730 := z.EncBinary()
				_ = yym730
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("keyring"))
				yym731 := z.EncBinary()
				_ = yym731
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
				}
			}
			if yyr713 || yy2arr713 {
				if x.SecretRef == nil {
					r.EncodeNil()
				} else {
					x.SecretRef.CodecEncodeSelf(e)
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
				if x.SecretRef == nil {
					r.EncodeNil()
				} else {
					x.SecretRef.CodecEncodeSelf(e)
				}
			}
			if yyr713 || yy2arr713 {
				if yyq713[7] {
					yym734 := z.EncBinary()
					_ = yym734
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq713[7] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym735 := z.EncBinary()
					_ = yym735
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep713 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *RBDVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym736 := z.DecBinary()
	_ = yym736
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl737 := r.ReadMapStart()
			if yyl737 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl737, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl737 := r.ReadArrayStart()
			if yyl737 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl737, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RBDVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys738Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys738Slc
	var yyhl738 bool = l >= 0
	for yyj738 := 0; ; yyj738++ {
		if yyhl738 {
			if yyj738 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys738Slc = r.DecodeBytes(yys738Slc, true, true)
		yys738 := string(yys738Slc)
		switch yys738 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.CephMonitors = nil
			} else {
				yyv739 := &x.CephMonitors
				yym740 := z.DecBinary()
				_ = yym740
				if false {
				} else {
					z.F.DecSliceStringX(yyv739, false, d)
				}
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.RBDImage = ""
			} else {
				x.RBDImage = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "pool":
			if r.TryDecodeAsNil() {
				x.RBDPool = ""
			} else {
				x.RBDPool = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.RadosUser = ""
			} else {
				x.RadosUser = string(r.DecodeString())
			}
		case "keyring":
			if r.TryDecodeAsNil() {
				x.Keyring = ""
			} else {
				x.Keyring = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys738)
		} // end switch yys738
	} // end for yyj738
	if !yyhl738 {
		r.ReadEnd()
	}
}

func (x *RBDVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj748 int
	var yyb748 bool
	var yyhl748 bool = l >= 0
	yyj748++
	if yyhl748 {
		yyb748 = yyj748 > l
	} else {
		yyb748 = r.CheckBreak()
	}
	if yyb748 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.CephMonitors = nil
	} else {
		yyv749 := &x.CephMonitors
		yym750 := z.DecBinary()
		_ = yym750
		if false {
		} else {
			z.F.DecSliceStringX(yyv749, false, d)
		}
	}
	yyj748++
	if yyhl748 {
		yyb748 = yyj748 > l
	} else {
		yyb748 = r.CheckBreak()
	}
	if yyb748 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.RBDImage = ""
	} else {
		x.RBDImage = string(r.DecodeString())
	}
	yyj748++
	if yyhl748 {
		yyb748 = yyj748 > l
	} else {
		yyb748 = r.CheckBreak()
	}
	if yyb748 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj748++
	if yyhl748 {
		yyb748 = yyj748 > l
	} else {
		yyb748 = r.CheckBreak()
	}
	if yyb748 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.RBDPool = ""
	} else {
		x.RBDPool = string(r.DecodeString())
	}
	yyj748++
	if yyhl748 {
		yyb748 = yyj748 > l
	} else {
		yyb748 = r.CheckBreak()
	}
	if yyb748 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.RadosUser = ""
	} else {
		x.RadosUser = string(r.DecodeString())
	}
	yyj748++
	if yyhl748 {
		yyb748 = yyj748 > l
	} else {
		yyb748 = r.CheckBreak()
	}
	if yyb748 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Keyring = ""
	} else {
		x.Keyring = string(r.DecodeString())
	}
	yyj748++
	if yyhl748 {
		yyb748 = yyj748 > l
	} else {
		yyb748 = r.CheckBreak()
	}
	if yyb748 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj748++
	if yyhl748 {
		yyb748 = yyj748 > l
	} else {
		yyb748 = r.CheckBreak()
	}
	if yyb748 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj748++
		if yyhl748 {
			yyb748 = yyj748 > l
		} else {
			yyb748 = r.CheckBreak()
		}
		if yyb748 {
			break
		}
		z.DecStructFieldNotFound(yyj748-1, "")
	}
	r.ReadEnd()
}

func (x *CinderVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym758 := z.EncBinary()
		_ = yym758
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep759 := !z.EncBinary()
			yy2arr759 := z.EncBasicHandle().StructToArray
			var yyq759 [4]bool
			_, _, _ = yysep759, yyq759, yy2arr759
			const yyr759 bool = false
			yyq759[1] = x.FSType != ""
			yyq759[2] = x.ReadOnly != false
			yyq759[3] = x.WithOpenStackCP != false
			if yyr759 || yy2arr759 {
				r.EncodeArrayStart(4)
			} else {
				var yynn759 int = 1
				for _, b := range yyq759 {
					if b {
						yynn759++
					}
				}
				r.EncodeMapStart(yynn759)
			}
			if yyr759 || yy2arr759 {
				yym761 := z.EncBinary()
				_ = yym761
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				yym762 := z.EncBinary()
				_ = yym762
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr759 || yy2arr759 {
				if yyq759[1] {
					yym764 := z.EncBinary()
					_ = yym764
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq759[1] {
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					yym765 := z.EncBinary()
					_ = yym765
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr759 || yy2arr759 {
				if yyq759[2] {
					yym767 := z.EncBinary()
					_ = yym767
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq759[2] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym768 := z.EncBinary()
					_ = yym768
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr759 || yy2arr759 {
				if yyq759[3] {
					yym770 := z.EncBinary()
					_ = yym770
					if false {
					} else {
						r.EncodeBool(bool(x.WithOpenStackCP))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq759[3] {
					r.EncodeString(codecSelferC_UTF81234, string("withOpenStackCP"))
					yym771 := z.EncBinary()
					_ = yym771
					if false {
					} else {
						r.EncodeBool(bool(x.WithOpenStackCP))
					}
				}
			}
			if yysep759 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *CinderVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym772 := z.DecBinary()
	_ = yym772
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl773 := r.ReadMapStart()
			if yyl773 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl773, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl773 := r.ReadArrayStart()
			if yyl773 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl773, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CinderVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys774Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys774Slc
	var yyhl774 bool = l >= 0
	for yyj774 := 0; ; yyj774++ {
		if yyhl774 {
			if yyj774 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys774Slc = r.DecodeBytes(yys774Slc, true, true)
		yys774 := string(yys774Slc)
		switch yys774 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "withOpenStackCP":
			if r.TryDecodeAsNil() {
				x.WithOpenStackCP = false
			} else {
				x.WithOpenStackCP = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys774)
		} // end switch yys774
	} // end for yyj774
	if !yyhl774 {
		r.ReadEnd()
	}
}

func (x *CinderVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj779 int
	var yyb779 bool
	var yyhl779 bool = l >= 0
	yyj779++
	if yyhl779 {
		yyb779 = yyj779 > l
	} else {
		yyb779 = r.CheckBreak()
	}
	if yyb779 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj779++
	if yyhl779 {
		yyb779 = yyj779 > l
	} else {
		yyb779 = r.CheckBreak()
	}
	if yyb779 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj779++
	if yyhl779 {
		yyb779 = yyj779 > l
	} else {
		yyb779 = r.CheckBreak()
	}
	if yyb779 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj779++
	if yyhl779 {
		yyb779 = yyj779 > l
	} else {
		yyb779 = r.CheckBreak()
	}
	if yyb779 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.WithOpenStackCP = false
	} else {
		x.WithOpenStackCP = bool(r.DecodeBool())
	}
	for {
		yyj779++
		if yyhl779 {
			yyb779 = yyj779 > l
		} else {
			yyb779 = r.CheckBreak()
		}
		if yyb779 {
			break
		}
		z.DecStructFieldNotFound(yyj779-1, "")
	}
	r.ReadEnd()
}

func (x *CephFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym784 := z.EncBinary()
		_ = yym784
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep785 := !z.EncBinary()
			yy2arr785 := z.EncBasicHandle().StructToArray
			var yyq785 [5]bool
			_, _, _ = yysep785, yyq785, yy2arr785
			const yyr785 bool = false
			yyq785[1] = x.User != ""
			yyq785[2] = x.SecretFile != ""
			yyq785[3] = x.SecretRef != nil
			yyq785[4] = x.ReadOnly != false
			if yyr785 || yy2arr785 {
				r.EncodeArrayStart(5)
			} else {
				var yynn785 int = 1
				for _, b := range yyq785 {
					if b {
						yynn785++
					}
				}
				r.EncodeMapStart(yynn785)
			}
			if yyr785 || yy2arr785 {
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym787 := z.EncBinary()
					_ = yym787
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym788 := z.EncBinary()
					_ = yym788
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			}
			if yyr785 || yy2arr785 {
				if yyq785[1] {
					yym790 := z.EncBinary()
					_ = yym790
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq785[1] {
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					yym791 := z.EncBinary()
					_ = yym791
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr785 || yy2arr785 {
				if yyq785[2] {
					yym793 := z.EncBinary()
					_ = yym793
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq785[2] {
					r.EncodeString(codecSelferC_UTF81234, string("secretFile"))
					yym794 := z.EncBinary()
					_ = yym794
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				}
			}
			if yyr785 || yy2arr785 {
				if yyq785[3] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq785[3] {
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr785 || yy2arr785 {
				if yyq785[4] {
					yym797 := z.EncBinary()
					_ = yym797
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq785[4] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym798 := z.EncBinary()
					_ = yym798
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep785 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *CephFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym799 := z.DecBinary()
	_ = yym799
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl800 := r.ReadMapStart()
			if yyl800 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl800, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl800 := r.ReadArrayStart()
			if yyl800 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl800, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CephFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys801Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys801Slc
	var yyhl801 bool = l >= 0
	for yyj801 := 0; ; yyj801++ {
		if yyhl801 {
			if yyj801 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys801Slc = r.DecodeBytes(yys801Slc, true, true)
		yys801 := string(yys801Slc)
		switch yys801 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.Monitors = nil
			} else {
				yyv802 := &x.Monitors
				yym803 := z.DecBinary()
				_ = yym803
				if false {
				} else {
					z.F.DecSliceStringX(yyv802, false, d)
				}
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "secretFile":
			if r.TryDecodeAsNil() {
				x.SecretFile = ""
			} else {
				x.SecretFile = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys801)
		} // end switch yys801
	} // end for yyj801
	if !yyhl801 {
		r.ReadEnd()
	}
}

func (x *CephFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj808 int
	var yyb808 bool
	var yyhl808 bool = l >= 0
	yyj808++
	if yyhl808 {
		yyb808 = yyj808 > l
	} else {
		yyb808 = r.CheckBreak()
	}
	if yyb808 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Monitors = nil
	} else {
		yyv809 := &x.Monitors
		yym810 := z.DecBinary()
		_ = yym810
		if false {
		} else {
			z.F.DecSliceStringX(yyv809, false, d)
		}
	}
	yyj808++
	if yyhl808 {
		yyb808 = yyj808 > l
	} else {
		yyb808 = r.CheckBreak()
	}
	if yyb808 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj808++
	if yyhl808 {
		yyb808 = yyj808 > l
	} else {
		yyb808 = r.CheckBreak()
	}
	if yyb808 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SecretFile = ""
	} else {
		x.SecretFile = string(r.DecodeString())
	}
	yyj808++
	if yyhl808 {
		yyb808 = yyj808 > l
	} else {
		yyb808 = r.CheckBreak()
	}
	if yyb808 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj808++
	if yyhl808 {
		yyb808 = yyj808 > l
	} else {
		yyb808 = r.CheckBreak()
	}
	if yyb808 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj808++
		if yyhl808 {
			yyb808 = yyj808 > l
		} else {
			yyb808 = r.CheckBreak()
		}
		if yyb808 {
			break
		}
		z.DecStructFieldNotFound(yyj808-1, "")
	}
	r.ReadEnd()
}

func (x *FlockerVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym815 := z.EncBinary()
		_ = yym815
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep816 := !z.EncBinary()
			yy2arr816 := z.EncBasicHandle().StructToArray
			var yyq816 [1]bool
			_, _, _ = yysep816, yyq816, yy2arr816
			const yyr816 bool = false
			if yyr816 || yy2arr816 {
				r.EncodeArrayStart(1)
			} else {
				var yynn816 int = 1
				for _, b := range yyq816 {
					if b {
						yynn816++
					}
				}
				r.EncodeMapStart(yynn816)
			}
			if yyr816 || yy2arr816 {
				yym818 := z.EncBinary()
				_ = yym818
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("datasetName"))
				yym819 := z.EncBinary()
				_ = yym819
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			}
			if yysep816 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *FlockerVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym820 := z.DecBinary()
	_ = yym820
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl821 := r.ReadMapStart()
			if yyl821 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl821, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl821 := r.ReadArrayStart()
			if yyl821 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl821, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlockerVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys822Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys822Slc
	var yyhl822 bool = l >= 0
	for yyj822 := 0; ; yyj822++ {
		if yyhl822 {
			if yyj822 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys822Slc = r.DecodeBytes(yys822Slc, true, true)
		yys822 := string(yys822Slc)
		switch yys822 {
		case "datasetName":
			if r.TryDecodeAsNil() {
				x.DatasetName = ""
			} else {
				x.DatasetName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys822)
		} // end switch yys822
	} // end for yyj822
	if !yyhl822 {
		r.ReadEnd()
	}
}

func (x *FlockerVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj824 int
	var yyb824 bool
	var yyhl824 bool = l >= 0
	yyj824++
	if yyhl824 {
		yyb824 = yyj824 > l
	} else {
		yyb824 = r.CheckBreak()
	}
	if yyb824 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DatasetName = ""
	} else {
		x.DatasetName = string(r.DecodeString())
	}
	for {
		yyj824++
		if yyhl824 {
			yyb824 = yyj824 > l
		} else {
			yyb824 = r.CheckBreak()
		}
		if yyb824 {
			break
		}
		z.DecStructFieldNotFound(yyj824-1, "")
	}
	r.ReadEnd()
}

func (x *DownwardAPIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym826 := z.EncBinary()
		_ = yym826
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep827 := !z.EncBinary()
			yy2arr827 := z.EncBasicHandle().StructToArray
			var yyq827 [1]bool
			_, _, _ = yysep827, yyq827, yy2arr827
			const yyr827 bool = false
			yyq827[0] = len(x.Items) != 0
			if yyr827 || yy2arr827 {
				r.EncodeArrayStart(1)
			} else {
				var yynn827 int = 0
				for _, b := range yyq827 {
					if b {
						yynn827++
					}
				}
				r.EncodeMapStart(yynn827)
			}
			if yyr827 || yy2arr827 {
				if yyq827[0] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym829 := z.EncBinary()
						_ = yym829
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq827[0] {
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym830 := z.EncBinary()
						_ = yym830
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				}
			}
			if yysep827 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DownwardAPIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym831 := z.DecBinary()
	_ = yym831
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl832 := r.ReadMapStart()
			if yyl832 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl832, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl832 := r.ReadArrayStart()
			if yyl832 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl832, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys833Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys833Slc
	var yyhl833 bool = l >= 0
	for yyj833 := 0; ; yyj833++ {
		if yyhl833 {
			if yyj833 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys833Slc = r.DecodeBytes(yys833Slc, true, true)
		yys833 := string(yys833Slc)
		switch yys833 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv834 := &x.Items
				yym835 := z.DecBinary()
				_ = yym835
				if false {
				} else {
					h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv834), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys833)
		} // end switch yys833
	} // end for yyj833
	if !yyhl833 {
		r.ReadEnd()
	}
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj836 int
	var yyb836 bool
	var yyhl836 bool = l >= 0
	yyj836++
	if yyhl836 {
		yyb836 = yyj836 > l
	} else {
		yyb836 = r.CheckBreak()
	}
	if yyb836 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv837 := &x.Items
		yym838 := z.DecBinary()
		_ = yym838
		if false {
		} else {
			h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv837), d)
		}
	}
	for {
		yyj836++
		if yyhl836 {
			yyb836 = yyj836 > l
		} else {
			yyb836 = r.CheckBreak()
		}
		if yyb836 {
			break
		}
		z.DecStructFieldNotFound(yyj836-1, "")
	}
	r.ReadEnd()
}

func (x *DownwardAPIVolumeFile) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym839 := z.EncBinary()
		_ = yym839
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep840 := !z.EncBinary()
			yy2arr840 := z.EncBasicHandle().StructToArray
			var yyq840 [2]bool
			_, _, _ = yysep840, yyq840, yy2arr840
			const yyr840 bool = false
			if yyr840 || yy2arr840 {
				r.EncodeArrayStart(2)
			} else {
				var yynn840 int = 2
				for _, b := range yyq840 {
					if b {
						yynn840++
					}
				}
				r.EncodeMapStart(yynn840)
			}
			if yyr840 || yy2arr840 {
				yym842 := z.EncBinary()
				_ = yym842
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				yym843 := z.EncBinary()
				_ = yym843
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr840 || yy2arr840 {
				yy845 := &x.FieldRef
				yy845.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
				yy846 := &x.FieldRef
				yy846.CodecEncodeSelf(e)
			}
			if yysep840 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DownwardAPIVolumeFile) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym847 := z.DecBinary()
	_ = yym847
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl848 := r.ReadMapStart()
			if yyl848 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl848, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl848 := r.ReadArrayStart()
			if yyl848 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl848, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys849Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys849Slc
	var yyhl849 bool = l >= 0
	for yyj849 := 0; ; yyj849++ {
		if yyhl849 {
			if yyj849 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys849Slc = r.DecodeBytes(yys849Slc, true, true)
		yys849 := string(yys849Slc)
		switch yys849 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "fieldRef":
			if r.TryDecodeAsNil() {
				x.FieldRef = ObjectFieldSelector{}
			} else {
				yyv851 := &x.FieldRef
				yyv851.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys849)
		} // end switch yys849
	} // end for yyj849
	if !yyhl849 {
		r.ReadEnd()
	}
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj852 int
	var yyb852 bool
	var yyhl852 bool = l >= 0
	yyj852++
	if yyhl852 {
		yyb852 = yyj852 > l
	} else {
		yyb852 = r.CheckBreak()
	}
	if yyb852 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj852++
	if yyhl852 {
		yyb852 = yyj852 > l
	} else {
		yyb852 = r.CheckBreak()
	}
	if yyb852 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FieldRef = ObjectFieldSelector{}
	} else {
		yyv854 := &x.FieldRef
		yyv854.CodecDecodeSelf(d)
	}
	for {
		yyj852++
		if yyhl852 {
			yyb852 = yyj852 > l
		} else {
			yyb852 = r.CheckBreak()
		}
		if yyb852 {
			break
		}
		z.DecStructFieldNotFound(yyj852-1, "")
	}
	r.ReadEnd()
}

func (x *ContainerPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym855 := z.EncBinary()
		_ = yym855
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep856 := !z.EncBinary()
			yy2arr856 := z.EncBasicHandle().StructToArray
			var yyq856 [5]bool
			_, _, _ = yysep856, yyq856, yy2arr856
			const yyr856 bool = false
			yyq856[0] = x.Name != ""
			yyq856[1] = x.HostPort != 0
			yyq856[3] = x.Protocol != ""
			yyq856[4] = x.HostIP != ""
			if yyr856 || yy2arr856 {
				r.EncodeArrayStart(5)
			} else {
				var yynn856 int = 1
				for _, b := range yyq856 {
					if b {
						yynn856++
					}
				}
				r.EncodeMapStart(yynn856)
			}
			if yyr856 || yy2arr856 {
				if yyq856[0] {
					yym858 := z.EncBinary()
					_ = yym858
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq856[0] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					yym859 := z.EncBinary()
					_ = yym859
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr856 || yy2arr856 {
				if yyq856[1] {
					yym861 := z.EncBinary()
					_ = yym861
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq856[1] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPort"))
					yym862 := z.EncBinary()
					_ = yym862
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				}
			}
			if yyr856 || yy2arr856 {
				yym864 := z.EncBinary()
				_ = yym864
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("containerPort"))
				yym865 := z.EncBinary()
				_ = yym865
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			}
			if yyr856 || yy2arr856 {
				if yyq856[3] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq856[3] {
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr856 || yy2arr856 {
				if yyq856[4] {
					yym868 := z.EncBinary()
					_ = yym868
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq856[4] {
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					yym869 := z.EncBinary()
					_ = yym869
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yysep856 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym870 := z.DecBinary()
	_ = yym870
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl871 := r.ReadMapStart()
			if yyl871 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl871, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl871 := r.ReadArrayStart()
			if yyl871 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl871, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys872Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys872Slc
	var yyhl872 bool = l >= 0
	for yyj872 := 0; ; yyj872++ {
		if yyhl872 {
			if yyj872 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys872Slc = r.DecodeBytes(yys872Slc, true, true)
		yys872 := string(yys872Slc)
		switch yys872 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPort":
			if r.TryDecodeAsNil() {
				x.HostPort = 0
			} else {
				x.HostPort = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "containerPort":
			if r.TryDecodeAsNil() {
				x.ContainerPort = 0
			} else {
				x.ContainerPort = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys872)
		} // end switch yys872
	} // end for yyj872
	if !yyhl872 {
		r.ReadEnd()
	}
}

func (x *ContainerPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj878 int
	var yyb878 bool
	var yyhl878 bool = l >= 0
	yyj878++
	if yyhl878 {
		yyb878 = yyj878 > l
	} else {
		yyb878 = r.CheckBreak()
	}
	if yyb878 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj878++
	if yyhl878 {
		yyb878 = yyj878 > l
	} else {
		yyb878 = r.CheckBreak()
	}
	if yyb878 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostPort = 0
	} else {
		x.HostPort = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj878++
	if yyhl878 {
		yyb878 = yyj878 > l
	} else {
		yyb878 = r.CheckBreak()
	}
	if yyb878 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ContainerPort = 0
	} else {
		x.ContainerPort = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj878++
	if yyhl878 {
		yyb878 = yyj878 > l
	} else {
		yyb878 = r.CheckBreak()
	}
	if yyb878 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj878++
	if yyhl878 {
		yyb878 = yyj878 > l
	} else {
		yyb878 = r.CheckBreak()
	}
	if yyb878 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	for {
		yyj878++
		if yyhl878 {
			yyb878 = yyj878 > l
		} else {
			yyb878 = r.CheckBreak()
		}
		if yyb878 {
			break
		}
		z.DecStructFieldNotFound(yyj878-1, "")
	}
	r.ReadEnd()
}

func (x *VolumeMount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym884 := z.EncBinary()
		_ = yym884
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep885 := !z.EncBinary()
			yy2arr885 := z.EncBasicHandle().StructToArray
			var yyq885 [3]bool
			_, _, _ = yysep885, yyq885, yy2arr885
			const yyr885 bool = false
			yyq885[1] = x.ReadOnly != false
			if yyr885 || yy2arr885 {
				r.EncodeArrayStart(3)
			} else {
				var yynn885 int = 2
				for _, b := range yyq885 {
					if b {
						yynn885++
					}
				}
				r.EncodeMapStart(yynn885)
			}
			if yyr885 || yy2arr885 {
				yym887 := z.EncBinary()
				_ = yym887
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				yym888 := z.EncBinary()
				_ = yym888
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr885 || yy2arr885 {
				if yyq885[1] {
					yym890 := z.EncBinary()
					_ = yym890
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq885[1] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym891 := z.EncBinary()
					_ = yym891
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr885 || yy2arr885 {
				yym893 := z.EncBinary()
				_ = yym893
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("mountPath"))
				yym894 := z.EncBinary()
				_ = yym894
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			}
			if yysep885 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *VolumeMount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym895 := z.DecBinary()
	_ = yym895
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl896 := r.ReadMapStart()
			if yyl896 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl896, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl896 := r.ReadArrayStart()
			if yyl896 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl896, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeMount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys897Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys897Slc
	var yyhl897 bool = l >= 0
	for yyj897 := 0; ; yyj897++ {
		if yyhl897 {
			if yyj897 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys897Slc = r.DecodeBytes(yys897Slc, true, true)
		yys897 := string(yys897Slc)
		switch yys897 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "mountPath":
			if r.TryDecodeAsNil() {
				x.MountPath = ""
			} else {
				x.MountPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys897)
		} // end switch yys897
	} // end for yyj897
	if !yyhl897 {
		r.ReadEnd()
	}
}

func (x *VolumeMount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj901 int
	var yyb901 bool
	var yyhl901 bool = l >= 0
	yyj901++
	if yyhl901 {
		yyb901 = yyj901 > l
	} else {
		yyb901 = r.CheckBreak()
	}
	if yyb901 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj901++
	if yyhl901 {
		yyb901 = yyj901 > l
	} else {
		yyb901 = r.CheckBreak()
	}
	if yyb901 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj901++
	if yyhl901 {
		yyb901 = yyj901 > l
	} else {
		yyb901 = r.CheckBreak()
	}
	if yyb901 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MountPath = ""
	} else {
		x.MountPath = string(r.DecodeString())
	}
	for {
		yyj901++
		if yyhl901 {
			yyb901 = yyj901 > l
		} else {
			yyb901 = r.CheckBreak()
		}
		if yyb901 {
			break
		}
		z.DecStructFieldNotFound(yyj901-1, "")
	}
	r.ReadEnd()
}

func (x *EnvVar) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym905 := z.EncBinary()
		_ = yym905
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep906 := !z.EncBinary()
			yy2arr906 := z.EncBasicHandle().StructToArray
			var yyq906 [3]bool
			_, _, _ = yysep906, yyq906, yy2arr906
			const yyr906 bool = false
			yyq906[1] = x.Value != ""
			yyq906[2] = x.ValueFrom != nil
			if yyr906 || yy2arr906 {
				r.EncodeArrayStart(3)
			} else {
				var yynn906 int = 1
				for _, b := range yyq906 {
					if b {
						yynn906++
					}
				}
				r.EncodeMapStart(yynn906)
			}
			if yyr906 || yy2arr906 {
				yym908 := z.EncBinary()
				_ = yym908
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				yym909 := z.EncBinary()
				_ = yym909
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr906 || yy2arr906 {
				if yyq906[1] {
					yym911 := z.EncBinary()
					_ = yym911
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq906[1] {
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					yym912 := z.EncBinary()
					_ = yym912
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr906 || yy2arr906 {
				if yyq906[2] {
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq906[2] {
					r.EncodeString(codecSelferC_UTF81234, string("valueFrom"))
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				}
			}
			if yysep906 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EnvVar) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym914 := z.DecBinary()
	_ = yym914
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl915 := r.ReadMapStart()
			if yyl915 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl915, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl915 := r.ReadArrayStart()
			if yyl915 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl915, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVar) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys916Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys916Slc
	var yyhl916 bool = l >= 0
	for yyj916 := 0; ; yyj916++ {
		if yyhl916 {
			if yyj916 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys916Slc = r.DecodeBytes(yys916Slc, true, true)
		yys916 := string(yys916Slc)
		switch yys916 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "valueFrom":
			if r.TryDecodeAsNil() {
				if x.ValueFrom != nil {
					x.ValueFrom = nil
				}
			} else {
				if x.ValueFrom == nil {
					x.ValueFrom = new(EnvVarSource)
				}
				x.ValueFrom.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys916)
		} // end switch yys916
	} // end for yyj916
	if !yyhl916 {
		r.ReadEnd()
	}
}

func (x *EnvVar) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj920 int
	var yyb920 bool
	var yyhl920 bool = l >= 0
	yyj920++
	if yyhl920 {
		yyb920 = yyj920 > l
	} else {
		yyb920 = r.CheckBreak()
	}
	if yyb920 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj920++
	if yyhl920 {
		yyb920 = yyj920 > l
	} else {
		yyb920 = r.CheckBreak()
	}
	if yyb920 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj920++
	if yyhl920 {
		yyb920 = yyj920 > l
	} else {
		yyb920 = r.CheckBreak()
	}
	if yyb920 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ValueFrom != nil {
			x.ValueFrom = nil
		}
	} else {
		if x.ValueFrom == nil {
			x.ValueFrom = new(EnvVarSource)
		}
		x.ValueFrom.CodecDecodeSelf(d)
	}
	for {
		yyj920++
		if yyhl920 {
			yyb920 = yyj920 > l
		} else {
			yyb920 = r.CheckBreak()
		}
		if yyb920 {
			break
		}
		z.DecStructFieldNotFound(yyj920-1, "")
	}
	r.ReadEnd()
}

func (x *EnvVarSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym924 := z.EncBinary()
		_ = yym924
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep925 := !z.EncBinary()
			yy2arr925 := z.EncBasicHandle().StructToArray
			var yyq925 [1]bool
			_, _, _ = yysep925, yyq925, yy2arr925
			const yyr925 bool = false
			if yyr925 || yy2arr925 {
				r.EncodeArrayStart(1)
			} else {
				var yynn925 int = 1
				for _, b := range yyq925 {
					if b {
						yynn925++
					}
				}
				r.EncodeMapStart(yynn925)
			}
			if yyr925 || yy2arr925 {
				if x.FieldRef == nil {
					r.EncodeNil()
				} else {
					x.FieldRef.CodecEncodeSelf(e)
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
				if x.FieldRef == nil {
					r.EncodeNil()
				} else {
					x.FieldRef.CodecEncodeSelf(e)
				}
			}
			if yysep925 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EnvVarSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym927 := z.DecBinary()
	_ = yym927
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl928 := r.ReadMapStart()
			if yyl928 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl928, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl928 := r.ReadArrayStart()
			if yyl928 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl928, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVarSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys929Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys929Slc
	var yyhl929 bool = l >= 0
	for yyj929 := 0; ; yyj929++ {
		if yyhl929 {
			if yyj929 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys929Slc = r.DecodeBytes(yys929Slc, true, true)
		yys929 := string(yys929Slc)
		switch yys929 {
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys929)
		} // end switch yys929
	} // end for yyj929
	if !yyhl929 {
		r.ReadEnd()
	}
}

func (x *EnvVarSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj931 int
	var yyb931 bool
	var yyhl931 bool = l >= 0
	yyj931++
	if yyhl931 {
		yyb931 = yyj931 > l
	} else {
		yyb931 = r.CheckBreak()
	}
	if yyb931 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	for {
		yyj931++
		if yyhl931 {
			yyb931 = yyj931 > l
		} else {
			yyb931 = r.CheckBreak()
		}
		if yyb931 {
			break
		}
		z.DecStructFieldNotFound(yyj931-1, "")
	}
	r.ReadEnd()
}

func (x *ObjectFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym933 := z.EncBinary()
		_ = yym933
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep934 := !z.EncBinary()
			yy2arr934 := z.EncBasicHandle().StructToArray
			var yyq934 [2]bool
			_, _, _ = yysep934, yyq934, yy2arr934
			const yyr934 bool = false
			if yyr934 || yy2arr934 {
				r.EncodeArrayStart(2)
			} else {
				var yynn934 int = 2
				for _, b := range yyq934 {
					if b {
						yynn934++
					}
				}
				r.EncodeMapStart(yynn934)
			}
			if yyr934 || yy2arr934 {
				yym936 := z.EncBinary()
				_ = yym936
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
				yym937 := z.EncBinary()
				_ = yym937
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			}
			if yyr934 || yy2arr934 {
				yym939 := z.EncBinary()
				_ = yym939
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
				yym940 := z.EncBinary()
				_ = yym940
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			}
			if yysep934 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ObjectFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym941 := z.DecBinary()
	_ = yym941
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl942 := r.ReadMapStart()
			if yyl942 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl942, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl942 := r.ReadArrayStart()
			if yyl942 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl942, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys943Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys943Slc
	var yyhl943 bool = l >= 0
	for yyj943 := 0; ; yyj943++ {
		if yyhl943 {
			if yyj943 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys943Slc = r.DecodeBytes(yys943Slc, true, true)
		yys943 := string(yys943Slc)
		switch yys943 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys943)
		} // end switch yys943
	} // end for yyj943
	if !yyhl943 {
		r.ReadEnd()
	}
}

func (x *ObjectFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj946 int
	var yyb946 bool
	var yyhl946 bool = l >= 0
	yyj946++
	if yyhl946 {
		yyb946 = yyj946 > l
	} else {
		yyb946 = r.CheckBreak()
	}
	if yyb946 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj946++
	if yyhl946 {
		yyb946 = yyj946 > l
	} else {
		yyb946 = r.CheckBreak()
	}
	if yyb946 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj946++
		if yyhl946 {
			yyb946 = yyj946 > l
		} else {
			yyb946 = r.CheckBreak()
		}
		if yyb946 {
			break
		}
		z.DecStructFieldNotFound(yyj946-1, "")
	}
	r.ReadEnd()
}

func (x *HTTPGetAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym949 := z.EncBinary()
		_ = yym949
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep950 := !z.EncBinary()
			yy2arr950 := z.EncBasicHandle().StructToArray
			var yyq950 [4]bool
			_, _, _ = yysep950, yyq950, yy2arr950
			const yyr950 bool = false
			yyq950[0] = x.Path != ""
			yyq950[1] = true
			yyq950[2] = x.Host != ""
			yyq950[3] = x.Scheme != ""
			if yyr950 || yy2arr950 {
				r.EncodeArrayStart(4)
			} else {
				var yynn950 int = 0
				for _, b := range yyq950 {
					if b {
						yynn950++
					}
				}
				r.EncodeMapStart(yynn950)
			}
			if yyr950 || yy2arr950 {
				if yyq950[0] {
					yym952 := z.EncBinary()
					_ = yym952
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq950[0] {
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					yym953 := z.EncBinary()
					_ = yym953
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr950 || yy2arr950 {
				if yyq950[1] {
					yy955 := &x.Port
					yym956 := z.EncBinary()
					_ = yym956
					if false {
					} else if z.HasExtensions() && z.EncExt(yy955) {
					} else if !yym956 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy955)
					} else {
						z.EncFallback(yy955)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq950[1] {
					r.EncodeString(codecSelferC_UTF81234, string("port"))
					yy957 := &x.Port
					yym958 := z.EncBinary()
					_ = yym958
					if false {
					} else if z.HasExtensions() && z.EncExt(yy957) {
					} else if !yym958 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy957)
					} else {
						z.EncFallback(yy957)
					}
				}
			}
			if yyr950 || yy2arr950 {
				if yyq950[2] {
					yym960 := z.EncBinary()
					_ = yym960
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq950[2] {
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					yym961 := z.EncBinary()
					_ = yym961
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr950 || yy2arr950 {
				if yyq950[3] {
					x.Scheme.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq950[3] {
					r.EncodeString(codecSelferC_UTF81234, string("scheme"))
					x.Scheme.CodecEncodeSelf(e)
				}
			}
			if yysep950 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *HTTPGetAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym963 := z.DecBinary()
	_ = yym963
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl964 := r.ReadMapStart()
			if yyl964 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl964, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl964 := r.ReadArrayStart()
			if yyl964 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl964, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPGetAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys965Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys965Slc
	var yyhl965 bool = l >= 0
	for yyj965 := 0; ; yyj965++ {
		if yyhl965 {
			if yyj965 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys965Slc = r.DecodeBytes(yys965Slc, true, true)
		yys965 := string(yys965Slc)
		switch yys965 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg5_util.IntOrString{}
			} else {
				yyv967 := &x.Port
				yym968 := z.DecBinary()
				_ = yym968
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv967) {
				} else if !yym968 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv967)
				} else {
					z.DecFallback(yyv967, false)
				}
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "scheme":
			if r.TryDecodeAsNil() {
				x.Scheme = ""
			} else {
				x.Scheme = URIScheme(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys965)
		} // end switch yys965
	} // end for yyj965
	if !yyhl965 {
		r.ReadEnd()
	}
}

func (x *HTTPGetAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj971 int
	var yyb971 bool
	var yyhl971 bool = l >= 0
	yyj971++
	if yyhl971 {
		yyb971 = yyj971 > l
	} else {
		yyb971 = r.CheckBreak()
	}
	if yyb971 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj971++
	if yyhl971 {
		yyb971 = yyj971 > l
	} else {
		yyb971 = r.CheckBreak()
	}
	if yyb971 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Port = pkg5_util.IntOrString{}
	} else {
		yyv973 := &x.Port
		yym974 := z.DecBinary()
		_ = yym974
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv973) {
		} else if !yym974 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv973)
		} else {
			z.DecFallback(yyv973, false)
		}
	}
	yyj971++
	if yyhl971 {
		yyb971 = yyj971 > l
	} else {
		yyb971 = r.CheckBreak()
	}
	if yyb971 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	yyj971++
	if yyhl971 {
		yyb971 = yyj971 > l
	} else {
		yyb971 = r.CheckBreak()
	}
	if yyb971 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Scheme = ""
	} else {
		x.Scheme = URIScheme(r.DecodeString())
	}
	for {
		yyj971++
		if yyhl971 {
			yyb971 = yyj971 > l
		} else {
			yyb971 = r.CheckBreak()
		}
		if yyb971 {
			break
		}
		z.DecStructFieldNotFound(yyj971-1, "")
	}
	r.ReadEnd()
}

func (x URIScheme) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym977 := z.EncBinary()
	_ = yym977
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *URIScheme) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym978 := z.DecBinary()
	_ = yym978
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *TCPSocketAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym979 := z.EncBinary()
		_ = yym979
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep980 := !z.EncBinary()
			yy2arr980 := z.EncBasicHandle().StructToArray
			var yyq980 [1]bool
			_, _, _ = yysep980, yyq980, yy2arr980
			const yyr980 bool = false
			yyq980[0] = true
			if yyr980 || yy2arr980 {
				r.EncodeArrayStart(1)
			} else {
				var yynn980 int = 0
				for _, b := range yyq980 {
					if b {
						yynn980++
					}
				}
				r.EncodeMapStart(yynn980)
			}
			if yyr980 || yy2arr980 {
				if yyq980[0] {
					yy982 := &x.Port
					yym983 := z.EncBinary()
					_ = yym983
					if false {
					} else if z.HasExtensions() && z.EncExt(yy982) {
					} else if !yym983 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy982)
					} else {
						z.EncFallback(yy982)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq980[0] {
					r.EncodeString(codecSelferC_UTF81234, string("port"))
					yy984 := &x.Port
					yym985 := z.EncBinary()
					_ = yym985
					if false {
					} else if z.HasExtensions() && z.EncExt(yy984) {
					} else if !yym985 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy984)
					} else {
						z.EncFallback(yy984)
					}
				}
			}
			if yysep980 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *TCPSocketAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym986 := z.DecBinary()
	_ = yym986
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl987 := r.ReadMapStart()
			if yyl987 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl987, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl987 := r.ReadArrayStart()
			if yyl987 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl987, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *TCPSocketAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys988Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys988Slc
	var yyhl988 bool = l >= 0
	for yyj988 := 0; ; yyj988++ {
		if yyhl988 {
			if yyj988 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys988Slc = r.DecodeBytes(yys988Slc, true, true)
		yys988 := string(yys988Slc)
		switch yys988 {
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg5_util.IntOrString{}
			} else {
				yyv989 := &x.Port
				yym990 := z.DecBinary()
				_ = yym990
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv989) {
				} else if !yym990 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv989)
				} else {
					z.DecFallback(yyv989, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys988)
		} // end switch yys988
	} // end for yyj988
	if !yyhl988 {
		r.ReadEnd()
	}
}

func (x *TCPSocketAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj991 int
	var yyb991 bool
	var yyhl991 bool = l >= 0
	yyj991++
	if yyhl991 {
		yyb991 = yyj991 > l
	} else {
		yyb991 = r.CheckBreak()
	}
	if yyb991 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Port = pkg5_util.IntOrString{}
	} else {
		yyv992 := &x.Port
		yym993 := z.DecBinary()
		_ = yym993
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv992) {
		} else if !yym993 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv992)
		} else {
			z.DecFallback(yyv992, false)
		}
	}
	for {
		yyj991++
		if yyhl991 {
			yyb991 = yyj991 > l
		} else {
			yyb991 = r.CheckBreak()
		}
		if yyb991 {
			break
		}
		z.DecStructFieldNotFound(yyj991-1, "")
	}
	r.ReadEnd()
}

func (x *ExecAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym994 := z.EncBinary()
		_ = yym994
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep995 := !z.EncBinary()
			yy2arr995 := z.EncBasicHandle().StructToArray
			var yyq995 [1]bool
			_, _, _ = yysep995, yyq995, yy2arr995
			const yyr995 bool = false
			yyq995[0] = len(x.Command) != 0
			if yyr995 || yy2arr995 {
				r.EncodeArrayStart(1)
			} else {
				var yynn995 int = 0
				for _, b := range yyq995 {
					if b {
						yynn995++
					}
				}
				r.EncodeMapStart(yynn995)
			}
			if yyr995 || yy2arr995 {
				if yyq995[0] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym997 := z.EncBinary()
						_ = yym997
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq995[0] {
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym998 := z.EncBinary()
						_ = yym998
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yysep995 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ExecAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym999 := z.DecBinary()
	_ = yym999
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1000 := r.ReadMapStart()
			if yyl1000 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1000, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1000 := r.ReadArrayStart()
			if yyl1000 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1000, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExecAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1001Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1001Slc
	var yyhl1001 bool = l >= 0
	for yyj1001 := 0; ; yyj1001++ {
		if yyhl1001 {
			if yyj1001 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1001Slc = r.DecodeBytes(yys1001Slc, true, true)
		yys1001 := string(yys1001Slc)
		switch yys1001 {
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1002 := &x.Command
				yym1003 := z.DecBinary()
				_ = yym1003
				if false {
				} else {
					z.F.DecSliceStringX(yyv1002, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1001)
		} // end switch yys1001
	} // end for yyj1001
	if !yyhl1001 {
		r.ReadEnd()
	}
}

func (x *ExecAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1004 int
	var yyb1004 bool
	var yyhl1004 bool = l >= 0
	yyj1004++
	if yyhl1004 {
		yyb1004 = yyj1004 > l
	} else {
		yyb1004 = r.CheckBreak()
	}
	if yyb1004 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1005 := &x.Command
		yym1006 := z.DecBinary()
		_ = yym1006
		if false {
		} else {
			z.F.DecSliceStringX(yyv1005, false, d)
		}
	}
	for {
		yyj1004++
		if yyhl1004 {
			yyb1004 = yyj1004 > l
		} else {
			yyb1004 = r.CheckBreak()
		}
		if yyb1004 {
			break
		}
		z.DecStructFieldNotFound(yyj1004-1, "")
	}
	r.ReadEnd()
}

func (x *Probe) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1007 := z.EncBinary()
		_ = yym1007
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1008 := !z.EncBinary()
			yy2arr1008 := z.EncBasicHandle().StructToArray
			var yyq1008 [8]bool
			_, _, _ = yysep1008, yyq1008, yy2arr1008
			const yyr1008 bool = false
			yyq1008[0] = x.Handler.Exec != nil && x.Exec != nil
			yyq1008[1] = x.Handler.HTTPGet != nil && x.HTTPGet != nil
			yyq1008[2] = x.Handler.TCPSocket != nil && x.TCPSocket != nil
			yyq1008[3] = x.InitialDelaySeconds != 0
			yyq1008[4] = x.TimeoutSeconds != 0
			yyq1008[5] = x.PeriodSeconds != 0
			yyq1008[6] = x.SuccessThreshold != 0
			yyq1008[7] = x.FailureThreshold != 0
			if yyr1008 || yy2arr1008 {
				r.EncodeArrayStart(8)
			} else {
				var yynn1008 int = 0
				for _, b := range yyq1008 {
					if b {
						yynn1008++
					}
				}
				r.EncodeMapStart(yynn1008)
			}
			var yyn1009 bool
			if x.Handler.Exec == nil {
				yyn1009 = true
				goto LABEL1009
			}
		LABEL1009:
			if yyr1008 || yy2arr1008 {
				if yyn1009 {
					r.EncodeNil()
				} else {
					if yyq1008[0] {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1008[0] {
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					if yyn1009 {
						r.EncodeNil()
					} else {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1010 bool
			if x.Handler.HTTPGet == nil {
				yyn1010 = true
				goto LABEL1010
			}
		LABEL1010:
			if yyr1008 || yy2arr1008 {
				if yyn1010 {
					r.EncodeNil()
				} else {
					if yyq1008[1] {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1008[1] {
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					if yyn1010 {
						r.EncodeNil()
					} else {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1011 bool
			if x.Handler.TCPSocket == nil {
				yyn1011 = true
				goto LABEL1011
			}
		LABEL1011:
			if yyr1008 || yy2arr1008 {
				if yyn1011 {
					r.EncodeNil()
				} else {
					if yyq1008[2] {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1008[2] {
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					if yyn1011 {
						r.EncodeNil()
					} else {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr1008 || yy2arr1008 {
				if yyq1008[3] {
					yym1013 := z.EncBinary()
					_ = yym1013
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1008[3] {
					r.EncodeString(codecSelferC_UTF81234, string("initialDelaySeconds"))
					yym1014 := z.EncBinary()
					_ = yym1014
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				}
			}
			if yyr1008 || yy2arr1008 {
				if yyq1008[4] {
					yym1016 := z.EncBinary()
					_ = yym1016
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1008[4] {
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					yym1017 := z.EncBinary()
					_ = yym1017
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				}
			}
			if yyr1008 || yy2arr1008 {
				if yyq1008[5] {
					yym1019 := z.EncBinary()
					_ = yym1019
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1008[5] {
					r.EncodeString(codecSelferC_UTF81234, string("periodSeconds"))
					yym1020 := z.EncBinary()
					_ = yym1020
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				}
			}
			if yyr1008 || yy2arr1008 {
				if yyq1008[6] {
					yym1022 := z.EncBinary()
					_ = yym1022
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1008[6] {
					r.EncodeString(codecSelferC_UTF81234, string("successThreshold"))
					yym1023 := z.EncBinary()
					_ = yym1023
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				}
			}
			if yyr1008 || yy2arr1008 {
				if yyq1008[7] {
					yym1025 := z.EncBinary()
					_ = yym1025
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1008[7] {
					r.EncodeString(codecSelferC_UTF81234, string("failureThreshold"))
					yym1026 := z.EncBinary()
					_ = yym1026
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				}
			}
			if yysep1008 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Probe) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1027 := z.DecBinary()
	_ = yym1027
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1028 := r.ReadMapStart()
			if yyl1028 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1028, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1028 := r.ReadArrayStart()
			if yyl1028 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1028, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Probe) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1029Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1029Slc
	var yyhl1029 bool = l >= 0
	for yyj1029 := 0; ; yyj1029++ {
		if yyhl1029 {
			if yyj1029 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1029Slc = r.DecodeBytes(yys1029Slc, true, true)
		yys1029 := string(yys1029Slc)
		switch yys1029 {
		case "exec":
			if x.Handler.Exec == nil {
				x.Handler.Exec = new(ExecAction)
			}
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if x.Handler.HTTPGet == nil {
				x.Handler.HTTPGet = new(HTTPGetAction)
			}
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if x.Handler.TCPSocket == nil {
				x.Handler.TCPSocket = new(TCPSocketAction)
			}
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		case "initialDelaySeconds":
			if r.TryDecodeAsNil() {
				x.InitialDelaySeconds = 0
			} else {
				x.InitialDelaySeconds = int64(r.DecodeInt(64))
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				x.TimeoutSeconds = 0
			} else {
				x.TimeoutSeconds = int64(r.DecodeInt(64))
			}
		case "periodSeconds":
			if r.TryDecodeAsNil() {
				x.PeriodSeconds = 0
			} else {
				x.PeriodSeconds = int64(r.DecodeInt(64))
			}
		case "successThreshold":
			if r.TryDecodeAsNil() {
				x.SuccessThreshold = 0
			} else {
				x.SuccessThreshold = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "failureThreshold":
			if r.TryDecodeAsNil() {
				x.FailureThreshold = 0
			} else {
				x.FailureThreshold = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1029)
		} // end switch yys1029
	} // end for yyj1029
	if !yyhl1029 {
		r.ReadEnd()
	}
}

func (x *Probe) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1038 int
	var yyb1038 bool
	var yyhl1038 bool = l >= 0
	yyj1038++
	if yyhl1038 {
		yyb1038 = yyj1038 > l
	} else {
		yyb1038 = r.CheckBreak()
	}
	if yyb1038 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	yyj1038++
	if yyhl1038 {
		yyb1038 = yyj1038 > l
	} else {
		yyb1038 = r.CheckBreak()
	}
	if yyb1038 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	yyj1038++
	if yyhl1038 {
		yyb1038 = yyj1038 > l
	} else {
		yyb1038 = r.CheckBreak()
	}
	if yyb1038 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	yyj1038++
	if yyhl1038 {
		yyb1038 = yyj1038 > l
	} else {
		yyb1038 = r.CheckBreak()
	}
	if yyb1038 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.InitialDelaySeconds = 0
	} else {
		x.InitialDelaySeconds = int64(r.DecodeInt(64))
	}
	yyj1038++
	if yyhl1038 {
		yyb1038 = yyj1038 > l
	} else {
		yyb1038 = r.CheckBreak()
	}
	if yyb1038 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TimeoutSeconds = 0
	} else {
		x.TimeoutSeconds = int64(r.DecodeInt(64))
	}
	yyj1038++
	if yyhl1038 {
		yyb1038 = yyj1038 > l
	} else {
		yyb1038 = r.CheckBreak()
	}
	if yyb1038 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.PeriodSeconds = 0
	} else {
		x.PeriodSeconds = int64(r.DecodeInt(64))
	}
	yyj1038++
	if yyhl1038 {
		yyb1038 = yyj1038 > l
	} else {
		yyb1038 = r.CheckBreak()
	}
	if yyb1038 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SuccessThreshold = 0
	} else {
		x.SuccessThreshold = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1038++
	if yyhl1038 {
		yyb1038 = yyj1038 > l
	} else {
		yyb1038 = r.CheckBreak()
	}
	if yyb1038 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FailureThreshold = 0
	} else {
		x.FailureThreshold = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj1038++
		if yyhl1038 {
			yyb1038 = yyj1038 > l
		} else {
			yyb1038 = r.CheckBreak()
		}
		if yyb1038 {
			break
		}
		z.DecStructFieldNotFound(yyj1038-1, "")
	}
	r.ReadEnd()
}

func (x PullPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1047 := z.EncBinary()
	_ = yym1047
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PullPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1048 := z.DecBinary()
	_ = yym1048
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Capability) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1049 := z.EncBinary()
	_ = yym1049
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Capability) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1050 := z.DecBinary()
	_ = yym1050
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Capabilities) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1051 := z.EncBinary()
		_ = yym1051
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1052 := !z.EncBinary()
			yy2arr1052 := z.EncBasicHandle().StructToArray
			var yyq1052 [2]bool
			_, _, _ = yysep1052, yyq1052, yy2arr1052
			const yyr1052 bool = false
			yyq1052[0] = len(x.Add) != 0
			yyq1052[1] = len(x.Drop) != 0
			if yyr1052 || yy2arr1052 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1052 int = 0
				for _, b := range yyq1052 {
					if b {
						yynn1052++
					}
				}
				r.EncodeMapStart(yynn1052)
			}
			if yyr1052 || yy2arr1052 {
				if yyq1052[0] {
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1054 := z.EncBinary()
						_ = yym1054
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1052[0] {
					r.EncodeString(codecSelferC_UTF81234, string("add"))
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1055 := z.EncBinary()
						_ = yym1055
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				}
			}
			if yyr1052 || yy2arr1052 {
				if yyq1052[1] {
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1057 := z.EncBinary()
						_ = yym1057
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1052[1] {
					r.EncodeString(codecSelferC_UTF81234, string("drop"))
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1058 := z.EncBinary()
						_ = yym1058
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				}
			}
			if yysep1052 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Capabilities) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1059 := z.DecBinary()
	_ = yym1059
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1060 := r.ReadMapStart()
			if yyl1060 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1060, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1060 := r.ReadArrayStart()
			if yyl1060 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1060, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Capabilities) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1061Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1061Slc
	var yyhl1061 bool = l >= 0
	for yyj1061 := 0; ; yyj1061++ {
		if yyhl1061 {
			if yyj1061 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1061Slc = r.DecodeBytes(yys1061Slc, true, true)
		yys1061 := string(yys1061Slc)
		switch yys1061 {
		case "add":
			if r.TryDecodeAsNil() {
				x.Add = nil
			} else {
				yyv1062 := &x.Add
				yym1063 := z.DecBinary()
				_ = yym1063
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1062), d)
				}
			}
		case "drop":
			if r.TryDecodeAsNil() {
				x.Drop = nil
			} else {
				yyv1064 := &x.Drop
				yym1065 := z.DecBinary()
				_ = yym1065
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1064), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1061)
		} // end switch yys1061
	} // end for yyj1061
	if !yyhl1061 {
		r.ReadEnd()
	}
}

func (x *Capabilities) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1066 int
	var yyb1066 bool
	var yyhl1066 bool = l >= 0
	yyj1066++
	if yyhl1066 {
		yyb1066 = yyj1066 > l
	} else {
		yyb1066 = r.CheckBreak()
	}
	if yyb1066 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Add = nil
	} else {
		yyv1067 := &x.Add
		yym1068 := z.DecBinary()
		_ = yym1068
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1067), d)
		}
	}
	yyj1066++
	if yyhl1066 {
		yyb1066 = yyj1066 > l
	} else {
		yyb1066 = r.CheckBreak()
	}
	if yyb1066 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Drop = nil
	} else {
		yyv1069 := &x.Drop
		yym1070 := z.DecBinary()
		_ = yym1070
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1069), d)
		}
	}
	for {
		yyj1066++
		if yyhl1066 {
			yyb1066 = yyj1066 > l
		} else {
			yyb1066 = r.CheckBreak()
		}
		if yyb1066 {
			break
		}
		z.DecStructFieldNotFound(yyj1066-1, "")
	}
	r.ReadEnd()
}

func (x *ResourceRequirements) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1071 := z.EncBinary()
		_ = yym1071
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1072 := !z.EncBinary()
			yy2arr1072 := z.EncBasicHandle().StructToArray
			var yyq1072 [2]bool
			_, _, _ = yysep1072, yyq1072, yy2arr1072
			const yyr1072 bool = false
			yyq1072[0] = len(x.Limits) != 0
			yyq1072[1] = len(x.Requests) != 0
			if yyr1072 || yy2arr1072 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1072 int = 0
				for _, b := range yyq1072 {
					if b {
						yynn1072++
					}
				}
				r.EncodeMapStart(yynn1072)
			}
			if yyr1072 || yy2arr1072 {
				if yyq1072[0] {
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1072[0] {
					r.EncodeString(codecSelferC_UTF81234, string("limits"))
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1072 || yy2arr1072 {
				if yyq1072[1] {
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1072[1] {
					r.EncodeString(codecSelferC_UTF81234, string("requests"))
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				}
			}
			if yysep1072 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ResourceRequirements) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1075 := z.DecBinary()
	_ = yym1075
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1076 := r.ReadMapStart()
			if yyl1076 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1076, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1076 := r.ReadArrayStart()
			if yyl1076 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1076, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceRequirements) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1077Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1077Slc
	var yyhl1077 bool = l >= 0
	for yyj1077 := 0; ; yyj1077++ {
		if yyhl1077 {
			if yyj1077 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1077Slc = r.DecodeBytes(yys1077Slc, true, true)
		yys1077 := string(yys1077Slc)
		switch yys1077 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv1078 := &x.Limits
				yyv1078.CodecDecodeSelf(d)
			}
		case "requests":
			if r.TryDecodeAsNil() {
				x.Requests = nil
			} else {
				yyv1079 := &x.Requests
				yyv1079.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1077)
		} // end switch yys1077
	} // end for yyj1077
	if !yyhl1077 {
		r.ReadEnd()
	}
}

func (x *ResourceRequirements) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1080 int
	var yyb1080 bool
	var yyhl1080 bool = l >= 0
	yyj1080++
	if yyhl1080 {
		yyb1080 = yyj1080 > l
	} else {
		yyb1080 = r.CheckBreak()
	}
	if yyb1080 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv1081 := &x.Limits
		yyv1081.CodecDecodeSelf(d)
	}
	yyj1080++
	if yyhl1080 {
		yyb1080 = yyj1080 > l
	} else {
		yyb1080 = r.CheckBreak()
	}
	if yyb1080 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Requests = nil
	} else {
		yyv1082 := &x.Requests
		yyv1082.CodecDecodeSelf(d)
	}
	for {
		yyj1080++
		if yyhl1080 {
			yyb1080 = yyj1080 > l
		} else {
			yyb1080 = r.CheckBreak()
		}
		if yyb1080 {
			break
		}
		z.DecStructFieldNotFound(yyj1080-1, "")
	}
	r.ReadEnd()
}

func (x *Container) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1083 := z.EncBinary()
		_ = yym1083
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1084 := !z.EncBinary()
			yy2arr1084 := z.EncBasicHandle().StructToArray
			var yyq1084 [18]bool
			_, _, _ = yysep1084, yyq1084, yy2arr1084
			const yyr1084 bool = false
			yyq1084[2] = len(x.Command) != 0
			yyq1084[3] = len(x.Args) != 0
			yyq1084[4] = x.WorkingDir != ""
			yyq1084[5] = len(x.Ports) != 0
			yyq1084[6] = len(x.Env) != 0
			yyq1084[7] = true
			yyq1084[8] = len(x.VolumeMounts) != 0
			yyq1084[9] = x.LivenessProbe != nil
			yyq1084[10] = x.ReadinessProbe != nil
			yyq1084[11] = x.Lifecycle != nil
			yyq1084[12] = x.TerminationMessagePath != ""
			yyq1084[14] = x.SecurityContext != nil
			yyq1084[15] = x.Stdin != false
			yyq1084[16] = x.StdinOnce != false
			yyq1084[17] = x.TTY != false
			if yyr1084 || yy2arr1084 {
				r.EncodeArrayStart(18)
			} else {
				var yynn1084 int = 3
				for _, b := range yyq1084 {
					if b {
						yynn1084++
					}
				}
				r.EncodeMapStart(yynn1084)
			}
			if yyr1084 || yy2arr1084 {
				yym1086 := z.EncBinary()
				_ = yym1086
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				yym1087 := z.EncBinary()
				_ = yym1087
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1084 || yy2arr1084 {
				yym1089 := z.EncBinary()
				_ = yym1089
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				yym1090 := z.EncBinary()
				_ = yym1090
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1084 || yy2arr1084 {
				if yyq1084[2] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1092 := z.EncBinary()
						_ = yym1092
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1084[2] {
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1093 := z.EncBinary()
						_ = yym1093
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1084 || yy2arr1084 {
				if yyq1084[3] {
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1095 := z.EncBinary()
						_ = yym1095
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1084[3] {
					r.EncodeString(codecSelferC_UTF81234, string("args"))
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1096 := z.EncBinary()
						_ = yym1096
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				}
			}
			if yyr1084 || yy2arr1084 {
				if yyq1084[4] {
					yym1098 := z.EncBinary()
					_ = yym1098
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1084[4] {
					r.EncodeString(codecSelferC_UTF81234, string("workingDir"))
					yym1099 := z.EncBinary()
					_ = yym1099
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				}
			}
			if yyr1084 || yy2arr1084 {
				if yyq1084[5] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1101 := z.EncBinary()
						_ = yym1101
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1084[5] {
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1102 := z.EncBinary()
						_ = yym1102
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr1084 || yy2arr1084 {
				if yyq1084[6] {
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1104 := z.EncBinary()
						_ = yym1104
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1084[6] {
					r.EncodeString(codecSelferC_UTF81234, string("env"))
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1105 := z.EncBinary()
						_ = yym1105
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				}
			}
			if yyr1084 || yy2arr1084 {
				if yyq1084[7] {
					yy1107 := &x.Resources
					yy1107.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1084[7] {
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					yy1108 := &x.Resources
					yy1108.CodecEncodeSelf(e)
				}
			}
			if yyr1084 || yy2arr1084 {
				if yyq1084[8] {
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1110 := z.EncBinary()
						_ = yym1110
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1084[8] {
					r.EncodeString(codecSelferC_UTF81234, string("volumeMounts"))
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1111 := z.EncBinary()
						_ = yym1111
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				}
			}
			if yyr1084 || yy2arr1084 {
				if yyq1084[9] {
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1084[9] {
					r.EncodeString(codecSelferC_UTF81234, string("livenessProbe"))
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1084 || yy2arr1084 {
				if yyq1084[10] {
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1084[10] {
					r.EncodeString(codecSelferC_UTF81234, string("readinessProbe"))
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1084 || yy2arr1084 {
				if yyq1084[11] {
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1084[11] {
					r.EncodeString(codecSelferC_UTF81234, string("lifecycle"))
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1084 || yy2arr1084 {
				if yyq1084[12] {
					yym1116 := z.EncBinary()
					_ = yym1116
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1084[12] {
					r.EncodeString(codecSelferC_UTF81234, string("terminationMessagePath"))
					yym1117 := z.EncBinary()
					_ = yym1117
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				}
			}
			if yyr1084 || yy2arr1084 {
				x.ImagePullPolicy.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("imagePullPolicy"))
				x.ImagePullPolicy.CodecEncodeSelf(e)
			}
			if yyr1084 || yy2arr1084 {
				if yyq1084[14] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1084[14] {
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1084 || yy2arr1084 {
				if yyq1084[15] {
					yym1121 := z.EncBinary()
					_ = yym1121
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1084[15] {
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					yym1122 := z.EncBinary()
					_ = yym1122
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr1084 || yy2arr1084 {
				if yyq1084[16] {
					yym1124 := z.EncBinary()
					_ = yym1124
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1084[16] {
					r.EncodeString(codecSelferC_UTF81234, string("stdinOnce"))
					yym1125 := z.EncBinary()
					_ = yym1125
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				}
			}
			if yyr1084 || yy2arr1084 {
				if yyq1084[17] {
					yym1127 := z.EncBinary()
					_ = yym1127
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1084[17] {
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					yym1128 := z.EncBinary()
					_ = yym1128
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yysep1084 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Container) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1129 := z.DecBinary()
	_ = yym1129
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1130 := r.ReadMapStart()
			if yyl1130 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1130, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1130 := r.ReadArrayStart()
			if yyl1130 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1130, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Container) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1131Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1131Slc
	var yyhl1131 bool = l >= 0
	for yyj1131 := 0; ; yyj1131++ {
		if yyhl1131 {
			if yyj1131 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1131Slc = r.DecodeBytes(yys1131Slc, true, true)
		yys1131 := string(yys1131Slc)
		switch yys1131 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1134 := &x.Command
				yym1135 := z.DecBinary()
				_ = yym1135
				if false {
				} else {
					z.F.DecSliceStringX(yyv1134, false, d)
				}
			}
		case "args":
			if r.TryDecodeAsNil() {
				x.Args = nil
			} else {
				yyv1136 := &x.Args
				yym1137 := z.DecBinary()
				_ = yym1137
				if false {
				} else {
					z.F.DecSliceStringX(yyv1136, false, d)
				}
			}
		case "workingDir":
			if r.TryDecodeAsNil() {
				x.WorkingDir = ""
			} else {
				x.WorkingDir = string(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1139 := &x.Ports
				yym1140 := z.DecBinary()
				_ = yym1140
				if false {
				} else {
					h.decSliceContainerPort((*[]ContainerPort)(yyv1139), d)
				}
			}
		case "env":
			if r.TryDecodeAsNil() {
				x.Env = nil
			} else {
				yyv1141 := &x.Env
				yym1142 := z.DecBinary()
				_ = yym1142
				if false {
				} else {
					h.decSliceEnvVar((*[]EnvVar)(yyv1141), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv1143 := &x.Resources
				yyv1143.CodecDecodeSelf(d)
			}
		case "volumeMounts":
			if r.TryDecodeAsNil() {
				x.VolumeMounts = nil
			} else {
				yyv1144 := &x.VolumeMounts
				yym1145 := z.DecBinary()
				_ = yym1145
				if false {
				} else {
					h.decSliceVolumeMount((*[]VolumeMount)(yyv1144), d)
				}
			}
		case "livenessProbe":
			if r.TryDecodeAsNil() {
				if x.LivenessProbe != nil {
					x.LivenessProbe = nil
				}
			} else {
				if x.LivenessProbe == nil {
					x.LivenessProbe = new(Probe)
				}
				x.LivenessProbe.CodecDecodeSelf(d)
			}
		case "readinessProbe":
			if r.TryDecodeAsNil() {
				if x.ReadinessProbe != nil {
					x.ReadinessProbe = nil
				}
			} else {
				if x.ReadinessProbe == nil {
					x.ReadinessProbe = new(Probe)
				}
				x.ReadinessProbe.CodecDecodeSelf(d)
			}
		case "lifecycle":
			if r.TryDecodeAsNil() {
				if x.Lifecycle != nil {
					x.Lifecycle = nil
				}
			} else {
				if x.Lifecycle == nil {
					x.Lifecycle = new(Lifecycle)
				}
				x.Lifecycle.CodecDecodeSelf(d)
			}
		case "terminationMessagePath":
			if r.TryDecodeAsNil() {
				x.TerminationMessagePath = ""
			} else {
				x.TerminationMessagePath = string(r.DecodeString())
			}
		case "imagePullPolicy":
			if r.TryDecodeAsNil() {
				x.ImagePullPolicy = ""
			} else {
				x.ImagePullPolicy = PullPolicy(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(SecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdinOnce":
			if r.TryDecodeAsNil() {
				x.StdinOnce = false
			} else {
				x.StdinOnce = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1131)
		} // end switch yys1131
	} // end for yyj1131
	if !yyhl1131 {
		r.ReadEnd()
	}
}

func (x *Container) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1155 int
	var yyb1155 bool
	var yyhl1155 bool = l >= 0
	yyj1155++
	if yyhl1155 {
		yyb1155 = yyj1155 > l
	} else {
		yyb1155 = r.CheckBreak()
	}
	if yyb1155 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1155++
	if yyhl1155 {
		yyb1155 = yyj1155 > l
	} else {
		yyb1155 = r.CheckBreak()
	}
	if yyb1155 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1155++
	if yyhl1155 {
		yyb1155 = yyj1155 > l
	} else {
		yyb1155 = r.CheckBreak()
	}
	if yyb1155 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1158 := &x.Command
		yym1159 := z.DecBinary()
		_ = yym1159
		if false {
		} else {
			z.F.DecSliceStringX(yyv1158, false, d)
		}
	}
	yyj1155++
	if yyhl1155 {
		yyb1155 = yyj1155 > l
	} else {
		yyb1155 = r.CheckBreak()
	}
	if yyb1155 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Args = nil
	} else {
		yyv1160 := &x.Args
		yym1161 := z.DecBinary()
		_ = yym1161
		if false {
		} else {
			z.F.DecSliceStringX(yyv1160, false, d)
		}
	}
	yyj1155++
	if yyhl1155 {
		yyb1155 = yyj1155 > l
	} else {
		yyb1155 = r.CheckBreak()
	}
	if yyb1155 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.WorkingDir = ""
	} else {
		x.WorkingDir = string(r.DecodeString())
	}
	yyj1155++
	if yyhl1155 {
		yyb1155 = yyj1155 > l
	} else {
		yyb1155 = r.CheckBreak()
	}
	if yyb1155 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1163 := &x.Ports
		yym1164 := z.DecBinary()
		_ = yym1164
		if false {
		} else {
			h.decSliceContainerPort((*[]ContainerPort)(yyv1163), d)
		}
	}
	yyj1155++
	if yyhl1155 {
		yyb1155 = yyj1155 > l
	} else {
		yyb1155 = r.CheckBreak()
	}
	if yyb1155 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Env = nil
	} else {
		yyv1165 := &x.Env
		yym1166 := z.DecBinary()
		_ = yym1166
		if false {
		} else {
			h.decSliceEnvVar((*[]EnvVar)(yyv1165), d)
		}
	}
	yyj1155++
	if yyhl1155 {
		yyb1155 = yyj1155 > l
	} else {
		yyb1155 = r.CheckBreak()
	}
	if yyb1155 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv1167 := &x.Resources
		yyv1167.CodecDecodeSelf(d)
	}
	yyj1155++
	if yyhl1155 {
		yyb1155 = yyj1155 > l
	} else {
		yyb1155 = r.CheckBreak()
	}
	if yyb1155 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.VolumeMounts = nil
	} else {
		yyv1168 := &x.VolumeMounts
		yym1169 := z.DecBinary()
		_ = yym1169
		if false {
		} else {
			h.decSliceVolumeMount((*[]VolumeMount)(yyv1168), d)
		}
	}
	yyj1155++
	if yyhl1155 {
		yyb1155 = yyj1155 > l
	} else {
		yyb1155 = r.CheckBreak()
	}
	if yyb1155 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.LivenessProbe != nil {
			x.LivenessProbe = nil
		}
	} else {
		if x.LivenessProbe == nil {
			x.LivenessProbe = new(Probe)
		}
		x.LivenessProbe.CodecDecodeSelf(d)
	}
	yyj1155++
	if yyhl1155 {
		yyb1155 = yyj1155 > l
	} else {
		yyb1155 = r.CheckBreak()
	}
	if yyb1155 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ReadinessProbe != nil {
			x.ReadinessProbe = nil
		}
	} else {
		if x.ReadinessProbe == nil {
			x.ReadinessProbe = new(Probe)
		}
		x.ReadinessProbe.CodecDecodeSelf(d)
	}
	yyj1155++
	if yyhl1155 {
		yyb1155 = yyj1155 > l
	} else {
		yyb1155 = r.CheckBreak()
	}
	if yyb1155 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Lifecycle != nil {
			x.Lifecycle = nil
		}
	} else {
		if x.Lifecycle == nil {
			x.Lifecycle = new(Lifecycle)
		}
		x.Lifecycle.CodecDecodeSelf(d)
	}
	yyj1155++
	if yyhl1155 {
		yyb1155 = yyj1155 > l
	} else {
		yyb1155 = r.CheckBreak()
	}
	if yyb1155 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TerminationMessagePath = ""
	} else {
		x.TerminationMessagePath = string(r.DecodeString())
	}
	yyj1155++
	if yyhl1155 {
		yyb1155 = yyj1155 > l
	} else {
		yyb1155 = r.CheckBreak()
	}
	if yyb1155 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ImagePullPolicy = ""
	} else {
		x.ImagePullPolicy = PullPolicy(r.DecodeString())
	}
	yyj1155++
	if yyhl1155 {
		yyb1155 = yyj1155 > l
	} else {
		yyb1155 = r.CheckBreak()
	}
	if yyb1155 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(SecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1155++
	if yyhl1155 {
		yyb1155 = yyj1155 > l
	} else {
		yyb1155 = r.CheckBreak()
	}
	if yyb1155 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj1155++
	if yyhl1155 {
		yyb1155 = yyj1155 > l
	} else {
		yyb1155 = r.CheckBreak()
	}
	if yyb1155 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.StdinOnce = false
	} else {
		x.StdinOnce = bool(r.DecodeBool())
	}
	yyj1155++
	if yyhl1155 {
		yyb1155 = yyj1155 > l
	} else {
		yyb1155 = r.CheckBreak()
	}
	if yyb1155 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	for {
		yyj1155++
		if yyhl1155 {
			yyb1155 = yyj1155 > l
		} else {
			yyb1155 = r.CheckBreak()
		}
		if yyb1155 {
			break
		}
		z.DecStructFieldNotFound(yyj1155-1, "")
	}
	r.ReadEnd()
}

func (x *Handler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1179 := z.EncBinary()
		_ = yym1179
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1180 := !z.EncBinary()
			yy2arr1180 := z.EncBasicHandle().StructToArray
			var yyq1180 [3]bool
			_, _, _ = yysep1180, yyq1180, yy2arr1180
			const yyr1180 bool = false
			yyq1180[0] = x.Exec != nil
			yyq1180[1] = x.HTTPGet != nil
			yyq1180[2] = x.TCPSocket != nil
			if yyr1180 || yy2arr1180 {
				r.EncodeArrayStart(3)
			} else {
				var yynn1180 int = 0
				for _, b := range yyq1180 {
					if b {
						yynn1180++
					}
				}
				r.EncodeMapStart(yynn1180)
			}
			if yyr1180 || yy2arr1180 {
				if yyq1180[0] {
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1180[0] {
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1180 || yy2arr1180 {
				if yyq1180[1] {
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1180[1] {
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1180 || yy2arr1180 {
				if yyq1180[2] {
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1180[2] {
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				}
			}
			if yysep1180 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Handler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1184 := z.DecBinary()
	_ = yym1184
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1185 := r.ReadMapStart()
			if yyl1185 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1185, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1185 := r.ReadArrayStart()
			if yyl1185 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1185, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Handler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1186Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1186Slc
	var yyhl1186 bool = l >= 0
	for yyj1186 := 0; ; yyj1186++ {
		if yyhl1186 {
			if yyj1186 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1186Slc = r.DecodeBytes(yys1186Slc, true, true)
		yys1186 := string(yys1186Slc)
		switch yys1186 {
		case "exec":
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1186)
		} // end switch yys1186
	} // end for yyj1186
	if !yyhl1186 {
		r.ReadEnd()
	}
}

func (x *Handler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1190 int
	var yyb1190 bool
	var yyhl1190 bool = l >= 0
	yyj1190++
	if yyhl1190 {
		yyb1190 = yyj1190 > l
	} else {
		yyb1190 = r.CheckBreak()
	}
	if yyb1190 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	yyj1190++
	if yyhl1190 {
		yyb1190 = yyj1190 > l
	} else {
		yyb1190 = r.CheckBreak()
	}
	if yyb1190 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	yyj1190++
	if yyhl1190 {
		yyb1190 = yyj1190 > l
	} else {
		yyb1190 = r.CheckBreak()
	}
	if yyb1190 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	for {
		yyj1190++
		if yyhl1190 {
			yyb1190 = yyj1190 > l
		} else {
			yyb1190 = r.CheckBreak()
		}
		if yyb1190 {
			break
		}
		z.DecStructFieldNotFound(yyj1190-1, "")
	}
	r.ReadEnd()
}

func (x *Lifecycle) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1194 := z.EncBinary()
		_ = yym1194
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1195 := !z.EncBinary()
			yy2arr1195 := z.EncBasicHandle().StructToArray
			var yyq1195 [2]bool
			_, _, _ = yysep1195, yyq1195, yy2arr1195
			const yyr1195 bool = false
			yyq1195[0] = x.PostStart != nil
			yyq1195[1] = x.PreStop != nil
			if yyr1195 || yy2arr1195 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1195 int = 0
				for _, b := range yyq1195 {
					if b {
						yynn1195++
					}
				}
				r.EncodeMapStart(yynn1195)
			}
			if yyr1195 || yy2arr1195 {
				if yyq1195[0] {
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1195[0] {
					r.EncodeString(codecSelferC_UTF81234, string("postStart"))
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1195 || yy2arr1195 {
				if yyq1195[1] {
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1195[1] {
					r.EncodeString(codecSelferC_UTF81234, string("preStop"))
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				}
			}
			if yysep1195 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Lifecycle) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1198 := z.DecBinary()
	_ = yym1198
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1199 := r.ReadMapStart()
			if yyl1199 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1199, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1199 := r.ReadArrayStart()
			if yyl1199 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1199, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Lifecycle) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1200Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1200Slc
	var yyhl1200 bool = l >= 0
	for yyj1200 := 0; ; yyj1200++ {
		if yyhl1200 {
			if yyj1200 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1200Slc = r.DecodeBytes(yys1200Slc, true, true)
		yys1200 := string(yys1200Slc)
		switch yys1200 {
		case "postStart":
			if r.TryDecodeAsNil() {
				if x.PostStart != nil {
					x.PostStart = nil
				}
			} else {
				if x.PostStart == nil {
					x.PostStart = new(Handler)
				}
				x.PostStart.CodecDecodeSelf(d)
			}
		case "preStop":
			if r.TryDecodeAsNil() {
				if x.PreStop != nil {
					x.PreStop = nil
				}
			} else {
				if x.PreStop == nil {
					x.PreStop = new(Handler)
				}
				x.PreStop.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1200)
		} // end switch yys1200
	} // end for yyj1200
	if !yyhl1200 {
		r.ReadEnd()
	}
}

func (x *Lifecycle) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1203 int
	var yyb1203 bool
	var yyhl1203 bool = l >= 0
	yyj1203++
	if yyhl1203 {
		yyb1203 = yyj1203 > l
	} else {
		yyb1203 = r.CheckBreak()
	}
	if yyb1203 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.PostStart != nil {
			x.PostStart = nil
		}
	} else {
		if x.PostStart == nil {
			x.PostStart = new(Handler)
		}
		x.PostStart.CodecDecodeSelf(d)
	}
	yyj1203++
	if yyhl1203 {
		yyb1203 = yyj1203 > l
	} else {
		yyb1203 = r.CheckBreak()
	}
	if yyb1203 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.PreStop != nil {
			x.PreStop = nil
		}
	} else {
		if x.PreStop == nil {
			x.PreStop = new(Handler)
		}
		x.PreStop.CodecDecodeSelf(d)
	}
	for {
		yyj1203++
		if yyhl1203 {
			yyb1203 = yyj1203 > l
		} else {
			yyb1203 = r.CheckBreak()
		}
		if yyb1203 {
			break
		}
		z.DecStructFieldNotFound(yyj1203-1, "")
	}
	r.ReadEnd()
}

func (x ConditionStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1206 := z.EncBinary()
	_ = yym1206
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ConditionStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1207 := z.DecBinary()
	_ = yym1207
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ContainerStateWaiting) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1208 := z.EncBinary()
		_ = yym1208
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1209 := !z.EncBinary()
			yy2arr1209 := z.EncBasicHandle().StructToArray
			var yyq1209 [2]bool
			_, _, _ = yysep1209, yyq1209, yy2arr1209
			const yyr1209 bool = false
			yyq1209[0] = x.Reason != ""
			yyq1209[1] = x.Message != ""
			if yyr1209 || yy2arr1209 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1209 int = 0
				for _, b := range yyq1209 {
					if b {
						yynn1209++
					}
				}
				r.EncodeMapStart(yynn1209)
			}
			if yyr1209 || yy2arr1209 {
				if yyq1209[0] {
					yym1211 := z.EncBinary()
					_ = yym1211
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1209[0] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym1212 := z.EncBinary()
					_ = yym1212
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1209 || yy2arr1209 {
				if yyq1209[1] {
					yym1214 := z.EncBinary()
					_ = yym1214
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1209[1] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym1215 := z.EncBinary()
					_ = yym1215
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yysep1209 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerStateWaiting) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1216 := z.DecBinary()
	_ = yym1216
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1217 := r.ReadMapStart()
			if yyl1217 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1217, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1217 := r.ReadArrayStart()
			if yyl1217 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1217, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateWaiting) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1218Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1218Slc
	var yyhl1218 bool = l >= 0
	for yyj1218 := 0; ; yyj1218++ {
		if yyhl1218 {
			if yyj1218 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1218Slc = r.DecodeBytes(yys1218Slc, true, true)
		yys1218 := string(yys1218Slc)
		switch yys1218 {
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1218)
		} // end switch yys1218
	} // end for yyj1218
	if !yyhl1218 {
		r.ReadEnd()
	}
}

func (x *ContainerStateWaiting) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1221 int
	var yyb1221 bool
	var yyhl1221 bool = l >= 0
	yyj1221++
	if yyhl1221 {
		yyb1221 = yyj1221 > l
	} else {
		yyb1221 = r.CheckBreak()
	}
	if yyb1221 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1221++
	if yyhl1221 {
		yyb1221 = yyj1221 > l
	} else {
		yyb1221 = r.CheckBreak()
	}
	if yyb1221 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1221++
		if yyhl1221 {
			yyb1221 = yyj1221 > l
		} else {
			yyb1221 = r.CheckBreak()
		}
		if yyb1221 {
			break
		}
		z.DecStructFieldNotFound(yyj1221-1, "")
	}
	r.ReadEnd()
}

func (x *ContainerStateRunning) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1224 := z.EncBinary()
		_ = yym1224
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1225 := !z.EncBinary()
			yy2arr1225 := z.EncBasicHandle().StructToArray
			var yyq1225 [1]bool
			_, _, _ = yysep1225, yyq1225, yy2arr1225
			const yyr1225 bool = false
			yyq1225[0] = true
			if yyr1225 || yy2arr1225 {
				r.EncodeArrayStart(1)
			} else {
				var yynn1225 int = 0
				for _, b := range yyq1225 {
					if b {
						yynn1225++
					}
				}
				r.EncodeMapStart(yynn1225)
			}
			if yyr1225 || yy2arr1225 {
				if yyq1225[0] {
					yy1227 := &x.StartedAt
					yym1228 := z.EncBinary()
					_ = yym1228
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1227) {
					} else if yym1228 {
						z.EncBinaryMarshal(yy1227)
					} else if !yym1228 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1227)
					} else {
						z.EncFallback(yy1227)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1225[0] {
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					yy1229 := &x.StartedAt
					yym1230 := z.EncBinary()
					_ = yym1230
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1229) {
					} else if yym1230 {
						z.EncBinaryMarshal(yy1229)
					} else if !yym1230 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1229)
					} else {
						z.EncFallback(yy1229)
					}
				}
			}
			if yysep1225 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerStateRunning) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1231 := z.DecBinary()
	_ = yym1231
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1232 := r.ReadMapStart()
			if yyl1232 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1232, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1232 := r.ReadArrayStart()
			if yyl1232 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1232, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateRunning) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1233Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1233Slc
	var yyhl1233 bool = l >= 0
	for yyj1233 := 0; ; yyj1233++ {
		if yyhl1233 {
			if yyj1233 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1233Slc = r.DecodeBytes(yys1233Slc, true, true)
		yys1233 := string(yys1233Slc)
		switch yys1233 {
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1234 := &x.StartedAt
				yym1235 := z.DecBinary()
				_ = yym1235
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1234) {
				} else if yym1235 {
					z.DecBinaryUnmarshal(yyv1234)
				} else if !yym1235 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1234)
				} else {
					z.DecFallback(yyv1234, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1233)
		} // end switch yys1233
	} // end for yyj1233
	if !yyhl1233 {
		r.ReadEnd()
	}
}

func (x *ContainerStateRunning) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1236 int
	var yyb1236 bool
	var yyhl1236 bool = l >= 0
	yyj1236++
	if yyhl1236 {
		yyb1236 = yyj1236 > l
	} else {
		yyb1236 = r.CheckBreak()
	}
	if yyb1236 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1237 := &x.StartedAt
		yym1238 := z.DecBinary()
		_ = yym1238
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1237) {
		} else if yym1238 {
			z.DecBinaryUnmarshal(yyv1237)
		} else if !yym1238 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1237)
		} else {
			z.DecFallback(yyv1237, false)
		}
	}
	for {
		yyj1236++
		if yyhl1236 {
			yyb1236 = yyj1236 > l
		} else {
			yyb1236 = r.CheckBreak()
		}
		if yyb1236 {
			break
		}
		z.DecStructFieldNotFound(yyj1236-1, "")
	}
	r.ReadEnd()
}

func (x *ContainerStateTerminated) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1239 := z.EncBinary()
		_ = yym1239
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1240 := !z.EncBinary()
			yy2arr1240 := z.EncBasicHandle().StructToArray
			var yyq1240 [7]bool
			_, _, _ = yysep1240, yyq1240, yy2arr1240
			const yyr1240 bool = false
			yyq1240[1] = x.Signal != 0
			yyq1240[2] = x.Reason != ""
			yyq1240[3] = x.Message != ""
			yyq1240[4] = true
			yyq1240[5] = true
			yyq1240[6] = x.ContainerID != ""
			if yyr1240 || yy2arr1240 {
				r.EncodeArrayStart(7)
			} else {
				var yynn1240 int = 1
				for _, b := range yyq1240 {
					if b {
						yynn1240++
					}
				}
				r.EncodeMapStart(yynn1240)
			}
			if yyr1240 || yy2arr1240 {
				yym1242 := z.EncBinary()
				_ = yym1242
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("exitCode"))
				yym1243 := z.EncBinary()
				_ = yym1243
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			}
			if yyr1240 || yy2arr1240 {
				if yyq1240[1] {
					yym1245 := z.EncBinary()
					_ = yym1245
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1240[1] {
					r.EncodeString(codecSelferC_UTF81234, string("signal"))
					yym1246 := z.EncBinary()
					_ = yym1246
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				}
			}
			if yyr1240 || yy2arr1240 {
				if yyq1240[2] {
					yym1248 := z.EncBinary()
					_ = yym1248
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1240[2] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym1249 := z.EncBinary()
					_ = yym1249
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1240 || yy2arr1240 {
				if yyq1240[3] {
					yym1251 := z.EncBinary()
					_ = yym1251
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1240[3] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym1252 := z.EncBinary()
					_ = yym1252
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1240 || yy2arr1240 {
				if yyq1240[4] {
					yy1254 := &x.StartedAt
					yym1255 := z.EncBinary()
					_ = yym1255
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1254) {
					} else if yym1255 {
						z.EncBinaryMarshal(yy1254)
					} else if !yym1255 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1254)
					} else {
						z.EncFallback(yy1254)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1240[4] {
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					yy1256 := &x.StartedAt
					yym1257 := z.EncBinary()
					_ = yym1257
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1256) {
					} else if yym1257 {
						z.EncBinaryMarshal(yy1256)
					} else if !yym1257 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1256)
					} else {
						z.EncFallback(yy1256)
					}
				}
			}
			if yyr1240 || yy2arr1240 {
				if yyq1240[5] {
					yy1259 := &x.FinishedAt
					yym1260 := z.EncBinary()
					_ = yym1260
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1259) {
					} else if yym1260 {
						z.EncBinaryMarshal(yy1259)
					} else if !yym1260 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1259)
					} else {
						z.EncFallback(yy1259)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1240[5] {
					r.EncodeString(codecSelferC_UTF81234, string("finishedAt"))
					yy1261 := &x.FinishedAt
					yym1262 := z.EncBinary()
					_ = yym1262
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1261) {
					} else if yym1262 {
						z.EncBinaryMarshal(yy1261)
					} else if !yym1262 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1261)
					} else {
						z.EncFallback(yy1261)
					}
				}
			}
			if yyr1240 || yy2arr1240 {
				if yyq1240[6] {
					yym1264 := z.EncBinary()
					_ = yym1264
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1240[6] {
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					yym1265 := z.EncBinary()
					_ = yym1265
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yysep1240 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerStateTerminated) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1266 := z.DecBinary()
	_ = yym1266
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1267 := r.ReadMapStart()
			if yyl1267 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1267, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1267 := r.ReadArrayStart()
			if yyl1267 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1267, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateTerminated) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1268Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1268Slc
	var yyhl1268 bool = l >= 0
	for yyj1268 := 0; ; yyj1268++ {
		if yyhl1268 {
			if yyj1268 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1268Slc = r.DecodeBytes(yys1268Slc, true, true)
		yys1268 := string(yys1268Slc)
		switch yys1268 {
		case "exitCode":
			if r.TryDecodeAsNil() {
				x.ExitCode = 0
			} else {
				x.ExitCode = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "signal":
			if r.TryDecodeAsNil() {
				x.Signal = 0
			} else {
				x.Signal = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1273 := &x.StartedAt
				yym1274 := z.DecBinary()
				_ = yym1274
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1273) {
				} else if yym1274 {
					z.DecBinaryUnmarshal(yyv1273)
				} else if !yym1274 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1273)
				} else {
					z.DecFallback(yyv1273, false)
				}
			}
		case "finishedAt":
			if r.TryDecodeAsNil() {
				x.FinishedAt = pkg2_unversioned.Time{}
			} else {
				yyv1275 := &x.FinishedAt
				yym1276 := z.DecBinary()
				_ = yym1276
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1275) {
				} else if yym1276 {
					z.DecBinaryUnmarshal(yyv1275)
				} else if !yym1276 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1275)
				} else {
					z.DecFallback(yyv1275, false)
				}
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1268)
		} // end switch yys1268
	} // end for yyj1268
	if !yyhl1268 {
		r.ReadEnd()
	}
}

func (x *ContainerStateTerminated) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1278 int
	var yyb1278 bool
	var yyhl1278 bool = l >= 0
	yyj1278++
	if yyhl1278 {
		yyb1278 = yyj1278 > l
	} else {
		yyb1278 = r.CheckBreak()
	}
	if yyb1278 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ExitCode = 0
	} else {
		x.ExitCode = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1278++
	if yyhl1278 {
		yyb1278 = yyj1278 > l
	} else {
		yyb1278 = r.CheckBreak()
	}
	if yyb1278 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Signal = 0
	} else {
		x.Signal = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1278++
	if yyhl1278 {
		yyb1278 = yyj1278 > l
	} else {
		yyb1278 = r.CheckBreak()
	}
	if yyb1278 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1278++
	if yyhl1278 {
		yyb1278 = yyj1278 > l
	} else {
		yyb1278 = r.CheckBreak()
	}
	if yyb1278 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1278++
	if yyhl1278 {
		yyb1278 = yyj1278 > l
	} else {
		yyb1278 = r.CheckBreak()
	}
	if yyb1278 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1283 := &x.StartedAt
		yym1284 := z.DecBinary()
		_ = yym1284
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1283) {
		} else if yym1284 {
			z.DecBinaryUnmarshal(yyv1283)
		} else if !yym1284 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1283)
		} else {
			z.DecFallback(yyv1283, false)
		}
	}
	yyj1278++
	if yyhl1278 {
		yyb1278 = yyj1278 > l
	} else {
		yyb1278 = r.CheckBreak()
	}
	if yyb1278 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FinishedAt = pkg2_unversioned.Time{}
	} else {
		yyv1285 := &x.FinishedAt
		yym1286 := z.DecBinary()
		_ = yym1286
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1285) {
		} else if yym1286 {
			z.DecBinaryUnmarshal(yyv1285)
		} else if !yym1286 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1285)
		} else {
			z.DecFallback(yyv1285, false)
		}
	}
	yyj1278++
	if yyhl1278 {
		yyb1278 = yyj1278 > l
	} else {
		yyb1278 = r.CheckBreak()
	}
	if yyb1278 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1278++
		if yyhl1278 {
			yyb1278 = yyj1278 > l
		} else {
			yyb1278 = r.CheckBreak()
		}
		if yyb1278 {
			break
		}
		z.DecStructFieldNotFound(yyj1278-1, "")
	}
	r.ReadEnd()
}

func (x *ContainerState) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1288 := z.EncBinary()
		_ = yym1288
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1289 := !z.EncBinary()
			yy2arr1289 := z.EncBasicHandle().StructToArray
			var yyq1289 [3]bool
			_, _, _ = yysep1289, yyq1289, yy2arr1289
			const yyr1289 bool = false
			yyq1289[0] = x.Waiting != nil
			yyq1289[1] = x.Running != nil
			yyq1289[2] = x.Terminated != nil
			if yyr1289 || yy2arr1289 {
				r.EncodeArrayStart(3)
			} else {
				var yynn1289 int = 0
				for _, b := range yyq1289 {
					if b {
						yynn1289++
					}
				}
				r.EncodeMapStart(yynn1289)
			}
			if yyr1289 || yy2arr1289 {
				if yyq1289[0] {
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1289[0] {
					r.EncodeString(codecSelferC_UTF81234, string("waiting"))
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1289 || yy2arr1289 {
				if yyq1289[1] {
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1289[1] {
					r.EncodeString(codecSelferC_UTF81234, string("running"))
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1289 || yy2arr1289 {
				if yyq1289[2] {
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1289[2] {
					r.EncodeString(codecSelferC_UTF81234, string("terminated"))
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				}
			}
			if yysep1289 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerState) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1293 := z.DecBinary()
	_ = yym1293
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1294 := r.ReadMapStart()
			if yyl1294 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1294, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1294 := r.ReadArrayStart()
			if yyl1294 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1294, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerState) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1295Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1295Slc
	var yyhl1295 bool = l >= 0
	for yyj1295 := 0; ; yyj1295++ {
		if yyhl1295 {
			if yyj1295 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1295Slc = r.DecodeBytes(yys1295Slc, true, true)
		yys1295 := string(yys1295Slc)
		switch yys1295 {
		case "waiting":
			if r.TryDecodeAsNil() {
				if x.Waiting != nil {
					x.Waiting = nil
				}
			} else {
				if x.Waiting == nil {
					x.Waiting = new(ContainerStateWaiting)
				}
				x.Waiting.CodecDecodeSelf(d)
			}
		case "running":
			if r.TryDecodeAsNil() {
				if x.Running != nil {
					x.Running = nil
				}
			} else {
				if x.Running == nil {
					x.Running = new(ContainerStateRunning)
				}
				x.Running.CodecDecodeSelf(d)
			}
		case "terminated":
			if r.TryDecodeAsNil() {
				if x.Terminated != nil {
					x.Terminated = nil
				}
			} else {
				if x.Terminated == nil {
					x.Terminated = new(ContainerStateTerminated)
				}
				x.Terminated.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1295)
		} // end switch yys1295
	} // end for yyj1295
	if !yyhl1295 {
		r.ReadEnd()
	}
}

func (x *ContainerState) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1299 int
	var yyb1299 bool
	var yyhl1299 bool = l >= 0
	yyj1299++
	if yyhl1299 {
		yyb1299 = yyj1299 > l
	} else {
		yyb1299 = r.CheckBreak()
	}
	if yyb1299 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Waiting != nil {
			x.Waiting = nil
		}
	} else {
		if x.Waiting == nil {
			x.Waiting = new(ContainerStateWaiting)
		}
		x.Waiting.CodecDecodeSelf(d)
	}
	yyj1299++
	if yyhl1299 {
		yyb1299 = yyj1299 > l
	} else {
		yyb1299 = r.CheckBreak()
	}
	if yyb1299 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Running != nil {
			x.Running = nil
		}
	} else {
		if x.Running == nil {
			x.Running = new(ContainerStateRunning)
		}
		x.Running.CodecDecodeSelf(d)
	}
	yyj1299++
	if yyhl1299 {
		yyb1299 = yyj1299 > l
	} else {
		yyb1299 = r.CheckBreak()
	}
	if yyb1299 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Terminated != nil {
			x.Terminated = nil
		}
	} else {
		if x.Terminated == nil {
			x.Terminated = new(ContainerStateTerminated)
		}
		x.Terminated.CodecDecodeSelf(d)
	}
	for {
		yyj1299++
		if yyhl1299 {
			yyb1299 = yyj1299 > l
		} else {
			yyb1299 = r.CheckBreak()
		}
		if yyb1299 {
			break
		}
		z.DecStructFieldNotFound(yyj1299-1, "")
	}
	r.ReadEnd()
}

func (x *ContainerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1303 := z.EncBinary()
		_ = yym1303
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1304 := !z.EncBinary()
			yy2arr1304 := z.EncBasicHandle().StructToArray
			var yyq1304 [8]bool
			_, _, _ = yysep1304, yyq1304, yy2arr1304
			const yyr1304 bool = false
			yyq1304[1] = true
			yyq1304[2] = true
			yyq1304[7] = x.ContainerID != ""
			if yyr1304 || yy2arr1304 {
				r.EncodeArrayStart(8)
			} else {
				var yynn1304 int = 5
				for _, b := range yyq1304 {
					if b {
						yynn1304++
					}
				}
				r.EncodeMapStart(yynn1304)
			}
			if yyr1304 || yy2arr1304 {
				yym1306 := z.EncBinary()
				_ = yym1306
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				yym1307 := z.EncBinary()
				_ = yym1307
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1304 || yy2arr1304 {
				if yyq1304[1] {
					yy1309 := &x.State
					yy1309.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1304[1] {
					r.EncodeString(codecSelferC_UTF81234, string("state"))
					yy1310 := &x.State
					yy1310.CodecEncodeSelf(e)
				}
			}
			if yyr1304 || yy2arr1304 {
				if yyq1304[2] {
					yy1312 := &x.LastTerminationState
					yy1312.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1304[2] {
					r.EncodeString(codecSelferC_UTF81234, string("lastState"))
					yy1313 := &x.LastTerminationState
					yy1313.CodecEncodeSelf(e)
				}
			}
			if yyr1304 || yy2arr1304 {
				yym1315 := z.EncBinary()
				_ = yym1315
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("ready"))
				yym1316 := z.EncBinary()
				_ = yym1316
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			}
			if yyr1304 || yy2arr1304 {
				yym1318 := z.EncBinary()
				_ = yym1318
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("restartCount"))
				yym1319 := z.EncBinary()
				_ = yym1319
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			}
			if yyr1304 || yy2arr1304 {
				yym1321 := z.EncBinary()
				_ = yym1321
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				yym1322 := z.EncBinary()
				_ = yym1322
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1304 || yy2arr1304 {
				yym1324 := z.EncBinary()
				_ = yym1324
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("imageID"))
				yym1325 := z.EncBinary()
				_ = yym1325
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			}
			if yyr1304 || yy2arr1304 {
				if yyq1304[7] {
					yym1327 := z.EncBinary()
					_ = yym1327
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1304[7] {
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					yym1328 := z.EncBinary()
					_ = yym1328
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yysep1304 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1329 := z.DecBinary()
	_ = yym1329
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1330 := r.ReadMapStart()
			if yyl1330 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1330, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1330 := r.ReadArrayStart()
			if yyl1330 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1330, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1331Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1331Slc
	var yyhl1331 bool = l >= 0
	for yyj1331 := 0; ; yyj1331++ {
		if yyhl1331 {
			if yyj1331 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1331Slc = r.DecodeBytes(yys1331Slc, true, true)
		yys1331 := string(yys1331Slc)
		switch yys1331 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "state":
			if r.TryDecodeAsNil() {
				x.State = ContainerState{}
			} else {
				yyv1333 := &x.State
				yyv1333.CodecDecodeSelf(d)
			}
		case "lastState":
			if r.TryDecodeAsNil() {
				x.LastTerminationState = ContainerState{}
			} else {
				yyv1334 := &x.LastTerminationState
				yyv1334.CodecDecodeSelf(d)
			}
		case "ready":
			if r.TryDecodeAsNil() {
				x.Ready = false
			} else {
				x.Ready = bool(r.DecodeBool())
			}
		case "restartCount":
			if r.TryDecodeAsNil() {
				x.RestartCount = 0
			} else {
				x.RestartCount = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "imageID":
			if r.TryDecodeAsNil() {
				x.ImageID = ""
			} else {
				x.ImageID = string(r.DecodeString())
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1331)
		} // end switch yys1331
	} // end for yyj1331
	if !yyhl1331 {
		r.ReadEnd()
	}
}

func (x *ContainerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1340 int
	var yyb1340 bool
	var yyhl1340 bool = l >= 0
	yyj1340++
	if yyhl1340 {
		yyb1340 = yyj1340 > l
	} else {
		yyb1340 = r.CheckBreak()
	}
	if yyb1340 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1340++
	if yyhl1340 {
		yyb1340 = yyj1340 > l
	} else {
		yyb1340 = r.CheckBreak()
	}
	if yyb1340 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.State = ContainerState{}
	} else {
		yyv1342 := &x.State
		yyv1342.CodecDecodeSelf(d)
	}
	yyj1340++
	if yyhl1340 {
		yyb1340 = yyj1340 > l
	} else {
		yyb1340 = r.CheckBreak()
	}
	if yyb1340 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastTerminationState = ContainerState{}
	} else {
		yyv1343 := &x.LastTerminationState
		yyv1343.CodecDecodeSelf(d)
	}
	yyj1340++
	if yyhl1340 {
		yyb1340 = yyj1340 > l
	} else {
		yyb1340 = r.CheckBreak()
	}
	if yyb1340 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Ready = false
	} else {
		x.Ready = bool(r.DecodeBool())
	}
	yyj1340++
	if yyhl1340 {
		yyb1340 = yyj1340 > l
	} else {
		yyb1340 = r.CheckBreak()
	}
	if yyb1340 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.RestartCount = 0
	} else {
		x.RestartCount = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1340++
	if yyhl1340 {
		yyb1340 = yyj1340 > l
	} else {
		yyb1340 = r.CheckBreak()
	}
	if yyb1340 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1340++
	if yyhl1340 {
		yyb1340 = yyj1340 > l
	} else {
		yyb1340 = r.CheckBreak()
	}
	if yyb1340 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ImageID = ""
	} else {
		x.ImageID = string(r.DecodeString())
	}
	yyj1340++
	if yyhl1340 {
		yyb1340 = yyj1340 > l
	} else {
		yyb1340 = r.CheckBreak()
	}
	if yyb1340 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1340++
		if yyhl1340 {
			yyb1340 = yyj1340 > l
		} else {
			yyb1340 = r.CheckBreak()
		}
		if yyb1340 {
			break
		}
		z.DecStructFieldNotFound(yyj1340-1, "")
	}
	r.ReadEnd()
}

func (x PodPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1349 := z.EncBinary()
	_ = yym1349
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1350 := z.DecBinary()
	_ = yym1350
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PodConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1351 := z.EncBinary()
	_ = yym1351
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1352 := z.DecBinary()
	_ = yym1352
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1353 := z.EncBinary()
		_ = yym1353
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1354 := !z.EncBinary()
			yy2arr1354 := z.EncBasicHandle().StructToArray
			var yyq1354 [6]bool
			_, _, _ = yysep1354, yyq1354, yy2arr1354
			const yyr1354 bool = false
			yyq1354[2] = true
			yyq1354[3] = true
			yyq1354[4] = x.Reason != ""
			yyq1354[5] = x.Message != ""
			if yyr1354 || yy2arr1354 {
				r.EncodeArrayStart(6)
			} else {
				var yynn1354 int = 2
				for _, b := range yyq1354 {
					if b {
						yynn1354++
					}
				}
				r.EncodeMapStart(yynn1354)
			}
			if yyr1354 || yy2arr1354 {
				x.Type.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				x.Type.CodecEncodeSelf(e)
			}
			if yyr1354 || yy2arr1354 {
				x.Status.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				x.Status.CodecEncodeSelf(e)
			}
			if yyr1354 || yy2arr1354 {
				if yyq1354[2] {
					yy1358 := &x.LastProbeTime
					yym1359 := z.EncBinary()
					_ = yym1359
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1358) {
					} else if yym1359 {
						z.EncBinaryMarshal(yy1358)
					} else if !yym1359 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1358)
					} else {
						z.EncFallback(yy1358)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1354[2] {
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					yy1360 := &x.LastProbeTime
					yym1361 := z.EncBinary()
					_ = yym1361
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1360) {
					} else if yym1361 {
						z.EncBinaryMarshal(yy1360)
					} else if !yym1361 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1360)
					} else {
						z.EncFallback(yy1360)
					}
				}
			}
			if yyr1354 || yy2arr1354 {
				if yyq1354[3] {
					yy1363 := &x.LastTransitionTime
					yym1364 := z.EncBinary()
					_ = yym1364
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1363) {
					} else if yym1364 {
						z.EncBinaryMarshal(yy1363)
					} else if !yym1364 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1363)
					} else {
						z.EncFallback(yy1363)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1354[3] {
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					yy1365 := &x.LastTransitionTime
					yym1366 := z.EncBinary()
					_ = yym1366
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1365) {
					} else if yym1366 {
						z.EncBinaryMarshal(yy1365)
					} else if !yym1366 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1365)
					} else {
						z.EncFallback(yy1365)
					}
				}
			}
			if yyr1354 || yy2arr1354 {
				if yyq1354[4] {
					yym1368 := z.EncBinary()
					_ = yym1368
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1354[4] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym1369 := z.EncBinary()
					_ = yym1369
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1354 || yy2arr1354 {
				if yyq1354[5] {
					yym1371 := z.EncBinary()
					_ = yym1371
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1354[5] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym1372 := z.EncBinary()
					_ = yym1372
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yysep1354 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1373 := z.DecBinary()
	_ = yym1373
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1374 := r.ReadMapStart()
			if yyl1374 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1374, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1374 := r.ReadArrayStart()
			if yyl1374 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1374, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1375Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1375Slc
	var yyhl1375 bool = l >= 0
	for yyj1375 := 0; ; yyj1375++ {
		if yyhl1375 {
			if yyj1375 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1375Slc = r.DecodeBytes(yys1375Slc, true, true)
		yys1375 := string(yys1375Slc)
		switch yys1375 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = PodConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg2_unversioned.Time{}
			} else {
				yyv1378 := &x.LastProbeTime
				yym1379 := z.DecBinary()
				_ = yym1379
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1378) {
				} else if yym1379 {
					z.DecBinaryUnmarshal(yyv1378)
				} else if !yym1379 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1378)
				} else {
					z.DecFallback(yyv1378, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv1380 := &x.LastTransitionTime
				yym1381 := z.DecBinary()
				_ = yym1381
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1380) {
				} else if yym1381 {
					z.DecBinaryUnmarshal(yyv1380)
				} else if !yym1381 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1380)
				} else {
					z.DecFallback(yyv1380, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1375)
		} // end switch yys1375
	} // end for yyj1375
	if !yyhl1375 {
		r.ReadEnd()
	}
}

func (x *PodCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1384 int
	var yyb1384 bool
	var yyhl1384 bool = l >= 0
	yyj1384++
	if yyhl1384 {
		yyb1384 = yyj1384 > l
	} else {
		yyb1384 = r.CheckBreak()
	}
	if yyb1384 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = PodConditionType(r.DecodeString())
	}
	yyj1384++
	if yyhl1384 {
		yyb1384 = yyj1384 > l
	} else {
		yyb1384 = r.CheckBreak()
	}
	if yyb1384 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj1384++
	if yyhl1384 {
		yyb1384 = yyj1384 > l
	} else {
		yyb1384 = r.CheckBreak()
	}
	if yyb1384 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg2_unversioned.Time{}
	} else {
		yyv1387 := &x.LastProbeTime
		yym1388 := z.DecBinary()
		_ = yym1388
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1387) {
		} else if yym1388 {
			z.DecBinaryUnmarshal(yyv1387)
		} else if !yym1388 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1387)
		} else {
			z.DecFallback(yyv1387, false)
		}
	}
	yyj1384++
	if yyhl1384 {
		yyb1384 = yyj1384 > l
	} else {
		yyb1384 = r.CheckBreak()
	}
	if yyb1384 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv1389 := &x.LastTransitionTime
		yym1390 := z.DecBinary()
		_ = yym1390
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1389) {
		} else if yym1390 {
			z.DecBinaryUnmarshal(yyv1389)
		} else if !yym1390 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1389)
		} else {
			z.DecFallback(yyv1389, false)
		}
	}
	yyj1384++
	if yyhl1384 {
		yyb1384 = yyj1384 > l
	} else {
		yyb1384 = r.CheckBreak()
	}
	if yyb1384 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1384++
	if yyhl1384 {
		yyb1384 = yyj1384 > l
	} else {
		yyb1384 = r.CheckBreak()
	}
	if yyb1384 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1384++
		if yyhl1384 {
			yyb1384 = yyj1384 > l
		} else {
			yyb1384 = r.CheckBreak()
		}
		if yyb1384 {
			break
		}
		z.DecStructFieldNotFound(yyj1384-1, "")
	}
	r.ReadEnd()
}

func (x RestartPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1393 := z.EncBinary()
	_ = yym1393
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *RestartPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1394 := z.DecBinary()
	_ = yym1394
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1395 := z.EncBinary()
		_ = yym1395
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1396 := !z.EncBinary()
			yy2arr1396 := z.EncBasicHandle().StructToArray
			var yyq1396 [4]bool
			_, _, _ = yysep1396, yyq1396, yy2arr1396
			const yyr1396 bool = false
			yyq1396[0] = x.Kind != ""
			yyq1396[1] = x.APIVersion != ""
			yyq1396[2] = true
			if yyr1396 || yy2arr1396 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1396 int = 1
				for _, b := range yyq1396 {
					if b {
						yynn1396++
					}
				}
				r.EncodeMapStart(yynn1396)
			}
			if yyr1396 || yy2arr1396 {
				if yyq1396[0] {
					yym1398 := z.EncBinary()
					_ = yym1398
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1396[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1399 := z.EncBinary()
					_ = yym1399
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1396 || yy2arr1396 {
				if yyq1396[1] {
					yym1401 := z.EncBinary()
					_ = yym1401
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1396[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1402 := z.EncBinary()
					_ = yym1402
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1396 || yy2arr1396 {
				if yyq1396[2] {
					yy1404 := &x.ListMeta
					yym1405 := z.EncBinary()
					_ = yym1405
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1404) {
					} else {
						z.EncFallback(yy1404)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1396[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1406 := &x.ListMeta
					yym1407 := z.EncBinary()
					_ = yym1407
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1406) {
					} else {
						z.EncFallback(yy1406)
					}
				}
			}
			if yyr1396 || yy2arr1396 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1409 := z.EncBinary()
					_ = yym1409
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1410 := z.EncBinary()
					_ = yym1410
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			}
			if yysep1396 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1411 := z.DecBinary()
	_ = yym1411
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1412 := r.ReadMapStart()
			if yyl1412 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1412, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1412 := r.ReadArrayStart()
			if yyl1412 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1412, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1413Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1413Slc
	var yyhl1413 bool = l >= 0
	for yyj1413 := 0; ; yyj1413++ {
		if yyhl1413 {
			if yyj1413 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1413Slc = r.DecodeBytes(yys1413Slc, true, true)
		yys1413 := string(yys1413Slc)
		switch yys1413 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1416 := &x.ListMeta
				yym1417 := z.DecBinary()
				_ = yym1417
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1416) {
				} else {
					z.DecFallback(yyv1416, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1418 := &x.Items
				yym1419 := z.DecBinary()
				_ = yym1419
				if false {
				} else {
					h.decSlicePod((*[]Pod)(yyv1418), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1413)
		} // end switch yys1413
	} // end for yyj1413
	if !yyhl1413 {
		r.ReadEnd()
	}
}

func (x *PodList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1420 int
	var yyb1420 bool
	var yyhl1420 bool = l >= 0
	yyj1420++
	if yyhl1420 {
		yyb1420 = yyj1420 > l
	} else {
		yyb1420 = r.CheckBreak()
	}
	if yyb1420 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1420++
	if yyhl1420 {
		yyb1420 = yyj1420 > l
	} else {
		yyb1420 = r.CheckBreak()
	}
	if yyb1420 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1420++
	if yyhl1420 {
		yyb1420 = yyj1420 > l
	} else {
		yyb1420 = r.CheckBreak()
	}
	if yyb1420 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1423 := &x.ListMeta
		yym1424 := z.DecBinary()
		_ = yym1424
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1423) {
		} else {
			z.DecFallback(yyv1423, false)
		}
	}
	yyj1420++
	if yyhl1420 {
		yyb1420 = yyj1420 > l
	} else {
		yyb1420 = r.CheckBreak()
	}
	if yyb1420 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1425 := &x.Items
		yym1426 := z.DecBinary()
		_ = yym1426
		if false {
		} else {
			h.decSlicePod((*[]Pod)(yyv1425), d)
		}
	}
	for {
		yyj1420++
		if yyhl1420 {
			yyb1420 = yyj1420 > l
		} else {
			yyb1420 = r.CheckBreak()
		}
		if yyb1420 {
			break
		}
		z.DecStructFieldNotFound(yyj1420-1, "")
	}
	r.ReadEnd()
}

func (x DNSPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1427 := z.EncBinary()
	_ = yym1427
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DNSPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1428 := z.DecBinary()
	_ = yym1428
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1429 := z.EncBinary()
		_ = yym1429
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1430 := !z.EncBinary()
			yy2arr1430 := z.EncBasicHandle().StructToArray
			var yyq1430 [11]bool
			_, _, _ = yysep1430, yyq1430, yy2arr1430
			const yyr1430 bool = false
			yyq1430[2] = x.RestartPolicy != ""
			yyq1430[3] = x.TerminationGracePeriodSeconds != nil
			yyq1430[4] = x.ActiveDeadlineSeconds != nil
			yyq1430[5] = x.DNSPolicy != ""
			yyq1430[6] = len(x.NodeSelector) != 0
			yyq1430[8] = x.NodeName != ""
			yyq1430[9] = x.SecurityContext != nil
			yyq1430[10] = len(x.ImagePullSecrets) != 0
			if yyr1430 || yy2arr1430 {
				r.EncodeArrayStart(11)
			} else {
				var yynn1430 int = 3
				for _, b := range yyq1430 {
					if b {
						yynn1430++
					}
				}
				r.EncodeMapStart(yynn1430)
			}
			if yyr1430 || yy2arr1430 {
				if x.Volumes == nil {
					r.EncodeNil()
				} else {
					yym1432 := z.EncBinary()
					_ = yym1432
					if false {
					} else {
						h.encSliceVolume(([]Volume)(x.Volumes), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("volumes"))
				if x.Volumes == nil {
					r.EncodeNil()
				} else {
					yym1433 := z.EncBinary()
					_ = yym1433
					if false {
					} else {
						h.encSliceVolume(([]Volume)(x.Volumes), e)
					}
				}
			}
			if yyr1430 || yy2arr1430 {
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym1435 := z.EncBinary()
					_ = yym1435
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("containers"))
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym1436 := z.EncBinary()
					_ = yym1436
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			}
			if yyr1430 || yy2arr1430 {
				if yyq1430[2] {
					x.RestartPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1430[2] {
					r.EncodeString(codecSelferC_UTF81234, string("restartPolicy"))
					x.RestartPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1430 || yy2arr1430 {
				if yyq1430[3] {
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy1439 := *x.TerminationGracePeriodSeconds
						yym1440 := z.EncBinary()
						_ = yym1440
						if false {
						} else {
							r.EncodeInt(int64(yy1439))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1430[3] {
					r.EncodeString(codecSelferC_UTF81234, string("terminationGracePeriodSeconds"))
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy1441 := *x.TerminationGracePeriodSeconds
						yym1442 := z.EncBinary()
						_ = yym1442
						if false {
						} else {
							r.EncodeInt(int64(yy1441))
						}
					}
				}
			}
			if yyr1430 || yy2arr1430 {
				if yyq1430[4] {
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy1444 := *x.ActiveDeadlineSeconds
						yym1445 := z.EncBinary()
						_ = yym1445
						if false {
						} else {
							r.EncodeInt(int64(yy1444))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1430[4] {
					r.EncodeString(codecSelferC_UTF81234, string("activeDeadlineSeconds"))
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy1446 := *x.ActiveDeadlineSeconds
						yym1447 := z.EncBinary()
						_ = yym1447
						if false {
						} else {
							r.EncodeInt(int64(yy1446))
						}
					}
				}
			}
			if yyr1430 || yy2arr1430 {
				if yyq1430[5] {
					x.DNSPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1430[5] {
					r.EncodeString(codecSelferC_UTF81234, string("dnsPolicy"))
					x.DNSPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1430 || yy2arr1430 {
				if yyq1430[6] {
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym1450 := z.EncBinary()
						_ = yym1450
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1430[6] {
					r.EncodeString(codecSelferC_UTF81234, string("nodeSelector"))
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym1451 := z.EncBinary()
						_ = yym1451
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				}
			}
			if yyr1430 || yy2arr1430 {
				yym1453 := z.EncBinary()
				_ = yym1453
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("serviceAccountName"))
				yym1454 := z.EncBinary()
				_ = yym1454
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
				}
			}
			if yyr1430 || yy2arr1430 {
				if yyq1430[8] {
					yym1456 := z.EncBinary()
					_ = yym1456
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1430[8] {
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					yym1457 := z.EncBinary()
					_ = yym1457
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				}
			}
			if yyr1430 || yy2arr1430 {
				if yyq1430[9] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1430[9] {
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1430 || yy2arr1430 {
				if yyq1430[10] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1460 := z.EncBinary()
						_ = yym1460
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1430[10] {
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1461 := z.EncBinary()
						_ = yym1461
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yysep1430 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1462 := z.DecBinary()
	_ = yym1462
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1463 := r.ReadMapStart()
			if yyl1463 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1463, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1463 := r.ReadArrayStart()
			if yyl1463 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1463, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1464Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1464Slc
	var yyhl1464 bool = l >= 0
	for yyj1464 := 0; ; yyj1464++ {
		if yyhl1464 {
			if yyj1464 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1464Slc = r.DecodeBytes(yys1464Slc, true, true)
		yys1464 := string(yys1464Slc)
		switch yys1464 {
		case "volumes":
			if r.TryDecodeAsNil() {
				x.Volumes = nil
			} else {
				yyv1465 := &x.Volumes
				yym1466 := z.DecBinary()
				_ = yym1466
				if false {
				} else {
					h.decSliceVolume((*[]Volume)(yyv1465), d)
				}
			}
		case "containers":
			if r.TryDecodeAsNil() {
				x.Containers = nil
			} else {
				yyv1467 := &x.Containers
				yym1468 := z.DecBinary()
				_ = yym1468
				if false {
				} else {
					h.decSliceContainer((*[]Container)(yyv1467), d)
				}
			}
		case "restartPolicy":
			if r.TryDecodeAsNil() {
				x.RestartPolicy = ""
			} else {
				x.RestartPolicy = RestartPolicy(r.DecodeString())
			}
		case "terminationGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.TerminationGracePeriodSeconds != nil {
					x.TerminationGracePeriodSeconds = nil
				}
			} else {
				if x.TerminationGracePeriodSeconds == nil {
					x.TerminationGracePeriodSeconds = new(int64)
				}
				yym1471 := z.DecBinary()
				_ = yym1471
				if false {
				} else {
					*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "activeDeadlineSeconds":
			if r.TryDecodeAsNil() {
				if x.ActiveDeadlineSeconds != nil {
					x.ActiveDeadlineSeconds = nil
				}
			} else {
				if x.ActiveDeadlineSeconds == nil {
					x.ActiveDeadlineSeconds = new(int64)
				}
				yym1473 := z.DecBinary()
				_ = yym1473
				if false {
				} else {
					*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "dnsPolicy":
			if r.TryDecodeAsNil() {
				x.DNSPolicy = ""
			} else {
				x.DNSPolicy = DNSPolicy(r.DecodeString())
			}
		case "nodeSelector":
			if r.TryDecodeAsNil() {
				x.NodeSelector = nil
			} else {
				yyv1475 := &x.NodeSelector
				yym1476 := z.DecBinary()
				_ = yym1476
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1475, false, d)
				}
			}
		case "serviceAccountName":
			if r.TryDecodeAsNil() {
				x.ServiceAccountName = ""
			} else {
				x.ServiceAccountName = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				x.NodeName = ""
			} else {
				x.NodeName = string(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(PodSecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv1480 := &x.ImagePullSecrets
				yym1481 := z.DecBinary()
				_ = yym1481
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv1480), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1464)
		} // end switch yys1464
	} // end for yyj1464
	if !yyhl1464 {
		r.ReadEnd()
	}
}

func (x *PodSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1482 int
	var yyb1482 bool
	var yyhl1482 bool = l >= 0
	yyj1482++
	if yyhl1482 {
		yyb1482 = yyj1482 > l
	} else {
		yyb1482 = r.CheckBreak()
	}
	if yyb1482 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Volumes = nil
	} else {
		yyv1483 := &x.Volumes
		yym1484 := z.DecBinary()
		_ = yym1484
		if false {
		} else {
			h.decSliceVolume((*[]Volume)(yyv1483), d)
		}
	}
	yyj1482++
	if yyhl1482 {
		yyb1482 = yyj1482 > l
	} else {
		yyb1482 = r.CheckBreak()
	}
	if yyb1482 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Containers = nil
	} else {
		yyv1485 := &x.Containers
		yym1486 := z.DecBinary()
		_ = yym1486
		if false {
		} else {
			h.decSliceContainer((*[]Container)(yyv1485), d)
		}
	}
	yyj1482++
	if yyhl1482 {
		yyb1482 = yyj1482 > l
	} else {
		yyb1482 = r.CheckBreak()
	}
	if yyb1482 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.RestartPolicy = ""
	} else {
		x.RestartPolicy = RestartPolicy(r.DecodeString())
	}
	yyj1482++
	if yyhl1482 {
		yyb1482 = yyj1482 > l
	} else {
		yyb1482 = r.CheckBreak()
	}
	if yyb1482 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.TerminationGracePeriodSeconds != nil {
			x.TerminationGracePeriodSeconds = nil
		}
	} else {
		if x.TerminationGracePeriodSeconds == nil {
			x.TerminationGracePeriodSeconds = new(int64)
		}
		yym1489 := z.DecBinary()
		_ = yym1489
		if false {
		} else {
			*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj1482++
	if yyhl1482 {
		yyb1482 = yyj1482 > l
	} else {
		yyb1482 = r.CheckBreak()
	}
	if yyb1482 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ActiveDeadlineSeconds != nil {
			x.ActiveDeadlineSeconds = nil
		}
	} else {
		if x.ActiveDeadlineSeconds == nil {
			x.ActiveDeadlineSeconds = new(int64)
		}
		yym1491 := z.DecBinary()
		_ = yym1491
		if false {
		} else {
			*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj1482++
	if yyhl1482 {
		yyb1482 = yyj1482 > l
	} else {
		yyb1482 = r.CheckBreak()
	}
	if yyb1482 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DNSPolicy = ""
	} else {
		x.DNSPolicy = DNSPolicy(r.DecodeString())
	}
	yyj1482++
	if yyhl1482 {
		yyb1482 = yyj1482 > l
	} else {
		yyb1482 = r.CheckBreak()
	}
	if yyb1482 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.NodeSelector = nil
	} else {
		yyv1493 := &x.NodeSelector
		yym1494 := z.DecBinary()
		_ = yym1494
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1493, false, d)
		}
	}
	yyj1482++
	if yyhl1482 {
		yyb1482 = yyj1482 > l
	} else {
		yyb1482 = r.CheckBreak()
	}
	if yyb1482 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ServiceAccountName = ""
	} else {
		x.ServiceAccountName = string(r.DecodeString())
	}
	yyj1482++
	if yyhl1482 {
		yyb1482 = yyj1482 > l
	} else {
		yyb1482 = r.CheckBreak()
	}
	if yyb1482 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.NodeName = ""
	} else {
		x.NodeName = string(r.DecodeString())
	}
	yyj1482++
	if yyhl1482 {
		yyb1482 = yyj1482 > l
	} else {
		yyb1482 = r.CheckBreak()
	}
	if yyb1482 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(PodSecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1482++
	if yyhl1482 {
		yyb1482 = yyj1482 > l
	} else {
		yyb1482 = r.CheckBreak()
	}
	if yyb1482 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv1498 := &x.ImagePullSecrets
		yym1499 := z.DecBinary()
		_ = yym1499
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv1498), d)
		}
	}
	for {
		yyj1482++
		if yyhl1482 {
			yyb1482 = yyj1482 > l
		} else {
			yyb1482 = r.CheckBreak()
		}
		if yyb1482 {
			break
		}
		z.DecStructFieldNotFound(yyj1482-1, "")
	}
	r.ReadEnd()
}

func (x *PodSecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1500 := z.EncBinary()
		_ = yym1500
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1501 := !z.EncBinary()
			yy2arr1501 := z.EncBasicHandle().StructToArray
			var yyq1501 [8]bool
			_, _, _ = yysep1501, yyq1501, yy2arr1501
			const yyr1501 bool = false
			yyq1501[0] = x.HostNetwork != false
			yyq1501[1] = x.HostPID != false
			yyq1501[2] = x.HostIPC != false
			yyq1501[3] = x.SELinuxOptions != nil
			yyq1501[4] = x.RunAsUser != nil
			yyq1501[5] = x.RunAsNonRoot != nil
			yyq1501[6] = len(x.SupplementalGroups) != 0
			yyq1501[7] = x.FSGroup != nil
			if yyr1501 || yy2arr1501 {
				r.EncodeArrayStart(8)
			} else {
				var yynn1501 int = 0
				for _, b := range yyq1501 {
					if b {
						yynn1501++
					}
				}
				r.EncodeMapStart(yynn1501)
			}
			if yyr1501 || yy2arr1501 {
				if yyq1501[0] {
					yym1503 := z.EncBinary()
					_ = yym1503
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1501[0] {
					r.EncodeString(codecSelferC_UTF81234, string("hostNetwork"))
					yym1504 := z.EncBinary()
					_ = yym1504
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				}
			}
			if yyr1501 || yy2arr1501 {
				if yyq1501[1] {
					yym1506 := z.EncBinary()
					_ = yym1506
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1501[1] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPID"))
					yym1507 := z.EncBinary()
					_ = yym1507
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				}
			}
			if yyr1501 || yy2arr1501 {
				if yyq1501[2] {
					yym1509 := z.EncBinary()
					_ = yym1509
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1501[2] {
					r.EncodeString(codecSelferC_UTF81234, string("hostIPC"))
					yym1510 := z.EncBinary()
					_ = yym1510
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				}
			}
			if yyr1501 || yy2arr1501 {
				if yyq1501[3] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1501[3] {
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1501 || yy2arr1501 {
				if yyq1501[4] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy1513 := *x.RunAsUser
						yym1514 := z.EncBinary()
						_ = yym1514
						if false {
						} else {
							r.EncodeInt(int64(yy1513))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1501[4] {
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy1515 := *x.RunAsUser
						yym1516 := z.EncBinary()
						_ = yym1516
						if false {
						} else {
							r.EncodeInt(int64(yy1515))
						}
					}
				}
			}
			if yyr1501 || yy2arr1501 {
				if yyq1501[5] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy1518 := *x.RunAsNonRoot
						yym1519 := z.EncBinary()
						_ = yym1519
						if false {
						} else {
							r.EncodeBool(bool(yy1518))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1501[5] {
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy1520 := *x.RunAsNonRoot
						yym1521 := z.EncBinary()
						_ = yym1521
						if false {
						} else {
							r.EncodeBool(bool(yy1520))
						}
					}
				}
			}
			if yyr1501 || yy2arr1501 {
				if yyq1501[6] {
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym1523 := z.EncBinary()
						_ = yym1523
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1501[6] {
					r.EncodeString(codecSelferC_UTF81234, string("supplementalGroups"))
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym1524 := z.EncBinary()
						_ = yym1524
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				}
			}
			if yyr1501 || yy2arr1501 {
				if yyq1501[7] {
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy1526 := *x.FSGroup
						yym1527 := z.EncBinary()
						_ = yym1527
						if false {
						} else {
							r.EncodeInt(int64(yy1526))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1501[7] {
					r.EncodeString(codecSelferC_UTF81234, string("fsGroup"))
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy1528 := *x.FSGroup
						yym1529 := z.EncBinary()
						_ = yym1529
						if false {
						} else {
							r.EncodeInt(int64(yy1528))
						}
					}
				}
			}
			if yysep1501 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodSecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1530 := z.DecBinary()
	_ = yym1530
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1531 := r.ReadMapStart()
			if yyl1531 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1531, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1531 := r.ReadArrayStart()
			if yyl1531 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1531, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1532Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1532Slc
	var yyhl1532 bool = l >= 0
	for yyj1532 := 0; ; yyj1532++ {
		if yyhl1532 {
			if yyj1532 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1532Slc = r.DecodeBytes(yys1532Slc, true, true)
		yys1532 := string(yys1532Slc)
		switch yys1532 {
		case "hostNetwork":
			if r.TryDecodeAsNil() {
				x.HostNetwork = false
			} else {
				x.HostNetwork = bool(r.DecodeBool())
			}
		case "hostPID":
			if r.TryDecodeAsNil() {
				x.HostPID = false
			} else {
				x.HostPID = bool(r.DecodeBool())
			}
		case "hostIPC":
			if r.TryDecodeAsNil() {
				x.HostIPC = false
			} else {
				x.HostIPC = bool(r.DecodeBool())
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym1538 := z.DecBinary()
				_ = yym1538
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym1540 := z.DecBinary()
				_ = yym1540
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		case "supplementalGroups":
			if r.TryDecodeAsNil() {
				x.SupplementalGroups = nil
			} else {
				yyv1541 := &x.SupplementalGroups
				yym1542 := z.DecBinary()
				_ = yym1542
				if false {
				} else {
					z.F.DecSliceInt64X(yyv1541, false, d)
				}
			}
		case "fsGroup":
			if r.TryDecodeAsNil() {
				if x.FSGroup != nil {
					x.FSGroup = nil
				}
			} else {
				if x.FSGroup == nil {
					x.FSGroup = new(int64)
				}
				yym1544 := z.DecBinary()
				_ = yym1544
				if false {
				} else {
					*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1532)
		} // end switch yys1532
	} // end for yyj1532
	if !yyhl1532 {
		r.ReadEnd()
	}
}

func (x *PodSecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1545 int
	var yyb1545 bool
	var yyhl1545 bool = l >= 0
	yyj1545++
	if yyhl1545 {
		yyb1545 = yyj1545 > l
	} else {
		yyb1545 = r.CheckBreak()
	}
	if yyb1545 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostNetwork = false
	} else {
		x.HostNetwork = bool(r.DecodeBool())
	}
	yyj1545++
	if yyhl1545 {
		yyb1545 = yyj1545 > l
	} else {
		yyb1545 = r.CheckBreak()
	}
	if yyb1545 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostPID = false
	} else {
		x.HostPID = bool(r.DecodeBool())
	}
	yyj1545++
	if yyhl1545 {
		yyb1545 = yyj1545 > l
	} else {
		yyb1545 = r.CheckBreak()
	}
	if yyb1545 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostIPC = false
	} else {
		x.HostIPC = bool(r.DecodeBool())
	}
	yyj1545++
	if yyhl1545 {
		yyb1545 = yyj1545 > l
	} else {
		yyb1545 = r.CheckBreak()
	}
	if yyb1545 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj1545++
	if yyhl1545 {
		yyb1545 = yyj1545 > l
	} else {
		yyb1545 = r.CheckBreak()
	}
	if yyb1545 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym1551 := z.DecBinary()
		_ = yym1551
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj1545++
	if yyhl1545 {
		yyb1545 = yyj1545 > l
	} else {
		yyb1545 = r.CheckBreak()
	}
	if yyb1545 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym1553 := z.DecBinary()
		_ = yym1553
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	yyj1545++
	if yyhl1545 {
		yyb1545 = yyj1545 > l
	} else {
		yyb1545 = r.CheckBreak()
	}
	if yyb1545 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SupplementalGroups = nil
	} else {
		yyv1554 := &x.SupplementalGroups
		yym1555 := z.DecBinary()
		_ = yym1555
		if false {
		} else {
			z.F.DecSliceInt64X(yyv1554, false, d)
		}
	}
	yyj1545++
	if yyhl1545 {
		yyb1545 = yyj1545 > l
	} else {
		yyb1545 = r.CheckBreak()
	}
	if yyb1545 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.FSGroup != nil {
			x.FSGroup = nil
		}
	} else {
		if x.FSGroup == nil {
			x.FSGroup = new(int64)
		}
		yym1557 := z.DecBinary()
		_ = yym1557
		if false {
		} else {
			*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj1545++
		if yyhl1545 {
			yyb1545 = yyj1545 > l
		} else {
			yyb1545 = r.CheckBreak()
		}
		if yyb1545 {
			break
		}
		z.DecStructFieldNotFound(yyj1545-1, "")
	}
	r.ReadEnd()
}

func (x *PodStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1558 := z.EncBinary()
		_ = yym1558
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1559 := !z.EncBinary()
			yy2arr1559 := z.EncBasicHandle().StructToArray
			var yyq1559 [8]bool
			_, _, _ = yysep1559, yyq1559, yy2arr1559
			const yyr1559 bool = false
			yyq1559[0] = x.Phase != ""
			yyq1559[1] = len(x.Conditions) != 0
			yyq1559[2] = x.Message != ""
			yyq1559[3] = x.Reason != ""
			yyq1559[4] = x.HostIP != ""
			yyq1559[5] = x.PodIP != ""
			yyq1559[6] = x.StartTime != nil
			yyq1559[7] = len(x.ContainerStatuses) != 0
			if yyr1559 || yy2arr1559 {
				r.EncodeArrayStart(8)
			} else {
				var yynn1559 int = 0
				for _, b := range yyq1559 {
					if b {
						yynn1559++
					}
				}
				r.EncodeMapStart(yynn1559)
			}
			if yyr1559 || yy2arr1559 {
				if yyq1559[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1559[0] {
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr1559 || yy2arr1559 {
				if yyq1559[1] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym1562 := z.EncBinary()
						_ = yym1562
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1559[1] {
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym1563 := z.EncBinary()
						_ = yym1563
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr1559 || yy2arr1559 {
				if yyq1559[2] {
					yym1565 := z.EncBinary()
					_ = yym1565
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1559[2] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym1566 := z.EncBinary()
					_ = yym1566
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1559 || yy2arr1559 {
				if yyq1559[3] {
					yym1568 := z.EncBinary()
					_ = yym1568
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1559[3] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym1569 := z.EncBinary()
					_ = yym1569
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1559 || yy2arr1559 {
				if yyq1559[4] {
					yym1571 := z.EncBinary()
					_ = yym1571
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1559[4] {
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					yym1572 := z.EncBinary()
					_ = yym1572
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr1559 || yy2arr1559 {
				if yyq1559[5] {
					yym1574 := z.EncBinary()
					_ = yym1574
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1559[5] {
					r.EncodeString(codecSelferC_UTF81234, string("podIP"))
					yym1575 := z.EncBinary()
					_ = yym1575
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				}
			}
			if yyr1559 || yy2arr1559 {
				if yyq1559[6] {
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym1577 := z.EncBinary()
						_ = yym1577
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym1577 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym1577 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1559[6] {
					r.EncodeString(codecSelferC_UTF81234, string("startTime"))
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym1578 := z.EncBinary()
						_ = yym1578
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym1578 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym1578 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				}
			}
			if yyr1559 || yy2arr1559 {
				if yyq1559[7] {
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym1580 := z.EncBinary()
						_ = yym1580
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1559[7] {
					r.EncodeString(codecSelferC_UTF81234, string("containerStatuses"))
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym1581 := z.EncBinary()
						_ = yym1581
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				}
			}
			if yysep1559 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1582 := z.DecBinary()
	_ = yym1582
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1583 := r.ReadMapStart()
			if yyl1583 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1583, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1583 := r.ReadArrayStart()
			if yyl1583 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1583, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1584Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1584Slc
	var yyhl1584 bool = l >= 0
	for yyj1584 := 0; ; yyj1584++ {
		if yyhl1584 {
			if yyj1584 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1584Slc = r.DecodeBytes(yys1584Slc, true, true)
		yys1584 := string(yys1584Slc)
		switch yys1584 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PodPhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv1586 := &x.Conditions
				yym1587 := z.DecBinary()
				_ = yym1587
				if false {
				} else {
					h.decSlicePodCondition((*[]PodCondition)(yyv1586), d)
				}
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		case "podIP":
			if r.TryDecodeAsNil() {
				x.PodIP = ""
			} else {
				x.PodIP = string(r.DecodeString())
			}
		case "startTime":
			if r.TryDecodeAsNil() {
				if x.StartTime != nil {
					x.StartTime = nil
				}
			} else {
				if x.StartTime == nil {
					x.StartTime = new(pkg2_unversioned.Time)
				}
				yym1593 := z.DecBinary()
				_ = yym1593
				if false {
				} else if z.HasExtensions() && z.DecExt(x.StartTime) {
				} else if yym1593 {
					z.DecBinaryUnmarshal(x.StartTime)
				} else if !yym1593 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.StartTime)
				} else {
					z.DecFallback(x.StartTime, false)
				}
			}
		case "containerStatuses":
			if r.TryDecodeAsNil() {
				x.ContainerStatuses = nil
			} else {
				yyv1594 := &x.ContainerStatuses
				yym1595 := z.DecBinary()
				_ = yym1595
				if false {
				} else {
					h.decSliceContainerStatus((*[]ContainerStatus)(yyv1594), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1584)
		} // end switch yys1584
	} // end for yyj1584
	if !yyhl1584 {
		r.ReadEnd()
	}
}

func (x *PodStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1596 int
	var yyb1596 bool
	var yyhl1596 bool = l >= 0
	yyj1596++
	if yyhl1596 {
		yyb1596 = yyj1596 > l
	} else {
		yyb1596 = r.CheckBreak()
	}
	if yyb1596 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PodPhase(r.DecodeString())
	}
	yyj1596++
	if yyhl1596 {
		yyb1596 = yyj1596 > l
	} else {
		yyb1596 = r.CheckBreak()
	}
	if yyb1596 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv1598 := &x.Conditions
		yym1599 := z.DecBinary()
		_ = yym1599
		if false {
		} else {
			h.decSlicePodCondition((*[]PodCondition)(yyv1598), d)
		}
	}
	yyj1596++
	if yyhl1596 {
		yyb1596 = yyj1596 > l
	} else {
		yyb1596 = r.CheckBreak()
	}
	if yyb1596 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1596++
	if yyhl1596 {
		yyb1596 = yyj1596 > l
	} else {
		yyb1596 = r.CheckBreak()
	}
	if yyb1596 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1596++
	if yyhl1596 {
		yyb1596 = yyj1596 > l
	} else {
		yyb1596 = r.CheckBreak()
	}
	if yyb1596 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	yyj1596++
	if yyhl1596 {
		yyb1596 = yyj1596 > l
	} else {
		yyb1596 = r.CheckBreak()
	}
	if yyb1596 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.PodIP = ""
	} else {
		x.PodIP = string(r.DecodeString())
	}
	yyj1596++
	if yyhl1596 {
		yyb1596 = yyj1596 > l
	} else {
		yyb1596 = r.CheckBreak()
	}
	if yyb1596 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.StartTime != nil {
			x.StartTime = nil
		}
	} else {
		if x.StartTime == nil {
			x.StartTime = new(pkg2_unversioned.Time)
		}
		yym1605 := z.DecBinary()
		_ = yym1605
		if false {
		} else if z.HasExtensions() && z.DecExt(x.StartTime) {
		} else if yym1605 {
			z.DecBinaryUnmarshal(x.StartTime)
		} else if !yym1605 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.StartTime)
		} else {
			z.DecFallback(x.StartTime, false)
		}
	}
	yyj1596++
	if yyhl1596 {
		yyb1596 = yyj1596 > l
	} else {
		yyb1596 = r.CheckBreak()
	}
	if yyb1596 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ContainerStatuses = nil
	} else {
		yyv1606 := &x.ContainerStatuses
		yym1607 := z.DecBinary()
		_ = yym1607
		if false {
		} else {
			h.decSliceContainerStatus((*[]ContainerStatus)(yyv1606), d)
		}
	}
	for {
		yyj1596++
		if yyhl1596 {
			yyb1596 = yyj1596 > l
		} else {
			yyb1596 = r.CheckBreak()
		}
		if yyb1596 {
			break
		}
		z.DecStructFieldNotFound(yyj1596-1, "")
	}
	r.ReadEnd()
}

func (x *PodStatusResult) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1608 := z.EncBinary()
		_ = yym1608
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1609 := !z.EncBinary()
			yy2arr1609 := z.EncBasicHandle().StructToArray
			var yyq1609 [4]bool
			_, _, _ = yysep1609, yyq1609, yy2arr1609
			const yyr1609 bool = false
			yyq1609[0] = x.Kind != ""
			yyq1609[1] = x.APIVersion != ""
			yyq1609[2] = true
			yyq1609[3] = true
			if yyr1609 || yy2arr1609 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1609 int = 0
				for _, b := range yyq1609 {
					if b {
						yynn1609++
					}
				}
				r.EncodeMapStart(yynn1609)
			}
			if yyr1609 || yy2arr1609 {
				if yyq1609[0] {
					yym1611 := z.EncBinary()
					_ = yym1611
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1609[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1612 := z.EncBinary()
					_ = yym1612
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1609 || yy2arr1609 {
				if yyq1609[1] {
					yym1614 := z.EncBinary()
					_ = yym1614
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1609[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1615 := z.EncBinary()
					_ = yym1615
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1609 || yy2arr1609 {
				if yyq1609[2] {
					yy1617 := &x.ObjectMeta
					yy1617.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1609[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1618 := &x.ObjectMeta
					yy1618.CodecEncodeSelf(e)
				}
			}
			if yyr1609 || yy2arr1609 {
				if yyq1609[3] {
					yy1620 := &x.Status
					yy1620.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1609[3] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy1621 := &x.Status
					yy1621.CodecEncodeSelf(e)
				}
			}
			if yysep1609 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodStatusResult) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1622 := z.DecBinary()
	_ = yym1622
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1623 := r.ReadMapStart()
			if yyl1623 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1623, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1623 := r.ReadArrayStart()
			if yyl1623 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1623, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatusResult) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1624Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1624Slc
	var yyhl1624 bool = l >= 0
	for yyj1624 := 0; ; yyj1624++ {
		if yyhl1624 {
			if yyj1624 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1624Slc = r.DecodeBytes(yys1624Slc, true, true)
		yys1624 := string(yys1624Slc)
		switch yys1624 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1627 := &x.ObjectMeta
				yyv1627.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv1628 := &x.Status
				yyv1628.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1624)
		} // end switch yys1624
	} // end for yyj1624
	if !yyhl1624 {
		r.ReadEnd()
	}
}

func (x *PodStatusResult) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1629 int
	var yyb1629 bool
	var yyhl1629 bool = l >= 0
	yyj1629++
	if yyhl1629 {
		yyb1629 = yyj1629 > l
	} else {
		yyb1629 = r.CheckBreak()
	}
	if yyb1629 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1629++
	if yyhl1629 {
		yyb1629 = yyj1629 > l
	} else {
		yyb1629 = r.CheckBreak()
	}
	if yyb1629 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1629++
	if yyhl1629 {
		yyb1629 = yyj1629 > l
	} else {
		yyb1629 = r.CheckBreak()
	}
	if yyb1629 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1632 := &x.ObjectMeta
		yyv1632.CodecDecodeSelf(d)
	}
	yyj1629++
	if yyhl1629 {
		yyb1629 = yyj1629 > l
	} else {
		yyb1629 = r.CheckBreak()
	}
	if yyb1629 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv1633 := &x.Status
		yyv1633.CodecDecodeSelf(d)
	}
	for {
		yyj1629++
		if yyhl1629 {
			yyb1629 = yyj1629 > l
		} else {
			yyb1629 = r.CheckBreak()
		}
		if yyb1629 {
			break
		}
		z.DecStructFieldNotFound(yyj1629-1, "")
	}
	r.ReadEnd()
}

func (x *Pod) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1634 := z.EncBinary()
		_ = yym1634
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1635 := !z.EncBinary()
			yy2arr1635 := z.EncBasicHandle().StructToArray
			var yyq1635 [5]bool
			_, _, _ = yysep1635, yyq1635, yy2arr1635
			const yyr1635 bool = false
			yyq1635[0] = x.Kind != ""
			yyq1635[1] = x.APIVersion != ""
			yyq1635[2] = true
			yyq1635[3] = true
			yyq1635[4] = true
			if yyr1635 || yy2arr1635 {
				r.EncodeArrayStart(5)
			} else {
				var yynn1635 int = 0
				for _, b := range yyq1635 {
					if b {
						yynn1635++
					}
				}
				r.EncodeMapStart(yynn1635)
			}
			if yyr1635 || yy2arr1635 {
				if yyq1635[0] {
					yym1637 := z.EncBinary()
					_ = yym1637
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1635[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1638 := z.EncBinary()
					_ = yym1638
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1635 || yy2arr1635 {
				if yyq1635[1] {
					yym1640 := z.EncBinary()
					_ = yym1640
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1635[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1641 := z.EncBinary()
					_ = yym1641
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1635 || yy2arr1635 {
				if yyq1635[2] {
					yy1643 := &x.ObjectMeta
					yy1643.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1635[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1644 := &x.ObjectMeta
					yy1644.CodecEncodeSelf(e)
				}
			}
			if yyr1635 || yy2arr1635 {
				if yyq1635[3] {
					yy1646 := &x.Spec
					yy1646.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1635[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy1647 := &x.Spec
					yy1647.CodecEncodeSelf(e)
				}
			}
			if yyr1635 || yy2arr1635 {
				if yyq1635[4] {
					yy1649 := &x.Status
					yy1649.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1635[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy1650 := &x.Status
					yy1650.CodecEncodeSelf(e)
				}
			}
			if yysep1635 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Pod) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1651 := z.DecBinary()
	_ = yym1651
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1652 := r.ReadMapStart()
			if yyl1652 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1652, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1652 := r.ReadArrayStart()
			if yyl1652 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1652, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Pod) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1653Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1653Slc
	var yyhl1653 bool = l >= 0
	for yyj1653 := 0; ; yyj1653++ {
		if yyhl1653 {
			if yyj1653 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1653Slc = r.DecodeBytes(yys1653Slc, true, true)
		yys1653 := string(yys1653Slc)
		switch yys1653 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1656 := &x.ObjectMeta
				yyv1656.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv1657 := &x.Spec
				yyv1657.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv1658 := &x.Status
				yyv1658.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1653)
		} // end switch yys1653
	} // end for yyj1653
	if !yyhl1653 {
		r.ReadEnd()
	}
}

func (x *Pod) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1659 int
	var yyb1659 bool
	var yyhl1659 bool = l >= 0
	yyj1659++
	if yyhl1659 {
		yyb1659 = yyj1659 > l
	} else {
		yyb1659 = r.CheckBreak()
	}
	if yyb1659 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1659++
	if yyhl1659 {
		yyb1659 = yyj1659 > l
	} else {
		yyb1659 = r.CheckBreak()
	}
	if yyb1659 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1659++
	if yyhl1659 {
		yyb1659 = yyj1659 > l
	} else {
		yyb1659 = r.CheckBreak()
	}
	if yyb1659 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1662 := &x.ObjectMeta
		yyv1662.CodecDecodeSelf(d)
	}
	yyj1659++
	if yyhl1659 {
		yyb1659 = yyj1659 > l
	} else {
		yyb1659 = r.CheckBreak()
	}
	if yyb1659 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv1663 := &x.Spec
		yyv1663.CodecDecodeSelf(d)
	}
	yyj1659++
	if yyhl1659 {
		yyb1659 = yyj1659 > l
	} else {
		yyb1659 = r.CheckBreak()
	}
	if yyb1659 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv1664 := &x.Status
		yyv1664.CodecDecodeSelf(d)
	}
	for {
		yyj1659++
		if yyhl1659 {
			yyb1659 = yyj1659 > l
		} else {
			yyb1659 = r.CheckBreak()
		}
		if yyb1659 {
			break
		}
		z.DecStructFieldNotFound(yyj1659-1, "")
	}
	r.ReadEnd()
}

func (x *PodTemplateSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1665 := z.EncBinary()
		_ = yym1665
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1666 := !z.EncBinary()
			yy2arr1666 := z.EncBasicHandle().StructToArray
			var yyq1666 [2]bool
			_, _, _ = yysep1666, yyq1666, yy2arr1666
			const yyr1666 bool = false
			yyq1666[0] = true
			yyq1666[1] = true
			if yyr1666 || yy2arr1666 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1666 int = 0
				for _, b := range yyq1666 {
					if b {
						yynn1666++
					}
				}
				r.EncodeMapStart(yynn1666)
			}
			if yyr1666 || yy2arr1666 {
				if yyq1666[0] {
					yy1668 := &x.ObjectMeta
					yy1668.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1666[0] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1669 := &x.ObjectMeta
					yy1669.CodecEncodeSelf(e)
				}
			}
			if yyr1666 || yy2arr1666 {
				if yyq1666[1] {
					yy1671 := &x.Spec
					yy1671.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1666[1] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy1672 := &x.Spec
					yy1672.CodecEncodeSelf(e)
				}
			}
			if yysep1666 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodTemplateSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1673 := z.DecBinary()
	_ = yym1673
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1674 := r.ReadMapStart()
			if yyl1674 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1674, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1674 := r.ReadArrayStart()
			if yyl1674 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1674, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1675Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1675Slc
	var yyhl1675 bool = l >= 0
	for yyj1675 := 0; ; yyj1675++ {
		if yyhl1675 {
			if yyj1675 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1675Slc = r.DecodeBytes(yys1675Slc, true, true)
		yys1675 := string(yys1675Slc)
		switch yys1675 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1676 := &x.ObjectMeta
				yyv1676.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv1677 := &x.Spec
				yyv1677.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1675)
		} // end switch yys1675
	} // end for yyj1675
	if !yyhl1675 {
		r.ReadEnd()
	}
}

func (x *PodTemplateSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1678 int
	var yyb1678 bool
	var yyhl1678 bool = l >= 0
	yyj1678++
	if yyhl1678 {
		yyb1678 = yyj1678 > l
	} else {
		yyb1678 = r.CheckBreak()
	}
	if yyb1678 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1679 := &x.ObjectMeta
		yyv1679.CodecDecodeSelf(d)
	}
	yyj1678++
	if yyhl1678 {
		yyb1678 = yyj1678 > l
	} else {
		yyb1678 = r.CheckBreak()
	}
	if yyb1678 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv1680 := &x.Spec
		yyv1680.CodecDecodeSelf(d)
	}
	for {
		yyj1678++
		if yyhl1678 {
			yyb1678 = yyj1678 > l
		} else {
			yyb1678 = r.CheckBreak()
		}
		if yyb1678 {
			break
		}
		z.DecStructFieldNotFound(yyj1678-1, "")
	}
	r.ReadEnd()
}

func (x *PodTemplate) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1681 := z.EncBinary()
		_ = yym1681
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1682 := !z.EncBinary()
			yy2arr1682 := z.EncBasicHandle().StructToArray
			var yyq1682 [4]bool
			_, _, _ = yysep1682, yyq1682, yy2arr1682
			const yyr1682 bool = false
			yyq1682[0] = x.Kind != ""
			yyq1682[1] = x.APIVersion != ""
			yyq1682[2] = true
			yyq1682[3] = true
			if yyr1682 || yy2arr1682 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1682 int = 0
				for _, b := range yyq1682 {
					if b {
						yynn1682++
					}
				}
				r.EncodeMapStart(yynn1682)
			}
			if yyr1682 || yy2arr1682 {
				if yyq1682[0] {
					yym1684 := z.EncBinary()
					_ = yym1684
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1682[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1685 := z.EncBinary()
					_ = yym1685
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1682 || yy2arr1682 {
				if yyq1682[1] {
					yym1687 := z.EncBinary()
					_ = yym1687
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1682[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1688 := z.EncBinary()
					_ = yym1688
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1682 || yy2arr1682 {
				if yyq1682[2] {
					yy1690 := &x.ObjectMeta
					yy1690.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1682[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1691 := &x.ObjectMeta
					yy1691.CodecEncodeSelf(e)
				}
			}
			if yyr1682 || yy2arr1682 {
				if yyq1682[3] {
					yy1693 := &x.Template
					yy1693.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1682[3] {
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					yy1694 := &x.Template
					yy1694.CodecEncodeSelf(e)
				}
			}
			if yysep1682 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodTemplate) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1695 := z.DecBinary()
	_ = yym1695
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1696 := r.ReadMapStart()
			if yyl1696 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1696, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1696 := r.ReadArrayStart()
			if yyl1696 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1696, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplate) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1697Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1697Slc
	var yyhl1697 bool = l >= 0
	for yyj1697 := 0; ; yyj1697++ {
		if yyhl1697 {
			if yyj1697 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1697Slc = r.DecodeBytes(yys1697Slc, true, true)
		yys1697 := string(yys1697Slc)
		switch yys1697 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1700 := &x.ObjectMeta
				yyv1700.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = PodTemplateSpec{}
			} else {
				yyv1701 := &x.Template
				yyv1701.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1697)
		} // end switch yys1697
	} // end for yyj1697
	if !yyhl1697 {
		r.ReadEnd()
	}
}

func (x *PodTemplate) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1702 int
	var yyb1702 bool
	var yyhl1702 bool = l >= 0
	yyj1702++
	if yyhl1702 {
		yyb1702 = yyj1702 > l
	} else {
		yyb1702 = r.CheckBreak()
	}
	if yyb1702 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1702++
	if yyhl1702 {
		yyb1702 = yyj1702 > l
	} else {
		yyb1702 = r.CheckBreak()
	}
	if yyb1702 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1702++
	if yyhl1702 {
		yyb1702 = yyj1702 > l
	} else {
		yyb1702 = r.CheckBreak()
	}
	if yyb1702 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1705 := &x.ObjectMeta
		yyv1705.CodecDecodeSelf(d)
	}
	yyj1702++
	if yyhl1702 {
		yyb1702 = yyj1702 > l
	} else {
		yyb1702 = r.CheckBreak()
	}
	if yyb1702 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Template = PodTemplateSpec{}
	} else {
		yyv1706 := &x.Template
		yyv1706.CodecDecodeSelf(d)
	}
	for {
		yyj1702++
		if yyhl1702 {
			yyb1702 = yyj1702 > l
		} else {
			yyb1702 = r.CheckBreak()
		}
		if yyb1702 {
			break
		}
		z.DecStructFieldNotFound(yyj1702-1, "")
	}
	r.ReadEnd()
}

func (x *PodTemplateList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1707 := z.EncBinary()
		_ = yym1707
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1708 := !z.EncBinary()
			yy2arr1708 := z.EncBasicHandle().StructToArray
			var yyq1708 [4]bool
			_, _, _ = yysep1708, yyq1708, yy2arr1708
			const yyr1708 bool = false
			yyq1708[0] = x.Kind != ""
			yyq1708[1] = x.APIVersion != ""
			yyq1708[2] = true
			if yyr1708 || yy2arr1708 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1708 int = 1
				for _, b := range yyq1708 {
					if b {
						yynn1708++
					}
				}
				r.EncodeMapStart(yynn1708)
			}
			if yyr1708 || yy2arr1708 {
				if yyq1708[0] {
					yym1710 := z.EncBinary()
					_ = yym1710
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1708[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1711 := z.EncBinary()
					_ = yym1711
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1708 || yy2arr1708 {
				if yyq1708[1] {
					yym1713 := z.EncBinary()
					_ = yym1713
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1708[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1714 := z.EncBinary()
					_ = yym1714
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1708 || yy2arr1708 {
				if yyq1708[2] {
					yy1716 := &x.ListMeta
					yym1717 := z.EncBinary()
					_ = yym1717
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1716) {
					} else {
						z.EncFallback(yy1716)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1708[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1718 := &x.ListMeta
					yym1719 := z.EncBinary()
					_ = yym1719
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1718) {
					} else {
						z.EncFallback(yy1718)
					}
				}
			}
			if yyr1708 || yy2arr1708 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1721 := z.EncBinary()
					_ = yym1721
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1722 := z.EncBinary()
					_ = yym1722
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			}
			if yysep1708 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodTemplateList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1723 := z.DecBinary()
	_ = yym1723
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1724 := r.ReadMapStart()
			if yyl1724 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1724, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1724 := r.ReadArrayStart()
			if yyl1724 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1724, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1725Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1725Slc
	var yyhl1725 bool = l >= 0
	for yyj1725 := 0; ; yyj1725++ {
		if yyhl1725 {
			if yyj1725 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1725Slc = r.DecodeBytes(yys1725Slc, true, true)
		yys1725 := string(yys1725Slc)
		switch yys1725 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1728 := &x.ListMeta
				yym1729 := z.DecBinary()
				_ = yym1729
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1728) {
				} else {
					z.DecFallback(yyv1728, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1730 := &x.Items
				yym1731 := z.DecBinary()
				_ = yym1731
				if false {
				} else {
					h.decSlicePodTemplate((*[]PodTemplate)(yyv1730), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1725)
		} // end switch yys1725
	} // end for yyj1725
	if !yyhl1725 {
		r.ReadEnd()
	}
}

func (x *PodTemplateList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1732 int
	var yyb1732 bool
	var yyhl1732 bool = l >= 0
	yyj1732++
	if yyhl1732 {
		yyb1732 = yyj1732 > l
	} else {
		yyb1732 = r.CheckBreak()
	}
	if yyb1732 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1732++
	if yyhl1732 {
		yyb1732 = yyj1732 > l
	} else {
		yyb1732 = r.CheckBreak()
	}
	if yyb1732 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1732++
	if yyhl1732 {
		yyb1732 = yyj1732 > l
	} else {
		yyb1732 = r.CheckBreak()
	}
	if yyb1732 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1735 := &x.ListMeta
		yym1736 := z.DecBinary()
		_ = yym1736
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1735) {
		} else {
			z.DecFallback(yyv1735, false)
		}
	}
	yyj1732++
	if yyhl1732 {
		yyb1732 = yyj1732 > l
	} else {
		yyb1732 = r.CheckBreak()
	}
	if yyb1732 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1737 := &x.Items
		yym1738 := z.DecBinary()
		_ = yym1738
		if false {
		} else {
			h.decSlicePodTemplate((*[]PodTemplate)(yyv1737), d)
		}
	}
	for {
		yyj1732++
		if yyhl1732 {
			yyb1732 = yyj1732 > l
		} else {
			yyb1732 = r.CheckBreak()
		}
		if yyb1732 {
			break
		}
		z.DecStructFieldNotFound(yyj1732-1, "")
	}
	r.ReadEnd()
}

func (x *ReplicationControllerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1739 := z.EncBinary()
		_ = yym1739
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1740 := !z.EncBinary()
			yy2arr1740 := z.EncBasicHandle().StructToArray
			var yyq1740 [3]bool
			_, _, _ = yysep1740, yyq1740, yy2arr1740
			const yyr1740 bool = false
			yyq1740[2] = x.Template != nil
			if yyr1740 || yy2arr1740 {
				r.EncodeArrayStart(3)
			} else {
				var yynn1740 int = 2
				for _, b := range yyq1740 {
					if b {
						yynn1740++
					}
				}
				r.EncodeMapStart(yynn1740)
			}
			if yyr1740 || yy2arr1740 {
				yym1742 := z.EncBinary()
				_ = yym1742
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				yym1743 := z.EncBinary()
				_ = yym1743
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr1740 || yy2arr1740 {
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym1745 := z.EncBinary()
					_ = yym1745
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("selector"))
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym1746 := z.EncBinary()
					_ = yym1746
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			}
			if yyr1740 || yy2arr1740 {
				if yyq1740[2] {
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1740[2] {
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				}
			}
			if yysep1740 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ReplicationControllerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1748 := z.DecBinary()
	_ = yym1748
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1749 := r.ReadMapStart()
			if yyl1749 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1749, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1749 := r.ReadArrayStart()
			if yyl1749 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1749, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1750Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1750Slc
	var yyhl1750 bool = l >= 0
	for yyj1750 := 0; ; yyj1750++ {
		if yyhl1750 {
			if yyj1750 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1750Slc = r.DecodeBytes(yys1750Slc, true, true)
		yys1750 := string(yys1750Slc)
		switch yys1750 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv1752 := &x.Selector
				yym1753 := z.DecBinary()
				_ = yym1753
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1752, false, d)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				if x.Template != nil {
					x.Template = nil
				}
			} else {
				if x.Template == nil {
					x.Template = new(PodTemplateSpec)
				}
				x.Template.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1750)
		} // end switch yys1750
	} // end for yyj1750
	if !yyhl1750 {
		r.ReadEnd()
	}
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1755 int
	var yyb1755 bool
	var yyhl1755 bool = l >= 0
	yyj1755++
	if yyhl1755 {
		yyb1755 = yyj1755 > l
	} else {
		yyb1755 = r.CheckBreak()
	}
	if yyb1755 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1755++
	if yyhl1755 {
		yyb1755 = yyj1755 > l
	} else {
		yyb1755 = r.CheckBreak()
	}
	if yyb1755 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv1757 := &x.Selector
		yym1758 := z.DecBinary()
		_ = yym1758
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1757, false, d)
		}
	}
	yyj1755++
	if yyhl1755 {
		yyb1755 = yyj1755 > l
	} else {
		yyb1755 = r.CheckBreak()
	}
	if yyb1755 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Template != nil {
			x.Template = nil
		}
	} else {
		if x.Template == nil {
			x.Template = new(PodTemplateSpec)
		}
		x.Template.CodecDecodeSelf(d)
	}
	for {
		yyj1755++
		if yyhl1755 {
			yyb1755 = yyj1755 > l
		} else {
			yyb1755 = r.CheckBreak()
		}
		if yyb1755 {
			break
		}
		z.DecStructFieldNotFound(yyj1755-1, "")
	}
	r.ReadEnd()
}

func (x *ReplicationControllerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1760 := z.EncBinary()
		_ = yym1760
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1761 := !z.EncBinary()
			yy2arr1761 := z.EncBasicHandle().StructToArray
			var yyq1761 [2]bool
			_, _, _ = yysep1761, yyq1761, yy2arr1761
			const yyr1761 bool = false
			yyq1761[1] = x.ObservedGeneration != 0
			if yyr1761 || yy2arr1761 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1761 int = 1
				for _, b := range yyq1761 {
					if b {
						yynn1761++
					}
				}
				r.EncodeMapStart(yynn1761)
			}
			if yyr1761 || yy2arr1761 {
				yym1763 := z.EncBinary()
				_ = yym1763
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				yym1764 := z.EncBinary()
				_ = yym1764
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr1761 || yy2arr1761 {
				if yyq1761[1] {
					yym1766 := z.EncBinary()
					_ = yym1766
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1761[1] {
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					yym1767 := z.EncBinary()
					_ = yym1767
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yysep1761 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ReplicationControllerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1768 := z.DecBinary()
	_ = yym1768
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1769 := r.ReadMapStart()
			if yyl1769 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1769, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1769 := r.ReadArrayStart()
			if yyl1769 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1769, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1770Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1770Slc
	var yyhl1770 bool = l >= 0
	for yyj1770 := 0; ; yyj1770++ {
		if yyhl1770 {
			if yyj1770 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1770Slc = r.DecodeBytes(yys1770Slc, true, true)
		yys1770 := string(yys1770Slc)
		switch yys1770 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1770)
		} // end switch yys1770
	} // end for yyj1770
	if !yyhl1770 {
		r.ReadEnd()
	}
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1773 int
	var yyb1773 bool
	var yyhl1773 bool = l >= 0
	yyj1773++
	if yyhl1773 {
		yyb1773 = yyj1773 > l
	} else {
		yyb1773 = r.CheckBreak()
	}
	if yyb1773 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1773++
	if yyhl1773 {
		yyb1773 = yyj1773 > l
	} else {
		yyb1773 = r.CheckBreak()
	}
	if yyb1773 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	for {
		yyj1773++
		if yyhl1773 {
			yyb1773 = yyj1773 > l
		} else {
			yyb1773 = r.CheckBreak()
		}
		if yyb1773 {
			break
		}
		z.DecStructFieldNotFound(yyj1773-1, "")
	}
	r.ReadEnd()
}

func (x *ReplicationController) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1776 := z.EncBinary()
		_ = yym1776
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1777 := !z.EncBinary()
			yy2arr1777 := z.EncBasicHandle().StructToArray
			var yyq1777 [5]bool
			_, _, _ = yysep1777, yyq1777, yy2arr1777
			const yyr1777 bool = false
			yyq1777[0] = x.Kind != ""
			yyq1777[1] = x.APIVersion != ""
			yyq1777[2] = true
			yyq1777[3] = true
			yyq1777[4] = true
			if yyr1777 || yy2arr1777 {
				r.EncodeArrayStart(5)
			} else {
				var yynn1777 int = 0
				for _, b := range yyq1777 {
					if b {
						yynn1777++
					}
				}
				r.EncodeMapStart(yynn1777)
			}
			if yyr1777 || yy2arr1777 {
				if yyq1777[0] {
					yym1779 := z.EncBinary()
					_ = yym1779
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1777[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1780 := z.EncBinary()
					_ = yym1780
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1777 || yy2arr1777 {
				if yyq1777[1] {
					yym1782 := z.EncBinary()
					_ = yym1782
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1777[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1783 := z.EncBinary()
					_ = yym1783
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1777 || yy2arr1777 {
				if yyq1777[2] {
					yy1785 := &x.ObjectMeta
					yy1785.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1777[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1786 := &x.ObjectMeta
					yy1786.CodecEncodeSelf(e)
				}
			}
			if yyr1777 || yy2arr1777 {
				if yyq1777[3] {
					yy1788 := &x.Spec
					yy1788.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1777[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy1789 := &x.Spec
					yy1789.CodecEncodeSelf(e)
				}
			}
			if yyr1777 || yy2arr1777 {
				if yyq1777[4] {
					yy1791 := &x.Status
					yy1791.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1777[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy1792 := &x.Status
					yy1792.CodecEncodeSelf(e)
				}
			}
			if yysep1777 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ReplicationController) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1793 := z.DecBinary()
	_ = yym1793
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1794 := r.ReadMapStart()
			if yyl1794 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1794, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1794 := r.ReadArrayStart()
			if yyl1794 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1794, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationController) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1795Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1795Slc
	var yyhl1795 bool = l >= 0
	for yyj1795 := 0; ; yyj1795++ {
		if yyhl1795 {
			if yyj1795 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1795Slc = r.DecodeBytes(yys1795Slc, true, true)
		yys1795 := string(yys1795Slc)
		switch yys1795 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1798 := &x.ObjectMeta
				yyv1798.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ReplicationControllerSpec{}
			} else {
				yyv1799 := &x.Spec
				yyv1799.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ReplicationControllerStatus{}
			} else {
				yyv1800 := &x.Status
				yyv1800.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1795)
		} // end switch yys1795
	} // end for yyj1795
	if !yyhl1795 {
		r.ReadEnd()
	}
}

func (x *ReplicationController) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1801 int
	var yyb1801 bool
	var yyhl1801 bool = l >= 0
	yyj1801++
	if yyhl1801 {
		yyb1801 = yyj1801 > l
	} else {
		yyb1801 = r.CheckBreak()
	}
	if yyb1801 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1801++
	if yyhl1801 {
		yyb1801 = yyj1801 > l
	} else {
		yyb1801 = r.CheckBreak()
	}
	if yyb1801 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1801++
	if yyhl1801 {
		yyb1801 = yyj1801 > l
	} else {
		yyb1801 = r.CheckBreak()
	}
	if yyb1801 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1804 := &x.ObjectMeta
		yyv1804.CodecDecodeSelf(d)
	}
	yyj1801++
	if yyhl1801 {
		yyb1801 = yyj1801 > l
	} else {
		yyb1801 = r.CheckBreak()
	}
	if yyb1801 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = ReplicationControllerSpec{}
	} else {
		yyv1805 := &x.Spec
		yyv1805.CodecDecodeSelf(d)
	}
	yyj1801++
	if yyhl1801 {
		yyb1801 = yyj1801 > l
	} else {
		yyb1801 = r.CheckBreak()
	}
	if yyb1801 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ReplicationControllerStatus{}
	} else {
		yyv1806 := &x.Status
		yyv1806.CodecDecodeSelf(d)
	}
	for {
		yyj1801++
		if yyhl1801 {
			yyb1801 = yyj1801 > l
		} else {
			yyb1801 = r.CheckBreak()
		}
		if yyb1801 {
			break
		}
		z.DecStructFieldNotFound(yyj1801-1, "")
	}
	r.ReadEnd()
}

func (x *ReplicationControllerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1807 := z.EncBinary()
		_ = yym1807
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1808 := !z.EncBinary()
			yy2arr1808 := z.EncBasicHandle().StructToArray
			var yyq1808 [4]bool
			_, _, _ = yysep1808, yyq1808, yy2arr1808
			const yyr1808 bool = false
			yyq1808[0] = x.Kind != ""
			yyq1808[1] = x.APIVersion != ""
			yyq1808[2] = true
			if yyr1808 || yy2arr1808 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1808 int = 1
				for _, b := range yyq1808 {
					if b {
						yynn1808++
					}
				}
				r.EncodeMapStart(yynn1808)
			}
			if yyr1808 || yy2arr1808 {
				if yyq1808[0] {
					yym1810 := z.EncBinary()
					_ = yym1810
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1808[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1811 := z.EncBinary()
					_ = yym1811
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1808 || yy2arr1808 {
				if yyq1808[1] {
					yym1813 := z.EncBinary()
					_ = yym1813
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1808[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1814 := z.EncBinary()
					_ = yym1814
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1808 || yy2arr1808 {
				if yyq1808[2] {
					yy1816 := &x.ListMeta
					yym1817 := z.EncBinary()
					_ = yym1817
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1816) {
					} else {
						z.EncFallback(yy1816)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1808[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1818 := &x.ListMeta
					yym1819 := z.EncBinary()
					_ = yym1819
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1818) {
					} else {
						z.EncFallback(yy1818)
					}
				}
			}
			if yyr1808 || yy2arr1808 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1821 := z.EncBinary()
					_ = yym1821
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1822 := z.EncBinary()
					_ = yym1822
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			}
			if yysep1808 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ReplicationControllerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1823 := z.DecBinary()
	_ = yym1823
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1824 := r.ReadMapStart()
			if yyl1824 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1824, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1824 := r.ReadArrayStart()
			if yyl1824 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1824, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1825Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1825Slc
	var yyhl1825 bool = l >= 0
	for yyj1825 := 0; ; yyj1825++ {
		if yyhl1825 {
			if yyj1825 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1825Slc = r.DecodeBytes(yys1825Slc, true, true)
		yys1825 := string(yys1825Slc)
		switch yys1825 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1828 := &x.ListMeta
				yym1829 := z.DecBinary()
				_ = yym1829
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1828) {
				} else {
					z.DecFallback(yyv1828, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1830 := &x.Items
				yym1831 := z.DecBinary()
				_ = yym1831
				if false {
				} else {
					h.decSliceReplicationController((*[]ReplicationController)(yyv1830), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1825)
		} // end switch yys1825
	} // end for yyj1825
	if !yyhl1825 {
		r.ReadEnd()
	}
}

func (x *ReplicationControllerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1832 int
	var yyb1832 bool
	var yyhl1832 bool = l >= 0
	yyj1832++
	if yyhl1832 {
		yyb1832 = yyj1832 > l
	} else {
		yyb1832 = r.CheckBreak()
	}
	if yyb1832 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1832++
	if yyhl1832 {
		yyb1832 = yyj1832 > l
	} else {
		yyb1832 = r.CheckBreak()
	}
	if yyb1832 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1832++
	if yyhl1832 {
		yyb1832 = yyj1832 > l
	} else {
		yyb1832 = r.CheckBreak()
	}
	if yyb1832 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1835 := &x.ListMeta
		yym1836 := z.DecBinary()
		_ = yym1836
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1835) {
		} else {
			z.DecFallback(yyv1835, false)
		}
	}
	yyj1832++
	if yyhl1832 {
		yyb1832 = yyj1832 > l
	} else {
		yyb1832 = r.CheckBreak()
	}
	if yyb1832 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1837 := &x.Items
		yym1838 := z.DecBinary()
		_ = yym1838
		if false {
		} else {
			h.decSliceReplicationController((*[]ReplicationController)(yyv1837), d)
		}
	}
	for {
		yyj1832++
		if yyhl1832 {
			yyb1832 = yyj1832 > l
		} else {
			yyb1832 = r.CheckBreak()
		}
		if yyb1832 {
			break
		}
		z.DecStructFieldNotFound(yyj1832-1, "")
	}
	r.ReadEnd()
}

func (x *ServiceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1839 := z.EncBinary()
		_ = yym1839
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1840 := !z.EncBinary()
			yy2arr1840 := z.EncBasicHandle().StructToArray
			var yyq1840 [4]bool
			_, _, _ = yysep1840, yyq1840, yy2arr1840
			const yyr1840 bool = false
			yyq1840[0] = x.Kind != ""
			yyq1840[1] = x.APIVersion != ""
			yyq1840[2] = true
			if yyr1840 || yy2arr1840 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1840 int = 1
				for _, b := range yyq1840 {
					if b {
						yynn1840++
					}
				}
				r.EncodeMapStart(yynn1840)
			}
			if yyr1840 || yy2arr1840 {
				if yyq1840[0] {
					yym1842 := z.EncBinary()
					_ = yym1842
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1840[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1843 := z.EncBinary()
					_ = yym1843
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1840 || yy2arr1840 {
				if yyq1840[1] {
					yym1845 := z.EncBinary()
					_ = yym1845
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1840[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1846 := z.EncBinary()
					_ = yym1846
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1840 || yy2arr1840 {
				if yyq1840[2] {
					yy1848 := &x.ListMeta
					yym1849 := z.EncBinary()
					_ = yym1849
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1848) {
					} else {
						z.EncFallback(yy1848)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1840[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1850 := &x.ListMeta
					yym1851 := z.EncBinary()
					_ = yym1851
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1850) {
					} else {
						z.EncFallback(yy1850)
					}
				}
			}
			if yyr1840 || yy2arr1840 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1853 := z.EncBinary()
					_ = yym1853
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1854 := z.EncBinary()
					_ = yym1854
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			}
			if yysep1840 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServiceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1855 := z.DecBinary()
	_ = yym1855
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1856 := r.ReadMapStart()
			if yyl1856 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1856, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1856 := r.ReadArrayStart()
			if yyl1856 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1856, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1857Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1857Slc
	var yyhl1857 bool = l >= 0
	for yyj1857 := 0; ; yyj1857++ {
		if yyhl1857 {
			if yyj1857 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1857Slc = r.DecodeBytes(yys1857Slc, true, true)
		yys1857 := string(yys1857Slc)
		switch yys1857 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1860 := &x.ListMeta
				yym1861 := z.DecBinary()
				_ = yym1861
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1860) {
				} else {
					z.DecFallback(yyv1860, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1862 := &x.Items
				yym1863 := z.DecBinary()
				_ = yym1863
				if false {
				} else {
					h.decSliceService((*[]Service)(yyv1862), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1857)
		} // end switch yys1857
	} // end for yyj1857
	if !yyhl1857 {
		r.ReadEnd()
	}
}

func (x *ServiceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1864 int
	var yyb1864 bool
	var yyhl1864 bool = l >= 0
	yyj1864++
	if yyhl1864 {
		yyb1864 = yyj1864 > l
	} else {
		yyb1864 = r.CheckBreak()
	}
	if yyb1864 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1864++
	if yyhl1864 {
		yyb1864 = yyj1864 > l
	} else {
		yyb1864 = r.CheckBreak()
	}
	if yyb1864 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1864++
	if yyhl1864 {
		yyb1864 = yyj1864 > l
	} else {
		yyb1864 = r.CheckBreak()
	}
	if yyb1864 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1867 := &x.ListMeta
		yym1868 := z.DecBinary()
		_ = yym1868
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1867) {
		} else {
			z.DecFallback(yyv1867, false)
		}
	}
	yyj1864++
	if yyhl1864 {
		yyb1864 = yyj1864 > l
	} else {
		yyb1864 = r.CheckBreak()
	}
	if yyb1864 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1869 := &x.Items
		yym1870 := z.DecBinary()
		_ = yym1870
		if false {
		} else {
			h.decSliceService((*[]Service)(yyv1869), d)
		}
	}
	for {
		yyj1864++
		if yyhl1864 {
			yyb1864 = yyj1864 > l
		} else {
			yyb1864 = r.CheckBreak()
		}
		if yyb1864 {
			break
		}
		z.DecStructFieldNotFound(yyj1864-1, "")
	}
	r.ReadEnd()
}

func (x ServiceAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1871 := z.EncBinary()
	_ = yym1871
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1872 := z.DecBinary()
	_ = yym1872
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ServiceType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1873 := z.EncBinary()
	_ = yym1873
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1874 := z.DecBinary()
	_ = yym1874
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ServiceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1875 := z.EncBinary()
		_ = yym1875
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1876 := !z.EncBinary()
			yy2arr1876 := z.EncBasicHandle().StructToArray
			var yyq1876 [1]bool
			_, _, _ = yysep1876, yyq1876, yy2arr1876
			const yyr1876 bool = false
			yyq1876[0] = true
			if yyr1876 || yy2arr1876 {
				r.EncodeArrayStart(1)
			} else {
				var yynn1876 int = 0
				for _, b := range yyq1876 {
					if b {
						yynn1876++
					}
				}
				r.EncodeMapStart(yynn1876)
			}
			if yyr1876 || yy2arr1876 {
				if yyq1876[0] {
					yy1878 := &x.LoadBalancer
					yy1878.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1876[0] {
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancer"))
					yy1879 := &x.LoadBalancer
					yy1879.CodecEncodeSelf(e)
				}
			}
			if yysep1876 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServiceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1880 := z.DecBinary()
	_ = yym1880
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1881 := r.ReadMapStart()
			if yyl1881 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1881, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1881 := r.ReadArrayStart()
			if yyl1881 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1881, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1882Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1882Slc
	var yyhl1882 bool = l >= 0
	for yyj1882 := 0; ; yyj1882++ {
		if yyhl1882 {
			if yyj1882 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1882Slc = r.DecodeBytes(yys1882Slc, true, true)
		yys1882 := string(yys1882Slc)
		switch yys1882 {
		case "loadBalancer":
			if r.TryDecodeAsNil() {
				x.LoadBalancer = LoadBalancerStatus{}
			} else {
				yyv1883 := &x.LoadBalancer
				yyv1883.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1882)
		} // end switch yys1882
	} // end for yyj1882
	if !yyhl1882 {
		r.ReadEnd()
	}
}

func (x *ServiceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1884 int
	var yyb1884 bool
	var yyhl1884 bool = l >= 0
	yyj1884++
	if yyhl1884 {
		yyb1884 = yyj1884 > l
	} else {
		yyb1884 = r.CheckBreak()
	}
	if yyb1884 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LoadBalancer = LoadBalancerStatus{}
	} else {
		yyv1885 := &x.LoadBalancer
		yyv1885.CodecDecodeSelf(d)
	}
	for {
		yyj1884++
		if yyhl1884 {
			yyb1884 = yyj1884 > l
		} else {
			yyb1884 = r.CheckBreak()
		}
		if yyb1884 {
			break
		}
		z.DecStructFieldNotFound(yyj1884-1, "")
	}
	r.ReadEnd()
}

func (x *LoadBalancerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1886 := z.EncBinary()
		_ = yym1886
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1887 := !z.EncBinary()
			yy2arr1887 := z.EncBasicHandle().StructToArray
			var yyq1887 [1]bool
			_, _, _ = yysep1887, yyq1887, yy2arr1887
			const yyr1887 bool = false
			yyq1887[0] = len(x.Ingress) != 0
			if yyr1887 || yy2arr1887 {
				r.EncodeArrayStart(1)
			} else {
				var yynn1887 int = 0
				for _, b := range yyq1887 {
					if b {
						yynn1887++
					}
				}
				r.EncodeMapStart(yynn1887)
			}
			if yyr1887 || yy2arr1887 {
				if yyq1887[0] {
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym1889 := z.EncBinary()
						_ = yym1889
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1887[0] {
					r.EncodeString(codecSelferC_UTF81234, string("ingress"))
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym1890 := z.EncBinary()
						_ = yym1890
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				}
			}
			if yysep1887 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LoadBalancerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1891 := z.DecBinary()
	_ = yym1891
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1892 := r.ReadMapStart()
			if yyl1892 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1892, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1892 := r.ReadArrayStart()
			if yyl1892 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1892, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1893Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1893Slc
	var yyhl1893 bool = l >= 0
	for yyj1893 := 0; ; yyj1893++ {
		if yyhl1893 {
			if yyj1893 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1893Slc = r.DecodeBytes(yys1893Slc, true, true)
		yys1893 := string(yys1893Slc)
		switch yys1893 {
		case "ingress":
			if r.TryDecodeAsNil() {
				x.Ingress = nil
			} else {
				yyv1894 := &x.Ingress
				yym1895 := z.DecBinary()
				_ = yym1895
				if false {
				} else {
					h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv1894), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1893)
		} // end switch yys1893
	} // end for yyj1893
	if !yyhl1893 {
		r.ReadEnd()
	}
}

func (x *LoadBalancerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1896 int
	var yyb1896 bool
	var yyhl1896 bool = l >= 0
	yyj1896++
	if yyhl1896 {
		yyb1896 = yyj1896 > l
	} else {
		yyb1896 = r.CheckBreak()
	}
	if yyb1896 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Ingress = nil
	} else {
		yyv1897 := &x.Ingress
		yym1898 := z.DecBinary()
		_ = yym1898
		if false {
		} else {
			h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv1897), d)
		}
	}
	for {
		yyj1896++
		if yyhl1896 {
			yyb1896 = yyj1896 > l
		} else {
			yyb1896 = r.CheckBreak()
		}
		if yyb1896 {
			break
		}
		z.DecStructFieldNotFound(yyj1896-1, "")
	}
	r.ReadEnd()
}

func (x *LoadBalancerIngress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1899 := z.EncBinary()
		_ = yym1899
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1900 := !z.EncBinary()
			yy2arr1900 := z.EncBasicHandle().StructToArray
			var yyq1900 [2]bool
			_, _, _ = yysep1900, yyq1900, yy2arr1900
			const yyr1900 bool = false
			yyq1900[0] = x.IP != ""
			yyq1900[1] = x.Hostname != ""
			if yyr1900 || yy2arr1900 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1900 int = 0
				for _, b := range yyq1900 {
					if b {
						yynn1900++
					}
				}
				r.EncodeMapStart(yynn1900)
			}
			if yyr1900 || yy2arr1900 {
				if yyq1900[0] {
					yym1902 := z.EncBinary()
					_ = yym1902
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1900[0] {
					r.EncodeString(codecSelferC_UTF81234, string("ip"))
					yym1903 := z.EncBinary()
					_ = yym1903
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				}
			}
			if yyr1900 || yy2arr1900 {
				if yyq1900[1] {
					yym1905 := z.EncBinary()
					_ = yym1905
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1900[1] {
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					yym1906 := z.EncBinary()
					_ = yym1906
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yysep1900 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LoadBalancerIngress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1907 := z.DecBinary()
	_ = yym1907
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1908 := r.ReadMapStart()
			if yyl1908 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1908, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1908 := r.ReadArrayStart()
			if yyl1908 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1908, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerIngress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1909Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1909Slc
	var yyhl1909 bool = l >= 0
	for yyj1909 := 0; ; yyj1909++ {
		if yyhl1909 {
			if yyj1909 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1909Slc = r.DecodeBytes(yys1909Slc, true, true)
		yys1909 := string(yys1909Slc)
		switch yys1909 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1909)
		} // end switch yys1909
	} // end for yyj1909
	if !yyhl1909 {
		r.ReadEnd()
	}
}

func (x *LoadBalancerIngress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1912 int
	var yyb1912 bool
	var yyhl1912 bool = l >= 0
	yyj1912++
	if yyhl1912 {
		yyb1912 = yyj1912 > l
	} else {
		yyb1912 = r.CheckBreak()
	}
	if yyb1912 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj1912++
	if yyhl1912 {
		yyb1912 = yyj1912 > l
	} else {
		yyb1912 = r.CheckBreak()
	}
	if yyb1912 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	for {
		yyj1912++
		if yyhl1912 {
			yyb1912 = yyj1912 > l
		} else {
			yyb1912 = r.CheckBreak()
		}
		if yyb1912 {
			break
		}
		z.DecStructFieldNotFound(yyj1912-1, "")
	}
	r.ReadEnd()
}

func (x *ServiceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1915 := z.EncBinary()
		_ = yym1915
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1916 := !z.EncBinary()
			yy2arr1916 := z.EncBasicHandle().StructToArray
			var yyq1916 [7]bool
			_, _, _ = yysep1916, yyq1916, yy2arr1916
			const yyr1916 bool = false
			yyq1916[0] = x.Type != ""
			yyq1916[3] = x.ClusterIP != ""
			yyq1916[4] = len(x.ExternalIPs) != 0
			yyq1916[5] = x.LoadBalancerIP != ""
			yyq1916[6] = x.SessionAffinity != ""
			if yyr1916 || yy2arr1916 {
				r.EncodeArrayStart(7)
			} else {
				var yynn1916 int = 2
				for _, b := range yyq1916 {
					if b {
						yynn1916++
					}
				}
				r.EncodeMapStart(yynn1916)
			}
			if yyr1916 || yy2arr1916 {
				if yyq1916[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1916[0] {
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr1916 || yy2arr1916 {
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym1919 := z.EncBinary()
					_ = yym1919
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("ports"))
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym1920 := z.EncBinary()
					_ = yym1920
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			}
			if yyr1916 || yy2arr1916 {
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym1922 := z.EncBinary()
					_ = yym1922
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("selector"))
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym1923 := z.EncBinary()
					_ = yym1923
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			}
			if yyr1916 || yy2arr1916 {
				if yyq1916[3] {
					yym1925 := z.EncBinary()
					_ = yym1925
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1916[3] {
					r.EncodeString(codecSelferC_UTF81234, string("clusterIP"))
					yym1926 := z.EncBinary()
					_ = yym1926
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				}
			}
			if yyr1916 || yy2arr1916 {
				if yyq1916[4] {
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym1928 := z.EncBinary()
						_ = yym1928
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1916[4] {
					r.EncodeString(codecSelferC_UTF81234, string("externalIPs"))
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym1929 := z.EncBinary()
						_ = yym1929
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				}
			}
			if yyr1916 || yy2arr1916 {
				if yyq1916[5] {
					yym1931 := z.EncBinary()
					_ = yym1931
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1916[5] {
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerIP"))
					yym1932 := z.EncBinary()
					_ = yym1932
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				}
			}
			if yyr1916 || yy2arr1916 {
				if yyq1916[6] {
					x.SessionAffinity.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1916[6] {
					r.EncodeString(codecSelferC_UTF81234, string("sessionAffinity"))
					x.SessionAffinity.CodecEncodeSelf(e)
				}
			}
			if yysep1916 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServiceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1934 := z.DecBinary()
	_ = yym1934
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1935 := r.ReadMapStart()
			if yyl1935 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1935, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1935 := r.ReadArrayStart()
			if yyl1935 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1935, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1936Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1936Slc
	var yyhl1936 bool = l >= 0
	for yyj1936 := 0; ; yyj1936++ {
		if yyhl1936 {
			if yyj1936 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1936Slc = r.DecodeBytes(yys1936Slc, true, true)
		yys1936 := string(yys1936Slc)
		switch yys1936 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ServiceType(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1938 := &x.Ports
				yym1939 := z.DecBinary()
				_ = yym1939
				if false {
				} else {
					h.decSliceServicePort((*[]ServicePort)(yyv1938), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv1940 := &x.Selector
				yym1941 := z.DecBinary()
				_ = yym1941
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1940, false, d)
				}
			}
		case "clusterIP":
			if r.TryDecodeAsNil() {
				x.ClusterIP = ""
			} else {
				x.ClusterIP = string(r.DecodeString())
			}
		case "externalIPs":
			if r.TryDecodeAsNil() {
				x.ExternalIPs = nil
			} else {
				yyv1943 := &x.ExternalIPs
				yym1944 := z.DecBinary()
				_ = yym1944
				if false {
				} else {
					z.F.DecSliceStringX(yyv1943, false, d)
				}
			}
		case "loadBalancerIP":
			if r.TryDecodeAsNil() {
				x.LoadBalancerIP = ""
			} else {
				x.LoadBalancerIP = string(r.DecodeString())
			}
		case "sessionAffinity":
			if r.TryDecodeAsNil() {
				x.SessionAffinity = ""
			} else {
				x.SessionAffinity = ServiceAffinity(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1936)
		} // end switch yys1936
	} // end for yyj1936
	if !yyhl1936 {
		r.ReadEnd()
	}
}

func (x *ServiceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1947 int
	var yyb1947 bool
	var yyhl1947 bool = l >= 0
	yyj1947++
	if yyhl1947 {
		yyb1947 = yyj1947 > l
	} else {
		yyb1947 = r.CheckBreak()
	}
	if yyb1947 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ServiceType(r.DecodeString())
	}
	yyj1947++
	if yyhl1947 {
		yyb1947 = yyj1947 > l
	} else {
		yyb1947 = r.CheckBreak()
	}
	if yyb1947 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1949 := &x.Ports
		yym1950 := z.DecBinary()
		_ = yym1950
		if false {
		} else {
			h.decSliceServicePort((*[]ServicePort)(yyv1949), d)
		}
	}
	yyj1947++
	if yyhl1947 {
		yyb1947 = yyj1947 > l
	} else {
		yyb1947 = r.CheckBreak()
	}
	if yyb1947 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv1951 := &x.Selector
		yym1952 := z.DecBinary()
		_ = yym1952
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1951, false, d)
		}
	}
	yyj1947++
	if yyhl1947 {
		yyb1947 = yyj1947 > l
	} else {
		yyb1947 = r.CheckBreak()
	}
	if yyb1947 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ClusterIP = ""
	} else {
		x.ClusterIP = string(r.DecodeString())
	}
	yyj1947++
	if yyhl1947 {
		yyb1947 = yyj1947 > l
	} else {
		yyb1947 = r.CheckBreak()
	}
	if yyb1947 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ExternalIPs = nil
	} else {
		yyv1954 := &x.ExternalIPs
		yym1955 := z.DecBinary()
		_ = yym1955
		if false {
		} else {
			z.F.DecSliceStringX(yyv1954, false, d)
		}
	}
	yyj1947++
	if yyhl1947 {
		yyb1947 = yyj1947 > l
	} else {
		yyb1947 = r.CheckBreak()
	}
	if yyb1947 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LoadBalancerIP = ""
	} else {
		x.LoadBalancerIP = string(r.DecodeString())
	}
	yyj1947++
	if yyhl1947 {
		yyb1947 = yyj1947 > l
	} else {
		yyb1947 = r.CheckBreak()
	}
	if yyb1947 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SessionAffinity = ""
	} else {
		x.SessionAffinity = ServiceAffinity(r.DecodeString())
	}
	for {
		yyj1947++
		if yyhl1947 {
			yyb1947 = yyj1947 > l
		} else {
			yyb1947 = r.CheckBreak()
		}
		if yyb1947 {
			break
		}
		z.DecStructFieldNotFound(yyj1947-1, "")
	}
	r.ReadEnd()
}

func (x *ServicePort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1958 := z.EncBinary()
		_ = yym1958
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1959 := !z.EncBinary()
			yy2arr1959 := z.EncBasicHandle().StructToArray
			var yyq1959 [5]bool
			_, _, _ = yysep1959, yyq1959, yy2arr1959
			const yyr1959 bool = false
			if yyr1959 || yy2arr1959 {
				r.EncodeArrayStart(5)
			} else {
				var yynn1959 int = 5
				for _, b := range yyq1959 {
					if b {
						yynn1959++
					}
				}
				r.EncodeMapStart(yynn1959)
			}
			if yyr1959 || yy2arr1959 {
				yym1961 := z.EncBinary()
				_ = yym1961
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				yym1962 := z.EncBinary()
				_ = yym1962
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1959 || yy2arr1959 {
				x.Protocol.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("protocol"))
				x.Protocol.CodecEncodeSelf(e)
			}
			if yyr1959 || yy2arr1959 {
				yym1965 := z.EncBinary()
				_ = yym1965
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				yym1966 := z.EncBinary()
				_ = yym1966
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr1959 || yy2arr1959 {
				yy1968 := &x.TargetPort
				yym1969 := z.EncBinary()
				_ = yym1969
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1968) {
				} else if !yym1969 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1968)
				} else {
					z.EncFallback(yy1968)
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("targetPort"))
				yy1970 := &x.TargetPort
				yym1971 := z.EncBinary()
				_ = yym1971
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1970) {
				} else if !yym1971 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1970)
				} else {
					z.EncFallback(yy1970)
				}
			}
			if yyr1959 || yy2arr1959 {
				yym1973 := z.EncBinary()
				_ = yym1973
				if false {
				} else {
					r.EncodeInt(int64(x.NodePort))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("nodePort"))
				yym1974 := z.EncBinary()
				_ = yym1974
				if false {
				} else {
					r.EncodeInt(int64(x.NodePort))
				}
			}
			if yysep1959 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServicePort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1975 := z.DecBinary()
	_ = yym1975
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1976 := r.ReadMapStart()
			if yyl1976 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1976, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1976 := r.ReadArrayStart()
			if yyl1976 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1976, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServicePort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1977Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1977Slc
	var yyhl1977 bool = l >= 0
	for yyj1977 := 0; ; yyj1977++ {
		if yyhl1977 {
			if yyj1977 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1977Slc = r.DecodeBytes(yys1977Slc, true, true)
		yys1977 := string(yys1977Slc)
		switch yys1977 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "targetPort":
			if r.TryDecodeAsNil() {
				x.TargetPort = pkg5_util.IntOrString{}
			} else {
				yyv1981 := &x.TargetPort
				yym1982 := z.DecBinary()
				_ = yym1982
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1981) {
				} else if !yym1982 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1981)
				} else {
					z.DecFallback(yyv1981, false)
				}
			}
		case "nodePort":
			if r.TryDecodeAsNil() {
				x.NodePort = 0
			} else {
				x.NodePort = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1977)
		} // end switch yys1977
	} // end for yyj1977
	if !yyhl1977 {
		r.ReadEnd()
	}
}

func (x *ServicePort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1984 int
	var yyb1984 bool
	var yyhl1984 bool = l >= 0
	yyj1984++
	if yyhl1984 {
		yyb1984 = yyj1984 > l
	} else {
		yyb1984 = r.CheckBreak()
	}
	if yyb1984 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1984++
	if yyhl1984 {
		yyb1984 = yyj1984 > l
	} else {
		yyb1984 = r.CheckBreak()
	}
	if yyb1984 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj1984++
	if yyhl1984 {
		yyb1984 = yyj1984 > l
	} else {
		yyb1984 = r.CheckBreak()
	}
	if yyb1984 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1984++
	if yyhl1984 {
		yyb1984 = yyj1984 > l
	} else {
		yyb1984 = r.CheckBreak()
	}
	if yyb1984 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TargetPort = pkg5_util.IntOrString{}
	} else {
		yyv1988 := &x.TargetPort
		yym1989 := z.DecBinary()
		_ = yym1989
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1988) {
		} else if !yym1989 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1988)
		} else {
			z.DecFallback(yyv1988, false)
		}
	}
	yyj1984++
	if yyhl1984 {
		yyb1984 = yyj1984 > l
	} else {
		yyb1984 = r.CheckBreak()
	}
	if yyb1984 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.NodePort = 0
	} else {
		x.NodePort = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj1984++
		if yyhl1984 {
			yyb1984 = yyj1984 > l
		} else {
			yyb1984 = r.CheckBreak()
		}
		if yyb1984 {
			break
		}
		z.DecStructFieldNotFound(yyj1984-1, "")
	}
	r.ReadEnd()
}

func (x *Service) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1991 := z.EncBinary()
		_ = yym1991
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1992 := !z.EncBinary()
			yy2arr1992 := z.EncBasicHandle().StructToArray
			var yyq1992 [5]bool
			_, _, _ = yysep1992, yyq1992, yy2arr1992
			const yyr1992 bool = false
			yyq1992[0] = x.Kind != ""
			yyq1992[1] = x.APIVersion != ""
			yyq1992[2] = true
			yyq1992[3] = true
			yyq1992[4] = true
			if yyr1992 || yy2arr1992 {
				r.EncodeArrayStart(5)
			} else {
				var yynn1992 int = 0
				for _, b := range yyq1992 {
					if b {
						yynn1992++
					}
				}
				r.EncodeMapStart(yynn1992)
			}
			if yyr1992 || yy2arr1992 {
				if yyq1992[0] {
					yym1994 := z.EncBinary()
					_ = yym1994
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1992[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1995 := z.EncBinary()
					_ = yym1995
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1992 || yy2arr1992 {
				if yyq1992[1] {
					yym1997 := z.EncBinary()
					_ = yym1997
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1992[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1998 := z.EncBinary()
					_ = yym1998
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1992 || yy2arr1992 {
				if yyq1992[2] {
					yy2000 := &x.ObjectMeta
					yy2000.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1992[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2001 := &x.ObjectMeta
					yy2001.CodecEncodeSelf(e)
				}
			}
			if yyr1992 || yy2arr1992 {
				if yyq1992[3] {
					yy2003 := &x.Spec
					yy2003.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1992[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy2004 := &x.Spec
					yy2004.CodecEncodeSelf(e)
				}
			}
			if yyr1992 || yy2arr1992 {
				if yyq1992[4] {
					yy2006 := &x.Status
					yy2006.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1992[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy2007 := &x.Status
					yy2007.CodecEncodeSelf(e)
				}
			}
			if yysep1992 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Service) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2008 := z.DecBinary()
	_ = yym2008
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2009 := r.ReadMapStart()
			if yyl2009 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2009, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2009 := r.ReadArrayStart()
			if yyl2009 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2009, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Service) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2010Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2010Slc
	var yyhl2010 bool = l >= 0
	for yyj2010 := 0; ; yyj2010++ {
		if yyhl2010 {
			if yyj2010 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2010Slc = r.DecodeBytes(yys2010Slc, true, true)
		yys2010 := string(yys2010Slc)
		switch yys2010 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2013 := &x.ObjectMeta
				yyv2013.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ServiceSpec{}
			} else {
				yyv2014 := &x.Spec
				yyv2014.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ServiceStatus{}
			} else {
				yyv2015 := &x.Status
				yyv2015.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2010)
		} // end switch yys2010
	} // end for yyj2010
	if !yyhl2010 {
		r.ReadEnd()
	}
}

func (x *Service) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2016 int
	var yyb2016 bool
	var yyhl2016 bool = l >= 0
	yyj2016++
	if yyhl2016 {
		yyb2016 = yyj2016 > l
	} else {
		yyb2016 = r.CheckBreak()
	}
	if yyb2016 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2016++
	if yyhl2016 {
		yyb2016 = yyj2016 > l
	} else {
		yyb2016 = r.CheckBreak()
	}
	if yyb2016 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2016++
	if yyhl2016 {
		yyb2016 = yyj2016 > l
	} else {
		yyb2016 = r.CheckBreak()
	}
	if yyb2016 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2019 := &x.ObjectMeta
		yyv2019.CodecDecodeSelf(d)
	}
	yyj2016++
	if yyhl2016 {
		yyb2016 = yyj2016 > l
	} else {
		yyb2016 = r.CheckBreak()
	}
	if yyb2016 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = ServiceSpec{}
	} else {
		yyv2020 := &x.Spec
		yyv2020.CodecDecodeSelf(d)
	}
	yyj2016++
	if yyhl2016 {
		yyb2016 = yyj2016 > l
	} else {
		yyb2016 = r.CheckBreak()
	}
	if yyb2016 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ServiceStatus{}
	} else {
		yyv2021 := &x.Status
		yyv2021.CodecDecodeSelf(d)
	}
	for {
		yyj2016++
		if yyhl2016 {
			yyb2016 = yyj2016 > l
		} else {
			yyb2016 = r.CheckBreak()
		}
		if yyb2016 {
			break
		}
		z.DecStructFieldNotFound(yyj2016-1, "")
	}
	r.ReadEnd()
}

func (x *ServiceAccount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2022 := z.EncBinary()
		_ = yym2022
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2023 := !z.EncBinary()
			yy2arr2023 := z.EncBasicHandle().StructToArray
			var yyq2023 [5]bool
			_, _, _ = yysep2023, yyq2023, yy2arr2023
			const yyr2023 bool = false
			yyq2023[0] = x.Kind != ""
			yyq2023[1] = x.APIVersion != ""
			yyq2023[2] = true
			yyq2023[4] = len(x.ImagePullSecrets) != 0
			if yyr2023 || yy2arr2023 {
				r.EncodeArrayStart(5)
			} else {
				var yynn2023 int = 1
				for _, b := range yyq2023 {
					if b {
						yynn2023++
					}
				}
				r.EncodeMapStart(yynn2023)
			}
			if yyr2023 || yy2arr2023 {
				if yyq2023[0] {
					yym2025 := z.EncBinary()
					_ = yym2025
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2023[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2026 := z.EncBinary()
					_ = yym2026
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2023 || yy2arr2023 {
				if yyq2023[1] {
					yym2028 := z.EncBinary()
					_ = yym2028
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2023[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2029 := z.EncBinary()
					_ = yym2029
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2023 || yy2arr2023 {
				if yyq2023[2] {
					yy2031 := &x.ObjectMeta
					yy2031.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2023[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2032 := &x.ObjectMeta
					yy2032.CodecEncodeSelf(e)
				}
			}
			if yyr2023 || yy2arr2023 {
				if x.Secrets == nil {
					r.EncodeNil()
				} else {
					yym2034 := z.EncBinary()
					_ = yym2034
					if false {
					} else {
						h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("secrets"))
				if x.Secrets == nil {
					r.EncodeNil()
				} else {
					yym2035 := z.EncBinary()
					_ = yym2035
					if false {
					} else {
						h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
					}
				}
			}
			if yyr2023 || yy2arr2023 {
				if yyq2023[4] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2037 := z.EncBinary()
						_ = yym2037
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2023[4] {
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2038 := z.EncBinary()
						_ = yym2038
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yysep2023 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServiceAccount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2039 := z.DecBinary()
	_ = yym2039
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2040 := r.ReadMapStart()
			if yyl2040 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2040, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2040 := r.ReadArrayStart()
			if yyl2040 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2040, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2041Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2041Slc
	var yyhl2041 bool = l >= 0
	for yyj2041 := 0; ; yyj2041++ {
		if yyhl2041 {
			if yyj2041 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2041Slc = r.DecodeBytes(yys2041Slc, true, true)
		yys2041 := string(yys2041Slc)
		switch yys2041 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2044 := &x.ObjectMeta
				yyv2044.CodecDecodeSelf(d)
			}
		case "secrets":
			if r.TryDecodeAsNil() {
				x.Secrets = nil
			} else {
				yyv2045 := &x.Secrets
				yym2046 := z.DecBinary()
				_ = yym2046
				if false {
				} else {
					h.decSliceObjectReference((*[]ObjectReference)(yyv2045), d)
				}
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv2047 := &x.ImagePullSecrets
				yym2048 := z.DecBinary()
				_ = yym2048
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2047), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2041)
		} // end switch yys2041
	} // end for yyj2041
	if !yyhl2041 {
		r.ReadEnd()
	}
}

func (x *ServiceAccount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2049 int
	var yyb2049 bool
	var yyhl2049 bool = l >= 0
	yyj2049++
	if yyhl2049 {
		yyb2049 = yyj2049 > l
	} else {
		yyb2049 = r.CheckBreak()
	}
	if yyb2049 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2049++
	if yyhl2049 {
		yyb2049 = yyj2049 > l
	} else {
		yyb2049 = r.CheckBreak()
	}
	if yyb2049 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2049++
	if yyhl2049 {
		yyb2049 = yyj2049 > l
	} else {
		yyb2049 = r.CheckBreak()
	}
	if yyb2049 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2052 := &x.ObjectMeta
		yyv2052.CodecDecodeSelf(d)
	}
	yyj2049++
	if yyhl2049 {
		yyb2049 = yyj2049 > l
	} else {
		yyb2049 = r.CheckBreak()
	}
	if yyb2049 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Secrets = nil
	} else {
		yyv2053 := &x.Secrets
		yym2054 := z.DecBinary()
		_ = yym2054
		if false {
		} else {
			h.decSliceObjectReference((*[]ObjectReference)(yyv2053), d)
		}
	}
	yyj2049++
	if yyhl2049 {
		yyb2049 = yyj2049 > l
	} else {
		yyb2049 = r.CheckBreak()
	}
	if yyb2049 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv2055 := &x.ImagePullSecrets
		yym2056 := z.DecBinary()
		_ = yym2056
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2055), d)
		}
	}
	for {
		yyj2049++
		if yyhl2049 {
			yyb2049 = yyj2049 > l
		} else {
			yyb2049 = r.CheckBreak()
		}
		if yyb2049 {
			break
		}
		z.DecStructFieldNotFound(yyj2049-1, "")
	}
	r.ReadEnd()
}

func (x *ServiceAccountList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2057 := z.EncBinary()
		_ = yym2057
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2058 := !z.EncBinary()
			yy2arr2058 := z.EncBasicHandle().StructToArray
			var yyq2058 [4]bool
			_, _, _ = yysep2058, yyq2058, yy2arr2058
			const yyr2058 bool = false
			yyq2058[0] = x.Kind != ""
			yyq2058[1] = x.APIVersion != ""
			yyq2058[2] = true
			if yyr2058 || yy2arr2058 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2058 int = 1
				for _, b := range yyq2058 {
					if b {
						yynn2058++
					}
				}
				r.EncodeMapStart(yynn2058)
			}
			if yyr2058 || yy2arr2058 {
				if yyq2058[0] {
					yym2060 := z.EncBinary()
					_ = yym2060
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2058[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2061 := z.EncBinary()
					_ = yym2061
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2058 || yy2arr2058 {
				if yyq2058[1] {
					yym2063 := z.EncBinary()
					_ = yym2063
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2058[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2064 := z.EncBinary()
					_ = yym2064
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2058 || yy2arr2058 {
				if yyq2058[2] {
					yy2066 := &x.ListMeta
					yym2067 := z.EncBinary()
					_ = yym2067
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2066) {
					} else {
						z.EncFallback(yy2066)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2058[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2068 := &x.ListMeta
					yym2069 := z.EncBinary()
					_ = yym2069
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2068) {
					} else {
						z.EncFallback(yy2068)
					}
				}
			}
			if yyr2058 || yy2arr2058 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2071 := z.EncBinary()
					_ = yym2071
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2072 := z.EncBinary()
					_ = yym2072
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			}
			if yysep2058 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServiceAccountList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2073 := z.DecBinary()
	_ = yym2073
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2074 := r.ReadMapStart()
			if yyl2074 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2074, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2074 := r.ReadArrayStart()
			if yyl2074 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2074, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccountList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2075Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2075Slc
	var yyhl2075 bool = l >= 0
	for yyj2075 := 0; ; yyj2075++ {
		if yyhl2075 {
			if yyj2075 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2075Slc = r.DecodeBytes(yys2075Slc, true, true)
		yys2075 := string(yys2075Slc)
		switch yys2075 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2078 := &x.ListMeta
				yym2079 := z.DecBinary()
				_ = yym2079
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2078) {
				} else {
					z.DecFallback(yyv2078, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2080 := &x.Items
				yym2081 := z.DecBinary()
				_ = yym2081
				if false {
				} else {
					h.decSliceServiceAccount((*[]ServiceAccount)(yyv2080), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2075)
		} // end switch yys2075
	} // end for yyj2075
	if !yyhl2075 {
		r.ReadEnd()
	}
}

func (x *ServiceAccountList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2082 int
	var yyb2082 bool
	var yyhl2082 bool = l >= 0
	yyj2082++
	if yyhl2082 {
		yyb2082 = yyj2082 > l
	} else {
		yyb2082 = r.CheckBreak()
	}
	if yyb2082 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2082++
	if yyhl2082 {
		yyb2082 = yyj2082 > l
	} else {
		yyb2082 = r.CheckBreak()
	}
	if yyb2082 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2082++
	if yyhl2082 {
		yyb2082 = yyj2082 > l
	} else {
		yyb2082 = r.CheckBreak()
	}
	if yyb2082 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2085 := &x.ListMeta
		yym2086 := z.DecBinary()
		_ = yym2086
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2085) {
		} else {
			z.DecFallback(yyv2085, false)
		}
	}
	yyj2082++
	if yyhl2082 {
		yyb2082 = yyj2082 > l
	} else {
		yyb2082 = r.CheckBreak()
	}
	if yyb2082 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2087 := &x.Items
		yym2088 := z.DecBinary()
		_ = yym2088
		if false {
		} else {
			h.decSliceServiceAccount((*[]ServiceAccount)(yyv2087), d)
		}
	}
	for {
		yyj2082++
		if yyhl2082 {
			yyb2082 = yyj2082 > l
		} else {
			yyb2082 = r.CheckBreak()
		}
		if yyb2082 {
			break
		}
		z.DecStructFieldNotFound(yyj2082-1, "")
	}
	r.ReadEnd()
}

func (x *Endpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2089 := z.EncBinary()
		_ = yym2089
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2090 := !z.EncBinary()
			yy2arr2090 := z.EncBasicHandle().StructToArray
			var yyq2090 [4]bool
			_, _, _ = yysep2090, yyq2090, yy2arr2090
			const yyr2090 bool = false
			yyq2090[0] = x.Kind != ""
			yyq2090[1] = x.APIVersion != ""
			yyq2090[2] = true
			if yyr2090 || yy2arr2090 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2090 int = 1
				for _, b := range yyq2090 {
					if b {
						yynn2090++
					}
				}
				r.EncodeMapStart(yynn2090)
			}
			if yyr2090 || yy2arr2090 {
				if yyq2090[0] {
					yym2092 := z.EncBinary()
					_ = yym2092
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2090[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2093 := z.EncBinary()
					_ = yym2093
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2090 || yy2arr2090 {
				if yyq2090[1] {
					yym2095 := z.EncBinary()
					_ = yym2095
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2090[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2096 := z.EncBinary()
					_ = yym2096
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2090 || yy2arr2090 {
				if yyq2090[2] {
					yy2098 := &x.ObjectMeta
					yy2098.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2090[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2099 := &x.ObjectMeta
					yy2099.CodecEncodeSelf(e)
				}
			}
			if yyr2090 || yy2arr2090 {
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2101 := z.EncBinary()
					_ = yym2101
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Subsets"))
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2102 := z.EncBinary()
					_ = yym2102
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			}
			if yysep2090 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Endpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2103 := z.DecBinary()
	_ = yym2103
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2104 := r.ReadMapStart()
			if yyl2104 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2104, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2104 := r.ReadArrayStart()
			if yyl2104 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2104, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Endpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2105Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2105Slc
	var yyhl2105 bool = l >= 0
	for yyj2105 := 0; ; yyj2105++ {
		if yyhl2105 {
			if yyj2105 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2105Slc = r.DecodeBytes(yys2105Slc, true, true)
		yys2105 := string(yys2105Slc)
		switch yys2105 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2108 := &x.ObjectMeta
				yyv2108.CodecDecodeSelf(d)
			}
		case "Subsets":
			if r.TryDecodeAsNil() {
				x.Subsets = nil
			} else {
				yyv2109 := &x.Subsets
				yym2110 := z.DecBinary()
				_ = yym2110
				if false {
				} else {
					h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2109), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2105)
		} // end switch yys2105
	} // end for yyj2105
	if !yyhl2105 {
		r.ReadEnd()
	}
}

func (x *Endpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2111 int
	var yyb2111 bool
	var yyhl2111 bool = l >= 0
	yyj2111++
	if yyhl2111 {
		yyb2111 = yyj2111 > l
	} else {
		yyb2111 = r.CheckBreak()
	}
	if yyb2111 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2111++
	if yyhl2111 {
		yyb2111 = yyj2111 > l
	} else {
		yyb2111 = r.CheckBreak()
	}
	if yyb2111 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2111++
	if yyhl2111 {
		yyb2111 = yyj2111 > l
	} else {
		yyb2111 = r.CheckBreak()
	}
	if yyb2111 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2114 := &x.ObjectMeta
		yyv2114.CodecDecodeSelf(d)
	}
	yyj2111++
	if yyhl2111 {
		yyb2111 = yyj2111 > l
	} else {
		yyb2111 = r.CheckBreak()
	}
	if yyb2111 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Subsets = nil
	} else {
		yyv2115 := &x.Subsets
		yym2116 := z.DecBinary()
		_ = yym2116
		if false {
		} else {
			h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2115), d)
		}
	}
	for {
		yyj2111++
		if yyhl2111 {
			yyb2111 = yyj2111 > l
		} else {
			yyb2111 = r.CheckBreak()
		}
		if yyb2111 {
			break
		}
		z.DecStructFieldNotFound(yyj2111-1, "")
	}
	r.ReadEnd()
}

func (x *EndpointSubset) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2117 := z.EncBinary()
		_ = yym2117
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2118 := !z.EncBinary()
			yy2arr2118 := z.EncBasicHandle().StructToArray
			var yyq2118 [3]bool
			_, _, _ = yysep2118, yyq2118, yy2arr2118
			const yyr2118 bool = false
			if yyr2118 || yy2arr2118 {
				r.EncodeArrayStart(3)
			} else {
				var yynn2118 int = 3
				for _, b := range yyq2118 {
					if b {
						yynn2118++
					}
				}
				r.EncodeMapStart(yynn2118)
			}
			if yyr2118 || yy2arr2118 {
				if x.Addresses == nil {
					r.EncodeNil()
				} else {
					yym2120 := z.EncBinary()
					_ = yym2120
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Addresses"))
				if x.Addresses == nil {
					r.EncodeNil()
				} else {
					yym2121 := z.EncBinary()
					_ = yym2121
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
					}
				}
			}
			if yyr2118 || yy2arr2118 {
				if x.NotReadyAddresses == nil {
					r.EncodeNil()
				} else {
					yym2123 := z.EncBinary()
					_ = yym2123
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("NotReadyAddresses"))
				if x.NotReadyAddresses == nil {
					r.EncodeNil()
				} else {
					yym2124 := z.EncBinary()
					_ = yym2124
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
					}
				}
			}
			if yyr2118 || yy2arr2118 {
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2126 := z.EncBinary()
					_ = yym2126
					if false {
					} else {
						h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Ports"))
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2127 := z.EncBinary()
					_ = yym2127
					if false {
					} else {
						h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
					}
				}
			}
			if yysep2118 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EndpointSubset) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2128 := z.DecBinary()
	_ = yym2128
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2129 := r.ReadMapStart()
			if yyl2129 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2129, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2129 := r.ReadArrayStart()
			if yyl2129 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2129, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointSubset) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2130Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2130Slc
	var yyhl2130 bool = l >= 0
	for yyj2130 := 0; ; yyj2130++ {
		if yyhl2130 {
			if yyj2130 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2130Slc = r.DecodeBytes(yys2130Slc, true, true)
		yys2130 := string(yys2130Slc)
		switch yys2130 {
		case "Addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2131 := &x.Addresses
				yym2132 := z.DecBinary()
				_ = yym2132
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2131), d)
				}
			}
		case "NotReadyAddresses":
			if r.TryDecodeAsNil() {
				x.NotReadyAddresses = nil
			} else {
				yyv2133 := &x.NotReadyAddresses
				yym2134 := z.DecBinary()
				_ = yym2134
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2133), d)
				}
			}
		case "Ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2135 := &x.Ports
				yym2136 := z.DecBinary()
				_ = yym2136
				if false {
				} else {
					h.decSliceEndpointPort((*[]EndpointPort)(yyv2135), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2130)
		} // end switch yys2130
	} // end for yyj2130
	if !yyhl2130 {
		r.ReadEnd()
	}
}

func (x *EndpointSubset) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2137 int
	var yyb2137 bool
	var yyhl2137 bool = l >= 0
	yyj2137++
	if yyhl2137 {
		yyb2137 = yyj2137 > l
	} else {
		yyb2137 = r.CheckBreak()
	}
	if yyb2137 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2138 := &x.Addresses
		yym2139 := z.DecBinary()
		_ = yym2139
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2138), d)
		}
	}
	yyj2137++
	if yyhl2137 {
		yyb2137 = yyj2137 > l
	} else {
		yyb2137 = r.CheckBreak()
	}
	if yyb2137 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.NotReadyAddresses = nil
	} else {
		yyv2140 := &x.NotReadyAddresses
		yym2141 := z.DecBinary()
		_ = yym2141
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2140), d)
		}
	}
	yyj2137++
	if yyhl2137 {
		yyb2137 = yyj2137 > l
	} else {
		yyb2137 = r.CheckBreak()
	}
	if yyb2137 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2142 := &x.Ports
		yym2143 := z.DecBinary()
		_ = yym2143
		if false {
		} else {
			h.decSliceEndpointPort((*[]EndpointPort)(yyv2142), d)
		}
	}
	for {
		yyj2137++
		if yyhl2137 {
			yyb2137 = yyj2137 > l
		} else {
			yyb2137 = r.CheckBreak()
		}
		if yyb2137 {
			break
		}
		z.DecStructFieldNotFound(yyj2137-1, "")
	}
	r.ReadEnd()
}

func (x *EndpointAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2144 := z.EncBinary()
		_ = yym2144
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2145 := !z.EncBinary()
			yy2arr2145 := z.EncBasicHandle().StructToArray
			var yyq2145 [2]bool
			_, _, _ = yysep2145, yyq2145, yy2arr2145
			const yyr2145 bool = false
			if yyr2145 || yy2arr2145 {
				r.EncodeArrayStart(2)
			} else {
				var yynn2145 int = 2
				for _, b := range yyq2145 {
					if b {
						yynn2145++
					}
				}
				r.EncodeMapStart(yynn2145)
			}
			if yyr2145 || yy2arr2145 {
				yym2147 := z.EncBinary()
				_ = yym2147
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("IP"))
				yym2148 := z.EncBinary()
				_ = yym2148
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			}
			if yyr2145 || yy2arr2145 {
				if x.TargetRef == nil {
					r.EncodeNil()
				} else {
					x.TargetRef.CodecEncodeSelf(e)
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("TargetRef"))
				if x.TargetRef == nil {
					r.EncodeNil()
				} else {
					x.TargetRef.CodecEncodeSelf(e)
				}
			}
			if yysep2145 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EndpointAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2150 := z.DecBinary()
	_ = yym2150
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2151 := r.ReadMapStart()
			if yyl2151 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2151, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2151 := r.ReadArrayStart()
			if yyl2151 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2151, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2152Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2152Slc
	var yyhl2152 bool = l >= 0
	for yyj2152 := 0; ; yyj2152++ {
		if yyhl2152 {
			if yyj2152 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2152Slc = r.DecodeBytes(yys2152Slc, true, true)
		yys2152 := string(yys2152Slc)
		switch yys2152 {
		case "IP":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "TargetRef":
			if r.TryDecodeAsNil() {
				if x.TargetRef != nil {
					x.TargetRef = nil
				}
			} else {
				if x.TargetRef == nil {
					x.TargetRef = new(ObjectReference)
				}
				x.TargetRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2152)
		} // end switch yys2152
	} // end for yyj2152
	if !yyhl2152 {
		r.ReadEnd()
	}
}

func (x *EndpointAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2155 int
	var yyb2155 bool
	var yyhl2155 bool = l >= 0
	yyj2155++
	if yyhl2155 {
		yyb2155 = yyj2155 > l
	} else {
		yyb2155 = r.CheckBreak()
	}
	if yyb2155 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2155++
	if yyhl2155 {
		yyb2155 = yyj2155 > l
	} else {
		yyb2155 = r.CheckBreak()
	}
	if yyb2155 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.TargetRef != nil {
			x.TargetRef = nil
		}
	} else {
		if x.TargetRef == nil {
			x.TargetRef = new(ObjectReference)
		}
		x.TargetRef.CodecDecodeSelf(d)
	}
	for {
		yyj2155++
		if yyhl2155 {
			yyb2155 = yyj2155 > l
		} else {
			yyb2155 = r.CheckBreak()
		}
		if yyb2155 {
			break
		}
		z.DecStructFieldNotFound(yyj2155-1, "")
	}
	r.ReadEnd()
}

func (x *EndpointPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2158 := z.EncBinary()
		_ = yym2158
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2159 := !z.EncBinary()
			yy2arr2159 := z.EncBasicHandle().StructToArray
			var yyq2159 [3]bool
			_, _, _ = yysep2159, yyq2159, yy2arr2159
			const yyr2159 bool = false
			if yyr2159 || yy2arr2159 {
				r.EncodeArrayStart(3)
			} else {
				var yynn2159 int = 3
				for _, b := range yyq2159 {
					if b {
						yynn2159++
					}
				}
				r.EncodeMapStart(yynn2159)
			}
			if yyr2159 || yy2arr2159 {
				yym2161 := z.EncBinary()
				_ = yym2161
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				yym2162 := z.EncBinary()
				_ = yym2162
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr2159 || yy2arr2159 {
				yym2164 := z.EncBinary()
				_ = yym2164
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				yym2165 := z.EncBinary()
				_ = yym2165
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2159 || yy2arr2159 {
				x.Protocol.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Protocol"))
				x.Protocol.CodecEncodeSelf(e)
			}
			if yysep2159 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EndpointPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2167 := z.DecBinary()
	_ = yym2167
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2168 := r.ReadMapStart()
			if yyl2168 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2168, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2168 := r.ReadArrayStart()
			if yyl2168 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2168, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2169Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2169Slc
	var yyhl2169 bool = l >= 0
	for yyj2169 := 0; ; yyj2169++ {
		if yyhl2169 {
			if yyj2169 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2169Slc = r.DecodeBytes(yys2169Slc, true, true)
		yys2169 := string(yys2169Slc)
		switch yys2169 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "Protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2169)
		} // end switch yys2169
	} // end for yyj2169
	if !yyhl2169 {
		r.ReadEnd()
	}
}

func (x *EndpointPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2173 int
	var yyb2173 bool
	var yyhl2173 bool = l >= 0
	yyj2173++
	if yyhl2173 {
		yyb2173 = yyj2173 > l
	} else {
		yyb2173 = r.CheckBreak()
	}
	if yyb2173 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2173++
	if yyhl2173 {
		yyb2173 = yyj2173 > l
	} else {
		yyb2173 = r.CheckBreak()
	}
	if yyb2173 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj2173++
	if yyhl2173 {
		yyb2173 = yyj2173 > l
	} else {
		yyb2173 = r.CheckBreak()
	}
	if yyb2173 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	for {
		yyj2173++
		if yyhl2173 {
			yyb2173 = yyj2173 > l
		} else {
			yyb2173 = r.CheckBreak()
		}
		if yyb2173 {
			break
		}
		z.DecStructFieldNotFound(yyj2173-1, "")
	}
	r.ReadEnd()
}

func (x *EndpointsList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2177 := z.EncBinary()
		_ = yym2177
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2178 := !z.EncBinary()
			yy2arr2178 := z.EncBasicHandle().StructToArray
			var yyq2178 [4]bool
			_, _, _ = yysep2178, yyq2178, yy2arr2178
			const yyr2178 bool = false
			yyq2178[0] = x.Kind != ""
			yyq2178[1] = x.APIVersion != ""
			yyq2178[2] = true
			if yyr2178 || yy2arr2178 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2178 int = 1
				for _, b := range yyq2178 {
					if b {
						yynn2178++
					}
				}
				r.EncodeMapStart(yynn2178)
			}
			if yyr2178 || yy2arr2178 {
				if yyq2178[0] {
					yym2180 := z.EncBinary()
					_ = yym2180
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2178[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2181 := z.EncBinary()
					_ = yym2181
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2178 || yy2arr2178 {
				if yyq2178[1] {
					yym2183 := z.EncBinary()
					_ = yym2183
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2178[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2184 := z.EncBinary()
					_ = yym2184
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2178 || yy2arr2178 {
				if yyq2178[2] {
					yy2186 := &x.ListMeta
					yym2187 := z.EncBinary()
					_ = yym2187
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2186) {
					} else {
						z.EncFallback(yy2186)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2178[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2188 := &x.ListMeta
					yym2189 := z.EncBinary()
					_ = yym2189
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2188) {
					} else {
						z.EncFallback(yy2188)
					}
				}
			}
			if yyr2178 || yy2arr2178 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2191 := z.EncBinary()
					_ = yym2191
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2192 := z.EncBinary()
					_ = yym2192
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			}
			if yysep2178 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EndpointsList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2193 := z.DecBinary()
	_ = yym2193
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2194 := r.ReadMapStart()
			if yyl2194 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2194, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2194 := r.ReadArrayStart()
			if yyl2194 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2194, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointsList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2195Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2195Slc
	var yyhl2195 bool = l >= 0
	for yyj2195 := 0; ; yyj2195++ {
		if yyhl2195 {
			if yyj2195 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2195Slc = r.DecodeBytes(yys2195Slc, true, true)
		yys2195 := string(yys2195Slc)
		switch yys2195 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2198 := &x.ListMeta
				yym2199 := z.DecBinary()
				_ = yym2199
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2198) {
				} else {
					z.DecFallback(yyv2198, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2200 := &x.Items
				yym2201 := z.DecBinary()
				_ = yym2201
				if false {
				} else {
					h.decSliceEndpoints((*[]Endpoints)(yyv2200), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2195)
		} // end switch yys2195
	} // end for yyj2195
	if !yyhl2195 {
		r.ReadEnd()
	}
}

func (x *EndpointsList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2202 int
	var yyb2202 bool
	var yyhl2202 bool = l >= 0
	yyj2202++
	if yyhl2202 {
		yyb2202 = yyj2202 > l
	} else {
		yyb2202 = r.CheckBreak()
	}
	if yyb2202 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2202++
	if yyhl2202 {
		yyb2202 = yyj2202 > l
	} else {
		yyb2202 = r.CheckBreak()
	}
	if yyb2202 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2202++
	if yyhl2202 {
		yyb2202 = yyj2202 > l
	} else {
		yyb2202 = r.CheckBreak()
	}
	if yyb2202 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2205 := &x.ListMeta
		yym2206 := z.DecBinary()
		_ = yym2206
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2205) {
		} else {
			z.DecFallback(yyv2205, false)
		}
	}
	yyj2202++
	if yyhl2202 {
		yyb2202 = yyj2202 > l
	} else {
		yyb2202 = r.CheckBreak()
	}
	if yyb2202 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2207 := &x.Items
		yym2208 := z.DecBinary()
		_ = yym2208
		if false {
		} else {
			h.decSliceEndpoints((*[]Endpoints)(yyv2207), d)
		}
	}
	for {
		yyj2202++
		if yyhl2202 {
			yyb2202 = yyj2202 > l
		} else {
			yyb2202 = r.CheckBreak()
		}
		if yyb2202 {
			break
		}
		z.DecStructFieldNotFound(yyj2202-1, "")
	}
	r.ReadEnd()
}

func (x *NodeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2209 := z.EncBinary()
		_ = yym2209
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2210 := !z.EncBinary()
			yy2arr2210 := z.EncBasicHandle().StructToArray
			var yyq2210 [4]bool
			_, _, _ = yysep2210, yyq2210, yy2arr2210
			const yyr2210 bool = false
			yyq2210[0] = x.PodCIDR != ""
			yyq2210[1] = x.ExternalID != ""
			yyq2210[2] = x.ProviderID != ""
			yyq2210[3] = x.Unschedulable != false
			if yyr2210 || yy2arr2210 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2210 int = 0
				for _, b := range yyq2210 {
					if b {
						yynn2210++
					}
				}
				r.EncodeMapStart(yynn2210)
			}
			if yyr2210 || yy2arr2210 {
				if yyq2210[0] {
					yym2212 := z.EncBinary()
					_ = yym2212
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2210[0] {
					r.EncodeString(codecSelferC_UTF81234, string("podCIDR"))
					yym2213 := z.EncBinary()
					_ = yym2213
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				}
			}
			if yyr2210 || yy2arr2210 {
				if yyq2210[1] {
					yym2215 := z.EncBinary()
					_ = yym2215
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2210[1] {
					r.EncodeString(codecSelferC_UTF81234, string("externalID"))
					yym2216 := z.EncBinary()
					_ = yym2216
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				}
			}
			if yyr2210 || yy2arr2210 {
				if yyq2210[2] {
					yym2218 := z.EncBinary()
					_ = yym2218
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2210[2] {
					r.EncodeString(codecSelferC_UTF81234, string("providerID"))
					yym2219 := z.EncBinary()
					_ = yym2219
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				}
			}
			if yyr2210 || yy2arr2210 {
				if yyq2210[3] {
					yym2221 := z.EncBinary()
					_ = yym2221
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2210[3] {
					r.EncodeString(codecSelferC_UTF81234, string("unschedulable"))
					yym2222 := z.EncBinary()
					_ = yym2222
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				}
			}
			if yysep2210 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2223 := z.DecBinary()
	_ = yym2223
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2224 := r.ReadMapStart()
			if yyl2224 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2224, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2224 := r.ReadArrayStart()
			if yyl2224 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2224, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2225Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2225Slc
	var yyhl2225 bool = l >= 0
	for yyj2225 := 0; ; yyj2225++ {
		if yyhl2225 {
			if yyj2225 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2225Slc = r.DecodeBytes(yys2225Slc, true, true)
		yys2225 := string(yys2225Slc)
		switch yys2225 {
		case "podCIDR":
			if r.TryDecodeAsNil() {
				x.PodCIDR = ""
			} else {
				x.PodCIDR = string(r.DecodeString())
			}
		case "externalID":
			if r.TryDecodeAsNil() {
				x.ExternalID = ""
			} else {
				x.ExternalID = string(r.DecodeString())
			}
		case "providerID":
			if r.TryDecodeAsNil() {
				x.ProviderID = ""
			} else {
				x.ProviderID = string(r.DecodeString())
			}
		case "unschedulable":
			if r.TryDecodeAsNil() {
				x.Unschedulable = false
			} else {
				x.Unschedulable = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2225)
		} // end switch yys2225
	} // end for yyj2225
	if !yyhl2225 {
		r.ReadEnd()
	}
}

func (x *NodeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2230 int
	var yyb2230 bool
	var yyhl2230 bool = l >= 0
	yyj2230++
	if yyhl2230 {
		yyb2230 = yyj2230 > l
	} else {
		yyb2230 = r.CheckBreak()
	}
	if yyb2230 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.PodCIDR = ""
	} else {
		x.PodCIDR = string(r.DecodeString())
	}
	yyj2230++
	if yyhl2230 {
		yyb2230 = yyj2230 > l
	} else {
		yyb2230 = r.CheckBreak()
	}
	if yyb2230 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ExternalID = ""
	} else {
		x.ExternalID = string(r.DecodeString())
	}
	yyj2230++
	if yyhl2230 {
		yyb2230 = yyj2230 > l
	} else {
		yyb2230 = r.CheckBreak()
	}
	if yyb2230 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ProviderID = ""
	} else {
		x.ProviderID = string(r.DecodeString())
	}
	yyj2230++
	if yyhl2230 {
		yyb2230 = yyj2230 > l
	} else {
		yyb2230 = r.CheckBreak()
	}
	if yyb2230 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Unschedulable = false
	} else {
		x.Unschedulable = bool(r.DecodeBool())
	}
	for {
		yyj2230++
		if yyhl2230 {
			yyb2230 = yyj2230 > l
		} else {
			yyb2230 = r.CheckBreak()
		}
		if yyb2230 {
			break
		}
		z.DecStructFieldNotFound(yyj2230-1, "")
	}
	r.ReadEnd()
}

func (x *DaemonEndpoint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2235 := z.EncBinary()
		_ = yym2235
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2236 := !z.EncBinary()
			yy2arr2236 := z.EncBasicHandle().StructToArray
			var yyq2236 [1]bool
			_, _, _ = yysep2236, yyq2236, yy2arr2236
			const yyr2236 bool = false
			if yyr2236 || yy2arr2236 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2236 int = 1
				for _, b := range yyq2236 {
					if b {
						yynn2236++
					}
				}
				r.EncodeMapStart(yynn2236)
			}
			if yyr2236 || yy2arr2236 {
				yym2238 := z.EncBinary()
				_ = yym2238
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				yym2239 := z.EncBinary()
				_ = yym2239
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yysep2236 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DaemonEndpoint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2240 := z.DecBinary()
	_ = yym2240
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2241 := r.ReadMapStart()
			if yyl2241 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2241, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2241 := r.ReadArrayStart()
			if yyl2241 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2241, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonEndpoint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2242Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2242Slc
	var yyhl2242 bool = l >= 0
	for yyj2242 := 0; ; yyj2242++ {
		if yyhl2242 {
			if yyj2242 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2242Slc = r.DecodeBytes(yys2242Slc, true, true)
		yys2242 := string(yys2242Slc)
		switch yys2242 {
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2242)
		} // end switch yys2242
	} // end for yyj2242
	if !yyhl2242 {
		r.ReadEnd()
	}
}

func (x *DaemonEndpoint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2244 int
	var yyb2244 bool
	var yyhl2244 bool = l >= 0
	yyj2244++
	if yyhl2244 {
		yyb2244 = yyj2244 > l
	} else {
		yyb2244 = r.CheckBreak()
	}
	if yyb2244 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj2244++
		if yyhl2244 {
			yyb2244 = yyj2244 > l
		} else {
			yyb2244 = r.CheckBreak()
		}
		if yyb2244 {
			break
		}
		z.DecStructFieldNotFound(yyj2244-1, "")
	}
	r.ReadEnd()
}

func (x *NodeDaemonEndpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2246 := z.EncBinary()
		_ = yym2246
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2247 := !z.EncBinary()
			yy2arr2247 := z.EncBasicHandle().StructToArray
			var yyq2247 [1]bool
			_, _, _ = yysep2247, yyq2247, yy2arr2247
			const yyr2247 bool = false
			yyq2247[0] = true
			if yyr2247 || yy2arr2247 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2247 int = 0
				for _, b := range yyq2247 {
					if b {
						yynn2247++
					}
				}
				r.EncodeMapStart(yynn2247)
			}
			if yyr2247 || yy2arr2247 {
				if yyq2247[0] {
					yy2249 := &x.KubeletEndpoint
					yy2249.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2247[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kubeletEndpoint"))
					yy2250 := &x.KubeletEndpoint
					yy2250.CodecEncodeSelf(e)
				}
			}
			if yysep2247 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeDaemonEndpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2251 := z.DecBinary()
	_ = yym2251
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2252 := r.ReadMapStart()
			if yyl2252 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2252, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2252 := r.ReadArrayStart()
			if yyl2252 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2252, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2253Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2253Slc
	var yyhl2253 bool = l >= 0
	for yyj2253 := 0; ; yyj2253++ {
		if yyhl2253 {
			if yyj2253 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2253Slc = r.DecodeBytes(yys2253Slc, true, true)
		yys2253 := string(yys2253Slc)
		switch yys2253 {
		case "kubeletEndpoint":
			if r.TryDecodeAsNil() {
				x.KubeletEndpoint = DaemonEndpoint{}
			} else {
				yyv2254 := &x.KubeletEndpoint
				yyv2254.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2253)
		} // end switch yys2253
	} // end for yyj2253
	if !yyhl2253 {
		r.ReadEnd()
	}
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2255 int
	var yyb2255 bool
	var yyhl2255 bool = l >= 0
	yyj2255++
	if yyhl2255 {
		yyb2255 = yyj2255 > l
	} else {
		yyb2255 = r.CheckBreak()
	}
	if yyb2255 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.KubeletEndpoint = DaemonEndpoint{}
	} else {
		yyv2256 := &x.KubeletEndpoint
		yyv2256.CodecDecodeSelf(d)
	}
	for {
		yyj2255++
		if yyhl2255 {
			yyb2255 = yyj2255 > l
		} else {
			yyb2255 = r.CheckBreak()
		}
		if yyb2255 {
			break
		}
		z.DecStructFieldNotFound(yyj2255-1, "")
	}
	r.ReadEnd()
}

func (x *NodeSystemInfo) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2257 := z.EncBinary()
		_ = yym2257
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2258 := !z.EncBinary()
			yy2arr2258 := z.EncBasicHandle().StructToArray
			var yyq2258 [8]bool
			_, _, _ = yysep2258, yyq2258, yy2arr2258
			const yyr2258 bool = false
			if yyr2258 || yy2arr2258 {
				r.EncodeArrayStart(8)
			} else {
				var yynn2258 int = 8
				for _, b := range yyq2258 {
					if b {
						yynn2258++
					}
				}
				r.EncodeMapStart(yynn2258)
			}
			if yyr2258 || yy2arr2258 {
				yym2260 := z.EncBinary()
				_ = yym2260
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("machineID"))
				yym2261 := z.EncBinary()
				_ = yym2261
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			}
			if yyr2258 || yy2arr2258 {
				yym2263 := z.EncBinary()
				_ = yym2263
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("systemUUID"))
				yym2264 := z.EncBinary()
				_ = yym2264
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			}
			if yyr2258 || yy2arr2258 {
				yym2266 := z.EncBinary()
				_ = yym2266
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("bootID"))
				yym2267 := z.EncBinary()
				_ = yym2267
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			}
			if yyr2258 || yy2arr2258 {
				yym2269 := z.EncBinary()
				_ = yym2269
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("kernelVersion"))
				yym2270 := z.EncBinary()
				_ = yym2270
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			}
			if yyr2258 || yy2arr2258 {
				yym2272 := z.EncBinary()
				_ = yym2272
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OsImage))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("osImage"))
				yym2273 := z.EncBinary()
				_ = yym2273
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OsImage))
				}
			}
			if yyr2258 || yy2arr2258 {
				yym2275 := z.EncBinary()
				_ = yym2275
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("containerRuntimeVersion"))
				yym2276 := z.EncBinary()
				_ = yym2276
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			}
			if yyr2258 || yy2arr2258 {
				yym2278 := z.EncBinary()
				_ = yym2278
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("kubeletVersion"))
				yym2279 := z.EncBinary()
				_ = yym2279
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			}
			if yyr2258 || yy2arr2258 {
				yym2281 := z.EncBinary()
				_ = yym2281
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("kubeProxyVersion"))
				yym2282 := z.EncBinary()
				_ = yym2282
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			}
			if yysep2258 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeSystemInfo) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2283 := z.DecBinary()
	_ = yym2283
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2284 := r.ReadMapStart()
			if yyl2284 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2284, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2284 := r.ReadArrayStart()
			if yyl2284 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2284, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSystemInfo) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2285Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2285Slc
	var yyhl2285 bool = l >= 0
	for yyj2285 := 0; ; yyj2285++ {
		if yyhl2285 {
			if yyj2285 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2285Slc = r.DecodeBytes(yys2285Slc, true, true)
		yys2285 := string(yys2285Slc)
		switch yys2285 {
		case "machineID":
			if r.TryDecodeAsNil() {
				x.MachineID = ""
			} else {
				x.MachineID = string(r.DecodeString())
			}
		case "systemUUID":
			if r.TryDecodeAsNil() {
				x.SystemUUID = ""
			} else {
				x.SystemUUID = string(r.DecodeString())
			}
		case "bootID":
			if r.TryDecodeAsNil() {
				x.BootID = ""
			} else {
				x.BootID = string(r.DecodeString())
			}
		case "kernelVersion":
			if r.TryDecodeAsNil() {
				x.KernelVersion = ""
			} else {
				x.KernelVersion = string(r.DecodeString())
			}
		case "osImage":
			if r.TryDecodeAsNil() {
				x.OsImage = ""
			} else {
				x.OsImage = string(r.DecodeString())
			}
		case "containerRuntimeVersion":
			if r.TryDecodeAsNil() {
				x.ContainerRuntimeVersion = ""
			} else {
				x.ContainerRuntimeVersion = string(r.DecodeString())
			}
		case "kubeletVersion":
			if r.TryDecodeAsNil() {
				x.KubeletVersion = ""
			} else {
				x.KubeletVersion = string(r.DecodeString())
			}
		case "kubeProxyVersion":
			if r.TryDecodeAsNil() {
				x.KubeProxyVersion = ""
			} else {
				x.KubeProxyVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2285)
		} // end switch yys2285
	} // end for yyj2285
	if !yyhl2285 {
		r.ReadEnd()
	}
}

func (x *NodeSystemInfo) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2294 int
	var yyb2294 bool
	var yyhl2294 bool = l >= 0
	yyj2294++
	if yyhl2294 {
		yyb2294 = yyj2294 > l
	} else {
		yyb2294 = r.CheckBreak()
	}
	if yyb2294 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MachineID = ""
	} else {
		x.MachineID = string(r.DecodeString())
	}
	yyj2294++
	if yyhl2294 {
		yyb2294 = yyj2294 > l
	} else {
		yyb2294 = r.CheckBreak()
	}
	if yyb2294 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SystemUUID = ""
	} else {
		x.SystemUUID = string(r.DecodeString())
	}
	yyj2294++
	if yyhl2294 {
		yyb2294 = yyj2294 > l
	} else {
		yyb2294 = r.CheckBreak()
	}
	if yyb2294 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.BootID = ""
	} else {
		x.BootID = string(r.DecodeString())
	}
	yyj2294++
	if yyhl2294 {
		yyb2294 = yyj2294 > l
	} else {
		yyb2294 = r.CheckBreak()
	}
	if yyb2294 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.KernelVersion = ""
	} else {
		x.KernelVersion = string(r.DecodeString())
	}
	yyj2294++
	if yyhl2294 {
		yyb2294 = yyj2294 > l
	} else {
		yyb2294 = r.CheckBreak()
	}
	if yyb2294 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.OsImage = ""
	} else {
		x.OsImage = string(r.DecodeString())
	}
	yyj2294++
	if yyhl2294 {
		yyb2294 = yyj2294 > l
	} else {
		yyb2294 = r.CheckBreak()
	}
	if yyb2294 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ContainerRuntimeVersion = ""
	} else {
		x.ContainerRuntimeVersion = string(r.DecodeString())
	}
	yyj2294++
	if yyhl2294 {
		yyb2294 = yyj2294 > l
	} else {
		yyb2294 = r.CheckBreak()
	}
	if yyb2294 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.KubeletVersion = ""
	} else {
		x.KubeletVersion = string(r.DecodeString())
	}
	yyj2294++
	if yyhl2294 {
		yyb2294 = yyj2294 > l
	} else {
		yyb2294 = r.CheckBreak()
	}
	if yyb2294 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.KubeProxyVersion = ""
	} else {
		x.KubeProxyVersion = string(r.DecodeString())
	}
	for {
		yyj2294++
		if yyhl2294 {
			yyb2294 = yyj2294 > l
		} else {
			yyb2294 = r.CheckBreak()
		}
		if yyb2294 {
			break
		}
		z.DecStructFieldNotFound(yyj2294-1, "")
	}
	r.ReadEnd()
}

func (x *NodeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2303 := z.EncBinary()
		_ = yym2303
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2304 := !z.EncBinary()
			yy2arr2304 := z.EncBasicHandle().StructToArray
			var yyq2304 [6]bool
			_, _, _ = yysep2304, yyq2304, yy2arr2304
			const yyr2304 bool = false
			yyq2304[0] = len(x.Capacity) != 0
			yyq2304[1] = x.Phase != ""
			yyq2304[2] = len(x.Conditions) != 0
			yyq2304[3] = len(x.Addresses) != 0
			yyq2304[4] = true
			yyq2304[5] = true
			if yyr2304 || yy2arr2304 {
				r.EncodeArrayStart(6)
			} else {
				var yynn2304 int = 0
				for _, b := range yyq2304 {
					if b {
						yynn2304++
					}
				}
				r.EncodeMapStart(yynn2304)
			}
			if yyr2304 || yy2arr2304 {
				if yyq2304[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2304[0] {
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2304 || yy2arr2304 {
				if yyq2304[1] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2304[1] {
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2304 || yy2arr2304 {
				if yyq2304[2] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2308 := z.EncBinary()
						_ = yym2308
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2304[2] {
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2309 := z.EncBinary()
						_ = yym2309
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2304 || yy2arr2304 {
				if yyq2304[3] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2311 := z.EncBinary()
						_ = yym2311
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2304[3] {
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2312 := z.EncBinary()
						_ = yym2312
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr2304 || yy2arr2304 {
				if yyq2304[4] {
					yy2314 := &x.DaemonEndpoints
					yy2314.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2304[4] {
					r.EncodeString(codecSelferC_UTF81234, string("daemonEndpoints"))
					yy2315 := &x.DaemonEndpoints
					yy2315.CodecEncodeSelf(e)
				}
			}
			if yyr2304 || yy2arr2304 {
				if yyq2304[5] {
					yy2317 := &x.NodeInfo
					yy2317.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2304[5] {
					r.EncodeString(codecSelferC_UTF81234, string("nodeInfo"))
					yy2318 := &x.NodeInfo
					yy2318.CodecEncodeSelf(e)
				}
			}
			if yysep2304 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2319 := z.DecBinary()
	_ = yym2319
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2320 := r.ReadMapStart()
			if yyl2320 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2320, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2320 := r.ReadArrayStart()
			if yyl2320 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2320, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2321Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2321Slc
	var yyhl2321 bool = l >= 0
	for yyj2321 := 0; ; yyj2321++ {
		if yyhl2321 {
			if yyj2321 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2321Slc = r.DecodeBytes(yys2321Slc, true, true)
		yys2321 := string(yys2321Slc)
		switch yys2321 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv2322 := &x.Capacity
				yyv2322.CodecDecodeSelf(d)
			}
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NodePhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv2324 := &x.Conditions
				yym2325 := z.DecBinary()
				_ = yym2325
				if false {
				} else {
					h.decSliceNodeCondition((*[]NodeCondition)(yyv2324), d)
				}
			}
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2326 := &x.Addresses
				yym2327 := z.DecBinary()
				_ = yym2327
				if false {
				} else {
					h.decSliceNodeAddress((*[]NodeAddress)(yyv2326), d)
				}
			}
		case "daemonEndpoints":
			if r.TryDecodeAsNil() {
				x.DaemonEndpoints = NodeDaemonEndpoints{}
			} else {
				yyv2328 := &x.DaemonEndpoints
				yyv2328.CodecDecodeSelf(d)
			}
		case "nodeInfo":
			if r.TryDecodeAsNil() {
				x.NodeInfo = NodeSystemInfo{}
			} else {
				yyv2329 := &x.NodeInfo
				yyv2329.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2321)
		} // end switch yys2321
	} // end for yyj2321
	if !yyhl2321 {
		r.ReadEnd()
	}
}

func (x *NodeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2330 int
	var yyb2330 bool
	var yyhl2330 bool = l >= 0
	yyj2330++
	if yyhl2330 {
		yyb2330 = yyj2330 > l
	} else {
		yyb2330 = r.CheckBreak()
	}
	if yyb2330 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv2331 := &x.Capacity
		yyv2331.CodecDecodeSelf(d)
	}
	yyj2330++
	if yyhl2330 {
		yyb2330 = yyj2330 > l
	} else {
		yyb2330 = r.CheckBreak()
	}
	if yyb2330 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NodePhase(r.DecodeString())
	}
	yyj2330++
	if yyhl2330 {
		yyb2330 = yyj2330 > l
	} else {
		yyb2330 = r.CheckBreak()
	}
	if yyb2330 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv2333 := &x.Conditions
		yym2334 := z.DecBinary()
		_ = yym2334
		if false {
		} else {
			h.decSliceNodeCondition((*[]NodeCondition)(yyv2333), d)
		}
	}
	yyj2330++
	if yyhl2330 {
		yyb2330 = yyj2330 > l
	} else {
		yyb2330 = r.CheckBreak()
	}
	if yyb2330 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2335 := &x.Addresses
		yym2336 := z.DecBinary()
		_ = yym2336
		if false {
		} else {
			h.decSliceNodeAddress((*[]NodeAddress)(yyv2335), d)
		}
	}
	yyj2330++
	if yyhl2330 {
		yyb2330 = yyj2330 > l
	} else {
		yyb2330 = r.CheckBreak()
	}
	if yyb2330 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DaemonEndpoints = NodeDaemonEndpoints{}
	} else {
		yyv2337 := &x.DaemonEndpoints
		yyv2337.CodecDecodeSelf(d)
	}
	yyj2330++
	if yyhl2330 {
		yyb2330 = yyj2330 > l
	} else {
		yyb2330 = r.CheckBreak()
	}
	if yyb2330 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.NodeInfo = NodeSystemInfo{}
	} else {
		yyv2338 := &x.NodeInfo
		yyv2338.CodecDecodeSelf(d)
	}
	for {
		yyj2330++
		if yyhl2330 {
			yyb2330 = yyj2330 > l
		} else {
			yyb2330 = r.CheckBreak()
		}
		if yyb2330 {
			break
		}
		z.DecStructFieldNotFound(yyj2330-1, "")
	}
	r.ReadEnd()
}

func (x NodePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2339 := z.EncBinary()
	_ = yym2339
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2340 := z.DecBinary()
	_ = yym2340
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x NodeConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2341 := z.EncBinary()
	_ = yym2341
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2342 := z.DecBinary()
	_ = yym2342
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2343 := z.EncBinary()
		_ = yym2343
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2344 := !z.EncBinary()
			yy2arr2344 := z.EncBasicHandle().StructToArray
			var yyq2344 [6]bool
			_, _, _ = yysep2344, yyq2344, yy2arr2344
			const yyr2344 bool = false
			yyq2344[2] = true
			yyq2344[3] = true
			yyq2344[4] = x.Reason != ""
			yyq2344[5] = x.Message != ""
			if yyr2344 || yy2arr2344 {
				r.EncodeArrayStart(6)
			} else {
				var yynn2344 int = 2
				for _, b := range yyq2344 {
					if b {
						yynn2344++
					}
				}
				r.EncodeMapStart(yynn2344)
			}
			if yyr2344 || yy2arr2344 {
				x.Type.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				x.Type.CodecEncodeSelf(e)
			}
			if yyr2344 || yy2arr2344 {
				x.Status.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				x.Status.CodecEncodeSelf(e)
			}
			if yyr2344 || yy2arr2344 {
				if yyq2344[2] {
					yy2348 := &x.LastHeartbeatTime
					yym2349 := z.EncBinary()
					_ = yym2349
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2348) {
					} else if yym2349 {
						z.EncBinaryMarshal(yy2348)
					} else if !yym2349 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2348)
					} else {
						z.EncFallback(yy2348)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2344[2] {
					r.EncodeString(codecSelferC_UTF81234, string("lastHeartbeatTime"))
					yy2350 := &x.LastHeartbeatTime
					yym2351 := z.EncBinary()
					_ = yym2351
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2350) {
					} else if yym2351 {
						z.EncBinaryMarshal(yy2350)
					} else if !yym2351 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2350)
					} else {
						z.EncFallback(yy2350)
					}
				}
			}
			if yyr2344 || yy2arr2344 {
				if yyq2344[3] {
					yy2353 := &x.LastTransitionTime
					yym2354 := z.EncBinary()
					_ = yym2354
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2353) {
					} else if yym2354 {
						z.EncBinaryMarshal(yy2353)
					} else if !yym2354 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2353)
					} else {
						z.EncFallback(yy2353)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2344[3] {
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					yy2355 := &x.LastTransitionTime
					yym2356 := z.EncBinary()
					_ = yym2356
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2355) {
					} else if yym2356 {
						z.EncBinaryMarshal(yy2355)
					} else if !yym2356 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2355)
					} else {
						z.EncFallback(yy2355)
					}
				}
			}
			if yyr2344 || yy2arr2344 {
				if yyq2344[4] {
					yym2358 := z.EncBinary()
					_ = yym2358
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2344[4] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym2359 := z.EncBinary()
					_ = yym2359
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2344 || yy2arr2344 {
				if yyq2344[5] {
					yym2361 := z.EncBinary()
					_ = yym2361
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2344[5] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym2362 := z.EncBinary()
					_ = yym2362
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yysep2344 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2363 := z.DecBinary()
	_ = yym2363
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2364 := r.ReadMapStart()
			if yyl2364 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2364, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2364 := r.ReadArrayStart()
			if yyl2364 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2364, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2365Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2365Slc
	var yyhl2365 bool = l >= 0
	for yyj2365 := 0; ; yyj2365++ {
		if yyhl2365 {
			if yyj2365 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2365Slc = r.DecodeBytes(yys2365Slc, true, true)
		yys2365 := string(yys2365Slc)
		switch yys2365 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastHeartbeatTime":
			if r.TryDecodeAsNil() {
				x.LastHeartbeatTime = pkg2_unversioned.Time{}
			} else {
				yyv2368 := &x.LastHeartbeatTime
				yym2369 := z.DecBinary()
				_ = yym2369
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2368) {
				} else if yym2369 {
					z.DecBinaryUnmarshal(yyv2368)
				} else if !yym2369 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2368)
				} else {
					z.DecFallback(yyv2368, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv2370 := &x.LastTransitionTime
				yym2371 := z.DecBinary()
				_ = yym2371
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2370) {
				} else if yym2371 {
					z.DecBinaryUnmarshal(yyv2370)
				} else if !yym2371 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2370)
				} else {
					z.DecFallback(yyv2370, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2365)
		} // end switch yys2365
	} // end for yyj2365
	if !yyhl2365 {
		r.ReadEnd()
	}
}

func (x *NodeCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2374 int
	var yyb2374 bool
	var yyhl2374 bool = l >= 0
	yyj2374++
	if yyhl2374 {
		yyb2374 = yyj2374 > l
	} else {
		yyb2374 = r.CheckBreak()
	}
	if yyb2374 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeConditionType(r.DecodeString())
	}
	yyj2374++
	if yyhl2374 {
		yyb2374 = yyj2374 > l
	} else {
		yyb2374 = r.CheckBreak()
	}
	if yyb2374 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj2374++
	if yyhl2374 {
		yyb2374 = yyj2374 > l
	} else {
		yyb2374 = r.CheckBreak()
	}
	if yyb2374 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastHeartbeatTime = pkg2_unversioned.Time{}
	} else {
		yyv2377 := &x.LastHeartbeatTime
		yym2378 := z.DecBinary()
		_ = yym2378
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2377) {
		} else if yym2378 {
			z.DecBinaryUnmarshal(yyv2377)
		} else if !yym2378 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2377)
		} else {
			z.DecFallback(yyv2377, false)
		}
	}
	yyj2374++
	if yyhl2374 {
		yyb2374 = yyj2374 > l
	} else {
		yyb2374 = r.CheckBreak()
	}
	if yyb2374 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv2379 := &x.LastTransitionTime
		yym2380 := z.DecBinary()
		_ = yym2380
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2379) {
		} else if yym2380 {
			z.DecBinaryUnmarshal(yyv2379)
		} else if !yym2380 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2379)
		} else {
			z.DecFallback(yyv2379, false)
		}
	}
	yyj2374++
	if yyhl2374 {
		yyb2374 = yyj2374 > l
	} else {
		yyb2374 = r.CheckBreak()
	}
	if yyb2374 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2374++
	if yyhl2374 {
		yyb2374 = yyj2374 > l
	} else {
		yyb2374 = r.CheckBreak()
	}
	if yyb2374 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj2374++
		if yyhl2374 {
			yyb2374 = yyj2374 > l
		} else {
			yyb2374 = r.CheckBreak()
		}
		if yyb2374 {
			break
		}
		z.DecStructFieldNotFound(yyj2374-1, "")
	}
	r.ReadEnd()
}

func (x NodeAddressType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2383 := z.EncBinary()
	_ = yym2383
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeAddressType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2384 := z.DecBinary()
	_ = yym2384
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2385 := z.EncBinary()
		_ = yym2385
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2386 := !z.EncBinary()
			yy2arr2386 := z.EncBasicHandle().StructToArray
			var yyq2386 [2]bool
			_, _, _ = yysep2386, yyq2386, yy2arr2386
			const yyr2386 bool = false
			if yyr2386 || yy2arr2386 {
				r.EncodeArrayStart(2)
			} else {
				var yynn2386 int = 2
				for _, b := range yyq2386 {
					if b {
						yynn2386++
					}
				}
				r.EncodeMapStart(yynn2386)
			}
			if yyr2386 || yy2arr2386 {
				x.Type.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				x.Type.CodecEncodeSelf(e)
			}
			if yyr2386 || yy2arr2386 {
				yym2389 := z.EncBinary()
				_ = yym2389
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("address"))
				yym2390 := z.EncBinary()
				_ = yym2390
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			}
			if yysep2386 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2391 := z.DecBinary()
	_ = yym2391
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2392 := r.ReadMapStart()
			if yyl2392 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2392, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2392 := r.ReadArrayStart()
			if yyl2392 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2392, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2393Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2393Slc
	var yyhl2393 bool = l >= 0
	for yyj2393 := 0; ; yyj2393++ {
		if yyhl2393 {
			if yyj2393 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2393Slc = r.DecodeBytes(yys2393Slc, true, true)
		yys2393 := string(yys2393Slc)
		switch yys2393 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeAddressType(r.DecodeString())
			}
		case "address":
			if r.TryDecodeAsNil() {
				x.Address = ""
			} else {
				x.Address = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2393)
		} // end switch yys2393
	} // end for yyj2393
	if !yyhl2393 {
		r.ReadEnd()
	}
}

func (x *NodeAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2396 int
	var yyb2396 bool
	var yyhl2396 bool = l >= 0
	yyj2396++
	if yyhl2396 {
		yyb2396 = yyj2396 > l
	} else {
		yyb2396 = r.CheckBreak()
	}
	if yyb2396 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeAddressType(r.DecodeString())
	}
	yyj2396++
	if yyhl2396 {
		yyb2396 = yyj2396 > l
	} else {
		yyb2396 = r.CheckBreak()
	}
	if yyb2396 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Address = ""
	} else {
		x.Address = string(r.DecodeString())
	}
	for {
		yyj2396++
		if yyhl2396 {
			yyb2396 = yyj2396 > l
		} else {
			yyb2396 = r.CheckBreak()
		}
		if yyb2396 {
			break
		}
		z.DecStructFieldNotFound(yyj2396-1, "")
	}
	r.ReadEnd()
}

func (x *NodeResources) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2399 := z.EncBinary()
		_ = yym2399
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2400 := !z.EncBinary()
			yy2arr2400 := z.EncBasicHandle().StructToArray
			var yyq2400 [1]bool
			_, _, _ = yysep2400, yyq2400, yy2arr2400
			const yyr2400 bool = false
			yyq2400[0] = len(x.Capacity) != 0
			if yyr2400 || yy2arr2400 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2400 int = 0
				for _, b := range yyq2400 {
					if b {
						yynn2400++
					}
				}
				r.EncodeMapStart(yynn2400)
			}
			if yyr2400 || yy2arr2400 {
				if yyq2400[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2400[0] {
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yysep2400 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeResources) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2402 := z.DecBinary()
	_ = yym2402
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2403 := r.ReadMapStart()
			if yyl2403 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2403, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2403 := r.ReadArrayStart()
			if yyl2403 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2403, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeResources) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2404Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2404Slc
	var yyhl2404 bool = l >= 0
	for yyj2404 := 0; ; yyj2404++ {
		if yyhl2404 {
			if yyj2404 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2404Slc = r.DecodeBytes(yys2404Slc, true, true)
		yys2404 := string(yys2404Slc)
		switch yys2404 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv2405 := &x.Capacity
				yyv2405.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2404)
		} // end switch yys2404
	} // end for yyj2404
	if !yyhl2404 {
		r.ReadEnd()
	}
}

func (x *NodeResources) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2406 int
	var yyb2406 bool
	var yyhl2406 bool = l >= 0
	yyj2406++
	if yyhl2406 {
		yyb2406 = yyj2406 > l
	} else {
		yyb2406 = r.CheckBreak()
	}
	if yyb2406 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv2407 := &x.Capacity
		yyv2407.CodecDecodeSelf(d)
	}
	for {
		yyj2406++
		if yyhl2406 {
			yyb2406 = yyj2406 > l
		} else {
			yyb2406 = r.CheckBreak()
		}
		if yyb2406 {
			break
		}
		z.DecStructFieldNotFound(yyj2406-1, "")
	}
	r.ReadEnd()
}

func (x ResourceName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2408 := z.EncBinary()
	_ = yym2408
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2409 := z.DecBinary()
	_ = yym2409
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2410 := z.EncBinary()
		_ = yym2410
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encResourceList((ResourceList)(x), e)
		}
	}
}

func (x *ResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2411 := z.DecBinary()
	_ = yym2411
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decResourceList((*ResourceList)(x), d)
	}
}

func (x *Node) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2412 := z.EncBinary()
		_ = yym2412
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2413 := !z.EncBinary()
			yy2arr2413 := z.EncBasicHandle().StructToArray
			var yyq2413 [5]bool
			_, _, _ = yysep2413, yyq2413, yy2arr2413
			const yyr2413 bool = false
			yyq2413[0] = x.Kind != ""
			yyq2413[1] = x.APIVersion != ""
			yyq2413[2] = true
			yyq2413[3] = true
			yyq2413[4] = true
			if yyr2413 || yy2arr2413 {
				r.EncodeArrayStart(5)
			} else {
				var yynn2413 int = 0
				for _, b := range yyq2413 {
					if b {
						yynn2413++
					}
				}
				r.EncodeMapStart(yynn2413)
			}
			if yyr2413 || yy2arr2413 {
				if yyq2413[0] {
					yym2415 := z.EncBinary()
					_ = yym2415
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2413[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2416 := z.EncBinary()
					_ = yym2416
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2413 || yy2arr2413 {
				if yyq2413[1] {
					yym2418 := z.EncBinary()
					_ = yym2418
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2413[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2419 := z.EncBinary()
					_ = yym2419
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2413 || yy2arr2413 {
				if yyq2413[2] {
					yy2421 := &x.ObjectMeta
					yy2421.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2413[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2422 := &x.ObjectMeta
					yy2422.CodecEncodeSelf(e)
				}
			}
			if yyr2413 || yy2arr2413 {
				if yyq2413[3] {
					yy2424 := &x.Spec
					yy2424.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2413[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy2425 := &x.Spec
					yy2425.CodecEncodeSelf(e)
				}
			}
			if yyr2413 || yy2arr2413 {
				if yyq2413[4] {
					yy2427 := &x.Status
					yy2427.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2413[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy2428 := &x.Status
					yy2428.CodecEncodeSelf(e)
				}
			}
			if yysep2413 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Node) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2429 := z.DecBinary()
	_ = yym2429
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2430 := r.ReadMapStart()
			if yyl2430 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2430, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2430 := r.ReadArrayStart()
			if yyl2430 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2430, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Node) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2431Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2431Slc
	var yyhl2431 bool = l >= 0
	for yyj2431 := 0; ; yyj2431++ {
		if yyhl2431 {
			if yyj2431 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2431Slc = r.DecodeBytes(yys2431Slc, true, true)
		yys2431 := string(yys2431Slc)
		switch yys2431 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2434 := &x.ObjectMeta
				yyv2434.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NodeSpec{}
			} else {
				yyv2435 := &x.Spec
				yyv2435.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NodeStatus{}
			} else {
				yyv2436 := &x.Status
				yyv2436.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2431)
		} // end switch yys2431
	} // end for yyj2431
	if !yyhl2431 {
		r.ReadEnd()
	}
}

func (x *Node) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2437 int
	var yyb2437 bool
	var yyhl2437 bool = l >= 0
	yyj2437++
	if yyhl2437 {
		yyb2437 = yyj2437 > l
	} else {
		yyb2437 = r.CheckBreak()
	}
	if yyb2437 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2437++
	if yyhl2437 {
		yyb2437 = yyj2437 > l
	} else {
		yyb2437 = r.CheckBreak()
	}
	if yyb2437 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2437++
	if yyhl2437 {
		yyb2437 = yyj2437 > l
	} else {
		yyb2437 = r.CheckBreak()
	}
	if yyb2437 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2440 := &x.ObjectMeta
		yyv2440.CodecDecodeSelf(d)
	}
	yyj2437++
	if yyhl2437 {
		yyb2437 = yyj2437 > l
	} else {
		yyb2437 = r.CheckBreak()
	}
	if yyb2437 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = NodeSpec{}
	} else {
		yyv2441 := &x.Spec
		yyv2441.CodecDecodeSelf(d)
	}
	yyj2437++
	if yyhl2437 {
		yyb2437 = yyj2437 > l
	} else {
		yyb2437 = r.CheckBreak()
	}
	if yyb2437 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = NodeStatus{}
	} else {
		yyv2442 := &x.Status
		yyv2442.CodecDecodeSelf(d)
	}
	for {
		yyj2437++
		if yyhl2437 {
			yyb2437 = yyj2437 > l
		} else {
			yyb2437 = r.CheckBreak()
		}
		if yyb2437 {
			break
		}
		z.DecStructFieldNotFound(yyj2437-1, "")
	}
	r.ReadEnd()
}

func (x *NodeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2443 := z.EncBinary()
		_ = yym2443
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2444 := !z.EncBinary()
			yy2arr2444 := z.EncBasicHandle().StructToArray
			var yyq2444 [4]bool
			_, _, _ = yysep2444, yyq2444, yy2arr2444
			const yyr2444 bool = false
			yyq2444[0] = x.Kind != ""
			yyq2444[1] = x.APIVersion != ""
			yyq2444[2] = true
			if yyr2444 || yy2arr2444 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2444 int = 1
				for _, b := range yyq2444 {
					if b {
						yynn2444++
					}
				}
				r.EncodeMapStart(yynn2444)
			}
			if yyr2444 || yy2arr2444 {
				if yyq2444[0] {
					yym2446 := z.EncBinary()
					_ = yym2446
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2444[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2447 := z.EncBinary()
					_ = yym2447
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2444 || yy2arr2444 {
				if yyq2444[1] {
					yym2449 := z.EncBinary()
					_ = yym2449
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2444[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2450 := z.EncBinary()
					_ = yym2450
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2444 || yy2arr2444 {
				if yyq2444[2] {
					yy2452 := &x.ListMeta
					yym2453 := z.EncBinary()
					_ = yym2453
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2452) {
					} else {
						z.EncFallback(yy2452)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2444[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2454 := &x.ListMeta
					yym2455 := z.EncBinary()
					_ = yym2455
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2454) {
					} else {
						z.EncFallback(yy2454)
					}
				}
			}
			if yyr2444 || yy2arr2444 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2457 := z.EncBinary()
					_ = yym2457
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2458 := z.EncBinary()
					_ = yym2458
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			}
			if yysep2444 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2459 := z.DecBinary()
	_ = yym2459
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2460 := r.ReadMapStart()
			if yyl2460 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2460, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2460 := r.ReadArrayStart()
			if yyl2460 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2460, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2461Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2461Slc
	var yyhl2461 bool = l >= 0
	for yyj2461 := 0; ; yyj2461++ {
		if yyhl2461 {
			if yyj2461 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2461Slc = r.DecodeBytes(yys2461Slc, true, true)
		yys2461 := string(yys2461Slc)
		switch yys2461 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2464 := &x.ListMeta
				yym2465 := z.DecBinary()
				_ = yym2465
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2464) {
				} else {
					z.DecFallback(yyv2464, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2466 := &x.Items
				yym2467 := z.DecBinary()
				_ = yym2467
				if false {
				} else {
					h.decSliceNode((*[]Node)(yyv2466), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2461)
		} // end switch yys2461
	} // end for yyj2461
	if !yyhl2461 {
		r.ReadEnd()
	}
}

func (x *NodeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2468 int
	var yyb2468 bool
	var yyhl2468 bool = l >= 0
	yyj2468++
	if yyhl2468 {
		yyb2468 = yyj2468 > l
	} else {
		yyb2468 = r.CheckBreak()
	}
	if yyb2468 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2468++
	if yyhl2468 {
		yyb2468 = yyj2468 > l
	} else {
		yyb2468 = r.CheckBreak()
	}
	if yyb2468 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2468++
	if yyhl2468 {
		yyb2468 = yyj2468 > l
	} else {
		yyb2468 = r.CheckBreak()
	}
	if yyb2468 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2471 := &x.ListMeta
		yym2472 := z.DecBinary()
		_ = yym2472
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2471) {
		} else {
			z.DecFallback(yyv2471, false)
		}
	}
	yyj2468++
	if yyhl2468 {
		yyb2468 = yyj2468 > l
	} else {
		yyb2468 = r.CheckBreak()
	}
	if yyb2468 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2473 := &x.Items
		yym2474 := z.DecBinary()
		_ = yym2474
		if false {
		} else {
			h.decSliceNode((*[]Node)(yyv2473), d)
		}
	}
	for {
		yyj2468++
		if yyhl2468 {
			yyb2468 = yyj2468 > l
		} else {
			yyb2468 = r.CheckBreak()
		}
		if yyb2468 {
			break
		}
		z.DecStructFieldNotFound(yyj2468-1, "")
	}
	r.ReadEnd()
}

func (x *NamespaceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2475 := z.EncBinary()
		_ = yym2475
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2476 := !z.EncBinary()
			yy2arr2476 := z.EncBasicHandle().StructToArray
			var yyq2476 [2]bool
			_, _, _ = yysep2476, yyq2476, yy2arr2476
			const yyr2476 bool = false
			yyq2476[1] = x.Network != ""
			if yyr2476 || yy2arr2476 {
				r.EncodeArrayStart(2)
			} else {
				var yynn2476 int = 1
				for _, b := range yyq2476 {
					if b {
						yynn2476++
					}
				}
				r.EncodeMapStart(yynn2476)
			}
			if yyr2476 || yy2arr2476 {
				if x.Finalizers == nil {
					r.EncodeNil()
				} else {
					yym2478 := z.EncBinary()
					_ = yym2478
					if false {
					} else {
						h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Finalizers"))
				if x.Finalizers == nil {
					r.EncodeNil()
				} else {
					yym2479 := z.EncBinary()
					_ = yym2479
					if false {
					} else {
						h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
					}
				}
			}
			if yyr2476 || yy2arr2476 {
				if yyq2476[1] {
					yym2481 := z.EncBinary()
					_ = yym2481
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Network))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2476[1] {
					r.EncodeString(codecSelferC_UTF81234, string("network"))
					yym2482 := z.EncBinary()
					_ = yym2482
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Network))
					}
				}
			}
			if yysep2476 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NamespaceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2483 := z.DecBinary()
	_ = yym2483
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2484 := r.ReadMapStart()
			if yyl2484 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2484, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2484 := r.ReadArrayStart()
			if yyl2484 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2484, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2485Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2485Slc
	var yyhl2485 bool = l >= 0
	for yyj2485 := 0; ; yyj2485++ {
		if yyhl2485 {
			if yyj2485 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2485Slc = r.DecodeBytes(yys2485Slc, true, true)
		yys2485 := string(yys2485Slc)
		switch yys2485 {
		case "Finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv2486 := &x.Finalizers
				yym2487 := z.DecBinary()
				_ = yym2487
				if false {
				} else {
					h.decSliceFinalizerName((*[]FinalizerName)(yyv2486), d)
				}
			}
		case "network":
			if r.TryDecodeAsNil() {
				x.Network = ""
			} else {
				x.Network = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2485)
		} // end switch yys2485
	} // end for yyj2485
	if !yyhl2485 {
		r.ReadEnd()
	}
}

func (x *NamespaceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2489 int
	var yyb2489 bool
	var yyhl2489 bool = l >= 0
	yyj2489++
	if yyhl2489 {
		yyb2489 = yyj2489 > l
	} else {
		yyb2489 = r.CheckBreak()
	}
	if yyb2489 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv2490 := &x.Finalizers
		yym2491 := z.DecBinary()
		_ = yym2491
		if false {
		} else {
			h.decSliceFinalizerName((*[]FinalizerName)(yyv2490), d)
		}
	}
	yyj2489++
	if yyhl2489 {
		yyb2489 = yyj2489 > l
	} else {
		yyb2489 = r.CheckBreak()
	}
	if yyb2489 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Network = ""
	} else {
		x.Network = string(r.DecodeString())
	}
	for {
		yyj2489++
		if yyhl2489 {
			yyb2489 = yyj2489 > l
		} else {
			yyb2489 = r.CheckBreak()
		}
		if yyb2489 {
			break
		}
		z.DecStructFieldNotFound(yyj2489-1, "")
	}
	r.ReadEnd()
}

func (x FinalizerName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2493 := z.EncBinary()
	_ = yym2493
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *FinalizerName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2494 := z.DecBinary()
	_ = yym2494
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NamespaceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2495 := z.EncBinary()
		_ = yym2495
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2496 := !z.EncBinary()
			yy2arr2496 := z.EncBasicHandle().StructToArray
			var yyq2496 [1]bool
			_, _, _ = yysep2496, yyq2496, yy2arr2496
			const yyr2496 bool = false
			yyq2496[0] = x.Phase != ""
			if yyr2496 || yy2arr2496 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2496 int = 0
				for _, b := range yyq2496 {
					if b {
						yynn2496++
					}
				}
				r.EncodeMapStart(yynn2496)
			}
			if yyr2496 || yy2arr2496 {
				if yyq2496[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2496[0] {
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yysep2496 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NamespaceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2498 := z.DecBinary()
	_ = yym2498
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2499 := r.ReadMapStart()
			if yyl2499 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2499, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2499 := r.ReadArrayStart()
			if yyl2499 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2499, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2500Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2500Slc
	var yyhl2500 bool = l >= 0
	for yyj2500 := 0; ; yyj2500++ {
		if yyhl2500 {
			if yyj2500 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2500Slc = r.DecodeBytes(yys2500Slc, true, true)
		yys2500 := string(yys2500Slc)
		switch yys2500 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NamespacePhase(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2500)
		} // end switch yys2500
	} // end for yyj2500
	if !yyhl2500 {
		r.ReadEnd()
	}
}

func (x *NamespaceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2502 int
	var yyb2502 bool
	var yyhl2502 bool = l >= 0
	yyj2502++
	if yyhl2502 {
		yyb2502 = yyj2502 > l
	} else {
		yyb2502 = r.CheckBreak()
	}
	if yyb2502 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NamespacePhase(r.DecodeString())
	}
	for {
		yyj2502++
		if yyhl2502 {
			yyb2502 = yyj2502 > l
		} else {
			yyb2502 = r.CheckBreak()
		}
		if yyb2502 {
			break
		}
		z.DecStructFieldNotFound(yyj2502-1, "")
	}
	r.ReadEnd()
}

func (x NamespacePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2504 := z.EncBinary()
	_ = yym2504
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NamespacePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2505 := z.DecBinary()
	_ = yym2505
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Namespace) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2506 := z.EncBinary()
		_ = yym2506
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2507 := !z.EncBinary()
			yy2arr2507 := z.EncBasicHandle().StructToArray
			var yyq2507 [5]bool
			_, _, _ = yysep2507, yyq2507, yy2arr2507
			const yyr2507 bool = false
			yyq2507[0] = x.Kind != ""
			yyq2507[1] = x.APIVersion != ""
			yyq2507[2] = true
			yyq2507[3] = true
			yyq2507[4] = true
			if yyr2507 || yy2arr2507 {
				r.EncodeArrayStart(5)
			} else {
				var yynn2507 int = 0
				for _, b := range yyq2507 {
					if b {
						yynn2507++
					}
				}
				r.EncodeMapStart(yynn2507)
			}
			if yyr2507 || yy2arr2507 {
				if yyq2507[0] {
					yym2509 := z.EncBinary()
					_ = yym2509
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2507[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2510 := z.EncBinary()
					_ = yym2510
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2507 || yy2arr2507 {
				if yyq2507[1] {
					yym2512 := z.EncBinary()
					_ = yym2512
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2507[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2513 := z.EncBinary()
					_ = yym2513
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2507 || yy2arr2507 {
				if yyq2507[2] {
					yy2515 := &x.ObjectMeta
					yy2515.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2507[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2516 := &x.ObjectMeta
					yy2516.CodecEncodeSelf(e)
				}
			}
			if yyr2507 || yy2arr2507 {
				if yyq2507[3] {
					yy2518 := &x.Spec
					yy2518.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2507[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy2519 := &x.Spec
					yy2519.CodecEncodeSelf(e)
				}
			}
			if yyr2507 || yy2arr2507 {
				if yyq2507[4] {
					yy2521 := &x.Status
					yy2521.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2507[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy2522 := &x.Status
					yy2522.CodecEncodeSelf(e)
				}
			}
			if yysep2507 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Namespace) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2523 := z.DecBinary()
	_ = yym2523
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2524 := r.ReadMapStart()
			if yyl2524 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2524, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2524 := r.ReadArrayStart()
			if yyl2524 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2524, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Namespace) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2525Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2525Slc
	var yyhl2525 bool = l >= 0
	for yyj2525 := 0; ; yyj2525++ {
		if yyhl2525 {
			if yyj2525 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2525Slc = r.DecodeBytes(yys2525Slc, true, true)
		yys2525 := string(yys2525Slc)
		switch yys2525 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2528 := &x.ObjectMeta
				yyv2528.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NamespaceSpec{}
			} else {
				yyv2529 := &x.Spec
				yyv2529.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NamespaceStatus{}
			} else {
				yyv2530 := &x.Status
				yyv2530.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2525)
		} // end switch yys2525
	} // end for yyj2525
	if !yyhl2525 {
		r.ReadEnd()
	}
}

func (x *Namespace) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2531 int
	var yyb2531 bool
	var yyhl2531 bool = l >= 0
	yyj2531++
	if yyhl2531 {
		yyb2531 = yyj2531 > l
	} else {
		yyb2531 = r.CheckBreak()
	}
	if yyb2531 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2531++
	if yyhl2531 {
		yyb2531 = yyj2531 > l
	} else {
		yyb2531 = r.CheckBreak()
	}
	if yyb2531 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2531++
	if yyhl2531 {
		yyb2531 = yyj2531 > l
	} else {
		yyb2531 = r.CheckBreak()
	}
	if yyb2531 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2534 := &x.ObjectMeta
		yyv2534.CodecDecodeSelf(d)
	}
	yyj2531++
	if yyhl2531 {
		yyb2531 = yyj2531 > l
	} else {
		yyb2531 = r.CheckBreak()
	}
	if yyb2531 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = NamespaceSpec{}
	} else {
		yyv2535 := &x.Spec
		yyv2535.CodecDecodeSelf(d)
	}
	yyj2531++
	if yyhl2531 {
		yyb2531 = yyj2531 > l
	} else {
		yyb2531 = r.CheckBreak()
	}
	if yyb2531 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = NamespaceStatus{}
	} else {
		yyv2536 := &x.Status
		yyv2536.CodecDecodeSelf(d)
	}
	for {
		yyj2531++
		if yyhl2531 {
			yyb2531 = yyj2531 > l
		} else {
			yyb2531 = r.CheckBreak()
		}
		if yyb2531 {
			break
		}
		z.DecStructFieldNotFound(yyj2531-1, "")
	}
	r.ReadEnd()
}

func (x *NamespaceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2537 := z.EncBinary()
		_ = yym2537
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2538 := !z.EncBinary()
			yy2arr2538 := z.EncBasicHandle().StructToArray
			var yyq2538 [4]bool
			_, _, _ = yysep2538, yyq2538, yy2arr2538
			const yyr2538 bool = false
			yyq2538[0] = x.Kind != ""
			yyq2538[1] = x.APIVersion != ""
			yyq2538[2] = true
			if yyr2538 || yy2arr2538 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2538 int = 1
				for _, b := range yyq2538 {
					if b {
						yynn2538++
					}
				}
				r.EncodeMapStart(yynn2538)
			}
			if yyr2538 || yy2arr2538 {
				if yyq2538[0] {
					yym2540 := z.EncBinary()
					_ = yym2540
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2538[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2541 := z.EncBinary()
					_ = yym2541
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2538 || yy2arr2538 {
				if yyq2538[1] {
					yym2543 := z.EncBinary()
					_ = yym2543
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2538[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2544 := z.EncBinary()
					_ = yym2544
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2538 || yy2arr2538 {
				if yyq2538[2] {
					yy2546 := &x.ListMeta
					yym2547 := z.EncBinary()
					_ = yym2547
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2546) {
					} else {
						z.EncFallback(yy2546)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2538[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2548 := &x.ListMeta
					yym2549 := z.EncBinary()
					_ = yym2549
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2548) {
					} else {
						z.EncFallback(yy2548)
					}
				}
			}
			if yyr2538 || yy2arr2538 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2551 := z.EncBinary()
					_ = yym2551
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2552 := z.EncBinary()
					_ = yym2552
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			}
			if yysep2538 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NamespaceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2553 := z.DecBinary()
	_ = yym2553
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2554 := r.ReadMapStart()
			if yyl2554 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2554, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2554 := r.ReadArrayStart()
			if yyl2554 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2554, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2555Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2555Slc
	var yyhl2555 bool = l >= 0
	for yyj2555 := 0; ; yyj2555++ {
		if yyhl2555 {
			if yyj2555 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2555Slc = r.DecodeBytes(yys2555Slc, true, true)
		yys2555 := string(yys2555Slc)
		switch yys2555 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2558 := &x.ListMeta
				yym2559 := z.DecBinary()
				_ = yym2559
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2558) {
				} else {
					z.DecFallback(yyv2558, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2560 := &x.Items
				yym2561 := z.DecBinary()
				_ = yym2561
				if false {
				} else {
					h.decSliceNamespace((*[]Namespace)(yyv2560), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2555)
		} // end switch yys2555
	} // end for yyj2555
	if !yyhl2555 {
		r.ReadEnd()
	}
}

func (x *NamespaceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2562 int
	var yyb2562 bool
	var yyhl2562 bool = l >= 0
	yyj2562++
	if yyhl2562 {
		yyb2562 = yyj2562 > l
	} else {
		yyb2562 = r.CheckBreak()
	}
	if yyb2562 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2562++
	if yyhl2562 {
		yyb2562 = yyj2562 > l
	} else {
		yyb2562 = r.CheckBreak()
	}
	if yyb2562 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2562++
	if yyhl2562 {
		yyb2562 = yyj2562 > l
	} else {
		yyb2562 = r.CheckBreak()
	}
	if yyb2562 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2565 := &x.ListMeta
		yym2566 := z.DecBinary()
		_ = yym2566
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2565) {
		} else {
			z.DecFallback(yyv2565, false)
		}
	}
	yyj2562++
	if yyhl2562 {
		yyb2562 = yyj2562 > l
	} else {
		yyb2562 = r.CheckBreak()
	}
	if yyb2562 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2567 := &x.Items
		yym2568 := z.DecBinary()
		_ = yym2568
		if false {
		} else {
			h.decSliceNamespace((*[]Namespace)(yyv2567), d)
		}
	}
	for {
		yyj2562++
		if yyhl2562 {
			yyb2562 = yyj2562 > l
		} else {
			yyb2562 = r.CheckBreak()
		}
		if yyb2562 {
			break
		}
		z.DecStructFieldNotFound(yyj2562-1, "")
	}
	r.ReadEnd()
}

func (x *NetworkStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2569 := z.EncBinary()
		_ = yym2569
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2570 := !z.EncBinary()
			yy2arr2570 := z.EncBasicHandle().StructToArray
			var yyq2570 [1]bool
			_, _, _ = yysep2570, yyq2570, yy2arr2570
			const yyr2570 bool = false
			yyq2570[0] = x.Phase != ""
			if yyr2570 || yy2arr2570 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2570 int = 0
				for _, b := range yyq2570 {
					if b {
						yynn2570++
					}
				}
				r.EncodeMapStart(yynn2570)
			}
			if yyr2570 || yy2arr2570 {
				if yyq2570[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2570[0] {
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yysep2570 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NetworkStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2572 := z.DecBinary()
	_ = yym2572
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2573 := r.ReadMapStart()
			if yyl2573 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2573, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2573 := r.ReadArrayStart()
			if yyl2573 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2573, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NetworkStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2574Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2574Slc
	var yyhl2574 bool = l >= 0
	for yyj2574 := 0; ; yyj2574++ {
		if yyhl2574 {
			if yyj2574 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2574Slc = r.DecodeBytes(yys2574Slc, true, true)
		yys2574 := string(yys2574Slc)
		switch yys2574 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NetworkPhase(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2574)
		} // end switch yys2574
	} // end for yyj2574
	if !yyhl2574 {
		r.ReadEnd()
	}
}

func (x *NetworkStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2576 int
	var yyb2576 bool
	var yyhl2576 bool = l >= 0
	yyj2576++
	if yyhl2576 {
		yyb2576 = yyj2576 > l
	} else {
		yyb2576 = r.CheckBreak()
	}
	if yyb2576 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NetworkPhase(r.DecodeString())
	}
	for {
		yyj2576++
		if yyhl2576 {
			yyb2576 = yyj2576 > l
		} else {
			yyb2576 = r.CheckBreak()
		}
		if yyb2576 {
			break
		}
		z.DecStructFieldNotFound(yyj2576-1, "")
	}
	r.ReadEnd()
}

func (x NetworkPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2578 := z.EncBinary()
	_ = yym2578
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NetworkPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2579 := z.DecBinary()
	_ = yym2579
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Subnet) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2580 := z.EncBinary()
		_ = yym2580
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2581 := !z.EncBinary()
			yy2arr2581 := z.EncBasicHandle().StructToArray
			var yyq2581 [2]bool
			_, _, _ = yysep2581, yyq2581, yy2arr2581
			const yyr2581 bool = false
			if yyr2581 || yy2arr2581 {
				r.EncodeArrayStart(2)
			} else {
				var yynn2581 int = 2
				for _, b := range yyq2581 {
					if b {
						yynn2581++
					}
				}
				r.EncodeMapStart(yynn2581)
			}
			if yyr2581 || yy2arr2581 {
				yym2583 := z.EncBinary()
				_ = yym2583
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.CIDR))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("cidr"))
				yym2584 := z.EncBinary()
				_ = yym2584
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.CIDR))
				}
			}
			if yyr2581 || yy2arr2581 {
				yym2586 := z.EncBinary()
				_ = yym2586
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Gateway))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("gateway"))
				yym2587 := z.EncBinary()
				_ = yym2587
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Gateway))
				}
			}
			if yysep2581 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Subnet) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2588 := z.DecBinary()
	_ = yym2588
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2589 := r.ReadMapStart()
			if yyl2589 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2589, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2589 := r.ReadArrayStart()
			if yyl2589 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2589, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Subnet) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2590Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2590Slc
	var yyhl2590 bool = l >= 0
	for yyj2590 := 0; ; yyj2590++ {
		if yyhl2590 {
			if yyj2590 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2590Slc = r.DecodeBytes(yys2590Slc, true, true)
		yys2590 := string(yys2590Slc)
		switch yys2590 {
		case "cidr":
			if r.TryDecodeAsNil() {
				x.CIDR = ""
			} else {
				x.CIDR = string(r.DecodeString())
			}
		case "gateway":
			if r.TryDecodeAsNil() {
				x.Gateway = ""
			} else {
				x.Gateway = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2590)
		} // end switch yys2590
	} // end for yyj2590
	if !yyhl2590 {
		r.ReadEnd()
	}
}

func (x *Subnet) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2593 int
	var yyb2593 bool
	var yyhl2593 bool = l >= 0
	yyj2593++
	if yyhl2593 {
		yyb2593 = yyj2593 > l
	} else {
		yyb2593 = r.CheckBreak()
	}
	if yyb2593 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.CIDR = ""
	} else {
		x.CIDR = string(r.DecodeString())
	}
	yyj2593++
	if yyhl2593 {
		yyb2593 = yyj2593 > l
	} else {
		yyb2593 = r.CheckBreak()
	}
	if yyb2593 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Gateway = ""
	} else {
		x.Gateway = string(r.DecodeString())
	}
	for {
		yyj2593++
		if yyhl2593 {
			yyb2593 = yyj2593 > l
		} else {
			yyb2593 = r.CheckBreak()
		}
		if yyb2593 {
			break
		}
		z.DecStructFieldNotFound(yyj2593-1, "")
	}
	r.ReadEnd()
}

func (x *NetworkSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2596 := z.EncBinary()
		_ = yym2596
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2597 := !z.EncBinary()
			yy2arr2597 := z.EncBasicHandle().StructToArray
			var yyq2597 [2]bool
			_, _, _ = yysep2597, yyq2597, yy2arr2597
			const yyr2597 bool = false
			yyq2597[0] = len(x.Subnets) != 0
			yyq2597[1] = x.ProviderNetworkID != ""
			if yyr2597 || yy2arr2597 {
				r.EncodeArrayStart(2)
			} else {
				var yynn2597 int = 0
				for _, b := range yyq2597 {
					if b {
						yynn2597++
					}
				}
				r.EncodeMapStart(yynn2597)
			}
			if yyr2597 || yy2arr2597 {
				if yyq2597[0] {
					if x.Subnets == nil {
						r.EncodeNil()
					} else {
						yym2599 := z.EncBinary()
						_ = yym2599
						if false {
						} else {
							h.encMapstringSubnet((map[string]Subnet)(x.Subnets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2597[0] {
					r.EncodeString(codecSelferC_UTF81234, string("subnets"))
					if x.Subnets == nil {
						r.EncodeNil()
					} else {
						yym2600 := z.EncBinary()
						_ = yym2600
						if false {
						} else {
							h.encMapstringSubnet((map[string]Subnet)(x.Subnets), e)
						}
					}
				}
			}
			if yyr2597 || yy2arr2597 {
				if yyq2597[1] {
					yym2602 := z.EncBinary()
					_ = yym2602
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderNetworkID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2597[1] {
					r.EncodeString(codecSelferC_UTF81234, string("providerNetworkID"))
					yym2603 := z.EncBinary()
					_ = yym2603
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderNetworkID))
					}
				}
			}
			if yysep2597 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NetworkSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2604 := z.DecBinary()
	_ = yym2604
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2605 := r.ReadMapStart()
			if yyl2605 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2605, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2605 := r.ReadArrayStart()
			if yyl2605 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2605, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NetworkSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2606Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2606Slc
	var yyhl2606 bool = l >= 0
	for yyj2606 := 0; ; yyj2606++ {
		if yyhl2606 {
			if yyj2606 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2606Slc = r.DecodeBytes(yys2606Slc, true, true)
		yys2606 := string(yys2606Slc)
		switch yys2606 {
		case "subnets":
			if r.TryDecodeAsNil() {
				x.Subnets = nil
			} else {
				yyv2607 := &x.Subnets
				yym2608 := z.DecBinary()
				_ = yym2608
				if false {
				} else {
					h.decMapstringSubnet((*map[string]Subnet)(yyv2607), d)
				}
			}
		case "providerNetworkID":
			if r.TryDecodeAsNil() {
				x.ProviderNetworkID = ""
			} else {
				x.ProviderNetworkID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2606)
		} // end switch yys2606
	} // end for yyj2606
	if !yyhl2606 {
		r.ReadEnd()
	}
}

func (x *NetworkSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2610 int
	var yyb2610 bool
	var yyhl2610 bool = l >= 0
	yyj2610++
	if yyhl2610 {
		yyb2610 = yyj2610 > l
	} else {
		yyb2610 = r.CheckBreak()
	}
	if yyb2610 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Subnets = nil
	} else {
		yyv2611 := &x.Subnets
		yym2612 := z.DecBinary()
		_ = yym2612
		if false {
		} else {
			h.decMapstringSubnet((*map[string]Subnet)(yyv2611), d)
		}
	}
	yyj2610++
	if yyhl2610 {
		yyb2610 = yyj2610 > l
	} else {
		yyb2610 = r.CheckBreak()
	}
	if yyb2610 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ProviderNetworkID = ""
	} else {
		x.ProviderNetworkID = string(r.DecodeString())
	}
	for {
		yyj2610++
		if yyhl2610 {
			yyb2610 = yyj2610 > l
		} else {
			yyb2610 = r.CheckBreak()
		}
		if yyb2610 {
			break
		}
		z.DecStructFieldNotFound(yyj2610-1, "")
	}
	r.ReadEnd()
}

func (x *Network) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2614 := z.EncBinary()
		_ = yym2614
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2615 := !z.EncBinary()
			yy2arr2615 := z.EncBasicHandle().StructToArray
			var yyq2615 [5]bool
			_, _, _ = yysep2615, yyq2615, yy2arr2615
			const yyr2615 bool = false
			yyq2615[0] = x.Kind != ""
			yyq2615[1] = x.APIVersion != ""
			yyq2615[2] = true
			yyq2615[3] = true
			yyq2615[4] = true
			if yyr2615 || yy2arr2615 {
				r.EncodeArrayStart(5)
			} else {
				var yynn2615 int = 0
				for _, b := range yyq2615 {
					if b {
						yynn2615++
					}
				}
				r.EncodeMapStart(yynn2615)
			}
			if yyr2615 || yy2arr2615 {
				if yyq2615[0] {
					yym2617 := z.EncBinary()
					_ = yym2617
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2615[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2618 := z.EncBinary()
					_ = yym2618
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2615 || yy2arr2615 {
				if yyq2615[1] {
					yym2620 := z.EncBinary()
					_ = yym2620
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2615[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2621 := z.EncBinary()
					_ = yym2621
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2615 || yy2arr2615 {
				if yyq2615[2] {
					yy2623 := &x.ObjectMeta
					yy2623.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2615[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2624 := &x.ObjectMeta
					yy2624.CodecEncodeSelf(e)
				}
			}
			if yyr2615 || yy2arr2615 {
				if yyq2615[3] {
					yy2626 := &x.Spec
					yy2626.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2615[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy2627 := &x.Spec
					yy2627.CodecEncodeSelf(e)
				}
			}
			if yyr2615 || yy2arr2615 {
				if yyq2615[4] {
					yy2629 := &x.Status
					yy2629.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2615[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy2630 := &x.Status
					yy2630.CodecEncodeSelf(e)
				}
			}
			if yysep2615 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Network) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2631 := z.DecBinary()
	_ = yym2631
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2632 := r.ReadMapStart()
			if yyl2632 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2632, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2632 := r.ReadArrayStart()
			if yyl2632 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2632, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Network) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2633Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2633Slc
	var yyhl2633 bool = l >= 0
	for yyj2633 := 0; ; yyj2633++ {
		if yyhl2633 {
			if yyj2633 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2633Slc = r.DecodeBytes(yys2633Slc, true, true)
		yys2633 := string(yys2633Slc)
		switch yys2633 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2636 := &x.ObjectMeta
				yyv2636.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NetworkSpec{}
			} else {
				yyv2637 := &x.Spec
				yyv2637.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NetworkStatus{}
			} else {
				yyv2638 := &x.Status
				yyv2638.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2633)
		} // end switch yys2633
	} // end for yyj2633
	if !yyhl2633 {
		r.ReadEnd()
	}
}

func (x *Network) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2639 int
	var yyb2639 bool
	var yyhl2639 bool = l >= 0
	yyj2639++
	if yyhl2639 {
		yyb2639 = yyj2639 > l
	} else {
		yyb2639 = r.CheckBreak()
	}
	if yyb2639 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2639++
	if yyhl2639 {
		yyb2639 = yyj2639 > l
	} else {
		yyb2639 = r.CheckBreak()
	}
	if yyb2639 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2639++
	if yyhl2639 {
		yyb2639 = yyj2639 > l
	} else {
		yyb2639 = r.CheckBreak()
	}
	if yyb2639 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2642 := &x.ObjectMeta
		yyv2642.CodecDecodeSelf(d)
	}
	yyj2639++
	if yyhl2639 {
		yyb2639 = yyj2639 > l
	} else {
		yyb2639 = r.CheckBreak()
	}
	if yyb2639 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = NetworkSpec{}
	} else {
		yyv2643 := &x.Spec
		yyv2643.CodecDecodeSelf(d)
	}
	yyj2639++
	if yyhl2639 {
		yyb2639 = yyj2639 > l
	} else {
		yyb2639 = r.CheckBreak()
	}
	if yyb2639 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = NetworkStatus{}
	} else {
		yyv2644 := &x.Status
		yyv2644.CodecDecodeSelf(d)
	}
	for {
		yyj2639++
		if yyhl2639 {
			yyb2639 = yyj2639 > l
		} else {
			yyb2639 = r.CheckBreak()
		}
		if yyb2639 {
			break
		}
		z.DecStructFieldNotFound(yyj2639-1, "")
	}
	r.ReadEnd()
}

func (x *NetworkList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2645 := z.EncBinary()
		_ = yym2645
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2646 := !z.EncBinary()
			yy2arr2646 := z.EncBasicHandle().StructToArray
			var yyq2646 [4]bool
			_, _, _ = yysep2646, yyq2646, yy2arr2646
			const yyr2646 bool = false
			yyq2646[0] = x.Kind != ""
			yyq2646[1] = x.APIVersion != ""
			yyq2646[2] = true
			if yyr2646 || yy2arr2646 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2646 int = 1
				for _, b := range yyq2646 {
					if b {
						yynn2646++
					}
				}
				r.EncodeMapStart(yynn2646)
			}
			if yyr2646 || yy2arr2646 {
				if yyq2646[0] {
					yym2648 := z.EncBinary()
					_ = yym2648
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2646[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2649 := z.EncBinary()
					_ = yym2649
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2646 || yy2arr2646 {
				if yyq2646[1] {
					yym2651 := z.EncBinary()
					_ = yym2651
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2646[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2652 := z.EncBinary()
					_ = yym2652
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2646 || yy2arr2646 {
				if yyq2646[2] {
					yy2654 := &x.ListMeta
					yym2655 := z.EncBinary()
					_ = yym2655
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2654) {
					} else {
						z.EncFallback(yy2654)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2646[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2656 := &x.ListMeta
					yym2657 := z.EncBinary()
					_ = yym2657
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2656) {
					} else {
						z.EncFallback(yy2656)
					}
				}
			}
			if yyr2646 || yy2arr2646 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2659 := z.EncBinary()
					_ = yym2659
					if false {
					} else {
						h.encSliceNetwork(([]Network)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2660 := z.EncBinary()
					_ = yym2660
					if false {
					} else {
						h.encSliceNetwork(([]Network)(x.Items), e)
					}
				}
			}
			if yysep2646 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NetworkList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2661 := z.DecBinary()
	_ = yym2661
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2662 := r.ReadMapStart()
			if yyl2662 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2662, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2662 := r.ReadArrayStart()
			if yyl2662 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2662, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NetworkList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2663Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2663Slc
	var yyhl2663 bool = l >= 0
	for yyj2663 := 0; ; yyj2663++ {
		if yyhl2663 {
			if yyj2663 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2663Slc = r.DecodeBytes(yys2663Slc, true, true)
		yys2663 := string(yys2663Slc)
		switch yys2663 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2666 := &x.ListMeta
				yym2667 := z.DecBinary()
				_ = yym2667
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2666) {
				} else {
					z.DecFallback(yyv2666, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2668 := &x.Items
				yym2669 := z.DecBinary()
				_ = yym2669
				if false {
				} else {
					h.decSliceNetwork((*[]Network)(yyv2668), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2663)
		} // end switch yys2663
	} // end for yyj2663
	if !yyhl2663 {
		r.ReadEnd()
	}
}

func (x *NetworkList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2670 int
	var yyb2670 bool
	var yyhl2670 bool = l >= 0
	yyj2670++
	if yyhl2670 {
		yyb2670 = yyj2670 > l
	} else {
		yyb2670 = r.CheckBreak()
	}
	if yyb2670 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2670++
	if yyhl2670 {
		yyb2670 = yyj2670 > l
	} else {
		yyb2670 = r.CheckBreak()
	}
	if yyb2670 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2670++
	if yyhl2670 {
		yyb2670 = yyj2670 > l
	} else {
		yyb2670 = r.CheckBreak()
	}
	if yyb2670 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2673 := &x.ListMeta
		yym2674 := z.DecBinary()
		_ = yym2674
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2673) {
		} else {
			z.DecFallback(yyv2673, false)
		}
	}
	yyj2670++
	if yyhl2670 {
		yyb2670 = yyj2670 > l
	} else {
		yyb2670 = r.CheckBreak()
	}
	if yyb2670 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2675 := &x.Items
		yym2676 := z.DecBinary()
		_ = yym2676
		if false {
		} else {
			h.decSliceNetwork((*[]Network)(yyv2675), d)
		}
	}
	for {
		yyj2670++
		if yyhl2670 {
			yyb2670 = yyj2670 > l
		} else {
			yyb2670 = r.CheckBreak()
		}
		if yyb2670 {
			break
		}
		z.DecStructFieldNotFound(yyj2670-1, "")
	}
	r.ReadEnd()
}

func (x *TenantSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2677 := z.EncBinary()
		_ = yym2677
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2678 := !z.EncBinary()
			yy2arr2678 := z.EncBasicHandle().StructToArray
			var yyq2678 [1]bool
			_, _, _ = yysep2678, yyq2678, yy2arr2678
			const yyr2678 bool = false
			if yyr2678 || yy2arr2678 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2678 int = 1
				for _, b := range yyq2678 {
					if b {
						yynn2678++
					}
				}
				r.EncodeMapStart(yynn2678)
			}
			if yyr2678 || yy2arr2678 {
				if x.Namespaces == nil {
					r.EncodeNil()
				} else {
					yym2680 := z.EncBinary()
					_ = yym2680
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Namespaces), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("namespaces"))
				if x.Namespaces == nil {
					r.EncodeNil()
				} else {
					yym2681 := z.EncBinary()
					_ = yym2681
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Namespaces), e)
					}
				}
			}
			if yysep2678 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *TenantSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2682 := z.DecBinary()
	_ = yym2682
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2683 := r.ReadMapStart()
			if yyl2683 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2683, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2683 := r.ReadArrayStart()
			if yyl2683 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2683, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *TenantSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2684Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2684Slc
	var yyhl2684 bool = l >= 0
	for yyj2684 := 0; ; yyj2684++ {
		if yyhl2684 {
			if yyj2684 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2684Slc = r.DecodeBytes(yys2684Slc, true, true)
		yys2684 := string(yys2684Slc)
		switch yys2684 {
		case "namespaces":
			if r.TryDecodeAsNil() {
				x.Namespaces = nil
			} else {
				yyv2685 := &x.Namespaces
				yym2686 := z.DecBinary()
				_ = yym2686
				if false {
				} else {
					h.decSliceNamespace((*[]Namespace)(yyv2685), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2684)
		} // end switch yys2684
	} // end for yyj2684
	if !yyhl2684 {
		r.ReadEnd()
	}
}

func (x *TenantSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2687 int
	var yyb2687 bool
	var yyhl2687 bool = l >= 0
	yyj2687++
	if yyhl2687 {
		yyb2687 = yyj2687 > l
	} else {
		yyb2687 = r.CheckBreak()
	}
	if yyb2687 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Namespaces = nil
	} else {
		yyv2688 := &x.Namespaces
		yym2689 := z.DecBinary()
		_ = yym2689
		if false {
		} else {
			h.decSliceNamespace((*[]Namespace)(yyv2688), d)
		}
	}
	for {
		yyj2687++
		if yyhl2687 {
			yyb2687 = yyj2687 > l
		} else {
			yyb2687 = r.CheckBreak()
		}
		if yyb2687 {
			break
		}
		z.DecStructFieldNotFound(yyj2687-1, "")
	}
	r.ReadEnd()
}

func (x *TenantStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2690 := z.EncBinary()
		_ = yym2690
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2691 := !z.EncBinary()
			yy2arr2691 := z.EncBasicHandle().StructToArray
			var yyq2691 [1]bool
			_, _, _ = yysep2691, yyq2691, yy2arr2691
			const yyr2691 bool = false
			yyq2691[0] = x.Phase != ""
			if yyr2691 || yy2arr2691 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2691 int = 0
				for _, b := range yyq2691 {
					if b {
						yynn2691++
					}
				}
				r.EncodeMapStart(yynn2691)
			}
			if yyr2691 || yy2arr2691 {
				if yyq2691[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2691[0] {
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yysep2691 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *TenantStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2693 := z.DecBinary()
	_ = yym2693
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2694 := r.ReadMapStart()
			if yyl2694 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2694, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2694 := r.ReadArrayStart()
			if yyl2694 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2694, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *TenantStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2695Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2695Slc
	var yyhl2695 bool = l >= 0
	for yyj2695 := 0; ; yyj2695++ {
		if yyhl2695 {
			if yyj2695 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2695Slc = r.DecodeBytes(yys2695Slc, true, true)
		yys2695 := string(yys2695Slc)
		switch yys2695 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = TenantPhase(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2695)
		} // end switch yys2695
	} // end for yyj2695
	if !yyhl2695 {
		r.ReadEnd()
	}
}

func (x *TenantStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2697 int
	var yyb2697 bool
	var yyhl2697 bool = l >= 0
	yyj2697++
	if yyhl2697 {
		yyb2697 = yyj2697 > l
	} else {
		yyb2697 = r.CheckBreak()
	}
	if yyb2697 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = TenantPhase(r.DecodeString())
	}
	for {
		yyj2697++
		if yyhl2697 {
			yyb2697 = yyj2697 > l
		} else {
			yyb2697 = r.CheckBreak()
		}
		if yyb2697 {
			break
		}
		z.DecStructFieldNotFound(yyj2697-1, "")
	}
	r.ReadEnd()
}

func (x TenantPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2699 := z.EncBinary()
	_ = yym2699
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *TenantPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2700 := z.DecBinary()
	_ = yym2700
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Tenant) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2701 := z.EncBinary()
		_ = yym2701
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2702 := !z.EncBinary()
			yy2arr2702 := z.EncBasicHandle().StructToArray
			var yyq2702 [5]bool
			_, _, _ = yysep2702, yyq2702, yy2arr2702
			const yyr2702 bool = false
			yyq2702[0] = x.Kind != ""
			yyq2702[1] = x.APIVersion != ""
			yyq2702[2] = true
			yyq2702[3] = true
			yyq2702[4] = true
			if yyr2702 || yy2arr2702 {
				r.EncodeArrayStart(5)
			} else {
				var yynn2702 int = 0
				for _, b := range yyq2702 {
					if b {
						yynn2702++
					}
				}
				r.EncodeMapStart(yynn2702)
			}
			if yyr2702 || yy2arr2702 {
				if yyq2702[0] {
					yym2704 := z.EncBinary()
					_ = yym2704
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2702[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2705 := z.EncBinary()
					_ = yym2705
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2702 || yy2arr2702 {
				if yyq2702[1] {
					yym2707 := z.EncBinary()
					_ = yym2707
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2702[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2708 := z.EncBinary()
					_ = yym2708
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2702 || yy2arr2702 {
				if yyq2702[2] {
					yy2710 := &x.ObjectMeta
					yy2710.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2702[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2711 := &x.ObjectMeta
					yy2711.CodecEncodeSelf(e)
				}
			}
			if yyr2702 || yy2arr2702 {
				if yyq2702[3] {
					yy2713 := &x.Spec
					yy2713.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2702[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy2714 := &x.Spec
					yy2714.CodecEncodeSelf(e)
				}
			}
			if yyr2702 || yy2arr2702 {
				if yyq2702[4] {
					yy2716 := &x.Status
					yy2716.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2702[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy2717 := &x.Status
					yy2717.CodecEncodeSelf(e)
				}
			}
			if yysep2702 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Tenant) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2718 := z.DecBinary()
	_ = yym2718
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2719 := r.ReadMapStart()
			if yyl2719 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2719, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2719 := r.ReadArrayStart()
			if yyl2719 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2719, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Tenant) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2720Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2720Slc
	var yyhl2720 bool = l >= 0
	for yyj2720 := 0; ; yyj2720++ {
		if yyhl2720 {
			if yyj2720 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2720Slc = r.DecodeBytes(yys2720Slc, true, true)
		yys2720 := string(yys2720Slc)
		switch yys2720 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2723 := &x.ObjectMeta
				yyv2723.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = TenantSpec{}
			} else {
				yyv2724 := &x.Spec
				yyv2724.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = TenantStatus{}
			} else {
				yyv2725 := &x.Status
				yyv2725.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2720)
		} // end switch yys2720
	} // end for yyj2720
	if !yyhl2720 {
		r.ReadEnd()
	}
}

func (x *Tenant) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2726 int
	var yyb2726 bool
	var yyhl2726 bool = l >= 0
	yyj2726++
	if yyhl2726 {
		yyb2726 = yyj2726 > l
	} else {
		yyb2726 = r.CheckBreak()
	}
	if yyb2726 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2726++
	if yyhl2726 {
		yyb2726 = yyj2726 > l
	} else {
		yyb2726 = r.CheckBreak()
	}
	if yyb2726 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2726++
	if yyhl2726 {
		yyb2726 = yyj2726 > l
	} else {
		yyb2726 = r.CheckBreak()
	}
	if yyb2726 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2729 := &x.ObjectMeta
		yyv2729.CodecDecodeSelf(d)
	}
	yyj2726++
	if yyhl2726 {
		yyb2726 = yyj2726 > l
	} else {
		yyb2726 = r.CheckBreak()
	}
	if yyb2726 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = TenantSpec{}
	} else {
		yyv2730 := &x.Spec
		yyv2730.CodecDecodeSelf(d)
	}
	yyj2726++
	if yyhl2726 {
		yyb2726 = yyj2726 > l
	} else {
		yyb2726 = r.CheckBreak()
	}
	if yyb2726 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = TenantStatus{}
	} else {
		yyv2731 := &x.Status
		yyv2731.CodecDecodeSelf(d)
	}
	for {
		yyj2726++
		if yyhl2726 {
			yyb2726 = yyj2726 > l
		} else {
			yyb2726 = r.CheckBreak()
		}
		if yyb2726 {
			break
		}
		z.DecStructFieldNotFound(yyj2726-1, "")
	}
	r.ReadEnd()
}

func (x *TenantList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2732 := z.EncBinary()
		_ = yym2732
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2733 := !z.EncBinary()
			yy2arr2733 := z.EncBasicHandle().StructToArray
			var yyq2733 [4]bool
			_, _, _ = yysep2733, yyq2733, yy2arr2733
			const yyr2733 bool = false
			yyq2733[0] = x.Kind != ""
			yyq2733[1] = x.APIVersion != ""
			yyq2733[2] = true
			if yyr2733 || yy2arr2733 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2733 int = 1
				for _, b := range yyq2733 {
					if b {
						yynn2733++
					}
				}
				r.EncodeMapStart(yynn2733)
			}
			if yyr2733 || yy2arr2733 {
				if yyq2733[0] {
					yym2735 := z.EncBinary()
					_ = yym2735
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2733[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2736 := z.EncBinary()
					_ = yym2736
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2733 || yy2arr2733 {
				if yyq2733[1] {
					yym2738 := z.EncBinary()
					_ = yym2738
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2733[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2739 := z.EncBinary()
					_ = yym2739
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2733 || yy2arr2733 {
				if yyq2733[2] {
					yy2741 := &x.ListMeta
					yym2742 := z.EncBinary()
					_ = yym2742
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2741) {
					} else {
						z.EncFallback(yy2741)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2733[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2743 := &x.ListMeta
					yym2744 := z.EncBinary()
					_ = yym2744
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2743) {
					} else {
						z.EncFallback(yy2743)
					}
				}
			}
			if yyr2733 || yy2arr2733 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2746 := z.EncBinary()
					_ = yym2746
					if false {
					} else {
						h.encSliceTenant(([]Tenant)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2747 := z.EncBinary()
					_ = yym2747
					if false {
					} else {
						h.encSliceTenant(([]Tenant)(x.Items), e)
					}
				}
			}
			if yysep2733 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *TenantList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2748 := z.DecBinary()
	_ = yym2748
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2749 := r.ReadMapStart()
			if yyl2749 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2749, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2749 := r.ReadArrayStart()
			if yyl2749 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2749, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *TenantList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2750Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2750Slc
	var yyhl2750 bool = l >= 0
	for yyj2750 := 0; ; yyj2750++ {
		if yyhl2750 {
			if yyj2750 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2750Slc = r.DecodeBytes(yys2750Slc, true, true)
		yys2750 := string(yys2750Slc)
		switch yys2750 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2753 := &x.ListMeta
				yym2754 := z.DecBinary()
				_ = yym2754
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2753) {
				} else {
					z.DecFallback(yyv2753, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2755 := &x.Items
				yym2756 := z.DecBinary()
				_ = yym2756
				if false {
				} else {
					h.decSliceTenant((*[]Tenant)(yyv2755), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2750)
		} // end switch yys2750
	} // end for yyj2750
	if !yyhl2750 {
		r.ReadEnd()
	}
}

func (x *TenantList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2757 int
	var yyb2757 bool
	var yyhl2757 bool = l >= 0
	yyj2757++
	if yyhl2757 {
		yyb2757 = yyj2757 > l
	} else {
		yyb2757 = r.CheckBreak()
	}
	if yyb2757 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2757++
	if yyhl2757 {
		yyb2757 = yyj2757 > l
	} else {
		yyb2757 = r.CheckBreak()
	}
	if yyb2757 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2757++
	if yyhl2757 {
		yyb2757 = yyj2757 > l
	} else {
		yyb2757 = r.CheckBreak()
	}
	if yyb2757 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2760 := &x.ListMeta
		yym2761 := z.DecBinary()
		_ = yym2761
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2760) {
		} else {
			z.DecFallback(yyv2760, false)
		}
	}
	yyj2757++
	if yyhl2757 {
		yyb2757 = yyj2757 > l
	} else {
		yyb2757 = r.CheckBreak()
	}
	if yyb2757 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2762 := &x.Items
		yym2763 := z.DecBinary()
		_ = yym2763
		if false {
		} else {
			h.decSliceTenant((*[]Tenant)(yyv2762), d)
		}
	}
	for {
		yyj2757++
		if yyhl2757 {
			yyb2757 = yyj2757 > l
		} else {
			yyb2757 = r.CheckBreak()
		}
		if yyb2757 {
			break
		}
		z.DecStructFieldNotFound(yyj2757-1, "")
	}
	r.ReadEnd()
}

func (x *Binding) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2764 := z.EncBinary()
		_ = yym2764
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2765 := !z.EncBinary()
			yy2arr2765 := z.EncBasicHandle().StructToArray
			var yyq2765 [4]bool
			_, _, _ = yysep2765, yyq2765, yy2arr2765
			const yyr2765 bool = false
			yyq2765[0] = x.Kind != ""
			yyq2765[1] = x.APIVersion != ""
			yyq2765[2] = true
			if yyr2765 || yy2arr2765 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2765 int = 1
				for _, b := range yyq2765 {
					if b {
						yynn2765++
					}
				}
				r.EncodeMapStart(yynn2765)
			}
			if yyr2765 || yy2arr2765 {
				if yyq2765[0] {
					yym2767 := z.EncBinary()
					_ = yym2767
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2765[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2768 := z.EncBinary()
					_ = yym2768
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2765 || yy2arr2765 {
				if yyq2765[1] {
					yym2770 := z.EncBinary()
					_ = yym2770
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2765[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2771 := z.EncBinary()
					_ = yym2771
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2765 || yy2arr2765 {
				if yyq2765[2] {
					yy2773 := &x.ObjectMeta
					yy2773.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2765[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2774 := &x.ObjectMeta
					yy2774.CodecEncodeSelf(e)
				}
			}
			if yyr2765 || yy2arr2765 {
				yy2776 := &x.Target
				yy2776.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("target"))
				yy2777 := &x.Target
				yy2777.CodecEncodeSelf(e)
			}
			if yysep2765 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Binding) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2778 := z.DecBinary()
	_ = yym2778
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2779 := r.ReadMapStart()
			if yyl2779 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2779, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2779 := r.ReadArrayStart()
			if yyl2779 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2779, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Binding) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2780Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2780Slc
	var yyhl2780 bool = l >= 0
	for yyj2780 := 0; ; yyj2780++ {
		if yyhl2780 {
			if yyj2780 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2780Slc = r.DecodeBytes(yys2780Slc, true, true)
		yys2780 := string(yys2780Slc)
		switch yys2780 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2783 := &x.ObjectMeta
				yyv2783.CodecDecodeSelf(d)
			}
		case "target":
			if r.TryDecodeAsNil() {
				x.Target = ObjectReference{}
			} else {
				yyv2784 := &x.Target
				yyv2784.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2780)
		} // end switch yys2780
	} // end for yyj2780
	if !yyhl2780 {
		r.ReadEnd()
	}
}

func (x *Binding) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2785 int
	var yyb2785 bool
	var yyhl2785 bool = l >= 0
	yyj2785++
	if yyhl2785 {
		yyb2785 = yyj2785 > l
	} else {
		yyb2785 = r.CheckBreak()
	}
	if yyb2785 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2785++
	if yyhl2785 {
		yyb2785 = yyj2785 > l
	} else {
		yyb2785 = r.CheckBreak()
	}
	if yyb2785 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2785++
	if yyhl2785 {
		yyb2785 = yyj2785 > l
	} else {
		yyb2785 = r.CheckBreak()
	}
	if yyb2785 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2788 := &x.ObjectMeta
		yyv2788.CodecDecodeSelf(d)
	}
	yyj2785++
	if yyhl2785 {
		yyb2785 = yyj2785 > l
	} else {
		yyb2785 = r.CheckBreak()
	}
	if yyb2785 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Target = ObjectReference{}
	} else {
		yyv2789 := &x.Target
		yyv2789.CodecDecodeSelf(d)
	}
	for {
		yyj2785++
		if yyhl2785 {
			yyb2785 = yyj2785 > l
		} else {
			yyb2785 = r.CheckBreak()
		}
		if yyb2785 {
			break
		}
		z.DecStructFieldNotFound(yyj2785-1, "")
	}
	r.ReadEnd()
}

func (x *DeleteOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2790 := z.EncBinary()
		_ = yym2790
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2791 := !z.EncBinary()
			yy2arr2791 := z.EncBasicHandle().StructToArray
			var yyq2791 [3]bool
			_, _, _ = yysep2791, yyq2791, yy2arr2791
			const yyr2791 bool = false
			yyq2791[0] = x.Kind != ""
			yyq2791[1] = x.APIVersion != ""
			if yyr2791 || yy2arr2791 {
				r.EncodeArrayStart(3)
			} else {
				var yynn2791 int = 1
				for _, b := range yyq2791 {
					if b {
						yynn2791++
					}
				}
				r.EncodeMapStart(yynn2791)
			}
			if yyr2791 || yy2arr2791 {
				if yyq2791[0] {
					yym2793 := z.EncBinary()
					_ = yym2793
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2791[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2794 := z.EncBinary()
					_ = yym2794
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2791 || yy2arr2791 {
				if yyq2791[1] {
					yym2796 := z.EncBinary()
					_ = yym2796
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2791[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2797 := z.EncBinary()
					_ = yym2797
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2791 || yy2arr2791 {
				if x.GracePeriodSeconds == nil {
					r.EncodeNil()
				} else {
					yy2799 := *x.GracePeriodSeconds
					yym2800 := z.EncBinary()
					_ = yym2800
					if false {
					} else {
						r.EncodeInt(int64(yy2799))
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("gracePeriodSeconds"))
				if x.GracePeriodSeconds == nil {
					r.EncodeNil()
				} else {
					yy2801 := *x.GracePeriodSeconds
					yym2802 := z.EncBinary()
					_ = yym2802
					if false {
					} else {
						r.EncodeInt(int64(yy2801))
					}
				}
			}
			if yysep2791 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DeleteOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2803 := z.DecBinary()
	_ = yym2803
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2804 := r.ReadMapStart()
			if yyl2804 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2804, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2804 := r.ReadArrayStart()
			if yyl2804 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2804, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeleteOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2805Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2805Slc
	var yyhl2805 bool = l >= 0
	for yyj2805 := 0; ; yyj2805++ {
		if yyhl2805 {
			if yyj2805 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2805Slc = r.DecodeBytes(yys2805Slc, true, true)
		yys2805 := string(yys2805Slc)
		switch yys2805 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "gracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.GracePeriodSeconds != nil {
					x.GracePeriodSeconds = nil
				}
			} else {
				if x.GracePeriodSeconds == nil {
					x.GracePeriodSeconds = new(int64)
				}
				yym2809 := z.DecBinary()
				_ = yym2809
				if false {
				} else {
					*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2805)
		} // end switch yys2805
	} // end for yyj2805
	if !yyhl2805 {
		r.ReadEnd()
	}
}

func (x *DeleteOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2810 int
	var yyb2810 bool
	var yyhl2810 bool = l >= 0
	yyj2810++
	if yyhl2810 {
		yyb2810 = yyj2810 > l
	} else {
		yyb2810 = r.CheckBreak()
	}
	if yyb2810 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2810++
	if yyhl2810 {
		yyb2810 = yyj2810 > l
	} else {
		yyb2810 = r.CheckBreak()
	}
	if yyb2810 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2810++
	if yyhl2810 {
		yyb2810 = yyj2810 > l
	} else {
		yyb2810 = r.CheckBreak()
	}
	if yyb2810 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GracePeriodSeconds != nil {
			x.GracePeriodSeconds = nil
		}
	} else {
		if x.GracePeriodSeconds == nil {
			x.GracePeriodSeconds = new(int64)
		}
		yym2814 := z.DecBinary()
		_ = yym2814
		if false {
		} else {
			*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2810++
		if yyhl2810 {
			yyb2810 = yyj2810 > l
		} else {
			yyb2810 = r.CheckBreak()
		}
		if yyb2810 {
			break
		}
		z.DecStructFieldNotFound(yyj2810-1, "")
	}
	r.ReadEnd()
}

func (x *ListOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2815 := z.EncBinary()
		_ = yym2815
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2816 := !z.EncBinary()
			yy2arr2816 := z.EncBasicHandle().StructToArray
			var yyq2816 [7]bool
			_, _, _ = yysep2816, yyq2816, yy2arr2816
			const yyr2816 bool = false
			yyq2816[0] = x.Kind != ""
			yyq2816[1] = x.APIVersion != ""
			if yyr2816 || yy2arr2816 {
				r.EncodeArrayStart(7)
			} else {
				var yynn2816 int = 5
				for _, b := range yyq2816 {
					if b {
						yynn2816++
					}
				}
				r.EncodeMapStart(yynn2816)
			}
			if yyr2816 || yy2arr2816 {
				if yyq2816[0] {
					yym2818 := z.EncBinary()
					_ = yym2818
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2816[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2819 := z.EncBinary()
					_ = yym2819
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2816 || yy2arr2816 {
				if yyq2816[1] {
					yym2821 := z.EncBinary()
					_ = yym2821
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2816[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2822 := z.EncBinary()
					_ = yym2822
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2816 || yy2arr2816 {
				if x.LabelSelector == nil {
					r.EncodeNil()
				} else {
					yym2824 := z.EncBinary()
					_ = yym2824
					if false {
					} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
					} else {
						z.EncFallback(x.LabelSelector)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("LabelSelector"))
				if x.LabelSelector == nil {
					r.EncodeNil()
				} else {
					yym2825 := z.EncBinary()
					_ = yym2825
					if false {
					} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
					} else {
						z.EncFallback(x.LabelSelector)
					}
				}
			}
			if yyr2816 || yy2arr2816 {
				if x.FieldSelector == nil {
					r.EncodeNil()
				} else {
					yym2827 := z.EncBinary()
					_ = yym2827
					if false {
					} else if z.HasExtensions() && z.EncExt(x.FieldSelector) {
					} else {
						z.EncFallback(x.FieldSelector)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("FieldSelector"))
				if x.FieldSelector == nil {
					r.EncodeNil()
				} else {
					yym2828 := z.EncBinary()
					_ = yym2828
					if false {
					} else if z.HasExtensions() && z.EncExt(x.FieldSelector) {
					} else {
						z.EncFallback(x.FieldSelector)
					}
				}
			}
			if yyr2816 || yy2arr2816 {
				yym2830 := z.EncBinary()
				_ = yym2830
				if false {
				} else {
					r.EncodeBool(bool(x.Watch))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Watch"))
				yym2831 := z.EncBinary()
				_ = yym2831
				if false {
				} else {
					r.EncodeBool(bool(x.Watch))
				}
			}
			if yyr2816 || yy2arr2816 {
				yym2833 := z.EncBinary()
				_ = yym2833
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("ResourceVersion"))
				yym2834 := z.EncBinary()
				_ = yym2834
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
				}
			}
			if yyr2816 || yy2arr2816 {
				if x.TimeoutSeconds == nil {
					r.EncodeNil()
				} else {
					yy2836 := *x.TimeoutSeconds
					yym2837 := z.EncBinary()
					_ = yym2837
					if false {
					} else {
						r.EncodeInt(int64(yy2836))
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("TimeoutSeconds"))
				if x.TimeoutSeconds == nil {
					r.EncodeNil()
				} else {
					yy2838 := *x.TimeoutSeconds
					yym2839 := z.EncBinary()
					_ = yym2839
					if false {
					} else {
						r.EncodeInt(int64(yy2838))
					}
				}
			}
			if yysep2816 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ListOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2840 := z.DecBinary()
	_ = yym2840
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2841 := r.ReadMapStart()
			if yyl2841 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2841, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2841 := r.ReadArrayStart()
			if yyl2841 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2841, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ListOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2842Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2842Slc
	var yyhl2842 bool = l >= 0
	for yyj2842 := 0; ; yyj2842++ {
		if yyhl2842 {
			if yyj2842 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2842Slc = r.DecodeBytes(yys2842Slc, true, true)
		yys2842 := string(yys2842Slc)
		switch yys2842 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "LabelSelector":
			if r.TryDecodeAsNil() {
				x.LabelSelector = nil
			} else {
				yyv2845 := &x.LabelSelector
				yym2846 := z.DecBinary()
				_ = yym2846
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2845) {
				} else {
					z.DecFallback(yyv2845, true)
				}
			}
		case "FieldSelector":
			if r.TryDecodeAsNil() {
				x.FieldSelector = nil
			} else {
				yyv2847 := &x.FieldSelector
				yym2848 := z.DecBinary()
				_ = yym2848
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2847) {
				} else {
					z.DecFallback(yyv2847, true)
				}
			}
		case "Watch":
			if r.TryDecodeAsNil() {
				x.Watch = false
			} else {
				x.Watch = bool(r.DecodeBool())
			}
		case "ResourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "TimeoutSeconds":
			if r.TryDecodeAsNil() {
				if x.TimeoutSeconds != nil {
					x.TimeoutSeconds = nil
				}
			} else {
				if x.TimeoutSeconds == nil {
					x.TimeoutSeconds = new(int64)
				}
				yym2852 := z.DecBinary()
				_ = yym2852
				if false {
				} else {
					*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2842)
		} // end switch yys2842
	} // end for yyj2842
	if !yyhl2842 {
		r.ReadEnd()
	}
}

func (x *ListOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2853 int
	var yyb2853 bool
	var yyhl2853 bool = l >= 0
	yyj2853++
	if yyhl2853 {
		yyb2853 = yyj2853 > l
	} else {
		yyb2853 = r.CheckBreak()
	}
	if yyb2853 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2853++
	if yyhl2853 {
		yyb2853 = yyj2853 > l
	} else {
		yyb2853 = r.CheckBreak()
	}
	if yyb2853 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2853++
	if yyhl2853 {
		yyb2853 = yyj2853 > l
	} else {
		yyb2853 = r.CheckBreak()
	}
	if yyb2853 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LabelSelector = nil
	} else {
		yyv2856 := &x.LabelSelector
		yym2857 := z.DecBinary()
		_ = yym2857
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2856) {
		} else {
			z.DecFallback(yyv2856, true)
		}
	}
	yyj2853++
	if yyhl2853 {
		yyb2853 = yyj2853 > l
	} else {
		yyb2853 = r.CheckBreak()
	}
	if yyb2853 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FieldSelector = nil
	} else {
		yyv2858 := &x.FieldSelector
		yym2859 := z.DecBinary()
		_ = yym2859
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2858) {
		} else {
			z.DecFallback(yyv2858, true)
		}
	}
	yyj2853++
	if yyhl2853 {
		yyb2853 = yyj2853 > l
	} else {
		yyb2853 = r.CheckBreak()
	}
	if yyb2853 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Watch = false
	} else {
		x.Watch = bool(r.DecodeBool())
	}
	yyj2853++
	if yyhl2853 {
		yyb2853 = yyj2853 > l
	} else {
		yyb2853 = r.CheckBreak()
	}
	if yyb2853 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj2853++
	if yyhl2853 {
		yyb2853 = yyj2853 > l
	} else {
		yyb2853 = r.CheckBreak()
	}
	if yyb2853 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.TimeoutSeconds != nil {
			x.TimeoutSeconds = nil
		}
	} else {
		if x.TimeoutSeconds == nil {
			x.TimeoutSeconds = new(int64)
		}
		yym2863 := z.DecBinary()
		_ = yym2863
		if false {
		} else {
			*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2853++
		if yyhl2853 {
			yyb2853 = yyj2853 > l
		} else {
			yyb2853 = r.CheckBreak()
		}
		if yyb2853 {
			break
		}
		z.DecStructFieldNotFound(yyj2853-1, "")
	}
	r.ReadEnd()
}

func (x *PodLogOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2864 := z.EncBinary()
		_ = yym2864
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2865 := !z.EncBinary()
			yy2arr2865 := z.EncBasicHandle().StructToArray
			var yyq2865 [10]bool
			_, _, _ = yysep2865, yyq2865, yy2arr2865
			const yyr2865 bool = false
			yyq2865[0] = x.Kind != ""
			yyq2865[1] = x.APIVersion != ""
			if yyr2865 || yy2arr2865 {
				r.EncodeArrayStart(10)
			} else {
				var yynn2865 int = 8
				for _, b := range yyq2865 {
					if b {
						yynn2865++
					}
				}
				r.EncodeMapStart(yynn2865)
			}
			if yyr2865 || yy2arr2865 {
				if yyq2865[0] {
					yym2867 := z.EncBinary()
					_ = yym2867
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2865[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2868 := z.EncBinary()
					_ = yym2868
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2865 || yy2arr2865 {
				if yyq2865[1] {
					yym2870 := z.EncBinary()
					_ = yym2870
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2865[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2871 := z.EncBinary()
					_ = yym2871
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2865 || yy2arr2865 {
				yym2873 := z.EncBinary()
				_ = yym2873
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Container"))
				yym2874 := z.EncBinary()
				_ = yym2874
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			}
			if yyr2865 || yy2arr2865 {
				yym2876 := z.EncBinary()
				_ = yym2876
				if false {
				} else {
					r.EncodeBool(bool(x.Follow))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Follow"))
				yym2877 := z.EncBinary()
				_ = yym2877
				if false {
				} else {
					r.EncodeBool(bool(x.Follow))
				}
			}
			if yyr2865 || yy2arr2865 {
				yym2879 := z.EncBinary()
				_ = yym2879
				if false {
				} else {
					r.EncodeBool(bool(x.Previous))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Previous"))
				yym2880 := z.EncBinary()
				_ = yym2880
				if false {
				} else {
					r.EncodeBool(bool(x.Previous))
				}
			}
			if yyr2865 || yy2arr2865 {
				if x.SinceSeconds == nil {
					r.EncodeNil()
				} else {
					yy2882 := *x.SinceSeconds
					yym2883 := z.EncBinary()
					_ = yym2883
					if false {
					} else {
						r.EncodeInt(int64(yy2882))
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("SinceSeconds"))
				if x.SinceSeconds == nil {
					r.EncodeNil()
				} else {
					yy2884 := *x.SinceSeconds
					yym2885 := z.EncBinary()
					_ = yym2885
					if false {
					} else {
						r.EncodeInt(int64(yy2884))
					}
				}
			}
			if yyr2865 || yy2arr2865 {
				if x.SinceTime == nil {
					r.EncodeNil()
				} else {
					yym2887 := z.EncBinary()
					_ = yym2887
					if false {
					} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
					} else if yym2887 {
						z.EncBinaryMarshal(x.SinceTime)
					} else if !yym2887 && z.IsJSONHandle() {
						z.EncJSONMarshal(x.SinceTime)
					} else {
						z.EncFallback(x.SinceTime)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("SinceTime"))
				if x.SinceTime == nil {
					r.EncodeNil()
				} else {
					yym2888 := z.EncBinary()
					_ = yym2888
					if false {
					} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
					} else if yym2888 {
						z.EncBinaryMarshal(x.SinceTime)
					} else if !yym2888 && z.IsJSONHandle() {
						z.EncJSONMarshal(x.SinceTime)
					} else {
						z.EncFallback(x.SinceTime)
					}
				}
			}
			if yyr2865 || yy2arr2865 {
				yym2890 := z.EncBinary()
				_ = yym2890
				if false {
				} else {
					r.EncodeBool(bool(x.Timestamps))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Timestamps"))
				yym2891 := z.EncBinary()
				_ = yym2891
				if false {
				} else {
					r.EncodeBool(bool(x.Timestamps))
				}
			}
			if yyr2865 || yy2arr2865 {
				if x.TailLines == nil {
					r.EncodeNil()
				} else {
					yy2893 := *x.TailLines
					yym2894 := z.EncBinary()
					_ = yym2894
					if false {
					} else {
						r.EncodeInt(int64(yy2893))
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("TailLines"))
				if x.TailLines == nil {
					r.EncodeNil()
				} else {
					yy2895 := *x.TailLines
					yym2896 := z.EncBinary()
					_ = yym2896
					if false {
					} else {
						r.EncodeInt(int64(yy2895))
					}
				}
			}
			if yyr2865 || yy2arr2865 {
				if x.LimitBytes == nil {
					r.EncodeNil()
				} else {
					yy2898 := *x.LimitBytes
					yym2899 := z.EncBinary()
					_ = yym2899
					if false {
					} else {
						r.EncodeInt(int64(yy2898))
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("LimitBytes"))
				if x.LimitBytes == nil {
					r.EncodeNil()
				} else {
					yy2900 := *x.LimitBytes
					yym2901 := z.EncBinary()
					_ = yym2901
					if false {
					} else {
						r.EncodeInt(int64(yy2900))
					}
				}
			}
			if yysep2865 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodLogOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2902 := z.DecBinary()
	_ = yym2902
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2903 := r.ReadMapStart()
			if yyl2903 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2903, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2903 := r.ReadArrayStart()
			if yyl2903 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2903, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodLogOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2904Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2904Slc
	var yyhl2904 bool = l >= 0
	for yyj2904 := 0; ; yyj2904++ {
		if yyhl2904 {
			if yyj2904 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2904Slc = r.DecodeBytes(yys2904Slc, true, true)
		yys2904 := string(yys2904Slc)
		switch yys2904 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "Follow":
			if r.TryDecodeAsNil() {
				x.Follow = false
			} else {
				x.Follow = bool(r.DecodeBool())
			}
		case "Previous":
			if r.TryDecodeAsNil() {
				x.Previous = false
			} else {
				x.Previous = bool(r.DecodeBool())
			}
		case "SinceSeconds":
			if r.TryDecodeAsNil() {
				if x.SinceSeconds != nil {
					x.SinceSeconds = nil
				}
			} else {
				if x.SinceSeconds == nil {
					x.SinceSeconds = new(int64)
				}
				yym2911 := z.DecBinary()
				_ = yym2911
				if false {
				} else {
					*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "SinceTime":
			if r.TryDecodeAsNil() {
				if x.SinceTime != nil {
					x.SinceTime = nil
				}
			} else {
				if x.SinceTime == nil {
					x.SinceTime = new(pkg2_unversioned.Time)
				}
				yym2913 := z.DecBinary()
				_ = yym2913
				if false {
				} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
				} else if yym2913 {
					z.DecBinaryUnmarshal(x.SinceTime)
				} else if !yym2913 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.SinceTime)
				} else {
					z.DecFallback(x.SinceTime, false)
				}
			}
		case "Timestamps":
			if r.TryDecodeAsNil() {
				x.Timestamps = false
			} else {
				x.Timestamps = bool(r.DecodeBool())
			}
		case "TailLines":
			if r.TryDecodeAsNil() {
				if x.TailLines != nil {
					x.TailLines = nil
				}
			} else {
				if x.TailLines == nil {
					x.TailLines = new(int64)
				}
				yym2916 := z.DecBinary()
				_ = yym2916
				if false {
				} else {
					*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
				}
			}
		case "LimitBytes":
			if r.TryDecodeAsNil() {
				if x.LimitBytes != nil {
					x.LimitBytes = nil
				}
			} else {
				if x.LimitBytes == nil {
					x.LimitBytes = new(int64)
				}
				yym2918 := z.DecBinary()
				_ = yym2918
				if false {
				} else {
					*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2904)
		} // end switch yys2904
	} // end for yyj2904
	if !yyhl2904 {
		r.ReadEnd()
	}
}

func (x *PodLogOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2919 int
	var yyb2919 bool
	var yyhl2919 bool = l >= 0
	yyj2919++
	if yyhl2919 {
		yyb2919 = yyj2919 > l
	} else {
		yyb2919 = r.CheckBreak()
	}
	if yyb2919 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2919++
	if yyhl2919 {
		yyb2919 = yyj2919 > l
	} else {
		yyb2919 = r.CheckBreak()
	}
	if yyb2919 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2919++
	if yyhl2919 {
		yyb2919 = yyj2919 > l
	} else {
		yyb2919 = r.CheckBreak()
	}
	if yyb2919 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj2919++
	if yyhl2919 {
		yyb2919 = yyj2919 > l
	} else {
		yyb2919 = r.CheckBreak()
	}
	if yyb2919 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Follow = false
	} else {
		x.Follow = bool(r.DecodeBool())
	}
	yyj2919++
	if yyhl2919 {
		yyb2919 = yyj2919 > l
	} else {
		yyb2919 = r.CheckBreak()
	}
	if yyb2919 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Previous = false
	} else {
		x.Previous = bool(r.DecodeBool())
	}
	yyj2919++
	if yyhl2919 {
		yyb2919 = yyj2919 > l
	} else {
		yyb2919 = r.CheckBreak()
	}
	if yyb2919 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SinceSeconds != nil {
			x.SinceSeconds = nil
		}
	} else {
		if x.SinceSeconds == nil {
			x.SinceSeconds = new(int64)
		}
		yym2926 := z.DecBinary()
		_ = yym2926
		if false {
		} else {
			*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj2919++
	if yyhl2919 {
		yyb2919 = yyj2919 > l
	} else {
		yyb2919 = r.CheckBreak()
	}
	if yyb2919 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SinceTime != nil {
			x.SinceTime = nil
		}
	} else {
		if x.SinceTime == nil {
			x.SinceTime = new(pkg2_unversioned.Time)
		}
		yym2928 := z.DecBinary()
		_ = yym2928
		if false {
		} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
		} else if yym2928 {
			z.DecBinaryUnmarshal(x.SinceTime)
		} else if !yym2928 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.SinceTime)
		} else {
			z.DecFallback(x.SinceTime, false)
		}
	}
	yyj2919++
	if yyhl2919 {
		yyb2919 = yyj2919 > l
	} else {
		yyb2919 = r.CheckBreak()
	}
	if yyb2919 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Timestamps = false
	} else {
		x.Timestamps = bool(r.DecodeBool())
	}
	yyj2919++
	if yyhl2919 {
		yyb2919 = yyj2919 > l
	} else {
		yyb2919 = r.CheckBreak()
	}
	if yyb2919 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.TailLines != nil {
			x.TailLines = nil
		}
	} else {
		if x.TailLines == nil {
			x.TailLines = new(int64)
		}
		yym2931 := z.DecBinary()
		_ = yym2931
		if false {
		} else {
			*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
		}
	}
	yyj2919++
	if yyhl2919 {
		yyb2919 = yyj2919 > l
	} else {
		yyb2919 = r.CheckBreak()
	}
	if yyb2919 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.LimitBytes != nil {
			x.LimitBytes = nil
		}
	} else {
		if x.LimitBytes == nil {
			x.LimitBytes = new(int64)
		}
		yym2933 := z.DecBinary()
		_ = yym2933
		if false {
		} else {
			*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2919++
		if yyhl2919 {
			yyb2919 = yyj2919 > l
		} else {
			yyb2919 = r.CheckBreak()
		}
		if yyb2919 {
			break
		}
		z.DecStructFieldNotFound(yyj2919-1, "")
	}
	r.ReadEnd()
}

func (x *PodAttachOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2934 := z.EncBinary()
		_ = yym2934
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2935 := !z.EncBinary()
			yy2arr2935 := z.EncBasicHandle().StructToArray
			var yyq2935 [7]bool
			_, _, _ = yysep2935, yyq2935, yy2arr2935
			const yyr2935 bool = false
			yyq2935[0] = x.Kind != ""
			yyq2935[1] = x.APIVersion != ""
			yyq2935[2] = x.Stdin != false
			yyq2935[3] = x.Stdout != false
			yyq2935[4] = x.Stderr != false
			yyq2935[5] = x.TTY != false
			yyq2935[6] = x.Container != ""
			if yyr2935 || yy2arr2935 {
				r.EncodeArrayStart(7)
			} else {
				var yynn2935 int = 0
				for _, b := range yyq2935 {
					if b {
						yynn2935++
					}
				}
				r.EncodeMapStart(yynn2935)
			}
			if yyr2935 || yy2arr2935 {
				if yyq2935[0] {
					yym2937 := z.EncBinary()
					_ = yym2937
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2935[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2938 := z.EncBinary()
					_ = yym2938
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2935 || yy2arr2935 {
				if yyq2935[1] {
					yym2940 := z.EncBinary()
					_ = yym2940
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2935[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2941 := z.EncBinary()
					_ = yym2941
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2935 || yy2arr2935 {
				if yyq2935[2] {
					yym2943 := z.EncBinary()
					_ = yym2943
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2935[2] {
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					yym2944 := z.EncBinary()
					_ = yym2944
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr2935 || yy2arr2935 {
				if yyq2935[3] {
					yym2946 := z.EncBinary()
					_ = yym2946
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2935[3] {
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					yym2947 := z.EncBinary()
					_ = yym2947
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr2935 || yy2arr2935 {
				if yyq2935[4] {
					yym2949 := z.EncBinary()
					_ = yym2949
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2935[4] {
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					yym2950 := z.EncBinary()
					_ = yym2950
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr2935 || yy2arr2935 {
				if yyq2935[5] {
					yym2952 := z.EncBinary()
					_ = yym2952
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2935[5] {
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					yym2953 := z.EncBinary()
					_ = yym2953
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr2935 || yy2arr2935 {
				if yyq2935[6] {
					yym2955 := z.EncBinary()
					_ = yym2955
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2935[6] {
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					yym2956 := z.EncBinary()
					_ = yym2956
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yysep2935 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodAttachOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2957 := z.DecBinary()
	_ = yym2957
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2958 := r.ReadMapStart()
			if yyl2958 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2958, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2958 := r.ReadArrayStart()
			if yyl2958 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2958, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAttachOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2959Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2959Slc
	var yyhl2959 bool = l >= 0
	for yyj2959 := 0; ; yyj2959++ {
		if yyhl2959 {
			if yyj2959 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2959Slc = r.DecodeBytes(yys2959Slc, true, true)
		yys2959 := string(yys2959Slc)
		switch yys2959 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2959)
		} // end switch yys2959
	} // end for yyj2959
	if !yyhl2959 {
		r.ReadEnd()
	}
}

func (x *PodAttachOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2967 int
	var yyb2967 bool
	var yyhl2967 bool = l >= 0
	yyj2967++
	if yyhl2967 {
		yyb2967 = yyj2967 > l
	} else {
		yyb2967 = r.CheckBreak()
	}
	if yyb2967 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2967++
	if yyhl2967 {
		yyb2967 = yyj2967 > l
	} else {
		yyb2967 = r.CheckBreak()
	}
	if yyb2967 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2967++
	if yyhl2967 {
		yyb2967 = yyj2967 > l
	} else {
		yyb2967 = r.CheckBreak()
	}
	if yyb2967 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj2967++
	if yyhl2967 {
		yyb2967 = yyj2967 > l
	} else {
		yyb2967 = r.CheckBreak()
	}
	if yyb2967 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj2967++
	if yyhl2967 {
		yyb2967 = yyj2967 > l
	} else {
		yyb2967 = r.CheckBreak()
	}
	if yyb2967 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj2967++
	if yyhl2967 {
		yyb2967 = yyj2967 > l
	} else {
		yyb2967 = r.CheckBreak()
	}
	if yyb2967 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj2967++
	if yyhl2967 {
		yyb2967 = yyj2967 > l
	} else {
		yyb2967 = r.CheckBreak()
	}
	if yyb2967 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	for {
		yyj2967++
		if yyhl2967 {
			yyb2967 = yyj2967 > l
		} else {
			yyb2967 = r.CheckBreak()
		}
		if yyb2967 {
			break
		}
		z.DecStructFieldNotFound(yyj2967-1, "")
	}
	r.ReadEnd()
}

func (x *PodExecOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2975 := z.EncBinary()
		_ = yym2975
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2976 := !z.EncBinary()
			yy2arr2976 := z.EncBasicHandle().StructToArray
			var yyq2976 [8]bool
			_, _, _ = yysep2976, yyq2976, yy2arr2976
			const yyr2976 bool = false
			yyq2976[0] = x.Kind != ""
			yyq2976[1] = x.APIVersion != ""
			if yyr2976 || yy2arr2976 {
				r.EncodeArrayStart(8)
			} else {
				var yynn2976 int = 6
				for _, b := range yyq2976 {
					if b {
						yynn2976++
					}
				}
				r.EncodeMapStart(yynn2976)
			}
			if yyr2976 || yy2arr2976 {
				if yyq2976[0] {
					yym2978 := z.EncBinary()
					_ = yym2978
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2976[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2979 := z.EncBinary()
					_ = yym2979
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2976 || yy2arr2976 {
				if yyq2976[1] {
					yym2981 := z.EncBinary()
					_ = yym2981
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2976[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2982 := z.EncBinary()
					_ = yym2982
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2976 || yy2arr2976 {
				yym2984 := z.EncBinary()
				_ = yym2984
				if false {
				} else {
					r.EncodeBool(bool(x.Stdin))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Stdin"))
				yym2985 := z.EncBinary()
				_ = yym2985
				if false {
				} else {
					r.EncodeBool(bool(x.Stdin))
				}
			}
			if yyr2976 || yy2arr2976 {
				yym2987 := z.EncBinary()
				_ = yym2987
				if false {
				} else {
					r.EncodeBool(bool(x.Stdout))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Stdout"))
				yym2988 := z.EncBinary()
				_ = yym2988
				if false {
				} else {
					r.EncodeBool(bool(x.Stdout))
				}
			}
			if yyr2976 || yy2arr2976 {
				yym2990 := z.EncBinary()
				_ = yym2990
				if false {
				} else {
					r.EncodeBool(bool(x.Stderr))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Stderr"))
				yym2991 := z.EncBinary()
				_ = yym2991
				if false {
				} else {
					r.EncodeBool(bool(x.Stderr))
				}
			}
			if yyr2976 || yy2arr2976 {
				yym2993 := z.EncBinary()
				_ = yym2993
				if false {
				} else {
					r.EncodeBool(bool(x.TTY))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("TTY"))
				yym2994 := z.EncBinary()
				_ = yym2994
				if false {
				} else {
					r.EncodeBool(bool(x.TTY))
				}
			}
			if yyr2976 || yy2arr2976 {
				yym2996 := z.EncBinary()
				_ = yym2996
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Container"))
				yym2997 := z.EncBinary()
				_ = yym2997
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			}
			if yyr2976 || yy2arr2976 {
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym2999 := z.EncBinary()
					_ = yym2999
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Command"))
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym3000 := z.EncBinary()
					_ = yym3000
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			}
			if yysep2976 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodExecOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3001 := z.DecBinary()
	_ = yym3001
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3002 := r.ReadMapStart()
			if yyl3002 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3002, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3002 := r.ReadArrayStart()
			if yyl3002 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3002, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodExecOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3003Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3003Slc
	var yyhl3003 bool = l >= 0
	for yyj3003 := 0; ; yyj3003++ {
		if yyhl3003 {
			if yyj3003 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3003Slc = r.DecodeBytes(yys3003Slc, true, true)
		yys3003 := string(yys3003Slc)
		switch yys3003 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "Stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "Stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "TTY":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "Container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "Command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv3011 := &x.Command
				yym3012 := z.DecBinary()
				_ = yym3012
				if false {
				} else {
					z.F.DecSliceStringX(yyv3011, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3003)
		} // end switch yys3003
	} // end for yyj3003
	if !yyhl3003 {
		r.ReadEnd()
	}
}

func (x *PodExecOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3013 int
	var yyb3013 bool
	var yyhl3013 bool = l >= 0
	yyj3013++
	if yyhl3013 {
		yyb3013 = yyj3013 > l
	} else {
		yyb3013 = r.CheckBreak()
	}
	if yyb3013 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3013++
	if yyhl3013 {
		yyb3013 = yyj3013 > l
	} else {
		yyb3013 = r.CheckBreak()
	}
	if yyb3013 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3013++
	if yyhl3013 {
		yyb3013 = yyj3013 > l
	} else {
		yyb3013 = r.CheckBreak()
	}
	if yyb3013 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj3013++
	if yyhl3013 {
		yyb3013 = yyj3013 > l
	} else {
		yyb3013 = r.CheckBreak()
	}
	if yyb3013 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj3013++
	if yyhl3013 {
		yyb3013 = yyj3013 > l
	} else {
		yyb3013 = r.CheckBreak()
	}
	if yyb3013 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj3013++
	if yyhl3013 {
		yyb3013 = yyj3013 > l
	} else {
		yyb3013 = r.CheckBreak()
	}
	if yyb3013 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj3013++
	if yyhl3013 {
		yyb3013 = yyj3013 > l
	} else {
		yyb3013 = r.CheckBreak()
	}
	if yyb3013 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj3013++
	if yyhl3013 {
		yyb3013 = yyj3013 > l
	} else {
		yyb3013 = r.CheckBreak()
	}
	if yyb3013 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv3021 := &x.Command
		yym3022 := z.DecBinary()
		_ = yym3022
		if false {
		} else {
			z.F.DecSliceStringX(yyv3021, false, d)
		}
	}
	for {
		yyj3013++
		if yyhl3013 {
			yyb3013 = yyj3013 > l
		} else {
			yyb3013 = r.CheckBreak()
		}
		if yyb3013 {
			break
		}
		z.DecStructFieldNotFound(yyj3013-1, "")
	}
	r.ReadEnd()
}

func (x *PodProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3023 := z.EncBinary()
		_ = yym3023
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3024 := !z.EncBinary()
			yy2arr3024 := z.EncBasicHandle().StructToArray
			var yyq3024 [3]bool
			_, _, _ = yysep3024, yyq3024, yy2arr3024
			const yyr3024 bool = false
			yyq3024[0] = x.Kind != ""
			yyq3024[1] = x.APIVersion != ""
			if yyr3024 || yy2arr3024 {
				r.EncodeArrayStart(3)
			} else {
				var yynn3024 int = 1
				for _, b := range yyq3024 {
					if b {
						yynn3024++
					}
				}
				r.EncodeMapStart(yynn3024)
			}
			if yyr3024 || yy2arr3024 {
				if yyq3024[0] {
					yym3026 := z.EncBinary()
					_ = yym3026
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3024[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3027 := z.EncBinary()
					_ = yym3027
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3024 || yy2arr3024 {
				if yyq3024[1] {
					yym3029 := z.EncBinary()
					_ = yym3029
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3024[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3030 := z.EncBinary()
					_ = yym3030
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3024 || yy2arr3024 {
				yym3032 := z.EncBinary()
				_ = yym3032
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Path"))
				yym3033 := z.EncBinary()
				_ = yym3033
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yysep3024 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3034 := z.DecBinary()
	_ = yym3034
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3035 := r.ReadMapStart()
			if yyl3035 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3035, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3035 := r.ReadArrayStart()
			if yyl3035 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3035, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3036Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3036Slc
	var yyhl3036 bool = l >= 0
	for yyj3036 := 0; ; yyj3036++ {
		if yyhl3036 {
			if yyj3036 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3036Slc = r.DecodeBytes(yys3036Slc, true, true)
		yys3036 := string(yys3036Slc)
		switch yys3036 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3036)
		} // end switch yys3036
	} // end for yyj3036
	if !yyhl3036 {
		r.ReadEnd()
	}
}

func (x *PodProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3040 int
	var yyb3040 bool
	var yyhl3040 bool = l >= 0
	yyj3040++
	if yyhl3040 {
		yyb3040 = yyj3040 > l
	} else {
		yyb3040 = r.CheckBreak()
	}
	if yyb3040 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3040++
	if yyhl3040 {
		yyb3040 = yyj3040 > l
	} else {
		yyb3040 = r.CheckBreak()
	}
	if yyb3040 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3040++
	if yyhl3040 {
		yyb3040 = yyj3040 > l
	} else {
		yyb3040 = r.CheckBreak()
	}
	if yyb3040 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3040++
		if yyhl3040 {
			yyb3040 = yyj3040 > l
		} else {
			yyb3040 = r.CheckBreak()
		}
		if yyb3040 {
			break
		}
		z.DecStructFieldNotFound(yyj3040-1, "")
	}
	r.ReadEnd()
}

func (x *ObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3044 := z.EncBinary()
		_ = yym3044
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3045 := !z.EncBinary()
			yy2arr3045 := z.EncBasicHandle().StructToArray
			var yyq3045 [8]bool
			_, _, _ = yysep3045, yyq3045, yy2arr3045
			const yyr3045 bool = false
			yyq3045[0] = x.Kind != ""
			yyq3045[1] = x.Namespace != ""
			yyq3045[2] = x.Tenant != ""
			yyq3045[3] = x.Name != ""
			yyq3045[4] = x.UID != ""
			yyq3045[5] = x.APIVersion != ""
			yyq3045[6] = x.ResourceVersion != ""
			yyq3045[7] = x.FieldPath != ""
			if yyr3045 || yy2arr3045 {
				r.EncodeArrayStart(8)
			} else {
				var yynn3045 int = 0
				for _, b := range yyq3045 {
					if b {
						yynn3045++
					}
				}
				r.EncodeMapStart(yynn3045)
			}
			if yyr3045 || yy2arr3045 {
				if yyq3045[0] {
					yym3047 := z.EncBinary()
					_ = yym3047
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3045[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3048 := z.EncBinary()
					_ = yym3048
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3045 || yy2arr3045 {
				if yyq3045[1] {
					yym3050 := z.EncBinary()
					_ = yym3050
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3045[1] {
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					yym3051 := z.EncBinary()
					_ = yym3051
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr3045 || yy2arr3045 {
				if yyq3045[2] {
					yym3053 := z.EncBinary()
					_ = yym3053
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Tenant))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3045[2] {
					r.EncodeString(codecSelferC_UTF81234, string("tenant"))
					yym3054 := z.EncBinary()
					_ = yym3054
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Tenant))
					}
				}
			}
			if yyr3045 || yy2arr3045 {
				if yyq3045[3] {
					yym3056 := z.EncBinary()
					_ = yym3056
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3045[3] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					yym3057 := z.EncBinary()
					_ = yym3057
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr3045 || yy2arr3045 {
				if yyq3045[4] {
					yym3059 := z.EncBinary()
					_ = yym3059
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3045[4] {
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					yym3060 := z.EncBinary()
					_ = yym3060
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr3045 || yy2arr3045 {
				if yyq3045[5] {
					yym3062 := z.EncBinary()
					_ = yym3062
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3045[5] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3063 := z.EncBinary()
					_ = yym3063
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3045 || yy2arr3045 {
				if yyq3045[6] {
					yym3065 := z.EncBinary()
					_ = yym3065
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3045[6] {
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					yym3066 := z.EncBinary()
					_ = yym3066
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr3045 || yy2arr3045 {
				if yyq3045[7] {
					yym3068 := z.EncBinary()
					_ = yym3068
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3045[7] {
					r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
					yym3069 := z.EncBinary()
					_ = yym3069
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				}
			}
			if yysep3045 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3070 := z.DecBinary()
	_ = yym3070
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3071 := r.ReadMapStart()
			if yyl3071 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3071, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3071 := r.ReadArrayStart()
			if yyl3071 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3071, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3072Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3072Slc
	var yyhl3072 bool = l >= 0
	for yyj3072 := 0; ; yyj3072++ {
		if yyhl3072 {
			if yyj3072 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3072Slc = r.DecodeBytes(yys3072Slc, true, true)
		yys3072 := string(yys3072Slc)
		switch yys3072 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "tenant":
			if r.TryDecodeAsNil() {
				x.Tenant = ""
			} else {
				x.Tenant = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3072)
		} // end switch yys3072
	} // end for yyj3072
	if !yyhl3072 {
		r.ReadEnd()
	}
}

func (x *ObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3081 int
	var yyb3081 bool
	var yyhl3081 bool = l >= 0
	yyj3081++
	if yyhl3081 {
		yyb3081 = yyj3081 > l
	} else {
		yyb3081 = r.CheckBreak()
	}
	if yyb3081 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3081++
	if yyhl3081 {
		yyb3081 = yyj3081 > l
	} else {
		yyb3081 = r.CheckBreak()
	}
	if yyb3081 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj3081++
	if yyhl3081 {
		yyb3081 = yyj3081 > l
	} else {
		yyb3081 = r.CheckBreak()
	}
	if yyb3081 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Tenant = ""
	} else {
		x.Tenant = string(r.DecodeString())
	}
	yyj3081++
	if yyhl3081 {
		yyb3081 = yyj3081 > l
	} else {
		yyb3081 = r.CheckBreak()
	}
	if yyb3081 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj3081++
	if yyhl3081 {
		yyb3081 = yyj3081 > l
	} else {
		yyb3081 = r.CheckBreak()
	}
	if yyb3081 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj3081++
	if yyhl3081 {
		yyb3081 = yyj3081 > l
	} else {
		yyb3081 = r.CheckBreak()
	}
	if yyb3081 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3081++
	if yyhl3081 {
		yyb3081 = yyj3081 > l
	} else {
		yyb3081 = r.CheckBreak()
	}
	if yyb3081 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj3081++
	if yyhl3081 {
		yyb3081 = yyj3081 > l
	} else {
		yyb3081 = r.CheckBreak()
	}
	if yyb3081 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj3081++
		if yyhl3081 {
			yyb3081 = yyj3081 > l
		} else {
			yyb3081 = r.CheckBreak()
		}
		if yyb3081 {
			break
		}
		z.DecStructFieldNotFound(yyj3081-1, "")
	}
	r.ReadEnd()
}

func (x *LocalObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3090 := z.EncBinary()
		_ = yym3090
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3091 := !z.EncBinary()
			yy2arr3091 := z.EncBasicHandle().StructToArray
			var yyq3091 [1]bool
			_, _, _ = yysep3091, yyq3091, yy2arr3091
			const yyr3091 bool = false
			if yyr3091 || yy2arr3091 {
				r.EncodeArrayStart(1)
			} else {
				var yynn3091 int = 1
				for _, b := range yyq3091 {
					if b {
						yynn3091++
					}
				}
				r.EncodeMapStart(yynn3091)
			}
			if yyr3091 || yy2arr3091 {
				yym3093 := z.EncBinary()
				_ = yym3093
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				yym3094 := z.EncBinary()
				_ = yym3094
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yysep3091 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LocalObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3095 := z.DecBinary()
	_ = yym3095
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3096 := r.ReadMapStart()
			if yyl3096 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3096, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3096 := r.ReadArrayStart()
			if yyl3096 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3096, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LocalObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3097Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3097Slc
	var yyhl3097 bool = l >= 0
	for yyj3097 := 0; ; yyj3097++ {
		if yyhl3097 {
			if yyj3097 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3097Slc = r.DecodeBytes(yys3097Slc, true, true)
		yys3097 := string(yys3097Slc)
		switch yys3097 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3097)
		} // end switch yys3097
	} // end for yyj3097
	if !yyhl3097 {
		r.ReadEnd()
	}
}

func (x *LocalObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3099 int
	var yyb3099 bool
	var yyhl3099 bool = l >= 0
	yyj3099++
	if yyhl3099 {
		yyb3099 = yyj3099 > l
	} else {
		yyb3099 = r.CheckBreak()
	}
	if yyb3099 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	for {
		yyj3099++
		if yyhl3099 {
			yyb3099 = yyj3099 > l
		} else {
			yyb3099 = r.CheckBreak()
		}
		if yyb3099 {
			break
		}
		z.DecStructFieldNotFound(yyj3099-1, "")
	}
	r.ReadEnd()
}

func (x *SerializedReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3101 := z.EncBinary()
		_ = yym3101
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3102 := !z.EncBinary()
			yy2arr3102 := z.EncBasicHandle().StructToArray
			var yyq3102 [3]bool
			_, _, _ = yysep3102, yyq3102, yy2arr3102
			const yyr3102 bool = false
			yyq3102[0] = x.Kind != ""
			yyq3102[1] = x.APIVersion != ""
			yyq3102[2] = true
			if yyr3102 || yy2arr3102 {
				r.EncodeArrayStart(3)
			} else {
				var yynn3102 int = 0
				for _, b := range yyq3102 {
					if b {
						yynn3102++
					}
				}
				r.EncodeMapStart(yynn3102)
			}
			if yyr3102 || yy2arr3102 {
				if yyq3102[0] {
					yym3104 := z.EncBinary()
					_ = yym3104
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3102[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3105 := z.EncBinary()
					_ = yym3105
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3102 || yy2arr3102 {
				if yyq3102[1] {
					yym3107 := z.EncBinary()
					_ = yym3107
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3102[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3108 := z.EncBinary()
					_ = yym3108
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3102 || yy2arr3102 {
				if yyq3102[2] {
					yy3110 := &x.Reference
					yy3110.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3102[2] {
					r.EncodeString(codecSelferC_UTF81234, string("reference"))
					yy3111 := &x.Reference
					yy3111.CodecEncodeSelf(e)
				}
			}
			if yysep3102 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *SerializedReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3112 := z.DecBinary()
	_ = yym3112
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3113 := r.ReadMapStart()
			if yyl3113 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3113, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3113 := r.ReadArrayStart()
			if yyl3113 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3113, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SerializedReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3114Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3114Slc
	var yyhl3114 bool = l >= 0
	for yyj3114 := 0; ; yyj3114++ {
		if yyhl3114 {
			if yyj3114 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3114Slc = r.DecodeBytes(yys3114Slc, true, true)
		yys3114 := string(yys3114Slc)
		switch yys3114 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "reference":
			if r.TryDecodeAsNil() {
				x.Reference = ObjectReference{}
			} else {
				yyv3117 := &x.Reference
				yyv3117.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3114)
		} // end switch yys3114
	} // end for yyj3114
	if !yyhl3114 {
		r.ReadEnd()
	}
}

func (x *SerializedReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3118 int
	var yyb3118 bool
	var yyhl3118 bool = l >= 0
	yyj3118++
	if yyhl3118 {
		yyb3118 = yyj3118 > l
	} else {
		yyb3118 = r.CheckBreak()
	}
	if yyb3118 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3118++
	if yyhl3118 {
		yyb3118 = yyj3118 > l
	} else {
		yyb3118 = r.CheckBreak()
	}
	if yyb3118 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3118++
	if yyhl3118 {
		yyb3118 = yyj3118 > l
	} else {
		yyb3118 = r.CheckBreak()
	}
	if yyb3118 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reference = ObjectReference{}
	} else {
		yyv3121 := &x.Reference
		yyv3121.CodecDecodeSelf(d)
	}
	for {
		yyj3118++
		if yyhl3118 {
			yyb3118 = yyj3118 > l
		} else {
			yyb3118 = r.CheckBreak()
		}
		if yyb3118 {
			break
		}
		z.DecStructFieldNotFound(yyj3118-1, "")
	}
	r.ReadEnd()
}

func (x *EventSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3122 := z.EncBinary()
		_ = yym3122
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3123 := !z.EncBinary()
			yy2arr3123 := z.EncBasicHandle().StructToArray
			var yyq3123 [2]bool
			_, _, _ = yysep3123, yyq3123, yy2arr3123
			const yyr3123 bool = false
			yyq3123[0] = x.Component != ""
			yyq3123[1] = x.Host != ""
			if yyr3123 || yy2arr3123 {
				r.EncodeArrayStart(2)
			} else {
				var yynn3123 int = 0
				for _, b := range yyq3123 {
					if b {
						yynn3123++
					}
				}
				r.EncodeMapStart(yynn3123)
			}
			if yyr3123 || yy2arr3123 {
				if yyq3123[0] {
					yym3125 := z.EncBinary()
					_ = yym3125
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3123[0] {
					r.EncodeString(codecSelferC_UTF81234, string("component"))
					yym3126 := z.EncBinary()
					_ = yym3126
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				}
			}
			if yyr3123 || yy2arr3123 {
				if yyq3123[1] {
					yym3128 := z.EncBinary()
					_ = yym3128
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3123[1] {
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					yym3129 := z.EncBinary()
					_ = yym3129
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yysep3123 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EventSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3130 := z.DecBinary()
	_ = yym3130
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3131 := r.ReadMapStart()
			if yyl3131 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3131, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3131 := r.ReadArrayStart()
			if yyl3131 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3131, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3132Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3132Slc
	var yyhl3132 bool = l >= 0
	for yyj3132 := 0; ; yyj3132++ {
		if yyhl3132 {
			if yyj3132 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3132Slc = r.DecodeBytes(yys3132Slc, true, true)
		yys3132 := string(yys3132Slc)
		switch yys3132 {
		case "component":
			if r.TryDecodeAsNil() {
				x.Component = ""
			} else {
				x.Component = string(r.DecodeString())
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3132)
		} // end switch yys3132
	} // end for yyj3132
	if !yyhl3132 {
		r.ReadEnd()
	}
}

func (x *EventSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3135 int
	var yyb3135 bool
	var yyhl3135 bool = l >= 0
	yyj3135++
	if yyhl3135 {
		yyb3135 = yyj3135 > l
	} else {
		yyb3135 = r.CheckBreak()
	}
	if yyb3135 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Component = ""
	} else {
		x.Component = string(r.DecodeString())
	}
	yyj3135++
	if yyhl3135 {
		yyb3135 = yyj3135 > l
	} else {
		yyb3135 = r.CheckBreak()
	}
	if yyb3135 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	for {
		yyj3135++
		if yyhl3135 {
			yyb3135 = yyj3135 > l
		} else {
			yyb3135 = r.CheckBreak()
		}
		if yyb3135 {
			break
		}
		z.DecStructFieldNotFound(yyj3135-1, "")
	}
	r.ReadEnd()
}

func (x *Event) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3138 := z.EncBinary()
		_ = yym3138
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3139 := !z.EncBinary()
			yy2arr3139 := z.EncBasicHandle().StructToArray
			var yyq3139 [10]bool
			_, _, _ = yysep3139, yyq3139, yy2arr3139
			const yyr3139 bool = false
			yyq3139[0] = x.Kind != ""
			yyq3139[1] = x.APIVersion != ""
			yyq3139[2] = true
			yyq3139[3] = true
			yyq3139[4] = x.Reason != ""
			yyq3139[5] = x.Message != ""
			yyq3139[6] = true
			yyq3139[7] = true
			yyq3139[8] = true
			yyq3139[9] = x.Count != 0
			if yyr3139 || yy2arr3139 {
				r.EncodeArrayStart(10)
			} else {
				var yynn3139 int = 0
				for _, b := range yyq3139 {
					if b {
						yynn3139++
					}
				}
				r.EncodeMapStart(yynn3139)
			}
			if yyr3139 || yy2arr3139 {
				if yyq3139[0] {
					yym3141 := z.EncBinary()
					_ = yym3141
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3139[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3142 := z.EncBinary()
					_ = yym3142
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3139 || yy2arr3139 {
				if yyq3139[1] {
					yym3144 := z.EncBinary()
					_ = yym3144
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3139[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3145 := z.EncBinary()
					_ = yym3145
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3139 || yy2arr3139 {
				if yyq3139[2] {
					yy3147 := &x.ObjectMeta
					yy3147.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3139[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3148 := &x.ObjectMeta
					yy3148.CodecEncodeSelf(e)
				}
			}
			if yyr3139 || yy2arr3139 {
				if yyq3139[3] {
					yy3150 := &x.InvolvedObject
					yy3150.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3139[3] {
					r.EncodeString(codecSelferC_UTF81234, string("involvedObject"))
					yy3151 := &x.InvolvedObject
					yy3151.CodecEncodeSelf(e)
				}
			}
			if yyr3139 || yy2arr3139 {
				if yyq3139[4] {
					yym3153 := z.EncBinary()
					_ = yym3153
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3139[4] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym3154 := z.EncBinary()
					_ = yym3154
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3139 || yy2arr3139 {
				if yyq3139[5] {
					yym3156 := z.EncBinary()
					_ = yym3156
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3139[5] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym3157 := z.EncBinary()
					_ = yym3157
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3139 || yy2arr3139 {
				if yyq3139[6] {
					yy3159 := &x.Source
					yy3159.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3139[6] {
					r.EncodeString(codecSelferC_UTF81234, string("source"))
					yy3160 := &x.Source
					yy3160.CodecEncodeSelf(e)
				}
			}
			if yyr3139 || yy2arr3139 {
				if yyq3139[7] {
					yy3162 := &x.FirstTimestamp
					yym3163 := z.EncBinary()
					_ = yym3163
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3162) {
					} else if yym3163 {
						z.EncBinaryMarshal(yy3162)
					} else if !yym3163 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3162)
					} else {
						z.EncFallback(yy3162)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3139[7] {
					r.EncodeString(codecSelferC_UTF81234, string("firstTimestamp"))
					yy3164 := &x.FirstTimestamp
					yym3165 := z.EncBinary()
					_ = yym3165
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3164) {
					} else if yym3165 {
						z.EncBinaryMarshal(yy3164)
					} else if !yym3165 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3164)
					} else {
						z.EncFallback(yy3164)
					}
				}
			}
			if yyr3139 || yy2arr3139 {
				if yyq3139[8] {
					yy3167 := &x.LastTimestamp
					yym3168 := z.EncBinary()
					_ = yym3168
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3167) {
					} else if yym3168 {
						z.EncBinaryMarshal(yy3167)
					} else if !yym3168 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3167)
					} else {
						z.EncFallback(yy3167)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3139[8] {
					r.EncodeString(codecSelferC_UTF81234, string("lastTimestamp"))
					yy3169 := &x.LastTimestamp
					yym3170 := z.EncBinary()
					_ = yym3170
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3169) {
					} else if yym3170 {
						z.EncBinaryMarshal(yy3169)
					} else if !yym3170 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3169)
					} else {
						z.EncFallback(yy3169)
					}
				}
			}
			if yyr3139 || yy2arr3139 {
				if yyq3139[9] {
					yym3172 := z.EncBinary()
					_ = yym3172
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq3139[9] {
					r.EncodeString(codecSelferC_UTF81234, string("count"))
					yym3173 := z.EncBinary()
					_ = yym3173
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				}
			}
			if yysep3139 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Event) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3174 := z.DecBinary()
	_ = yym3174
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3175 := r.ReadMapStart()
			if yyl3175 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3175, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3175 := r.ReadArrayStart()
			if yyl3175 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3175, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Event) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3176Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3176Slc
	var yyhl3176 bool = l >= 0
	for yyj3176 := 0; ; yyj3176++ {
		if yyhl3176 {
			if yyj3176 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3176Slc = r.DecodeBytes(yys3176Slc, true, true)
		yys3176 := string(yys3176Slc)
		switch yys3176 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3179 := &x.ObjectMeta
				yyv3179.CodecDecodeSelf(d)
			}
		case "involvedObject":
			if r.TryDecodeAsNil() {
				x.InvolvedObject = ObjectReference{}
			} else {
				yyv3180 := &x.InvolvedObject
				yyv3180.CodecDecodeSelf(d)
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "source":
			if r.TryDecodeAsNil() {
				x.Source = EventSource{}
			} else {
				yyv3183 := &x.Source
				yyv3183.CodecDecodeSelf(d)
			}
		case "firstTimestamp":
			if r.TryDecodeAsNil() {
				x.FirstTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv3184 := &x.FirstTimestamp
				yym3185 := z.DecBinary()
				_ = yym3185
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3184) {
				} else if yym3185 {
					z.DecBinaryUnmarshal(yyv3184)
				} else if !yym3185 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3184)
				} else {
					z.DecFallback(yyv3184, false)
				}
			}
		case "lastTimestamp":
			if r.TryDecodeAsNil() {
				x.LastTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv3186 := &x.LastTimestamp
				yym3187 := z.DecBinary()
				_ = yym3187
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3186) {
				} else if yym3187 {
					z.DecBinaryUnmarshal(yyv3186)
				} else if !yym3187 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3186)
				} else {
					z.DecFallback(yyv3186, false)
				}
			}
		case "count":
			if r.TryDecodeAsNil() {
				x.Count = 0
			} else {
				x.Count = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys3176)
		} // end switch yys3176
	} // end for yyj3176
	if !yyhl3176 {
		r.ReadEnd()
	}
}

func (x *Event) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3189 int
	var yyb3189 bool
	var yyhl3189 bool = l >= 0
	yyj3189++
	if yyhl3189 {
		yyb3189 = yyj3189 > l
	} else {
		yyb3189 = r.CheckBreak()
	}
	if yyb3189 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3189++
	if yyhl3189 {
		yyb3189 = yyj3189 > l
	} else {
		yyb3189 = r.CheckBreak()
	}
	if yyb3189 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3189++
	if yyhl3189 {
		yyb3189 = yyj3189 > l
	} else {
		yyb3189 = r.CheckBreak()
	}
	if yyb3189 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3192 := &x.ObjectMeta
		yyv3192.CodecDecodeSelf(d)
	}
	yyj3189++
	if yyhl3189 {
		yyb3189 = yyj3189 > l
	} else {
		yyb3189 = r.CheckBreak()
	}
	if yyb3189 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.InvolvedObject = ObjectReference{}
	} else {
		yyv3193 := &x.InvolvedObject
		yyv3193.CodecDecodeSelf(d)
	}
	yyj3189++
	if yyhl3189 {
		yyb3189 = yyj3189 > l
	} else {
		yyb3189 = r.CheckBreak()
	}
	if yyb3189 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3189++
	if yyhl3189 {
		yyb3189 = yyj3189 > l
	} else {
		yyb3189 = r.CheckBreak()
	}
	if yyb3189 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj3189++
	if yyhl3189 {
		yyb3189 = yyj3189 > l
	} else {
		yyb3189 = r.CheckBreak()
	}
	if yyb3189 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Source = EventSource{}
	} else {
		yyv3196 := &x.Source
		yyv3196.CodecDecodeSelf(d)
	}
	yyj3189++
	if yyhl3189 {
		yyb3189 = yyj3189 > l
	} else {
		yyb3189 = r.CheckBreak()
	}
	if yyb3189 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FirstTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv3197 := &x.FirstTimestamp
		yym3198 := z.DecBinary()
		_ = yym3198
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3197) {
		} else if yym3198 {
			z.DecBinaryUnmarshal(yyv3197)
		} else if !yym3198 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3197)
		} else {
			z.DecFallback(yyv3197, false)
		}
	}
	yyj3189++
	if yyhl3189 {
		yyb3189 = yyj3189 > l
	} else {
		yyb3189 = r.CheckBreak()
	}
	if yyb3189 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv3199 := &x.LastTimestamp
		yym3200 := z.DecBinary()
		_ = yym3200
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3199) {
		} else if yym3200 {
			z.DecBinaryUnmarshal(yyv3199)
		} else if !yym3200 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3199)
		} else {
			z.DecFallback(yyv3199, false)
		}
	}
	yyj3189++
	if yyhl3189 {
		yyb3189 = yyj3189 > l
	} else {
		yyb3189 = r.CheckBreak()
	}
	if yyb3189 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Count = 0
	} else {
		x.Count = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj3189++
		if yyhl3189 {
			yyb3189 = yyj3189 > l
		} else {
			yyb3189 = r.CheckBreak()
		}
		if yyb3189 {
			break
		}
		z.DecStructFieldNotFound(yyj3189-1, "")
	}
	r.ReadEnd()
}

func (x *EventList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3202 := z.EncBinary()
		_ = yym3202
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3203 := !z.EncBinary()
			yy2arr3203 := z.EncBasicHandle().StructToArray
			var yyq3203 [4]bool
			_, _, _ = yysep3203, yyq3203, yy2arr3203
			const yyr3203 bool = false
			yyq3203[0] = x.Kind != ""
			yyq3203[1] = x.APIVersion != ""
			yyq3203[2] = true
			if yyr3203 || yy2arr3203 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3203 int = 1
				for _, b := range yyq3203 {
					if b {
						yynn3203++
					}
				}
				r.EncodeMapStart(yynn3203)
			}
			if yyr3203 || yy2arr3203 {
				if yyq3203[0] {
					yym3205 := z.EncBinary()
					_ = yym3205
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3203[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3206 := z.EncBinary()
					_ = yym3206
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3203 || yy2arr3203 {
				if yyq3203[1] {
					yym3208 := z.EncBinary()
					_ = yym3208
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3203[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3209 := z.EncBinary()
					_ = yym3209
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3203 || yy2arr3203 {
				if yyq3203[2] {
					yy3211 := &x.ListMeta
					yym3212 := z.EncBinary()
					_ = yym3212
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3211) {
					} else {
						z.EncFallback(yy3211)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3203[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3213 := &x.ListMeta
					yym3214 := z.EncBinary()
					_ = yym3214
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3213) {
					} else {
						z.EncFallback(yy3213)
					}
				}
			}
			if yyr3203 || yy2arr3203 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3216 := z.EncBinary()
					_ = yym3216
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3217 := z.EncBinary()
					_ = yym3217
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			}
			if yysep3203 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EventList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3218 := z.DecBinary()
	_ = yym3218
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3219 := r.ReadMapStart()
			if yyl3219 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3219, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3219 := r.ReadArrayStart()
			if yyl3219 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3219, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3220Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3220Slc
	var yyhl3220 bool = l >= 0
	for yyj3220 := 0; ; yyj3220++ {
		if yyhl3220 {
			if yyj3220 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3220Slc = r.DecodeBytes(yys3220Slc, true, true)
		yys3220 := string(yys3220Slc)
		switch yys3220 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3223 := &x.ListMeta
				yym3224 := z.DecBinary()
				_ = yym3224
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3223) {
				} else {
					z.DecFallback(yyv3223, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3225 := &x.Items
				yym3226 := z.DecBinary()
				_ = yym3226
				if false {
				} else {
					h.decSliceEvent((*[]Event)(yyv3225), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3220)
		} // end switch yys3220
	} // end for yyj3220
	if !yyhl3220 {
		r.ReadEnd()
	}
}

func (x *EventList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3227 int
	var yyb3227 bool
	var yyhl3227 bool = l >= 0
	yyj3227++
	if yyhl3227 {
		yyb3227 = yyj3227 > l
	} else {
		yyb3227 = r.CheckBreak()
	}
	if yyb3227 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3227++
	if yyhl3227 {
		yyb3227 = yyj3227 > l
	} else {
		yyb3227 = r.CheckBreak()
	}
	if yyb3227 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3227++
	if yyhl3227 {
		yyb3227 = yyj3227 > l
	} else {
		yyb3227 = r.CheckBreak()
	}
	if yyb3227 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3230 := &x.ListMeta
		yym3231 := z.DecBinary()
		_ = yym3231
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3230) {
		} else {
			z.DecFallback(yyv3230, false)
		}
	}
	yyj3227++
	if yyhl3227 {
		yyb3227 = yyj3227 > l
	} else {
		yyb3227 = r.CheckBreak()
	}
	if yyb3227 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3232 := &x.Items
		yym3233 := z.DecBinary()
		_ = yym3233
		if false {
		} else {
			h.decSliceEvent((*[]Event)(yyv3232), d)
		}
	}
	for {
		yyj3227++
		if yyhl3227 {
			yyb3227 = yyj3227 > l
		} else {
			yyb3227 = r.CheckBreak()
		}
		if yyb3227 {
			break
		}
		z.DecStructFieldNotFound(yyj3227-1, "")
	}
	r.ReadEnd()
}

func (x *List) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3234 := z.EncBinary()
		_ = yym3234
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3235 := !z.EncBinary()
			yy2arr3235 := z.EncBasicHandle().StructToArray
			var yyq3235 [4]bool
			_, _, _ = yysep3235, yyq3235, yy2arr3235
			const yyr3235 bool = false
			yyq3235[0] = x.Kind != ""
			yyq3235[1] = x.APIVersion != ""
			yyq3235[2] = true
			if yyr3235 || yy2arr3235 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3235 int = 1
				for _, b := range yyq3235 {
					if b {
						yynn3235++
					}
				}
				r.EncodeMapStart(yynn3235)
			}
			if yyr3235 || yy2arr3235 {
				if yyq3235[0] {
					yym3237 := z.EncBinary()
					_ = yym3237
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3235[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3238 := z.EncBinary()
					_ = yym3238
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3235 || yy2arr3235 {
				if yyq3235[1] {
					yym3240 := z.EncBinary()
					_ = yym3240
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3235[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3241 := z.EncBinary()
					_ = yym3241
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3235 || yy2arr3235 {
				if yyq3235[2] {
					yy3243 := &x.ListMeta
					yym3244 := z.EncBinary()
					_ = yym3244
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3243) {
					} else {
						z.EncFallback(yy3243)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3235[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3245 := &x.ListMeta
					yym3246 := z.EncBinary()
					_ = yym3246
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3245) {
					} else {
						z.EncFallback(yy3245)
					}
				}
			}
			if yyr3235 || yy2arr3235 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3248 := z.EncBinary()
					_ = yym3248
					if false {
					} else {
						h.encSliceruntime_Object(([]pkg8_runtime.Object)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3249 := z.EncBinary()
					_ = yym3249
					if false {
					} else {
						h.encSliceruntime_Object(([]pkg8_runtime.Object)(x.Items), e)
					}
				}
			}
			if yysep3235 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *List) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3250 := z.DecBinary()
	_ = yym3250
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3251 := r.ReadMapStart()
			if yyl3251 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3251, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3251 := r.ReadArrayStart()
			if yyl3251 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3251, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *List) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3252Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3252Slc
	var yyhl3252 bool = l >= 0
	for yyj3252 := 0; ; yyj3252++ {
		if yyhl3252 {
			if yyj3252 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3252Slc = r.DecodeBytes(yys3252Slc, true, true)
		yys3252 := string(yys3252Slc)
		switch yys3252 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3255 := &x.ListMeta
				yym3256 := z.DecBinary()
				_ = yym3256
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3255) {
				} else {
					z.DecFallback(yyv3255, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3257 := &x.Items
				yym3258 := z.DecBinary()
				_ = yym3258
				if false {
				} else {
					h.decSliceruntime_Object((*[]pkg8_runtime.Object)(yyv3257), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3252)
		} // end switch yys3252
	} // end for yyj3252
	if !yyhl3252 {
		r.ReadEnd()
	}
}

func (x *List) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3259 int
	var yyb3259 bool
	var yyhl3259 bool = l >= 0
	yyj3259++
	if yyhl3259 {
		yyb3259 = yyj3259 > l
	} else {
		yyb3259 = r.CheckBreak()
	}
	if yyb3259 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3259++
	if yyhl3259 {
		yyb3259 = yyj3259 > l
	} else {
		yyb3259 = r.CheckBreak()
	}
	if yyb3259 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3259++
	if yyhl3259 {
		yyb3259 = yyj3259 > l
	} else {
		yyb3259 = r.CheckBreak()
	}
	if yyb3259 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3262 := &x.ListMeta
		yym3263 := z.DecBinary()
		_ = yym3263
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3262) {
		} else {
			z.DecFallback(yyv3262, false)
		}
	}
	yyj3259++
	if yyhl3259 {
		yyb3259 = yyj3259 > l
	} else {
		yyb3259 = r.CheckBreak()
	}
	if yyb3259 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3264 := &x.Items
		yym3265 := z.DecBinary()
		_ = yym3265
		if false {
		} else {
			h.decSliceruntime_Object((*[]pkg8_runtime.Object)(yyv3264), d)
		}
	}
	for {
		yyj3259++
		if yyhl3259 {
			yyb3259 = yyj3259 > l
		} else {
			yyb3259 = r.CheckBreak()
		}
		if yyb3259 {
			break
		}
		z.DecStructFieldNotFound(yyj3259-1, "")
	}
	r.ReadEnd()
}

func (x LimitType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3266 := z.EncBinary()
	_ = yym3266
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *LimitType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3267 := z.DecBinary()
	_ = yym3267
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *LimitRangeItem) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3268 := z.EncBinary()
		_ = yym3268
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3269 := !z.EncBinary()
			yy2arr3269 := z.EncBasicHandle().StructToArray
			var yyq3269 [6]bool
			_, _, _ = yysep3269, yyq3269, yy2arr3269
			const yyr3269 bool = false
			yyq3269[0] = x.Type != ""
			yyq3269[1] = len(x.Max) != 0
			yyq3269[2] = len(x.Min) != 0
			yyq3269[3] = len(x.Default) != 0
			yyq3269[4] = len(x.DefaultRequest) != 0
			yyq3269[5] = len(x.MaxLimitRequestRatio) != 0
			if yyr3269 || yy2arr3269 {
				r.EncodeArrayStart(6)
			} else {
				var yynn3269 int = 0
				for _, b := range yyq3269 {
					if b {
						yynn3269++
					}
				}
				r.EncodeMapStart(yynn3269)
			}
			if yyr3269 || yy2arr3269 {
				if yyq3269[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3269[0] {
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr3269 || yy2arr3269 {
				if yyq3269[1] {
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3269[1] {
					r.EncodeString(codecSelferC_UTF81234, string("max"))
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3269 || yy2arr3269 {
				if yyq3269[2] {
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3269[2] {
					r.EncodeString(codecSelferC_UTF81234, string("min"))
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3269 || yy2arr3269 {
				if yyq3269[3] {
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3269[3] {
					r.EncodeString(codecSelferC_UTF81234, string("default"))
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3269 || yy2arr3269 {
				if yyq3269[4] {
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3269[4] {
					r.EncodeString(codecSelferC_UTF81234, string("defaultRequest"))
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3269 || yy2arr3269 {
				if yyq3269[5] {
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3269[5] {
					r.EncodeString(codecSelferC_UTF81234, string("maxLimitRequestRatio"))
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				}
			}
			if yysep3269 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LimitRangeItem) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3276 := z.DecBinary()
	_ = yym3276
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3277 := r.ReadMapStart()
			if yyl3277 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3277, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3277 := r.ReadArrayStart()
			if yyl3277 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3277, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeItem) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3278Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3278Slc
	var yyhl3278 bool = l >= 0
	for yyj3278 := 0; ; yyj3278++ {
		if yyhl3278 {
			if yyj3278 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3278Slc = r.DecodeBytes(yys3278Slc, true, true)
		yys3278 := string(yys3278Slc)
		switch yys3278 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = LimitType(r.DecodeString())
			}
		case "max":
			if r.TryDecodeAsNil() {
				x.Max = nil
			} else {
				yyv3280 := &x.Max
				yyv3280.CodecDecodeSelf(d)
			}
		case "min":
			if r.TryDecodeAsNil() {
				x.Min = nil
			} else {
				yyv3281 := &x.Min
				yyv3281.CodecDecodeSelf(d)
			}
		case "default":
			if r.TryDecodeAsNil() {
				x.Default = nil
			} else {
				yyv3282 := &x.Default
				yyv3282.CodecDecodeSelf(d)
			}
		case "defaultRequest":
			if r.TryDecodeAsNil() {
				x.DefaultRequest = nil
			} else {
				yyv3283 := &x.DefaultRequest
				yyv3283.CodecDecodeSelf(d)
			}
		case "maxLimitRequestRatio":
			if r.TryDecodeAsNil() {
				x.MaxLimitRequestRatio = nil
			} else {
				yyv3284 := &x.MaxLimitRequestRatio
				yyv3284.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3278)
		} // end switch yys3278
	} // end for yyj3278
	if !yyhl3278 {
		r.ReadEnd()
	}
}

func (x *LimitRangeItem) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3285 int
	var yyb3285 bool
	var yyhl3285 bool = l >= 0
	yyj3285++
	if yyhl3285 {
		yyb3285 = yyj3285 > l
	} else {
		yyb3285 = r.CheckBreak()
	}
	if yyb3285 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = LimitType(r.DecodeString())
	}
	yyj3285++
	if yyhl3285 {
		yyb3285 = yyj3285 > l
	} else {
		yyb3285 = r.CheckBreak()
	}
	if yyb3285 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Max = nil
	} else {
		yyv3287 := &x.Max
		yyv3287.CodecDecodeSelf(d)
	}
	yyj3285++
	if yyhl3285 {
		yyb3285 = yyj3285 > l
	} else {
		yyb3285 = r.CheckBreak()
	}
	if yyb3285 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Min = nil
	} else {
		yyv3288 := &x.Min
		yyv3288.CodecDecodeSelf(d)
	}
	yyj3285++
	if yyhl3285 {
		yyb3285 = yyj3285 > l
	} else {
		yyb3285 = r.CheckBreak()
	}
	if yyb3285 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Default = nil
	} else {
		yyv3289 := &x.Default
		yyv3289.CodecDecodeSelf(d)
	}
	yyj3285++
	if yyhl3285 {
		yyb3285 = yyj3285 > l
	} else {
		yyb3285 = r.CheckBreak()
	}
	if yyb3285 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DefaultRequest = nil
	} else {
		yyv3290 := &x.DefaultRequest
		yyv3290.CodecDecodeSelf(d)
	}
	yyj3285++
	if yyhl3285 {
		yyb3285 = yyj3285 > l
	} else {
		yyb3285 = r.CheckBreak()
	}
	if yyb3285 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MaxLimitRequestRatio = nil
	} else {
		yyv3291 := &x.MaxLimitRequestRatio
		yyv3291.CodecDecodeSelf(d)
	}
	for {
		yyj3285++
		if yyhl3285 {
			yyb3285 = yyj3285 > l
		} else {
			yyb3285 = r.CheckBreak()
		}
		if yyb3285 {
			break
		}
		z.DecStructFieldNotFound(yyj3285-1, "")
	}
	r.ReadEnd()
}

func (x *LimitRangeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3292 := z.EncBinary()
		_ = yym3292
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3293 := !z.EncBinary()
			yy2arr3293 := z.EncBasicHandle().StructToArray
			var yyq3293 [1]bool
			_, _, _ = yysep3293, yyq3293, yy2arr3293
			const yyr3293 bool = false
			if yyr3293 || yy2arr3293 {
				r.EncodeArrayStart(1)
			} else {
				var yynn3293 int = 1
				for _, b := range yyq3293 {
					if b {
						yynn3293++
					}
				}
				r.EncodeMapStart(yynn3293)
			}
			if yyr3293 || yy2arr3293 {
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym3295 := z.EncBinary()
					_ = yym3295
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("limits"))
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym3296 := z.EncBinary()
					_ = yym3296
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			}
			if yysep3293 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LimitRangeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3297 := z.DecBinary()
	_ = yym3297
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3298 := r.ReadMapStart()
			if yyl3298 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3298, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3298 := r.ReadArrayStart()
			if yyl3298 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3298, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3299Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3299Slc
	var yyhl3299 bool = l >= 0
	for yyj3299 := 0; ; yyj3299++ {
		if yyhl3299 {
			if yyj3299 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3299Slc = r.DecodeBytes(yys3299Slc, true, true)
		yys3299 := string(yys3299Slc)
		switch yys3299 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv3300 := &x.Limits
				yym3301 := z.DecBinary()
				_ = yym3301
				if false {
				} else {
					h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv3300), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3299)
		} // end switch yys3299
	} // end for yyj3299
	if !yyhl3299 {
		r.ReadEnd()
	}
}

func (x *LimitRangeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3302 int
	var yyb3302 bool
	var yyhl3302 bool = l >= 0
	yyj3302++
	if yyhl3302 {
		yyb3302 = yyj3302 > l
	} else {
		yyb3302 = r.CheckBreak()
	}
	if yyb3302 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv3303 := &x.Limits
		yym3304 := z.DecBinary()
		_ = yym3304
		if false {
		} else {
			h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv3303), d)
		}
	}
	for {
		yyj3302++
		if yyhl3302 {
			yyb3302 = yyj3302 > l
		} else {
			yyb3302 = r.CheckBreak()
		}
		if yyb3302 {
			break
		}
		z.DecStructFieldNotFound(yyj3302-1, "")
	}
	r.ReadEnd()
}

func (x *LimitRange) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3305 := z.EncBinary()
		_ = yym3305
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3306 := !z.EncBinary()
			yy2arr3306 := z.EncBasicHandle().StructToArray
			var yyq3306 [4]bool
			_, _, _ = yysep3306, yyq3306, yy2arr3306
			const yyr3306 bool = false
			yyq3306[0] = x.Kind != ""
			yyq3306[1] = x.APIVersion != ""
			yyq3306[2] = true
			yyq3306[3] = true
			if yyr3306 || yy2arr3306 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3306 int = 0
				for _, b := range yyq3306 {
					if b {
						yynn3306++
					}
				}
				r.EncodeMapStart(yynn3306)
			}
			if yyr3306 || yy2arr3306 {
				if yyq3306[0] {
					yym3308 := z.EncBinary()
					_ = yym3308
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3306[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3309 := z.EncBinary()
					_ = yym3309
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3306 || yy2arr3306 {
				if yyq3306[1] {
					yym3311 := z.EncBinary()
					_ = yym3311
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3306[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3312 := z.EncBinary()
					_ = yym3312
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3306 || yy2arr3306 {
				if yyq3306[2] {
					yy3314 := &x.ObjectMeta
					yy3314.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3306[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3315 := &x.ObjectMeta
					yy3315.CodecEncodeSelf(e)
				}
			}
			if yyr3306 || yy2arr3306 {
				if yyq3306[3] {
					yy3317 := &x.Spec
					yy3317.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3306[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy3318 := &x.Spec
					yy3318.CodecEncodeSelf(e)
				}
			}
			if yysep3306 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LimitRange) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3319 := z.DecBinary()
	_ = yym3319
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3320 := r.ReadMapStart()
			if yyl3320 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3320, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3320 := r.ReadArrayStart()
			if yyl3320 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3320, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRange) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3321Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3321Slc
	var yyhl3321 bool = l >= 0
	for yyj3321 := 0; ; yyj3321++ {
		if yyhl3321 {
			if yyj3321 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3321Slc = r.DecodeBytes(yys3321Slc, true, true)
		yys3321 := string(yys3321Slc)
		switch yys3321 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3324 := &x.ObjectMeta
				yyv3324.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = LimitRangeSpec{}
			} else {
				yyv3325 := &x.Spec
				yyv3325.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3321)
		} // end switch yys3321
	} // end for yyj3321
	if !yyhl3321 {
		r.ReadEnd()
	}
}

func (x *LimitRange) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3326 int
	var yyb3326 bool
	var yyhl3326 bool = l >= 0
	yyj3326++
	if yyhl3326 {
		yyb3326 = yyj3326 > l
	} else {
		yyb3326 = r.CheckBreak()
	}
	if yyb3326 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3326++
	if yyhl3326 {
		yyb3326 = yyj3326 > l
	} else {
		yyb3326 = r.CheckBreak()
	}
	if yyb3326 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3326++
	if yyhl3326 {
		yyb3326 = yyj3326 > l
	} else {
		yyb3326 = r.CheckBreak()
	}
	if yyb3326 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3329 := &x.ObjectMeta
		yyv3329.CodecDecodeSelf(d)
	}
	yyj3326++
	if yyhl3326 {
		yyb3326 = yyj3326 > l
	} else {
		yyb3326 = r.CheckBreak()
	}
	if yyb3326 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = LimitRangeSpec{}
	} else {
		yyv3330 := &x.Spec
		yyv3330.CodecDecodeSelf(d)
	}
	for {
		yyj3326++
		if yyhl3326 {
			yyb3326 = yyj3326 > l
		} else {
			yyb3326 = r.CheckBreak()
		}
		if yyb3326 {
			break
		}
		z.DecStructFieldNotFound(yyj3326-1, "")
	}
	r.ReadEnd()
}

func (x *LimitRangeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3331 := z.EncBinary()
		_ = yym3331
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3332 := !z.EncBinary()
			yy2arr3332 := z.EncBasicHandle().StructToArray
			var yyq3332 [4]bool
			_, _, _ = yysep3332, yyq3332, yy2arr3332
			const yyr3332 bool = false
			yyq3332[0] = x.Kind != ""
			yyq3332[1] = x.APIVersion != ""
			yyq3332[2] = true
			if yyr3332 || yy2arr3332 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3332 int = 1
				for _, b := range yyq3332 {
					if b {
						yynn3332++
					}
				}
				r.EncodeMapStart(yynn3332)
			}
			if yyr3332 || yy2arr3332 {
				if yyq3332[0] {
					yym3334 := z.EncBinary()
					_ = yym3334
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3332[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3335 := z.EncBinary()
					_ = yym3335
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3332 || yy2arr3332 {
				if yyq3332[1] {
					yym3337 := z.EncBinary()
					_ = yym3337
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3332[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3338 := z.EncBinary()
					_ = yym3338
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3332 || yy2arr3332 {
				if yyq3332[2] {
					yy3340 := &x.ListMeta
					yym3341 := z.EncBinary()
					_ = yym3341
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3340) {
					} else {
						z.EncFallback(yy3340)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3332[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3342 := &x.ListMeta
					yym3343 := z.EncBinary()
					_ = yym3343
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3342) {
					} else {
						z.EncFallback(yy3342)
					}
				}
			}
			if yyr3332 || yy2arr3332 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3345 := z.EncBinary()
					_ = yym3345
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3346 := z.EncBinary()
					_ = yym3346
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			}
			if yysep3332 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LimitRangeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3347 := z.DecBinary()
	_ = yym3347
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3348 := r.ReadMapStart()
			if yyl3348 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3348, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3348 := r.ReadArrayStart()
			if yyl3348 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3348, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3349Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3349Slc
	var yyhl3349 bool = l >= 0
	for yyj3349 := 0; ; yyj3349++ {
		if yyhl3349 {
			if yyj3349 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3349Slc = r.DecodeBytes(yys3349Slc, true, true)
		yys3349 := string(yys3349Slc)
		switch yys3349 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3352 := &x.ListMeta
				yym3353 := z.DecBinary()
				_ = yym3353
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3352) {
				} else {
					z.DecFallback(yyv3352, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3354 := &x.Items
				yym3355 := z.DecBinary()
				_ = yym3355
				if false {
				} else {
					h.decSliceLimitRange((*[]LimitRange)(yyv3354), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3349)
		} // end switch yys3349
	} // end for yyj3349
	if !yyhl3349 {
		r.ReadEnd()
	}
}

func (x *LimitRangeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3356 int
	var yyb3356 bool
	var yyhl3356 bool = l >= 0
	yyj3356++
	if yyhl3356 {
		yyb3356 = yyj3356 > l
	} else {
		yyb3356 = r.CheckBreak()
	}
	if yyb3356 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3356++
	if yyhl3356 {
		yyb3356 = yyj3356 > l
	} else {
		yyb3356 = r.CheckBreak()
	}
	if yyb3356 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3356++
	if yyhl3356 {
		yyb3356 = yyj3356 > l
	} else {
		yyb3356 = r.CheckBreak()
	}
	if yyb3356 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3359 := &x.ListMeta
		yym3360 := z.DecBinary()
		_ = yym3360
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3359) {
		} else {
			z.DecFallback(yyv3359, false)
		}
	}
	yyj3356++
	if yyhl3356 {
		yyb3356 = yyj3356 > l
	} else {
		yyb3356 = r.CheckBreak()
	}
	if yyb3356 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3361 := &x.Items
		yym3362 := z.DecBinary()
		_ = yym3362
		if false {
		} else {
			h.decSliceLimitRange((*[]LimitRange)(yyv3361), d)
		}
	}
	for {
		yyj3356++
		if yyhl3356 {
			yyb3356 = yyj3356 > l
		} else {
			yyb3356 = r.CheckBreak()
		}
		if yyb3356 {
			break
		}
		z.DecStructFieldNotFound(yyj3356-1, "")
	}
	r.ReadEnd()
}

func (x *ResourceQuotaSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3363 := z.EncBinary()
		_ = yym3363
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3364 := !z.EncBinary()
			yy2arr3364 := z.EncBasicHandle().StructToArray
			var yyq3364 [1]bool
			_, _, _ = yysep3364, yyq3364, yy2arr3364
			const yyr3364 bool = false
			yyq3364[0] = len(x.Hard) != 0
			if yyr3364 || yy2arr3364 {
				r.EncodeArrayStart(1)
			} else {
				var yynn3364 int = 0
				for _, b := range yyq3364 {
					if b {
						yynn3364++
					}
				}
				r.EncodeMapStart(yynn3364)
			}
			if yyr3364 || yy2arr3364 {
				if yyq3364[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3364[0] {
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yysep3364 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ResourceQuotaSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3366 := z.DecBinary()
	_ = yym3366
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3367 := r.ReadMapStart()
			if yyl3367 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3367, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3367 := r.ReadArrayStart()
			if yyl3367 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3367, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3368Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3368Slc
	var yyhl3368 bool = l >= 0
	for yyj3368 := 0; ; yyj3368++ {
		if yyhl3368 {
			if yyj3368 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3368Slc = r.DecodeBytes(yys3368Slc, true, true)
		yys3368 := string(yys3368Slc)
		switch yys3368 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv3369 := &x.Hard
				yyv3369.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3368)
		} // end switch yys3368
	} // end for yyj3368
	if !yyhl3368 {
		r.ReadEnd()
	}
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3370 int
	var yyb3370 bool
	var yyhl3370 bool = l >= 0
	yyj3370++
	if yyhl3370 {
		yyb3370 = yyj3370 > l
	} else {
		yyb3370 = r.CheckBreak()
	}
	if yyb3370 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv3371 := &x.Hard
		yyv3371.CodecDecodeSelf(d)
	}
	for {
		yyj3370++
		if yyhl3370 {
			yyb3370 = yyj3370 > l
		} else {
			yyb3370 = r.CheckBreak()
		}
		if yyb3370 {
			break
		}
		z.DecStructFieldNotFound(yyj3370-1, "")
	}
	r.ReadEnd()
}

func (x *ResourceQuotaStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3372 := z.EncBinary()
		_ = yym3372
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3373 := !z.EncBinary()
			yy2arr3373 := z.EncBasicHandle().StructToArray
			var yyq3373 [2]bool
			_, _, _ = yysep3373, yyq3373, yy2arr3373
			const yyr3373 bool = false
			yyq3373[0] = len(x.Hard) != 0
			yyq3373[1] = len(x.Used) != 0
			if yyr3373 || yy2arr3373 {
				r.EncodeArrayStart(2)
			} else {
				var yynn3373 int = 0
				for _, b := range yyq3373 {
					if b {
						yynn3373++
					}
				}
				r.EncodeMapStart(yynn3373)
			}
			if yyr3373 || yy2arr3373 {
				if yyq3373[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3373[0] {
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3373 || yy2arr3373 {
				if yyq3373[1] {
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3373[1] {
					r.EncodeString(codecSelferC_UTF81234, string("used"))
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				}
			}
			if yysep3373 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ResourceQuotaStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3376 := z.DecBinary()
	_ = yym3376
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3377 := r.ReadMapStart()
			if yyl3377 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3377, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3377 := r.ReadArrayStart()
			if yyl3377 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3377, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3378Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3378Slc
	var yyhl3378 bool = l >= 0
	for yyj3378 := 0; ; yyj3378++ {
		if yyhl3378 {
			if yyj3378 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3378Slc = r.DecodeBytes(yys3378Slc, true, true)
		yys3378 := string(yys3378Slc)
		switch yys3378 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv3379 := &x.Hard
				yyv3379.CodecDecodeSelf(d)
			}
		case "used":
			if r.TryDecodeAsNil() {
				x.Used = nil
			} else {
				yyv3380 := &x.Used
				yyv3380.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3378)
		} // end switch yys3378
	} // end for yyj3378
	if !yyhl3378 {
		r.ReadEnd()
	}
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3381 int
	var yyb3381 bool
	var yyhl3381 bool = l >= 0
	yyj3381++
	if yyhl3381 {
		yyb3381 = yyj3381 > l
	} else {
		yyb3381 = r.CheckBreak()
	}
	if yyb3381 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv3382 := &x.Hard
		yyv3382.CodecDecodeSelf(d)
	}
	yyj3381++
	if yyhl3381 {
		yyb3381 = yyj3381 > l
	} else {
		yyb3381 = r.CheckBreak()
	}
	if yyb3381 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Used = nil
	} else {
		yyv3383 := &x.Used
		yyv3383.CodecDecodeSelf(d)
	}
	for {
		yyj3381++
		if yyhl3381 {
			yyb3381 = yyj3381 > l
		} else {
			yyb3381 = r.CheckBreak()
		}
		if yyb3381 {
			break
		}
		z.DecStructFieldNotFound(yyj3381-1, "")
	}
	r.ReadEnd()
}

func (x *ResourceQuota) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3384 := z.EncBinary()
		_ = yym3384
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3385 := !z.EncBinary()
			yy2arr3385 := z.EncBasicHandle().StructToArray
			var yyq3385 [5]bool
			_, _, _ = yysep3385, yyq3385, yy2arr3385
			const yyr3385 bool = false
			yyq3385[0] = x.Kind != ""
			yyq3385[1] = x.APIVersion != ""
			yyq3385[2] = true
			yyq3385[3] = true
			yyq3385[4] = true
			if yyr3385 || yy2arr3385 {
				r.EncodeArrayStart(5)
			} else {
				var yynn3385 int = 0
				for _, b := range yyq3385 {
					if b {
						yynn3385++
					}
				}
				r.EncodeMapStart(yynn3385)
			}
			if yyr3385 || yy2arr3385 {
				if yyq3385[0] {
					yym3387 := z.EncBinary()
					_ = yym3387
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3385[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3388 := z.EncBinary()
					_ = yym3388
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3385 || yy2arr3385 {
				if yyq3385[1] {
					yym3390 := z.EncBinary()
					_ = yym3390
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3385[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3391 := z.EncBinary()
					_ = yym3391
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3385 || yy2arr3385 {
				if yyq3385[2] {
					yy3393 := &x.ObjectMeta
					yy3393.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3385[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3394 := &x.ObjectMeta
					yy3394.CodecEncodeSelf(e)
				}
			}
			if yyr3385 || yy2arr3385 {
				if yyq3385[3] {
					yy3396 := &x.Spec
					yy3396.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3385[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy3397 := &x.Spec
					yy3397.CodecEncodeSelf(e)
				}
			}
			if yyr3385 || yy2arr3385 {
				if yyq3385[4] {
					yy3399 := &x.Status
					yy3399.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3385[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy3400 := &x.Status
					yy3400.CodecEncodeSelf(e)
				}
			}
			if yysep3385 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ResourceQuota) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3401 := z.DecBinary()
	_ = yym3401
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3402 := r.ReadMapStart()
			if yyl3402 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3402, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3402 := r.ReadArrayStart()
			if yyl3402 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3402, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuota) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3403Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3403Slc
	var yyhl3403 bool = l >= 0
	for yyj3403 := 0; ; yyj3403++ {
		if yyhl3403 {
			if yyj3403 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3403Slc = r.DecodeBytes(yys3403Slc, true, true)
		yys3403 := string(yys3403Slc)
		switch yys3403 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3406 := &x.ObjectMeta
				yyv3406.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ResourceQuotaSpec{}
			} else {
				yyv3407 := &x.Spec
				yyv3407.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ResourceQuotaStatus{}
			} else {
				yyv3408 := &x.Status
				yyv3408.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3403)
		} // end switch yys3403
	} // end for yyj3403
	if !yyhl3403 {
		r.ReadEnd()
	}
}

func (x *ResourceQuota) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3409 int
	var yyb3409 bool
	var yyhl3409 bool = l >= 0
	yyj3409++
	if yyhl3409 {
		yyb3409 = yyj3409 > l
	} else {
		yyb3409 = r.CheckBreak()
	}
	if yyb3409 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3409++
	if yyhl3409 {
		yyb3409 = yyj3409 > l
	} else {
		yyb3409 = r.CheckBreak()
	}
	if yyb3409 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3409++
	if yyhl3409 {
		yyb3409 = yyj3409 > l
	} else {
		yyb3409 = r.CheckBreak()
	}
	if yyb3409 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3412 := &x.ObjectMeta
		yyv3412.CodecDecodeSelf(d)
	}
	yyj3409++
	if yyhl3409 {
		yyb3409 = yyj3409 > l
	} else {
		yyb3409 = r.CheckBreak()
	}
	if yyb3409 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = ResourceQuotaSpec{}
	} else {
		yyv3413 := &x.Spec
		yyv3413.CodecDecodeSelf(d)
	}
	yyj3409++
	if yyhl3409 {
		yyb3409 = yyj3409 > l
	} else {
		yyb3409 = r.CheckBreak()
	}
	if yyb3409 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ResourceQuotaStatus{}
	} else {
		yyv3414 := &x.Status
		yyv3414.CodecDecodeSelf(d)
	}
	for {
		yyj3409++
		if yyhl3409 {
			yyb3409 = yyj3409 > l
		} else {
			yyb3409 = r.CheckBreak()
		}
		if yyb3409 {
			break
		}
		z.DecStructFieldNotFound(yyj3409-1, "")
	}
	r.ReadEnd()
}

func (x *ResourceQuotaList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3415 := z.EncBinary()
		_ = yym3415
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3416 := !z.EncBinary()
			yy2arr3416 := z.EncBasicHandle().StructToArray
			var yyq3416 [4]bool
			_, _, _ = yysep3416, yyq3416, yy2arr3416
			const yyr3416 bool = false
			yyq3416[0] = x.Kind != ""
			yyq3416[1] = x.APIVersion != ""
			yyq3416[2] = true
			if yyr3416 || yy2arr3416 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3416 int = 1
				for _, b := range yyq3416 {
					if b {
						yynn3416++
					}
				}
				r.EncodeMapStart(yynn3416)
			}
			if yyr3416 || yy2arr3416 {
				if yyq3416[0] {
					yym3418 := z.EncBinary()
					_ = yym3418
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3416[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3419 := z.EncBinary()
					_ = yym3419
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3416 || yy2arr3416 {
				if yyq3416[1] {
					yym3421 := z.EncBinary()
					_ = yym3421
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3416[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3422 := z.EncBinary()
					_ = yym3422
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3416 || yy2arr3416 {
				if yyq3416[2] {
					yy3424 := &x.ListMeta
					yym3425 := z.EncBinary()
					_ = yym3425
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3424) {
					} else {
						z.EncFallback(yy3424)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3416[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3426 := &x.ListMeta
					yym3427 := z.EncBinary()
					_ = yym3427
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3426) {
					} else {
						z.EncFallback(yy3426)
					}
				}
			}
			if yyr3416 || yy2arr3416 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3429 := z.EncBinary()
					_ = yym3429
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3430 := z.EncBinary()
					_ = yym3430
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			}
			if yysep3416 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ResourceQuotaList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3431 := z.DecBinary()
	_ = yym3431
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3432 := r.ReadMapStart()
			if yyl3432 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3432, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3432 := r.ReadArrayStart()
			if yyl3432 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3432, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3433Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3433Slc
	var yyhl3433 bool = l >= 0
	for yyj3433 := 0; ; yyj3433++ {
		if yyhl3433 {
			if yyj3433 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3433Slc = r.DecodeBytes(yys3433Slc, true, true)
		yys3433 := string(yys3433Slc)
		switch yys3433 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3436 := &x.ListMeta
				yym3437 := z.DecBinary()
				_ = yym3437
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3436) {
				} else {
					z.DecFallback(yyv3436, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3438 := &x.Items
				yym3439 := z.DecBinary()
				_ = yym3439
				if false {
				} else {
					h.decSliceResourceQuota((*[]ResourceQuota)(yyv3438), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3433)
		} // end switch yys3433
	} // end for yyj3433
	if !yyhl3433 {
		r.ReadEnd()
	}
}

func (x *ResourceQuotaList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3440 int
	var yyb3440 bool
	var yyhl3440 bool = l >= 0
	yyj3440++
	if yyhl3440 {
		yyb3440 = yyj3440 > l
	} else {
		yyb3440 = r.CheckBreak()
	}
	if yyb3440 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3440++
	if yyhl3440 {
		yyb3440 = yyj3440 > l
	} else {
		yyb3440 = r.CheckBreak()
	}
	if yyb3440 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3440++
	if yyhl3440 {
		yyb3440 = yyj3440 > l
	} else {
		yyb3440 = r.CheckBreak()
	}
	if yyb3440 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3443 := &x.ListMeta
		yym3444 := z.DecBinary()
		_ = yym3444
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3443) {
		} else {
			z.DecFallback(yyv3443, false)
		}
	}
	yyj3440++
	if yyhl3440 {
		yyb3440 = yyj3440 > l
	} else {
		yyb3440 = r.CheckBreak()
	}
	if yyb3440 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3445 := &x.Items
		yym3446 := z.DecBinary()
		_ = yym3446
		if false {
		} else {
			h.decSliceResourceQuota((*[]ResourceQuota)(yyv3445), d)
		}
	}
	for {
		yyj3440++
		if yyhl3440 {
			yyb3440 = yyj3440 > l
		} else {
			yyb3440 = r.CheckBreak()
		}
		if yyb3440 {
			break
		}
		z.DecStructFieldNotFound(yyj3440-1, "")
	}
	r.ReadEnd()
}

func (x *Secret) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3447 := z.EncBinary()
		_ = yym3447
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3448 := !z.EncBinary()
			yy2arr3448 := z.EncBasicHandle().StructToArray
			var yyq3448 [5]bool
			_, _, _ = yysep3448, yyq3448, yy2arr3448
			const yyr3448 bool = false
			yyq3448[0] = x.Kind != ""
			yyq3448[1] = x.APIVersion != ""
			yyq3448[2] = true
			yyq3448[3] = len(x.Data) != 0
			yyq3448[4] = x.Type != ""
			if yyr3448 || yy2arr3448 {
				r.EncodeArrayStart(5)
			} else {
				var yynn3448 int = 0
				for _, b := range yyq3448 {
					if b {
						yynn3448++
					}
				}
				r.EncodeMapStart(yynn3448)
			}
			if yyr3448 || yy2arr3448 {
				if yyq3448[0] {
					yym3450 := z.EncBinary()
					_ = yym3450
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3448[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3451 := z.EncBinary()
					_ = yym3451
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3448 || yy2arr3448 {
				if yyq3448[1] {
					yym3453 := z.EncBinary()
					_ = yym3453
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3448[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3454 := z.EncBinary()
					_ = yym3454
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3448 || yy2arr3448 {
				if yyq3448[2] {
					yy3456 := &x.ObjectMeta
					yy3456.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3448[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3457 := &x.ObjectMeta
					yy3457.CodecEncodeSelf(e)
				}
			}
			if yyr3448 || yy2arr3448 {
				if yyq3448[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym3459 := z.EncBinary()
						_ = yym3459
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3448[3] {
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym3460 := z.EncBinary()
						_ = yym3460
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				}
			}
			if yyr3448 || yy2arr3448 {
				if yyq3448[4] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3448[4] {
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yysep3448 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Secret) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3462 := z.DecBinary()
	_ = yym3462
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3463 := r.ReadMapStart()
			if yyl3463 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3463, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3463 := r.ReadArrayStart()
			if yyl3463 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3463, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Secret) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3464Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3464Slc
	var yyhl3464 bool = l >= 0
	for yyj3464 := 0; ; yyj3464++ {
		if yyhl3464 {
			if yyj3464 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3464Slc = r.DecodeBytes(yys3464Slc, true, true)
		yys3464 := string(yys3464Slc)
		switch yys3464 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3467 := &x.ObjectMeta
				yyv3467.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv3468 := &x.Data
				yym3469 := z.DecBinary()
				_ = yym3469
				if false {
				} else {
					h.decMapstringSliceuint8((*map[string][]uint8)(yyv3468), d)
				}
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = SecretType(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3464)
		} // end switch yys3464
	} // end for yyj3464
	if !yyhl3464 {
		r.ReadEnd()
	}
}

func (x *Secret) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3471 int
	var yyb3471 bool
	var yyhl3471 bool = l >= 0
	yyj3471++
	if yyhl3471 {
		yyb3471 = yyj3471 > l
	} else {
		yyb3471 = r.CheckBreak()
	}
	if yyb3471 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3471++
	if yyhl3471 {
		yyb3471 = yyj3471 > l
	} else {
		yyb3471 = r.CheckBreak()
	}
	if yyb3471 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3471++
	if yyhl3471 {
		yyb3471 = yyj3471 > l
	} else {
		yyb3471 = r.CheckBreak()
	}
	if yyb3471 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3474 := &x.ObjectMeta
		yyv3474.CodecDecodeSelf(d)
	}
	yyj3471++
	if yyhl3471 {
		yyb3471 = yyj3471 > l
	} else {
		yyb3471 = r.CheckBreak()
	}
	if yyb3471 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv3475 := &x.Data
		yym3476 := z.DecBinary()
		_ = yym3476
		if false {
		} else {
			h.decMapstringSliceuint8((*map[string][]uint8)(yyv3475), d)
		}
	}
	yyj3471++
	if yyhl3471 {
		yyb3471 = yyj3471 > l
	} else {
		yyb3471 = r.CheckBreak()
	}
	if yyb3471 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = SecretType(r.DecodeString())
	}
	for {
		yyj3471++
		if yyhl3471 {
			yyb3471 = yyj3471 > l
		} else {
			yyb3471 = r.CheckBreak()
		}
		if yyb3471 {
			break
		}
		z.DecStructFieldNotFound(yyj3471-1, "")
	}
	r.ReadEnd()
}

func (x SecretType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3478 := z.EncBinary()
	_ = yym3478
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *SecretType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3479 := z.DecBinary()
	_ = yym3479
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *SecretList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3480 := z.EncBinary()
		_ = yym3480
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3481 := !z.EncBinary()
			yy2arr3481 := z.EncBasicHandle().StructToArray
			var yyq3481 [4]bool
			_, _, _ = yysep3481, yyq3481, yy2arr3481
			const yyr3481 bool = false
			yyq3481[0] = x.Kind != ""
			yyq3481[1] = x.APIVersion != ""
			yyq3481[2] = true
			if yyr3481 || yy2arr3481 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3481 int = 1
				for _, b := range yyq3481 {
					if b {
						yynn3481++
					}
				}
				r.EncodeMapStart(yynn3481)
			}
			if yyr3481 || yy2arr3481 {
				if yyq3481[0] {
					yym3483 := z.EncBinary()
					_ = yym3483
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3481[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3484 := z.EncBinary()
					_ = yym3484
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3481 || yy2arr3481 {
				if yyq3481[1] {
					yym3486 := z.EncBinary()
					_ = yym3486
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3481[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3487 := z.EncBinary()
					_ = yym3487
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3481 || yy2arr3481 {
				if yyq3481[2] {
					yy3489 := &x.ListMeta
					yym3490 := z.EncBinary()
					_ = yym3490
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3489) {
					} else {
						z.EncFallback(yy3489)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3481[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3491 := &x.ListMeta
					yym3492 := z.EncBinary()
					_ = yym3492
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3491) {
					} else {
						z.EncFallback(yy3491)
					}
				}
			}
			if yyr3481 || yy2arr3481 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3494 := z.EncBinary()
					_ = yym3494
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3495 := z.EncBinary()
					_ = yym3495
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			}
			if yysep3481 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *SecretList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3496 := z.DecBinary()
	_ = yym3496
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3497 := r.ReadMapStart()
			if yyl3497 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3497, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3497 := r.ReadArrayStart()
			if yyl3497 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3497, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3498Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3498Slc
	var yyhl3498 bool = l >= 0
	for yyj3498 := 0; ; yyj3498++ {
		if yyhl3498 {
			if yyj3498 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3498Slc = r.DecodeBytes(yys3498Slc, true, true)
		yys3498 := string(yys3498Slc)
		switch yys3498 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3501 := &x.ListMeta
				yym3502 := z.DecBinary()
				_ = yym3502
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3501) {
				} else {
					z.DecFallback(yyv3501, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3503 := &x.Items
				yym3504 := z.DecBinary()
				_ = yym3504
				if false {
				} else {
					h.decSliceSecret((*[]Secret)(yyv3503), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3498)
		} // end switch yys3498
	} // end for yyj3498
	if !yyhl3498 {
		r.ReadEnd()
	}
}

func (x *SecretList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3505 int
	var yyb3505 bool
	var yyhl3505 bool = l >= 0
	yyj3505++
	if yyhl3505 {
		yyb3505 = yyj3505 > l
	} else {
		yyb3505 = r.CheckBreak()
	}
	if yyb3505 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3505++
	if yyhl3505 {
		yyb3505 = yyj3505 > l
	} else {
		yyb3505 = r.CheckBreak()
	}
	if yyb3505 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3505++
	if yyhl3505 {
		yyb3505 = yyj3505 > l
	} else {
		yyb3505 = r.CheckBreak()
	}
	if yyb3505 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3508 := &x.ListMeta
		yym3509 := z.DecBinary()
		_ = yym3509
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3508) {
		} else {
			z.DecFallback(yyv3508, false)
		}
	}
	yyj3505++
	if yyhl3505 {
		yyb3505 = yyj3505 > l
	} else {
		yyb3505 = r.CheckBreak()
	}
	if yyb3505 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3510 := &x.Items
		yym3511 := z.DecBinary()
		_ = yym3511
		if false {
		} else {
			h.decSliceSecret((*[]Secret)(yyv3510), d)
		}
	}
	for {
		yyj3505++
		if yyhl3505 {
			yyb3505 = yyj3505 > l
		} else {
			yyb3505 = r.CheckBreak()
		}
		if yyb3505 {
			break
		}
		z.DecStructFieldNotFound(yyj3505-1, "")
	}
	r.ReadEnd()
}

func (x PatchType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3512 := z.EncBinary()
	_ = yym3512
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PatchType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3513 := z.DecBinary()
	_ = yym3513
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ComponentConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3514 := z.EncBinary()
	_ = yym3514
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ComponentConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3515 := z.DecBinary()
	_ = yym3515
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ComponentCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3516 := z.EncBinary()
		_ = yym3516
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3517 := !z.EncBinary()
			yy2arr3517 := z.EncBasicHandle().StructToArray
			var yyq3517 [4]bool
			_, _, _ = yysep3517, yyq3517, yy2arr3517
			const yyr3517 bool = false
			yyq3517[2] = x.Message != ""
			yyq3517[3] = x.Error != ""
			if yyr3517 || yy2arr3517 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3517 int = 2
				for _, b := range yyq3517 {
					if b {
						yynn3517++
					}
				}
				r.EncodeMapStart(yynn3517)
			}
			if yyr3517 || yy2arr3517 {
				x.Type.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3517 || yy2arr3517 {
				x.Status.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				x.Status.CodecEncodeSelf(e)
			}
			if yyr3517 || yy2arr3517 {
				if yyq3517[2] {
					yym3521 := z.EncBinary()
					_ = yym3521
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3517[2] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym3522 := z.EncBinary()
					_ = yym3522
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3517 || yy2arr3517 {
				if yyq3517[3] {
					yym3524 := z.EncBinary()
					_ = yym3524
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3517[3] {
					r.EncodeString(codecSelferC_UTF81234, string("error"))
					yym3525 := z.EncBinary()
					_ = yym3525
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				}
			}
			if yysep3517 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ComponentCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3526 := z.DecBinary()
	_ = yym3526
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3527 := r.ReadMapStart()
			if yyl3527 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3527, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3527 := r.ReadArrayStart()
			if yyl3527 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3527, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3528Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3528Slc
	var yyhl3528 bool = l >= 0
	for yyj3528 := 0; ; yyj3528++ {
		if yyhl3528 {
			if yyj3528 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3528Slc = r.DecodeBytes(yys3528Slc, true, true)
		yys3528 := string(yys3528Slc)
		switch yys3528 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ComponentConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "error":
			if r.TryDecodeAsNil() {
				x.Error = ""
			} else {
				x.Error = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3528)
		} // end switch yys3528
	} // end for yyj3528
	if !yyhl3528 {
		r.ReadEnd()
	}
}

func (x *ComponentCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3533 int
	var yyb3533 bool
	var yyhl3533 bool = l >= 0
	yyj3533++
	if yyhl3533 {
		yyb3533 = yyj3533 > l
	} else {
		yyb3533 = r.CheckBreak()
	}
	if yyb3533 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ComponentConditionType(r.DecodeString())
	}
	yyj3533++
	if yyhl3533 {
		yyb3533 = yyj3533 > l
	} else {
		yyb3533 = r.CheckBreak()
	}
	if yyb3533 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj3533++
	if yyhl3533 {
		yyb3533 = yyj3533 > l
	} else {
		yyb3533 = r.CheckBreak()
	}
	if yyb3533 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj3533++
	if yyhl3533 {
		yyb3533 = yyj3533 > l
	} else {
		yyb3533 = r.CheckBreak()
	}
	if yyb3533 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Error = ""
	} else {
		x.Error = string(r.DecodeString())
	}
	for {
		yyj3533++
		if yyhl3533 {
			yyb3533 = yyj3533 > l
		} else {
			yyb3533 = r.CheckBreak()
		}
		if yyb3533 {
			break
		}
		z.DecStructFieldNotFound(yyj3533-1, "")
	}
	r.ReadEnd()
}

func (x *ComponentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3538 := z.EncBinary()
		_ = yym3538
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3539 := !z.EncBinary()
			yy2arr3539 := z.EncBasicHandle().StructToArray
			var yyq3539 [4]bool
			_, _, _ = yysep3539, yyq3539, yy2arr3539
			const yyr3539 bool = false
			yyq3539[0] = x.Kind != ""
			yyq3539[1] = x.APIVersion != ""
			yyq3539[2] = true
			yyq3539[3] = len(x.Conditions) != 0
			if yyr3539 || yy2arr3539 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3539 int = 0
				for _, b := range yyq3539 {
					if b {
						yynn3539++
					}
				}
				r.EncodeMapStart(yynn3539)
			}
			if yyr3539 || yy2arr3539 {
				if yyq3539[0] {
					yym3541 := z.EncBinary()
					_ = yym3541
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3539[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3542 := z.EncBinary()
					_ = yym3542
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3539 || yy2arr3539 {
				if yyq3539[1] {
					yym3544 := z.EncBinary()
					_ = yym3544
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3539[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3545 := z.EncBinary()
					_ = yym3545
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3539 || yy2arr3539 {
				if yyq3539[2] {
					yy3547 := &x.ObjectMeta
					yy3547.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3539[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3548 := &x.ObjectMeta
					yy3548.CodecEncodeSelf(e)
				}
			}
			if yyr3539 || yy2arr3539 {
				if yyq3539[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3550 := z.EncBinary()
						_ = yym3550
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3539[3] {
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3551 := z.EncBinary()
						_ = yym3551
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yysep3539 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ComponentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3552 := z.DecBinary()
	_ = yym3552
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3553 := r.ReadMapStart()
			if yyl3553 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3553, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3553 := r.ReadArrayStart()
			if yyl3553 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3553, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3554Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3554Slc
	var yyhl3554 bool = l >= 0
	for yyj3554 := 0; ; yyj3554++ {
		if yyhl3554 {
			if yyj3554 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3554Slc = r.DecodeBytes(yys3554Slc, true, true)
		yys3554 := string(yys3554Slc)
		switch yys3554 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3557 := &x.ObjectMeta
				yyv3557.CodecDecodeSelf(d)
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv3558 := &x.Conditions
				yym3559 := z.DecBinary()
				_ = yym3559
				if false {
				} else {
					h.decSliceComponentCondition((*[]ComponentCondition)(yyv3558), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3554)
		} // end switch yys3554
	} // end for yyj3554
	if !yyhl3554 {
		r.ReadEnd()
	}
}

func (x *ComponentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3560 int
	var yyb3560 bool
	var yyhl3560 bool = l >= 0
	yyj3560++
	if yyhl3560 {
		yyb3560 = yyj3560 > l
	} else {
		yyb3560 = r.CheckBreak()
	}
	if yyb3560 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3560++
	if yyhl3560 {
		yyb3560 = yyj3560 > l
	} else {
		yyb3560 = r.CheckBreak()
	}
	if yyb3560 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3560++
	if yyhl3560 {
		yyb3560 = yyj3560 > l
	} else {
		yyb3560 = r.CheckBreak()
	}
	if yyb3560 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3563 := &x.ObjectMeta
		yyv3563.CodecDecodeSelf(d)
	}
	yyj3560++
	if yyhl3560 {
		yyb3560 = yyj3560 > l
	} else {
		yyb3560 = r.CheckBreak()
	}
	if yyb3560 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv3564 := &x.Conditions
		yym3565 := z.DecBinary()
		_ = yym3565
		if false {
		} else {
			h.decSliceComponentCondition((*[]ComponentCondition)(yyv3564), d)
		}
	}
	for {
		yyj3560++
		if yyhl3560 {
			yyb3560 = yyj3560 > l
		} else {
			yyb3560 = r.CheckBreak()
		}
		if yyb3560 {
			break
		}
		z.DecStructFieldNotFound(yyj3560-1, "")
	}
	r.ReadEnd()
}

func (x *ComponentStatusList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3566 := z.EncBinary()
		_ = yym3566
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3567 := !z.EncBinary()
			yy2arr3567 := z.EncBasicHandle().StructToArray
			var yyq3567 [4]bool
			_, _, _ = yysep3567, yyq3567, yy2arr3567
			const yyr3567 bool = false
			yyq3567[0] = x.Kind != ""
			yyq3567[1] = x.APIVersion != ""
			yyq3567[2] = true
			if yyr3567 || yy2arr3567 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3567 int = 1
				for _, b := range yyq3567 {
					if b {
						yynn3567++
					}
				}
				r.EncodeMapStart(yynn3567)
			}
			if yyr3567 || yy2arr3567 {
				if yyq3567[0] {
					yym3569 := z.EncBinary()
					_ = yym3569
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3567[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3570 := z.EncBinary()
					_ = yym3570
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3567 || yy2arr3567 {
				if yyq3567[1] {
					yym3572 := z.EncBinary()
					_ = yym3572
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3567[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3573 := z.EncBinary()
					_ = yym3573
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3567 || yy2arr3567 {
				if yyq3567[2] {
					yy3575 := &x.ListMeta
					yym3576 := z.EncBinary()
					_ = yym3576
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3575) {
					} else {
						z.EncFallback(yy3575)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3567[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3577 := &x.ListMeta
					yym3578 := z.EncBinary()
					_ = yym3578
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3577) {
					} else {
						z.EncFallback(yy3577)
					}
				}
			}
			if yyr3567 || yy2arr3567 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3580 := z.EncBinary()
					_ = yym3580
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3581 := z.EncBinary()
					_ = yym3581
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			}
			if yysep3567 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ComponentStatusList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3582 := z.DecBinary()
	_ = yym3582
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3583 := r.ReadMapStart()
			if yyl3583 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3583, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3583 := r.ReadArrayStart()
			if yyl3583 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3583, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatusList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3584Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3584Slc
	var yyhl3584 bool = l >= 0
	for yyj3584 := 0; ; yyj3584++ {
		if yyhl3584 {
			if yyj3584 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3584Slc = r.DecodeBytes(yys3584Slc, true, true)
		yys3584 := string(yys3584Slc)
		switch yys3584 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3587 := &x.ListMeta
				yym3588 := z.DecBinary()
				_ = yym3588
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3587) {
				} else {
					z.DecFallback(yyv3587, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3589 := &x.Items
				yym3590 := z.DecBinary()
				_ = yym3590
				if false {
				} else {
					h.decSliceComponentStatus((*[]ComponentStatus)(yyv3589), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3584)
		} // end switch yys3584
	} // end for yyj3584
	if !yyhl3584 {
		r.ReadEnd()
	}
}

func (x *ComponentStatusList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3591 int
	var yyb3591 bool
	var yyhl3591 bool = l >= 0
	yyj3591++
	if yyhl3591 {
		yyb3591 = yyj3591 > l
	} else {
		yyb3591 = r.CheckBreak()
	}
	if yyb3591 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3591++
	if yyhl3591 {
		yyb3591 = yyj3591 > l
	} else {
		yyb3591 = r.CheckBreak()
	}
	if yyb3591 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3591++
	if yyhl3591 {
		yyb3591 = yyj3591 > l
	} else {
		yyb3591 = r.CheckBreak()
	}
	if yyb3591 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3594 := &x.ListMeta
		yym3595 := z.DecBinary()
		_ = yym3595
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3594) {
		} else {
			z.DecFallback(yyv3594, false)
		}
	}
	yyj3591++
	if yyhl3591 {
		yyb3591 = yyj3591 > l
	} else {
		yyb3591 = r.CheckBreak()
	}
	if yyb3591 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3596 := &x.Items
		yym3597 := z.DecBinary()
		_ = yym3597
		if false {
		} else {
			h.decSliceComponentStatus((*[]ComponentStatus)(yyv3596), d)
		}
	}
	for {
		yyj3591++
		if yyhl3591 {
			yyb3591 = yyj3591 > l
		} else {
			yyb3591 = r.CheckBreak()
		}
		if yyb3591 {
			break
		}
		z.DecStructFieldNotFound(yyj3591-1, "")
	}
	r.ReadEnd()
}

func (x *SecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3598 := z.EncBinary()
		_ = yym3598
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3599 := !z.EncBinary()
			yy2arr3599 := z.EncBasicHandle().StructToArray
			var yyq3599 [5]bool
			_, _, _ = yysep3599, yyq3599, yy2arr3599
			const yyr3599 bool = false
			yyq3599[0] = x.Capabilities != nil
			yyq3599[1] = x.Privileged != nil
			yyq3599[2] = x.SELinuxOptions != nil
			yyq3599[3] = x.RunAsUser != nil
			yyq3599[4] = x.RunAsNonRoot != nil
			if yyr3599 || yy2arr3599 {
				r.EncodeArrayStart(5)
			} else {
				var yynn3599 int = 0
				for _, b := range yyq3599 {
					if b {
						yynn3599++
					}
				}
				r.EncodeMapStart(yynn3599)
			}
			if yyr3599 || yy2arr3599 {
				if yyq3599[0] {
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3599[0] {
					r.EncodeString(codecSelferC_UTF81234, string("capabilities"))
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3599 || yy2arr3599 {
				if yyq3599[1] {
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy3602 := *x.Privileged
						yym3603 := z.EncBinary()
						_ = yym3603
						if false {
						} else {
							r.EncodeBool(bool(yy3602))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3599[1] {
					r.EncodeString(codecSelferC_UTF81234, string("privileged"))
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy3604 := *x.Privileged
						yym3605 := z.EncBinary()
						_ = yym3605
						if false {
						} else {
							r.EncodeBool(bool(yy3604))
						}
					}
				}
			}
			if yyr3599 || yy2arr3599 {
				if yyq3599[2] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3599[2] {
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3599 || yy2arr3599 {
				if yyq3599[3] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy3608 := *x.RunAsUser
						yym3609 := z.EncBinary()
						_ = yym3609
						if false {
						} else {
							r.EncodeInt(int64(yy3608))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3599[3] {
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy3610 := *x.RunAsUser
						yym3611 := z.EncBinary()
						_ = yym3611
						if false {
						} else {
							r.EncodeInt(int64(yy3610))
						}
					}
				}
			}
			if yyr3599 || yy2arr3599 {
				if yyq3599[4] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy3613 := *x.RunAsNonRoot
						yym3614 := z.EncBinary()
						_ = yym3614
						if false {
						} else {
							r.EncodeBool(bool(yy3613))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3599[4] {
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy3615 := *x.RunAsNonRoot
						yym3616 := z.EncBinary()
						_ = yym3616
						if false {
						} else {
							r.EncodeBool(bool(yy3615))
						}
					}
				}
			}
			if yysep3599 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *SecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3617 := z.DecBinary()
	_ = yym3617
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3618 := r.ReadMapStart()
			if yyl3618 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3618, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3618 := r.ReadArrayStart()
			if yyl3618 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3618, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3619Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3619Slc
	var yyhl3619 bool = l >= 0
	for yyj3619 := 0; ; yyj3619++ {
		if yyhl3619 {
			if yyj3619 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3619Slc = r.DecodeBytes(yys3619Slc, true, true)
		yys3619 := string(yys3619Slc)
		switch yys3619 {
		case "capabilities":
			if r.TryDecodeAsNil() {
				if x.Capabilities != nil {
					x.Capabilities = nil
				}
			} else {
				if x.Capabilities == nil {
					x.Capabilities = new(Capabilities)
				}
				x.Capabilities.CodecDecodeSelf(d)
			}
		case "privileged":
			if r.TryDecodeAsNil() {
				if x.Privileged != nil {
					x.Privileged = nil
				}
			} else {
				if x.Privileged == nil {
					x.Privileged = new(bool)
				}
				yym3622 := z.DecBinary()
				_ = yym3622
				if false {
				} else {
					*((*bool)(x.Privileged)) = r.DecodeBool()
				}
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym3625 := z.DecBinary()
				_ = yym3625
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym3627 := z.DecBinary()
				_ = yym3627
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3619)
		} // end switch yys3619
	} // end for yyj3619
	if !yyhl3619 {
		r.ReadEnd()
	}
}

func (x *SecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3628 int
	var yyb3628 bool
	var yyhl3628 bool = l >= 0
	yyj3628++
	if yyhl3628 {
		yyb3628 = yyj3628 > l
	} else {
		yyb3628 = r.CheckBreak()
	}
	if yyb3628 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Capabilities != nil {
			x.Capabilities = nil
		}
	} else {
		if x.Capabilities == nil {
			x.Capabilities = new(Capabilities)
		}
		x.Capabilities.CodecDecodeSelf(d)
	}
	yyj3628++
	if yyhl3628 {
		yyb3628 = yyj3628 > l
	} else {
		yyb3628 = r.CheckBreak()
	}
	if yyb3628 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Privileged != nil {
			x.Privileged = nil
		}
	} else {
		if x.Privileged == nil {
			x.Privileged = new(bool)
		}
		yym3631 := z.DecBinary()
		_ = yym3631
		if false {
		} else {
			*((*bool)(x.Privileged)) = r.DecodeBool()
		}
	}
	yyj3628++
	if yyhl3628 {
		yyb3628 = yyj3628 > l
	} else {
		yyb3628 = r.CheckBreak()
	}
	if yyb3628 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj3628++
	if yyhl3628 {
		yyb3628 = yyj3628 > l
	} else {
		yyb3628 = r.CheckBreak()
	}
	if yyb3628 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym3634 := z.DecBinary()
		_ = yym3634
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj3628++
	if yyhl3628 {
		yyb3628 = yyj3628 > l
	} else {
		yyb3628 = r.CheckBreak()
	}
	if yyb3628 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym3636 := z.DecBinary()
		_ = yym3636
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	for {
		yyj3628++
		if yyhl3628 {
			yyb3628 = yyj3628 > l
		} else {
			yyb3628 = r.CheckBreak()
		}
		if yyb3628 {
			break
		}
		z.DecStructFieldNotFound(yyj3628-1, "")
	}
	r.ReadEnd()
}

func (x *SELinuxOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3637 := z.EncBinary()
		_ = yym3637
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3638 := !z.EncBinary()
			yy2arr3638 := z.EncBasicHandle().StructToArray
			var yyq3638 [4]bool
			_, _, _ = yysep3638, yyq3638, yy2arr3638
			const yyr3638 bool = false
			yyq3638[0] = x.User != ""
			yyq3638[1] = x.Role != ""
			yyq3638[2] = x.Type != ""
			yyq3638[3] = x.Level != ""
			if yyr3638 || yy2arr3638 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3638 int = 0
				for _, b := range yyq3638 {
					if b {
						yynn3638++
					}
				}
				r.EncodeMapStart(yynn3638)
			}
			if yyr3638 || yy2arr3638 {
				if yyq3638[0] {
					yym3640 := z.EncBinary()
					_ = yym3640
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3638[0] {
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					yym3641 := z.EncBinary()
					_ = yym3641
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr3638 || yy2arr3638 {
				if yyq3638[1] {
					yym3643 := z.EncBinary()
					_ = yym3643
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3638[1] {
					r.EncodeString(codecSelferC_UTF81234, string("role"))
					yym3644 := z.EncBinary()
					_ = yym3644
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				}
			}
			if yyr3638 || yy2arr3638 {
				if yyq3638[2] {
					yym3646 := z.EncBinary()
					_ = yym3646
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3638[2] {
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					yym3647 := z.EncBinary()
					_ = yym3647
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr3638 || yy2arr3638 {
				if yyq3638[3] {
					yym3649 := z.EncBinary()
					_ = yym3649
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3638[3] {
					r.EncodeString(codecSelferC_UTF81234, string("level"))
					yym3650 := z.EncBinary()
					_ = yym3650
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				}
			}
			if yysep3638 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *SELinuxOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3651 := z.DecBinary()
	_ = yym3651
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3652 := r.ReadMapStart()
			if yyl3652 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3652, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3652 := r.ReadArrayStart()
			if yyl3652 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3652, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SELinuxOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3653Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3653Slc
	var yyhl3653 bool = l >= 0
	for yyj3653 := 0; ; yyj3653++ {
		if yyhl3653 {
			if yyj3653 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3653Slc = r.DecodeBytes(yys3653Slc, true, true)
		yys3653 := string(yys3653Slc)
		switch yys3653 {
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "role":
			if r.TryDecodeAsNil() {
				x.Role = ""
			} else {
				x.Role = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		case "level":
			if r.TryDecodeAsNil() {
				x.Level = ""
			} else {
				x.Level = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3653)
		} // end switch yys3653
	} // end for yyj3653
	if !yyhl3653 {
		r.ReadEnd()
	}
}

func (x *SELinuxOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3658 int
	var yyb3658 bool
	var yyhl3658 bool = l >= 0
	yyj3658++
	if yyhl3658 {
		yyb3658 = yyj3658 > l
	} else {
		yyb3658 = r.CheckBreak()
	}
	if yyb3658 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj3658++
	if yyhl3658 {
		yyb3658 = yyj3658 > l
	} else {
		yyb3658 = r.CheckBreak()
	}
	if yyb3658 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Role = ""
	} else {
		x.Role = string(r.DecodeString())
	}
	yyj3658++
	if yyhl3658 {
		yyb3658 = yyj3658 > l
	} else {
		yyb3658 = r.CheckBreak()
	}
	if yyb3658 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	yyj3658++
	if yyhl3658 {
		yyb3658 = yyj3658 > l
	} else {
		yyb3658 = r.CheckBreak()
	}
	if yyb3658 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Level = ""
	} else {
		x.Level = string(r.DecodeString())
	}
	for {
		yyj3658++
		if yyhl3658 {
			yyb3658 = yyj3658 > l
		} else {
			yyb3658 = r.CheckBreak()
		}
		if yyb3658 {
			break
		}
		z.DecStructFieldNotFound(yyj3658-1, "")
	}
	r.ReadEnd()
}

func (x *RangeAllocation) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3663 := z.EncBinary()
		_ = yym3663
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3664 := !z.EncBinary()
			yy2arr3664 := z.EncBasicHandle().StructToArray
			var yyq3664 [5]bool
			_, _, _ = yysep3664, yyq3664, yy2arr3664
			const yyr3664 bool = false
			yyq3664[0] = x.Kind != ""
			yyq3664[1] = x.APIVersion != ""
			yyq3664[2] = true
			if yyr3664 || yy2arr3664 {
				r.EncodeArrayStart(5)
			} else {
				var yynn3664 int = 2
				for _, b := range yyq3664 {
					if b {
						yynn3664++
					}
				}
				r.EncodeMapStart(yynn3664)
			}
			if yyr3664 || yy2arr3664 {
				if yyq3664[0] {
					yym3666 := z.EncBinary()
					_ = yym3666
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3664[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3667 := z.EncBinary()
					_ = yym3667
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3664 || yy2arr3664 {
				if yyq3664[1] {
					yym3669 := z.EncBinary()
					_ = yym3669
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3664[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3670 := z.EncBinary()
					_ = yym3670
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3664 || yy2arr3664 {
				if yyq3664[2] {
					yy3672 := &x.ObjectMeta
					yy3672.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3664[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3673 := &x.ObjectMeta
					yy3673.CodecEncodeSelf(e)
				}
			}
			if yyr3664 || yy2arr3664 {
				yym3675 := z.EncBinary()
				_ = yym3675
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("range"))
				yym3676 := z.EncBinary()
				_ = yym3676
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			}
			if yyr3664 || yy2arr3664 {
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym3678 := z.EncBinary()
					_ = yym3678
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("data"))
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym3679 := z.EncBinary()
					_ = yym3679
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			}
			if yysep3664 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *RangeAllocation) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3680 := z.DecBinary()
	_ = yym3680
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3681 := r.ReadMapStart()
			if yyl3681 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3681, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3681 := r.ReadArrayStart()
			if yyl3681 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3681, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RangeAllocation) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3682Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3682Slc
	var yyhl3682 bool = l >= 0
	for yyj3682 := 0; ; yyj3682++ {
		if yyhl3682 {
			if yyj3682 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3682Slc = r.DecodeBytes(yys3682Slc, true, true)
		yys3682 := string(yys3682Slc)
		switch yys3682 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3685 := &x.ObjectMeta
				yyv3685.CodecDecodeSelf(d)
			}
		case "range":
			if r.TryDecodeAsNil() {
				x.Range = ""
			} else {
				x.Range = string(r.DecodeString())
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv3687 := &x.Data
				yym3688 := z.DecBinary()
				_ = yym3688
				if false {
				} else {
					*yyv3687 = r.DecodeBytes(*(*[]byte)(yyv3687), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3682)
		} // end switch yys3682
	} // end for yyj3682
	if !yyhl3682 {
		r.ReadEnd()
	}
}

func (x *RangeAllocation) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3689 int
	var yyb3689 bool
	var yyhl3689 bool = l >= 0
	yyj3689++
	if yyhl3689 {
		yyb3689 = yyj3689 > l
	} else {
		yyb3689 = r.CheckBreak()
	}
	if yyb3689 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3689++
	if yyhl3689 {
		yyb3689 = yyj3689 > l
	} else {
		yyb3689 = r.CheckBreak()
	}
	if yyb3689 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3689++
	if yyhl3689 {
		yyb3689 = yyj3689 > l
	} else {
		yyb3689 = r.CheckBreak()
	}
	if yyb3689 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3692 := &x.ObjectMeta
		yyv3692.CodecDecodeSelf(d)
	}
	yyj3689++
	if yyhl3689 {
		yyb3689 = yyj3689 > l
	} else {
		yyb3689 = r.CheckBreak()
	}
	if yyb3689 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Range = ""
	} else {
		x.Range = string(r.DecodeString())
	}
	yyj3689++
	if yyhl3689 {
		yyb3689 = yyj3689 > l
	} else {
		yyb3689 = r.CheckBreak()
	}
	if yyb3689 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv3694 := &x.Data
		yym3695 := z.DecBinary()
		_ = yym3695
		if false {
		} else {
			*yyv3694 = r.DecodeBytes(*(*[]byte)(yyv3694), false, false)
		}
	}
	for {
		yyj3689++
		if yyhl3689 {
			yyb3689 = yyj3689 > l
		} else {
			yyb3689 = r.CheckBreak()
		}
		if yyb3689 {
			break
		}
		z.DecStructFieldNotFound(yyj3689-1, "")
	}
	r.ReadEnd()
}

func (x codecSelfer1234) encSlicePersistentVolumeAccessMode(v []PersistentVolumeAccessMode, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3696 := range v {
		yyv3696.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePersistentVolumeAccessMode(v *[]PersistentVolumeAccessMode, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3697 := *v
	yyh3697, yyl3697 := z.DecSliceHelperStart()

	var yyrr3697, yyrl3697 int
	var yyc3697, yyrt3697 bool
	_, _, _ = yyc3697, yyrt3697, yyrl3697
	yyrr3697 = yyl3697

	if yyv3697 == nil {
		if yyrl3697, yyrt3697 = z.DecInferLen(yyl3697, z.DecBasicHandle().MaxInitLen, 16); yyrt3697 {
			yyrr3697 = yyrl3697
		}
		yyv3697 = make([]PersistentVolumeAccessMode, yyrl3697)
		yyc3697 = true
	}

	if yyl3697 == 0 {
		if len(yyv3697) != 0 {
			yyv3697 = yyv3697[:0]
			yyc3697 = true
		}
	} else if yyl3697 > 0 {

		if yyl3697 > cap(yyv3697) {
			yyrl3697, yyrt3697 = z.DecInferLen(yyl3697, z.DecBasicHandle().MaxInitLen, 16)

			yyv23697 := yyv3697
			yyv3697 = make([]PersistentVolumeAccessMode, yyrl3697)
			if len(yyv3697) > 0 {
				copy(yyv3697, yyv23697[:cap(yyv23697)])
			}
			yyc3697 = true

			yyrr3697 = len(yyv3697)
		} else if yyl3697 != len(yyv3697) {
			yyv3697 = yyv3697[:yyl3697]
			yyc3697 = true
		}
		yyj3697 := 0
		for ; yyj3697 < yyrr3697; yyj3697++ {
			if r.TryDecodeAsNil() {
				yyv3697[yyj3697] = ""
			} else {
				yyv3697[yyj3697] = PersistentVolumeAccessMode(r.DecodeString())
			}

		}
		if yyrt3697 {
			for ; yyj3697 < yyl3697; yyj3697++ {
				yyv3697 = append(yyv3697, "")
				if r.TryDecodeAsNil() {
					yyv3697[yyj3697] = ""
				} else {
					yyv3697[yyj3697] = PersistentVolumeAccessMode(r.DecodeString())
				}

			}
		}

	} else {
		for yyj3697 := 0; !r.CheckBreak(); yyj3697++ {
			if yyj3697 >= len(yyv3697) {
				yyv3697 = append(yyv3697, "") // var yyz3697 PersistentVolumeAccessMode
				yyc3697 = true
			}

			if yyj3697 < len(yyv3697) {
				if r.TryDecodeAsNil() {
					yyv3697[yyj3697] = ""
				} else {
					yyv3697[yyj3697] = PersistentVolumeAccessMode(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3697.End()
	}
	if yyc3697 {
		*v = yyv3697
	}

}

func (x codecSelfer1234) encSlicePersistentVolume(v []PersistentVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3701 := range v {
		yy3702 := &yyv3701
		yy3702.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePersistentVolume(v *[]PersistentVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3703 := *v
	yyh3703, yyl3703 := z.DecSliceHelperStart()

	var yyrr3703, yyrl3703 int
	var yyc3703, yyrt3703 bool
	_, _, _ = yyc3703, yyrt3703, yyrl3703
	yyrr3703 = yyl3703

	if yyv3703 == nil {
		if yyrl3703, yyrt3703 = z.DecInferLen(yyl3703, z.DecBasicHandle().MaxInitLen, 400); yyrt3703 {
			yyrr3703 = yyrl3703
		}
		yyv3703 = make([]PersistentVolume, yyrl3703)
		yyc3703 = true
	}

	if yyl3703 == 0 {
		if len(yyv3703) != 0 {
			yyv3703 = yyv3703[:0]
			yyc3703 = true
		}
	} else if yyl3703 > 0 {

		if yyl3703 > cap(yyv3703) {
			yyrl3703, yyrt3703 = z.DecInferLen(yyl3703, z.DecBasicHandle().MaxInitLen, 400)
			yyv3703 = make([]PersistentVolume, yyrl3703)
			yyc3703 = true

			yyrr3703 = len(yyv3703)
		} else if yyl3703 != len(yyv3703) {
			yyv3703 = yyv3703[:yyl3703]
			yyc3703 = true
		}
		yyj3703 := 0
		for ; yyj3703 < yyrr3703; yyj3703++ {
			if r.TryDecodeAsNil() {
				yyv3703[yyj3703] = PersistentVolume{}
			} else {
				yyv3704 := &yyv3703[yyj3703]
				yyv3704.CodecDecodeSelf(d)
			}

		}
		if yyrt3703 {
			for ; yyj3703 < yyl3703; yyj3703++ {
				yyv3703 = append(yyv3703, PersistentVolume{})
				if r.TryDecodeAsNil() {
					yyv3703[yyj3703] = PersistentVolume{}
				} else {
					yyv3705 := &yyv3703[yyj3703]
					yyv3705.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3703 := 0; !r.CheckBreak(); yyj3703++ {
			if yyj3703 >= len(yyv3703) {
				yyv3703 = append(yyv3703, PersistentVolume{}) // var yyz3703 PersistentVolume
				yyc3703 = true
			}

			if yyj3703 < len(yyv3703) {
				if r.TryDecodeAsNil() {
					yyv3703[yyj3703] = PersistentVolume{}
				} else {
					yyv3706 := &yyv3703[yyj3703]
					yyv3706.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3703.End()
	}
	if yyc3703 {
		*v = yyv3703
	}

}

func (x codecSelfer1234) encSlicePersistentVolumeClaim(v []PersistentVolumeClaim, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3707 := range v {
		yy3708 := &yyv3707
		yy3708.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePersistentVolumeClaim(v *[]PersistentVolumeClaim, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3709 := *v
	yyh3709, yyl3709 := z.DecSliceHelperStart()

	var yyrr3709, yyrl3709 int
	var yyc3709, yyrt3709 bool
	_, _, _ = yyc3709, yyrt3709, yyrl3709
	yyrr3709 = yyl3709

	if yyv3709 == nil {
		if yyrl3709, yyrt3709 = z.DecInferLen(yyl3709, z.DecBasicHandle().MaxInitLen, 312); yyrt3709 {
			yyrr3709 = yyrl3709
		}
		yyv3709 = make([]PersistentVolumeClaim, yyrl3709)
		yyc3709 = true
	}

	if yyl3709 == 0 {
		if len(yyv3709) != 0 {
			yyv3709 = yyv3709[:0]
			yyc3709 = true
		}
	} else if yyl3709 > 0 {

		if yyl3709 > cap(yyv3709) {
			yyrl3709, yyrt3709 = z.DecInferLen(yyl3709, z.DecBasicHandle().MaxInitLen, 312)
			yyv3709 = make([]PersistentVolumeClaim, yyrl3709)
			yyc3709 = true

			yyrr3709 = len(yyv3709)
		} else if yyl3709 != len(yyv3709) {
			yyv3709 = yyv3709[:yyl3709]
			yyc3709 = true
		}
		yyj3709 := 0
		for ; yyj3709 < yyrr3709; yyj3709++ {
			if r.TryDecodeAsNil() {
				yyv3709[yyj3709] = PersistentVolumeClaim{}
			} else {
				yyv3710 := &yyv3709[yyj3709]
				yyv3710.CodecDecodeSelf(d)
			}

		}
		if yyrt3709 {
			for ; yyj3709 < yyl3709; yyj3709++ {
				yyv3709 = append(yyv3709, PersistentVolumeClaim{})
				if r.TryDecodeAsNil() {
					yyv3709[yyj3709] = PersistentVolumeClaim{}
				} else {
					yyv3711 := &yyv3709[yyj3709]
					yyv3711.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3709 := 0; !r.CheckBreak(); yyj3709++ {
			if yyj3709 >= len(yyv3709) {
				yyv3709 = append(yyv3709, PersistentVolumeClaim{}) // var yyz3709 PersistentVolumeClaim
				yyc3709 = true
			}

			if yyj3709 < len(yyv3709) {
				if r.TryDecodeAsNil() {
					yyv3709[yyj3709] = PersistentVolumeClaim{}
				} else {
					yyv3712 := &yyv3709[yyj3709]
					yyv3712.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3709.End()
	}
	if yyc3709 {
		*v = yyv3709
	}

}

func (x codecSelfer1234) encSliceDownwardAPIVolumeFile(v []DownwardAPIVolumeFile, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3713 := range v {
		yy3714 := &yyv3713
		yy3714.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceDownwardAPIVolumeFile(v *[]DownwardAPIVolumeFile, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3715 := *v
	yyh3715, yyl3715 := z.DecSliceHelperStart()

	var yyrr3715, yyrl3715 int
	var yyc3715, yyrt3715 bool
	_, _, _ = yyc3715, yyrt3715, yyrl3715
	yyrr3715 = yyl3715

	if yyv3715 == nil {
		if yyrl3715, yyrt3715 = z.DecInferLen(yyl3715, z.DecBasicHandle().MaxInitLen, 48); yyrt3715 {
			yyrr3715 = yyrl3715
		}
		yyv3715 = make([]DownwardAPIVolumeFile, yyrl3715)
		yyc3715 = true
	}

	if yyl3715 == 0 {
		if len(yyv3715) != 0 {
			yyv3715 = yyv3715[:0]
			yyc3715 = true
		}
	} else if yyl3715 > 0 {

		if yyl3715 > cap(yyv3715) {
			yyrl3715, yyrt3715 = z.DecInferLen(yyl3715, z.DecBasicHandle().MaxInitLen, 48)
			yyv3715 = make([]DownwardAPIVolumeFile, yyrl3715)
			yyc3715 = true

			yyrr3715 = len(yyv3715)
		} else if yyl3715 != len(yyv3715) {
			yyv3715 = yyv3715[:yyl3715]
			yyc3715 = true
		}
		yyj3715 := 0
		for ; yyj3715 < yyrr3715; yyj3715++ {
			if r.TryDecodeAsNil() {
				yyv3715[yyj3715] = DownwardAPIVolumeFile{}
			} else {
				yyv3716 := &yyv3715[yyj3715]
				yyv3716.CodecDecodeSelf(d)
			}

		}
		if yyrt3715 {
			for ; yyj3715 < yyl3715; yyj3715++ {
				yyv3715 = append(yyv3715, DownwardAPIVolumeFile{})
				if r.TryDecodeAsNil() {
					yyv3715[yyj3715] = DownwardAPIVolumeFile{}
				} else {
					yyv3717 := &yyv3715[yyj3715]
					yyv3717.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3715 := 0; !r.CheckBreak(); yyj3715++ {
			if yyj3715 >= len(yyv3715) {
				yyv3715 = append(yyv3715, DownwardAPIVolumeFile{}) // var yyz3715 DownwardAPIVolumeFile
				yyc3715 = true
			}

			if yyj3715 < len(yyv3715) {
				if r.TryDecodeAsNil() {
					yyv3715[yyj3715] = DownwardAPIVolumeFile{}
				} else {
					yyv3718 := &yyv3715[yyj3715]
					yyv3718.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3715.End()
	}
	if yyc3715 {
		*v = yyv3715
	}

}

func (x codecSelfer1234) encSliceCapability(v []Capability, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3719 := range v {
		yyv3719.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceCapability(v *[]Capability, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3720 := *v
	yyh3720, yyl3720 := z.DecSliceHelperStart()

	var yyrr3720, yyrl3720 int
	var yyc3720, yyrt3720 bool
	_, _, _ = yyc3720, yyrt3720, yyrl3720
	yyrr3720 = yyl3720

	if yyv3720 == nil {
		if yyrl3720, yyrt3720 = z.DecInferLen(yyl3720, z.DecBasicHandle().MaxInitLen, 16); yyrt3720 {
			yyrr3720 = yyrl3720
		}
		yyv3720 = make([]Capability, yyrl3720)
		yyc3720 = true
	}

	if yyl3720 == 0 {
		if len(yyv3720) != 0 {
			yyv3720 = yyv3720[:0]
			yyc3720 = true
		}
	} else if yyl3720 > 0 {

		if yyl3720 > cap(yyv3720) {
			yyrl3720, yyrt3720 = z.DecInferLen(yyl3720, z.DecBasicHandle().MaxInitLen, 16)

			yyv23720 := yyv3720
			yyv3720 = make([]Capability, yyrl3720)
			if len(yyv3720) > 0 {
				copy(yyv3720, yyv23720[:cap(yyv23720)])
			}
			yyc3720 = true

			yyrr3720 = len(yyv3720)
		} else if yyl3720 != len(yyv3720) {
			yyv3720 = yyv3720[:yyl3720]
			yyc3720 = true
		}
		yyj3720 := 0
		for ; yyj3720 < yyrr3720; yyj3720++ {
			if r.TryDecodeAsNil() {
				yyv3720[yyj3720] = ""
			} else {
				yyv3720[yyj3720] = Capability(r.DecodeString())
			}

		}
		if yyrt3720 {
			for ; yyj3720 < yyl3720; yyj3720++ {
				yyv3720 = append(yyv3720, "")
				if r.TryDecodeAsNil() {
					yyv3720[yyj3720] = ""
				} else {
					yyv3720[yyj3720] = Capability(r.DecodeString())
				}

			}
		}

	} else {
		for yyj3720 := 0; !r.CheckBreak(); yyj3720++ {
			if yyj3720 >= len(yyv3720) {
				yyv3720 = append(yyv3720, "") // var yyz3720 Capability
				yyc3720 = true
			}

			if yyj3720 < len(yyv3720) {
				if r.TryDecodeAsNil() {
					yyv3720[yyj3720] = ""
				} else {
					yyv3720[yyj3720] = Capability(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3720.End()
	}
	if yyc3720 {
		*v = yyv3720
	}

}

func (x codecSelfer1234) encSliceContainerPort(v []ContainerPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3724 := range v {
		yy3725 := &yyv3724
		yy3725.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceContainerPort(v *[]ContainerPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3726 := *v
	yyh3726, yyl3726 := z.DecSliceHelperStart()

	var yyrr3726, yyrl3726 int
	var yyc3726, yyrt3726 bool
	_, _, _ = yyc3726, yyrt3726, yyrl3726
	yyrr3726 = yyl3726

	if yyv3726 == nil {
		if yyrl3726, yyrt3726 = z.DecInferLen(yyl3726, z.DecBasicHandle().MaxInitLen, 64); yyrt3726 {
			yyrr3726 = yyrl3726
		}
		yyv3726 = make([]ContainerPort, yyrl3726)
		yyc3726 = true
	}

	if yyl3726 == 0 {
		if len(yyv3726) != 0 {
			yyv3726 = yyv3726[:0]
			yyc3726 = true
		}
	} else if yyl3726 > 0 {

		if yyl3726 > cap(yyv3726) {
			yyrl3726, yyrt3726 = z.DecInferLen(yyl3726, z.DecBasicHandle().MaxInitLen, 64)
			yyv3726 = make([]ContainerPort, yyrl3726)
			yyc3726 = true

			yyrr3726 = len(yyv3726)
		} else if yyl3726 != len(yyv3726) {
			yyv3726 = yyv3726[:yyl3726]
			yyc3726 = true
		}
		yyj3726 := 0
		for ; yyj3726 < yyrr3726; yyj3726++ {
			if r.TryDecodeAsNil() {
				yyv3726[yyj3726] = ContainerPort{}
			} else {
				yyv3727 := &yyv3726[yyj3726]
				yyv3727.CodecDecodeSelf(d)
			}

		}
		if yyrt3726 {
			for ; yyj3726 < yyl3726; yyj3726++ {
				yyv3726 = append(yyv3726, ContainerPort{})
				if r.TryDecodeAsNil() {
					yyv3726[yyj3726] = ContainerPort{}
				} else {
					yyv3728 := &yyv3726[yyj3726]
					yyv3728.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3726 := 0; !r.CheckBreak(); yyj3726++ {
			if yyj3726 >= len(yyv3726) {
				yyv3726 = append(yyv3726, ContainerPort{}) // var yyz3726 ContainerPort
				yyc3726 = true
			}

			if yyj3726 < len(yyv3726) {
				if r.TryDecodeAsNil() {
					yyv3726[yyj3726] = ContainerPort{}
				} else {
					yyv3729 := &yyv3726[yyj3726]
					yyv3729.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3726.End()
	}
	if yyc3726 {
		*v = yyv3726
	}

}

func (x codecSelfer1234) encSliceEnvVar(v []EnvVar, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3730 := range v {
		yy3731 := &yyv3730
		yy3731.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEnvVar(v *[]EnvVar, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3732 := *v
	yyh3732, yyl3732 := z.DecSliceHelperStart()

	var yyrr3732, yyrl3732 int
	var yyc3732, yyrt3732 bool
	_, _, _ = yyc3732, yyrt3732, yyrl3732
	yyrr3732 = yyl3732

	if yyv3732 == nil {
		if yyrl3732, yyrt3732 = z.DecInferLen(yyl3732, z.DecBasicHandle().MaxInitLen, 40); yyrt3732 {
			yyrr3732 = yyrl3732
		}
		yyv3732 = make([]EnvVar, yyrl3732)
		yyc3732 = true
	}

	if yyl3732 == 0 {
		if len(yyv3732) != 0 {
			yyv3732 = yyv3732[:0]
			yyc3732 = true
		}
	} else if yyl3732 > 0 {

		if yyl3732 > cap(yyv3732) {
			yyrl3732, yyrt3732 = z.DecInferLen(yyl3732, z.DecBasicHandle().MaxInitLen, 40)
			yyv3732 = make([]EnvVar, yyrl3732)
			yyc3732 = true

			yyrr3732 = len(yyv3732)
		} else if yyl3732 != len(yyv3732) {
			yyv3732 = yyv3732[:yyl3732]
			yyc3732 = true
		}
		yyj3732 := 0
		for ; yyj3732 < yyrr3732; yyj3732++ {
			if r.TryDecodeAsNil() {
				yyv3732[yyj3732] = EnvVar{}
			} else {
				yyv3733 := &yyv3732[yyj3732]
				yyv3733.CodecDecodeSelf(d)
			}

		}
		if yyrt3732 {
			for ; yyj3732 < yyl3732; yyj3732++ {
				yyv3732 = append(yyv3732, EnvVar{})
				if r.TryDecodeAsNil() {
					yyv3732[yyj3732] = EnvVar{}
				} else {
					yyv3734 := &yyv3732[yyj3732]
					yyv3734.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3732 := 0; !r.CheckBreak(); yyj3732++ {
			if yyj3732 >= len(yyv3732) {
				yyv3732 = append(yyv3732, EnvVar{}) // var yyz3732 EnvVar
				yyc3732 = true
			}

			if yyj3732 < len(yyv3732) {
				if r.TryDecodeAsNil() {
					yyv3732[yyj3732] = EnvVar{}
				} else {
					yyv3735 := &yyv3732[yyj3732]
					yyv3735.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3732.End()
	}
	if yyc3732 {
		*v = yyv3732
	}

}

func (x codecSelfer1234) encSliceVolumeMount(v []VolumeMount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3736 := range v {
		yy3737 := &yyv3736
		yy3737.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceVolumeMount(v *[]VolumeMount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3738 := *v
	yyh3738, yyl3738 := z.DecSliceHelperStart()

	var yyrr3738, yyrl3738 int
	var yyc3738, yyrt3738 bool
	_, _, _ = yyc3738, yyrt3738, yyrl3738
	yyrr3738 = yyl3738

	if yyv3738 == nil {
		if yyrl3738, yyrt3738 = z.DecInferLen(yyl3738, z.DecBasicHandle().MaxInitLen, 40); yyrt3738 {
			yyrr3738 = yyrl3738
		}
		yyv3738 = make([]VolumeMount, yyrl3738)
		yyc3738 = true
	}

	if yyl3738 == 0 {
		if len(yyv3738) != 0 {
			yyv3738 = yyv3738[:0]
			yyc3738 = true
		}
	} else if yyl3738 > 0 {

		if yyl3738 > cap(yyv3738) {
			yyrl3738, yyrt3738 = z.DecInferLen(yyl3738, z.DecBasicHandle().MaxInitLen, 40)
			yyv3738 = make([]VolumeMount, yyrl3738)
			yyc3738 = true

			yyrr3738 = len(yyv3738)
		} else if yyl3738 != len(yyv3738) {
			yyv3738 = yyv3738[:yyl3738]
			yyc3738 = true
		}
		yyj3738 := 0
		for ; yyj3738 < yyrr3738; yyj3738++ {
			if r.TryDecodeAsNil() {
				yyv3738[yyj3738] = VolumeMount{}
			} else {
				yyv3739 := &yyv3738[yyj3738]
				yyv3739.CodecDecodeSelf(d)
			}

		}
		if yyrt3738 {
			for ; yyj3738 < yyl3738; yyj3738++ {
				yyv3738 = append(yyv3738, VolumeMount{})
				if r.TryDecodeAsNil() {
					yyv3738[yyj3738] = VolumeMount{}
				} else {
					yyv3740 := &yyv3738[yyj3738]
					yyv3740.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3738 := 0; !r.CheckBreak(); yyj3738++ {
			if yyj3738 >= len(yyv3738) {
				yyv3738 = append(yyv3738, VolumeMount{}) // var yyz3738 VolumeMount
				yyc3738 = true
			}

			if yyj3738 < len(yyv3738) {
				if r.TryDecodeAsNil() {
					yyv3738[yyj3738] = VolumeMount{}
				} else {
					yyv3741 := &yyv3738[yyj3738]
					yyv3741.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3738.End()
	}
	if yyc3738 {
		*v = yyv3738
	}

}

func (x codecSelfer1234) encSlicePod(v []Pod, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3742 := range v {
		yy3743 := &yyv3742
		yy3743.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePod(v *[]Pod, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3744 := *v
	yyh3744, yyl3744 := z.DecSliceHelperStart()

	var yyrr3744, yyrl3744 int
	var yyc3744, yyrt3744 bool
	_, _, _ = yyc3744, yyrt3744, yyrl3744
	yyrr3744 = yyl3744

	if yyv3744 == nil {
		if yyrl3744, yyrt3744 = z.DecInferLen(yyl3744, z.DecBasicHandle().MaxInitLen, 512); yyrt3744 {
			yyrr3744 = yyrl3744
		}
		yyv3744 = make([]Pod, yyrl3744)
		yyc3744 = true
	}

	if yyl3744 == 0 {
		if len(yyv3744) != 0 {
			yyv3744 = yyv3744[:0]
			yyc3744 = true
		}
	} else if yyl3744 > 0 {

		if yyl3744 > cap(yyv3744) {
			yyrl3744, yyrt3744 = z.DecInferLen(yyl3744, z.DecBasicHandle().MaxInitLen, 512)
			yyv3744 = make([]Pod, yyrl3744)
			yyc3744 = true

			yyrr3744 = len(yyv3744)
		} else if yyl3744 != len(yyv3744) {
			yyv3744 = yyv3744[:yyl3744]
			yyc3744 = true
		}
		yyj3744 := 0
		for ; yyj3744 < yyrr3744; yyj3744++ {
			if r.TryDecodeAsNil() {
				yyv3744[yyj3744] = Pod{}
			} else {
				yyv3745 := &yyv3744[yyj3744]
				yyv3745.CodecDecodeSelf(d)
			}

		}
		if yyrt3744 {
			for ; yyj3744 < yyl3744; yyj3744++ {
				yyv3744 = append(yyv3744, Pod{})
				if r.TryDecodeAsNil() {
					yyv3744[yyj3744] = Pod{}
				} else {
					yyv3746 := &yyv3744[yyj3744]
					yyv3746.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3744 := 0; !r.CheckBreak(); yyj3744++ {
			if yyj3744 >= len(yyv3744) {
				yyv3744 = append(yyv3744, Pod{}) // var yyz3744 Pod
				yyc3744 = true
			}

			if yyj3744 < len(yyv3744) {
				if r.TryDecodeAsNil() {
					yyv3744[yyj3744] = Pod{}
				} else {
					yyv3747 := &yyv3744[yyj3744]
					yyv3747.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3744.End()
	}
	if yyc3744 {
		*v = yyv3744
	}

}

func (x codecSelfer1234) encSliceVolume(v []Volume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3748 := range v {
		yy3749 := &yyv3748
		yy3749.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceVolume(v *[]Volume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3750 := *v
	yyh3750, yyl3750 := z.DecSliceHelperStart()

	var yyrr3750, yyrl3750 int
	var yyc3750, yyrt3750 bool
	_, _, _ = yyc3750, yyrt3750, yyrl3750
	yyrr3750 = yyl3750

	if yyv3750 == nil {
		if yyrl3750, yyrt3750 = z.DecInferLen(yyl3750, z.DecBasicHandle().MaxInitLen, 144); yyrt3750 {
			yyrr3750 = yyrl3750
		}
		yyv3750 = make([]Volume, yyrl3750)
		yyc3750 = true
	}

	if yyl3750 == 0 {
		if len(yyv3750) != 0 {
			yyv3750 = yyv3750[:0]
			yyc3750 = true
		}
	} else if yyl3750 > 0 {

		if yyl3750 > cap(yyv3750) {
			yyrl3750, yyrt3750 = z.DecInferLen(yyl3750, z.DecBasicHandle().MaxInitLen, 144)
			yyv3750 = make([]Volume, yyrl3750)
			yyc3750 = true

			yyrr3750 = len(yyv3750)
		} else if yyl3750 != len(yyv3750) {
			yyv3750 = yyv3750[:yyl3750]
			yyc3750 = true
		}
		yyj3750 := 0
		for ; yyj3750 < yyrr3750; yyj3750++ {
			if r.TryDecodeAsNil() {
				yyv3750[yyj3750] = Volume{}
			} else {
				yyv3751 := &yyv3750[yyj3750]
				yyv3751.CodecDecodeSelf(d)
			}

		}
		if yyrt3750 {
			for ; yyj3750 < yyl3750; yyj3750++ {
				yyv3750 = append(yyv3750, Volume{})
				if r.TryDecodeAsNil() {
					yyv3750[yyj3750] = Volume{}
				} else {
					yyv3752 := &yyv3750[yyj3750]
					yyv3752.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3750 := 0; !r.CheckBreak(); yyj3750++ {
			if yyj3750 >= len(yyv3750) {
				yyv3750 = append(yyv3750, Volume{}) // var yyz3750 Volume
				yyc3750 = true
			}

			if yyj3750 < len(yyv3750) {
				if r.TryDecodeAsNil() {
					yyv3750[yyj3750] = Volume{}
				} else {
					yyv3753 := &yyv3750[yyj3750]
					yyv3753.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3750.End()
	}
	if yyc3750 {
		*v = yyv3750
	}

}

func (x codecSelfer1234) encSliceContainer(v []Container, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3754 := range v {
		yy3755 := &yyv3754
		yy3755.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceContainer(v *[]Container, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3756 := *v
	yyh3756, yyl3756 := z.DecSliceHelperStart()

	var yyrr3756, yyrl3756 int
	var yyc3756, yyrt3756 bool
	_, _, _ = yyc3756, yyrt3756, yyrl3756
	yyrr3756 = yyl3756

	if yyv3756 == nil {
		if yyrl3756, yyrt3756 = z.DecInferLen(yyl3756, z.DecBasicHandle().MaxInitLen, 256); yyrt3756 {
			yyrr3756 = yyrl3756
		}
		yyv3756 = make([]Container, yyrl3756)
		yyc3756 = true
	}

	if yyl3756 == 0 {
		if len(yyv3756) != 0 {
			yyv3756 = yyv3756[:0]
			yyc3756 = true
		}
	} else if yyl3756 > 0 {

		if yyl3756 > cap(yyv3756) {
			yyrl3756, yyrt3756 = z.DecInferLen(yyl3756, z.DecBasicHandle().MaxInitLen, 256)
			yyv3756 = make([]Container, yyrl3756)
			yyc3756 = true

			yyrr3756 = len(yyv3756)
		} else if yyl3756 != len(yyv3756) {
			yyv3756 = yyv3756[:yyl3756]
			yyc3756 = true
		}
		yyj3756 := 0
		for ; yyj3756 < yyrr3756; yyj3756++ {
			if r.TryDecodeAsNil() {
				yyv3756[yyj3756] = Container{}
			} else {
				yyv3757 := &yyv3756[yyj3756]
				yyv3757.CodecDecodeSelf(d)
			}

		}
		if yyrt3756 {
			for ; yyj3756 < yyl3756; yyj3756++ {
				yyv3756 = append(yyv3756, Container{})
				if r.TryDecodeAsNil() {
					yyv3756[yyj3756] = Container{}
				} else {
					yyv3758 := &yyv3756[yyj3756]
					yyv3758.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3756 := 0; !r.CheckBreak(); yyj3756++ {
			if yyj3756 >= len(yyv3756) {
				yyv3756 = append(yyv3756, Container{}) // var yyz3756 Container
				yyc3756 = true
			}

			if yyj3756 < len(yyv3756) {
				if r.TryDecodeAsNil() {
					yyv3756[yyj3756] = Container{}
				} else {
					yyv3759 := &yyv3756[yyj3756]
					yyv3759.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3756.End()
	}
	if yyc3756 {
		*v = yyv3756
	}

}

func (x codecSelfer1234) encSliceLocalObjectReference(v []LocalObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3760 := range v {
		yy3761 := &yyv3760
		yy3761.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceLocalObjectReference(v *[]LocalObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3762 := *v
	yyh3762, yyl3762 := z.DecSliceHelperStart()

	var yyrr3762, yyrl3762 int
	var yyc3762, yyrt3762 bool
	_, _, _ = yyc3762, yyrt3762, yyrl3762
	yyrr3762 = yyl3762

	if yyv3762 == nil {
		if yyrl3762, yyrt3762 = z.DecInferLen(yyl3762, z.DecBasicHandle().MaxInitLen, 16); yyrt3762 {
			yyrr3762 = yyrl3762
		}
		yyv3762 = make([]LocalObjectReference, yyrl3762)
		yyc3762 = true
	}

	if yyl3762 == 0 {
		if len(yyv3762) != 0 {
			yyv3762 = yyv3762[:0]
			yyc3762 = true
		}
	} else if yyl3762 > 0 {

		if yyl3762 > cap(yyv3762) {
			yyrl3762, yyrt3762 = z.DecInferLen(yyl3762, z.DecBasicHandle().MaxInitLen, 16)
			yyv3762 = make([]LocalObjectReference, yyrl3762)
			yyc3762 = true

			yyrr3762 = len(yyv3762)
		} else if yyl3762 != len(yyv3762) {
			yyv3762 = yyv3762[:yyl3762]
			yyc3762 = true
		}
		yyj3762 := 0
		for ; yyj3762 < yyrr3762; yyj3762++ {
			if r.TryDecodeAsNil() {
				yyv3762[yyj3762] = LocalObjectReference{}
			} else {
				yyv3763 := &yyv3762[yyj3762]
				yyv3763.CodecDecodeSelf(d)
			}

		}
		if yyrt3762 {
			for ; yyj3762 < yyl3762; yyj3762++ {
				yyv3762 = append(yyv3762, LocalObjectReference{})
				if r.TryDecodeAsNil() {
					yyv3762[yyj3762] = LocalObjectReference{}
				} else {
					yyv3764 := &yyv3762[yyj3762]
					yyv3764.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3762 := 0; !r.CheckBreak(); yyj3762++ {
			if yyj3762 >= len(yyv3762) {
				yyv3762 = append(yyv3762, LocalObjectReference{}) // var yyz3762 LocalObjectReference
				yyc3762 = true
			}

			if yyj3762 < len(yyv3762) {
				if r.TryDecodeAsNil() {
					yyv3762[yyj3762] = LocalObjectReference{}
				} else {
					yyv3765 := &yyv3762[yyj3762]
					yyv3765.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3762.End()
	}
	if yyc3762 {
		*v = yyv3762
	}

}

func (x codecSelfer1234) encSlicePodCondition(v []PodCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3766 := range v {
		yy3767 := &yyv3766
		yy3767.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePodCondition(v *[]PodCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3768 := *v
	yyh3768, yyl3768 := z.DecSliceHelperStart()

	var yyrr3768, yyrl3768 int
	var yyc3768, yyrt3768 bool
	_, _, _ = yyc3768, yyrt3768, yyrl3768
	yyrr3768 = yyl3768

	if yyv3768 == nil {
		if yyrl3768, yyrt3768 = z.DecInferLen(yyl3768, z.DecBasicHandle().MaxInitLen, 112); yyrt3768 {
			yyrr3768 = yyrl3768
		}
		yyv3768 = make([]PodCondition, yyrl3768)
		yyc3768 = true
	}

	if yyl3768 == 0 {
		if len(yyv3768) != 0 {
			yyv3768 = yyv3768[:0]
			yyc3768 = true
		}
	} else if yyl3768 > 0 {

		if yyl3768 > cap(yyv3768) {
			yyrl3768, yyrt3768 = z.DecInferLen(yyl3768, z.DecBasicHandle().MaxInitLen, 112)
			yyv3768 = make([]PodCondition, yyrl3768)
			yyc3768 = true

			yyrr3768 = len(yyv3768)
		} else if yyl3768 != len(yyv3768) {
			yyv3768 = yyv3768[:yyl3768]
			yyc3768 = true
		}
		yyj3768 := 0
		for ; yyj3768 < yyrr3768; yyj3768++ {
			if r.TryDecodeAsNil() {
				yyv3768[yyj3768] = PodCondition{}
			} else {
				yyv3769 := &yyv3768[yyj3768]
				yyv3769.CodecDecodeSelf(d)
			}

		}
		if yyrt3768 {
			for ; yyj3768 < yyl3768; yyj3768++ {
				yyv3768 = append(yyv3768, PodCondition{})
				if r.TryDecodeAsNil() {
					yyv3768[yyj3768] = PodCondition{}
				} else {
					yyv3770 := &yyv3768[yyj3768]
					yyv3770.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3768 := 0; !r.CheckBreak(); yyj3768++ {
			if yyj3768 >= len(yyv3768) {
				yyv3768 = append(yyv3768, PodCondition{}) // var yyz3768 PodCondition
				yyc3768 = true
			}

			if yyj3768 < len(yyv3768) {
				if r.TryDecodeAsNil() {
					yyv3768[yyj3768] = PodCondition{}
				} else {
					yyv3771 := &yyv3768[yyj3768]
					yyv3771.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3768.End()
	}
	if yyc3768 {
		*v = yyv3768
	}

}

func (x codecSelfer1234) encSliceContainerStatus(v []ContainerStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3772 := range v {
		yy3773 := &yyv3772
		yy3773.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceContainerStatus(v *[]ContainerStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3774 := *v
	yyh3774, yyl3774 := z.DecSliceHelperStart()

	var yyrr3774, yyrl3774 int
	var yyc3774, yyrt3774 bool
	_, _, _ = yyc3774, yyrt3774, yyrl3774
	yyrr3774 = yyl3774

	if yyv3774 == nil {
		if yyrl3774, yyrt3774 = z.DecInferLen(yyl3774, z.DecBasicHandle().MaxInitLen, 128); yyrt3774 {
			yyrr3774 = yyrl3774
		}
		yyv3774 = make([]ContainerStatus, yyrl3774)
		yyc3774 = true
	}

	if yyl3774 == 0 {
		if len(yyv3774) != 0 {
			yyv3774 = yyv3774[:0]
			yyc3774 = true
		}
	} else if yyl3774 > 0 {

		if yyl3774 > cap(yyv3774) {
			yyrl3774, yyrt3774 = z.DecInferLen(yyl3774, z.DecBasicHandle().MaxInitLen, 128)
			yyv3774 = make([]ContainerStatus, yyrl3774)
			yyc3774 = true

			yyrr3774 = len(yyv3774)
		} else if yyl3774 != len(yyv3774) {
			yyv3774 = yyv3774[:yyl3774]
			yyc3774 = true
		}
		yyj3774 := 0
		for ; yyj3774 < yyrr3774; yyj3774++ {
			if r.TryDecodeAsNil() {
				yyv3774[yyj3774] = ContainerStatus{}
			} else {
				yyv3775 := &yyv3774[yyj3774]
				yyv3775.CodecDecodeSelf(d)
			}

		}
		if yyrt3774 {
			for ; yyj3774 < yyl3774; yyj3774++ {
				yyv3774 = append(yyv3774, ContainerStatus{})
				if r.TryDecodeAsNil() {
					yyv3774[yyj3774] = ContainerStatus{}
				} else {
					yyv3776 := &yyv3774[yyj3774]
					yyv3776.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3774 := 0; !r.CheckBreak(); yyj3774++ {
			if yyj3774 >= len(yyv3774) {
				yyv3774 = append(yyv3774, ContainerStatus{}) // var yyz3774 ContainerStatus
				yyc3774 = true
			}

			if yyj3774 < len(yyv3774) {
				if r.TryDecodeAsNil() {
					yyv3774[yyj3774] = ContainerStatus{}
				} else {
					yyv3777 := &yyv3774[yyj3774]
					yyv3777.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3774.End()
	}
	if yyc3774 {
		*v = yyv3774
	}

}

func (x codecSelfer1234) encSlicePodTemplate(v []PodTemplate, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3778 := range v {
		yy3779 := &yyv3778
		yy3779.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePodTemplate(v *[]PodTemplate, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3780 := *v
	yyh3780, yyl3780 := z.DecSliceHelperStart()

	var yyrr3780, yyrl3780 int
	var yyc3780, yyrt3780 bool
	_, _, _ = yyc3780, yyrt3780, yyrl3780
	yyrr3780 = yyl3780

	if yyv3780 == nil {
		if yyrl3780, yyrt3780 = z.DecInferLen(yyl3780, z.DecBasicHandle().MaxInitLen, 552); yyrt3780 {
			yyrr3780 = yyrl3780
		}
		yyv3780 = make([]PodTemplate, yyrl3780)
		yyc3780 = true
	}

	if yyl3780 == 0 {
		if len(yyv3780) != 0 {
			yyv3780 = yyv3780[:0]
			yyc3780 = true
		}
	} else if yyl3780 > 0 {

		if yyl3780 > cap(yyv3780) {
			yyrl3780, yyrt3780 = z.DecInferLen(yyl3780, z.DecBasicHandle().MaxInitLen, 552)
			yyv3780 = make([]PodTemplate, yyrl3780)
			yyc3780 = true

			yyrr3780 = len(yyv3780)
		} else if yyl3780 != len(yyv3780) {
			yyv3780 = yyv3780[:yyl3780]
			yyc3780 = true
		}
		yyj3780 := 0
		for ; yyj3780 < yyrr3780; yyj3780++ {
			if r.TryDecodeAsNil() {
				yyv3780[yyj3780] = PodTemplate{}
			} else {
				yyv3781 := &yyv3780[yyj3780]
				yyv3781.CodecDecodeSelf(d)
			}

		}
		if yyrt3780 {
			for ; yyj3780 < yyl3780; yyj3780++ {
				yyv3780 = append(yyv3780, PodTemplate{})
				if r.TryDecodeAsNil() {
					yyv3780[yyj3780] = PodTemplate{}
				} else {
					yyv3782 := &yyv3780[yyj3780]
					yyv3782.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3780 := 0; !r.CheckBreak(); yyj3780++ {
			if yyj3780 >= len(yyv3780) {
				yyv3780 = append(yyv3780, PodTemplate{}) // var yyz3780 PodTemplate
				yyc3780 = true
			}

			if yyj3780 < len(yyv3780) {
				if r.TryDecodeAsNil() {
					yyv3780[yyj3780] = PodTemplate{}
				} else {
					yyv3783 := &yyv3780[yyj3780]
					yyv3783.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3780.End()
	}
	if yyc3780 {
		*v = yyv3780
	}

}

func (x codecSelfer1234) encSliceReplicationController(v []ReplicationController, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3784 := range v {
		yy3785 := &yyv3784
		yy3785.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceReplicationController(v *[]ReplicationController, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3786 := *v
	yyh3786, yyl3786 := z.DecSliceHelperStart()

	var yyrr3786, yyrl3786 int
	var yyc3786, yyrt3786 bool
	_, _, _ = yyc3786, yyrt3786, yyrl3786
	yyrr3786 = yyl3786

	if yyv3786 == nil {
		if yyrl3786, yyrt3786 = z.DecInferLen(yyl3786, z.DecBasicHandle().MaxInitLen, 248); yyrt3786 {
			yyrr3786 = yyrl3786
		}
		yyv3786 = make([]ReplicationController, yyrl3786)
		yyc3786 = true
	}

	if yyl3786 == 0 {
		if len(yyv3786) != 0 {
			yyv3786 = yyv3786[:0]
			yyc3786 = true
		}
	} else if yyl3786 > 0 {

		if yyl3786 > cap(yyv3786) {
			yyrl3786, yyrt3786 = z.DecInferLen(yyl3786, z.DecBasicHandle().MaxInitLen, 248)
			yyv3786 = make([]ReplicationController, yyrl3786)
			yyc3786 = true

			yyrr3786 = len(yyv3786)
		} else if yyl3786 != len(yyv3786) {
			yyv3786 = yyv3786[:yyl3786]
			yyc3786 = true
		}
		yyj3786 := 0
		for ; yyj3786 < yyrr3786; yyj3786++ {
			if r.TryDecodeAsNil() {
				yyv3786[yyj3786] = ReplicationController{}
			} else {
				yyv3787 := &yyv3786[yyj3786]
				yyv3787.CodecDecodeSelf(d)
			}

		}
		if yyrt3786 {
			for ; yyj3786 < yyl3786; yyj3786++ {
				yyv3786 = append(yyv3786, ReplicationController{})
				if r.TryDecodeAsNil() {
					yyv3786[yyj3786] = ReplicationController{}
				} else {
					yyv3788 := &yyv3786[yyj3786]
					yyv3788.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3786 := 0; !r.CheckBreak(); yyj3786++ {
			if yyj3786 >= len(yyv3786) {
				yyv3786 = append(yyv3786, ReplicationController{}) // var yyz3786 ReplicationController
				yyc3786 = true
			}

			if yyj3786 < len(yyv3786) {
				if r.TryDecodeAsNil() {
					yyv3786[yyj3786] = ReplicationController{}
				} else {
					yyv3789 := &yyv3786[yyj3786]
					yyv3789.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3786.End()
	}
	if yyc3786 {
		*v = yyv3786
	}

}

func (x codecSelfer1234) encSliceService(v []Service, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3790 := range v {
		yy3791 := &yyv3790
		yy3791.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceService(v *[]Service, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3792 := *v
	yyh3792, yyl3792 := z.DecSliceHelperStart()

	var yyrr3792, yyrl3792 int
	var yyc3792, yyrt3792 bool
	_, _, _ = yyc3792, yyrt3792, yyrl3792
	yyrr3792 = yyl3792

	if yyv3792 == nil {
		if yyrl3792, yyrt3792 = z.DecInferLen(yyl3792, z.DecBasicHandle().MaxInitLen, 352); yyrt3792 {
			yyrr3792 = yyrl3792
		}
		yyv3792 = make([]Service, yyrl3792)
		yyc3792 = true
	}

	if yyl3792 == 0 {
		if len(yyv3792) != 0 {
			yyv3792 = yyv3792[:0]
			yyc3792 = true
		}
	} else if yyl3792 > 0 {

		if yyl3792 > cap(yyv3792) {
			yyrl3792, yyrt3792 = z.DecInferLen(yyl3792, z.DecBasicHandle().MaxInitLen, 352)
			yyv3792 = make([]Service, yyrl3792)
			yyc3792 = true

			yyrr3792 = len(yyv3792)
		} else if yyl3792 != len(yyv3792) {
			yyv3792 = yyv3792[:yyl3792]
			yyc3792 = true
		}
		yyj3792 := 0
		for ; yyj3792 < yyrr3792; yyj3792++ {
			if r.TryDecodeAsNil() {
				yyv3792[yyj3792] = Service{}
			} else {
				yyv3793 := &yyv3792[yyj3792]
				yyv3793.CodecDecodeSelf(d)
			}

		}
		if yyrt3792 {
			for ; yyj3792 < yyl3792; yyj3792++ {
				yyv3792 = append(yyv3792, Service{})
				if r.TryDecodeAsNil() {
					yyv3792[yyj3792] = Service{}
				} else {
					yyv3794 := &yyv3792[yyj3792]
					yyv3794.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3792 := 0; !r.CheckBreak(); yyj3792++ {
			if yyj3792 >= len(yyv3792) {
				yyv3792 = append(yyv3792, Service{}) // var yyz3792 Service
				yyc3792 = true
			}

			if yyj3792 < len(yyv3792) {
				if r.TryDecodeAsNil() {
					yyv3792[yyj3792] = Service{}
				} else {
					yyv3795 := &yyv3792[yyj3792]
					yyv3795.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3792.End()
	}
	if yyc3792 {
		*v = yyv3792
	}

}

func (x codecSelfer1234) encSliceLoadBalancerIngress(v []LoadBalancerIngress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3796 := range v {
		yy3797 := &yyv3796
		yy3797.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceLoadBalancerIngress(v *[]LoadBalancerIngress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3798 := *v
	yyh3798, yyl3798 := z.DecSliceHelperStart()

	var yyrr3798, yyrl3798 int
	var yyc3798, yyrt3798 bool
	_, _, _ = yyc3798, yyrt3798, yyrl3798
	yyrr3798 = yyl3798

	if yyv3798 == nil {
		if yyrl3798, yyrt3798 = z.DecInferLen(yyl3798, z.DecBasicHandle().MaxInitLen, 32); yyrt3798 {
			yyrr3798 = yyrl3798
		}
		yyv3798 = make([]LoadBalancerIngress, yyrl3798)
		yyc3798 = true
	}

	if yyl3798 == 0 {
		if len(yyv3798) != 0 {
			yyv3798 = yyv3798[:0]
			yyc3798 = true
		}
	} else if yyl3798 > 0 {

		if yyl3798 > cap(yyv3798) {
			yyrl3798, yyrt3798 = z.DecInferLen(yyl3798, z.DecBasicHandle().MaxInitLen, 32)
			yyv3798 = make([]LoadBalancerIngress, yyrl3798)
			yyc3798 = true

			yyrr3798 = len(yyv3798)
		} else if yyl3798 != len(yyv3798) {
			yyv3798 = yyv3798[:yyl3798]
			yyc3798 = true
		}
		yyj3798 := 0
		for ; yyj3798 < yyrr3798; yyj3798++ {
			if r.TryDecodeAsNil() {
				yyv3798[yyj3798] = LoadBalancerIngress{}
			} else {
				yyv3799 := &yyv3798[yyj3798]
				yyv3799.CodecDecodeSelf(d)
			}

		}
		if yyrt3798 {
			for ; yyj3798 < yyl3798; yyj3798++ {
				yyv3798 = append(yyv3798, LoadBalancerIngress{})
				if r.TryDecodeAsNil() {
					yyv3798[yyj3798] = LoadBalancerIngress{}
				} else {
					yyv3800 := &yyv3798[yyj3798]
					yyv3800.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3798 := 0; !r.CheckBreak(); yyj3798++ {
			if yyj3798 >= len(yyv3798) {
				yyv3798 = append(yyv3798, LoadBalancerIngress{}) // var yyz3798 LoadBalancerIngress
				yyc3798 = true
			}

			if yyj3798 < len(yyv3798) {
				if r.TryDecodeAsNil() {
					yyv3798[yyj3798] = LoadBalancerIngress{}
				} else {
					yyv3801 := &yyv3798[yyj3798]
					yyv3801.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3798.End()
	}
	if yyc3798 {
		*v = yyv3798
	}

}

func (x codecSelfer1234) encSliceServicePort(v []ServicePort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3802 := range v {
		yy3803 := &yyv3802
		yy3803.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceServicePort(v *[]ServicePort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3804 := *v
	yyh3804, yyl3804 := z.DecSliceHelperStart()

	var yyrr3804, yyrl3804 int
	var yyc3804, yyrt3804 bool
	_, _, _ = yyc3804, yyrt3804, yyrl3804
	yyrr3804 = yyl3804

	if yyv3804 == nil {
		if yyrl3804, yyrt3804 = z.DecInferLen(yyl3804, z.DecBasicHandle().MaxInitLen, 80); yyrt3804 {
			yyrr3804 = yyrl3804
		}
		yyv3804 = make([]ServicePort, yyrl3804)
		yyc3804 = true
	}

	if yyl3804 == 0 {
		if len(yyv3804) != 0 {
			yyv3804 = yyv3804[:0]
			yyc3804 = true
		}
	} else if yyl3804 > 0 {

		if yyl3804 > cap(yyv3804) {
			yyrl3804, yyrt3804 = z.DecInferLen(yyl3804, z.DecBasicHandle().MaxInitLen, 80)
			yyv3804 = make([]ServicePort, yyrl3804)
			yyc3804 = true

			yyrr3804 = len(yyv3804)
		} else if yyl3804 != len(yyv3804) {
			yyv3804 = yyv3804[:yyl3804]
			yyc3804 = true
		}
		yyj3804 := 0
		for ; yyj3804 < yyrr3804; yyj3804++ {
			if r.TryDecodeAsNil() {
				yyv3804[yyj3804] = ServicePort{}
			} else {
				yyv3805 := &yyv3804[yyj3804]
				yyv3805.CodecDecodeSelf(d)
			}

		}
		if yyrt3804 {
			for ; yyj3804 < yyl3804; yyj3804++ {
				yyv3804 = append(yyv3804, ServicePort{})
				if r.TryDecodeAsNil() {
					yyv3804[yyj3804] = ServicePort{}
				} else {
					yyv3806 := &yyv3804[yyj3804]
					yyv3806.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3804 := 0; !r.CheckBreak(); yyj3804++ {
			if yyj3804 >= len(yyv3804) {
				yyv3804 = append(yyv3804, ServicePort{}) // var yyz3804 ServicePort
				yyc3804 = true
			}

			if yyj3804 < len(yyv3804) {
				if r.TryDecodeAsNil() {
					yyv3804[yyj3804] = ServicePort{}
				} else {
					yyv3807 := &yyv3804[yyj3804]
					yyv3807.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3804.End()
	}
	if yyc3804 {
		*v = yyv3804
	}

}

func (x codecSelfer1234) encSliceObjectReference(v []ObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3808 := range v {
		yy3809 := &yyv3808
		yy3809.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceObjectReference(v *[]ObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3810 := *v
	yyh3810, yyl3810 := z.DecSliceHelperStart()

	var yyrr3810, yyrl3810 int
	var yyc3810, yyrt3810 bool
	_, _, _ = yyc3810, yyrt3810, yyrl3810
	yyrr3810 = yyl3810

	if yyv3810 == nil {
		if yyrl3810, yyrt3810 = z.DecInferLen(yyl3810, z.DecBasicHandle().MaxInitLen, 128); yyrt3810 {
			yyrr3810 = yyrl3810
		}
		yyv3810 = make([]ObjectReference, yyrl3810)
		yyc3810 = true
	}

	if yyl3810 == 0 {
		if len(yyv3810) != 0 {
			yyv3810 = yyv3810[:0]
			yyc3810 = true
		}
	} else if yyl3810 > 0 {

		if yyl3810 > cap(yyv3810) {
			yyrl3810, yyrt3810 = z.DecInferLen(yyl3810, z.DecBasicHandle().MaxInitLen, 128)
			yyv3810 = make([]ObjectReference, yyrl3810)
			yyc3810 = true

			yyrr3810 = len(yyv3810)
		} else if yyl3810 != len(yyv3810) {
			yyv3810 = yyv3810[:yyl3810]
			yyc3810 = true
		}
		yyj3810 := 0
		for ; yyj3810 < yyrr3810; yyj3810++ {
			if r.TryDecodeAsNil() {
				yyv3810[yyj3810] = ObjectReference{}
			} else {
				yyv3811 := &yyv3810[yyj3810]
				yyv3811.CodecDecodeSelf(d)
			}

		}
		if yyrt3810 {
			for ; yyj3810 < yyl3810; yyj3810++ {
				yyv3810 = append(yyv3810, ObjectReference{})
				if r.TryDecodeAsNil() {
					yyv3810[yyj3810] = ObjectReference{}
				} else {
					yyv3812 := &yyv3810[yyj3810]
					yyv3812.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3810 := 0; !r.CheckBreak(); yyj3810++ {
			if yyj3810 >= len(yyv3810) {
				yyv3810 = append(yyv3810, ObjectReference{}) // var yyz3810 ObjectReference
				yyc3810 = true
			}

			if yyj3810 < len(yyv3810) {
				if r.TryDecodeAsNil() {
					yyv3810[yyj3810] = ObjectReference{}
				} else {
					yyv3813 := &yyv3810[yyj3810]
					yyv3813.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3810.End()
	}
	if yyc3810 {
		*v = yyv3810
	}

}

func (x codecSelfer1234) encSliceServiceAccount(v []ServiceAccount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3814 := range v {
		yy3815 := &yyv3814
		yy3815.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceServiceAccount(v *[]ServiceAccount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3816 := *v
	yyh3816, yyl3816 := z.DecSliceHelperStart()

	var yyrr3816, yyrl3816 int
	var yyc3816, yyrt3816 bool
	_, _, _ = yyc3816, yyrt3816, yyrl3816
	yyrr3816 = yyl3816

	if yyv3816 == nil {
		if yyrl3816, yyrt3816 = z.DecInferLen(yyl3816, z.DecBasicHandle().MaxInitLen, 256); yyrt3816 {
			yyrr3816 = yyrl3816
		}
		yyv3816 = make([]ServiceAccount, yyrl3816)
		yyc3816 = true
	}

	if yyl3816 == 0 {
		if len(yyv3816) != 0 {
			yyv3816 = yyv3816[:0]
			yyc3816 = true
		}
	} else if yyl3816 > 0 {

		if yyl3816 > cap(yyv3816) {
			yyrl3816, yyrt3816 = z.DecInferLen(yyl3816, z.DecBasicHandle().MaxInitLen, 256)
			yyv3816 = make([]ServiceAccount, yyrl3816)
			yyc3816 = true

			yyrr3816 = len(yyv3816)
		} else if yyl3816 != len(yyv3816) {
			yyv3816 = yyv3816[:yyl3816]
			yyc3816 = true
		}
		yyj3816 := 0
		for ; yyj3816 < yyrr3816; yyj3816++ {
			if r.TryDecodeAsNil() {
				yyv3816[yyj3816] = ServiceAccount{}
			} else {
				yyv3817 := &yyv3816[yyj3816]
				yyv3817.CodecDecodeSelf(d)
			}

		}
		if yyrt3816 {
			for ; yyj3816 < yyl3816; yyj3816++ {
				yyv3816 = append(yyv3816, ServiceAccount{})
				if r.TryDecodeAsNil() {
					yyv3816[yyj3816] = ServiceAccount{}
				} else {
					yyv3818 := &yyv3816[yyj3816]
					yyv3818.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3816 := 0; !r.CheckBreak(); yyj3816++ {
			if yyj3816 >= len(yyv3816) {
				yyv3816 = append(yyv3816, ServiceAccount{}) // var yyz3816 ServiceAccount
				yyc3816 = true
			}

			if yyj3816 < len(yyv3816) {
				if r.TryDecodeAsNil() {
					yyv3816[yyj3816] = ServiceAccount{}
				} else {
					yyv3819 := &yyv3816[yyj3816]
					yyv3819.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3816.End()
	}
	if yyc3816 {
		*v = yyv3816
	}

}

func (x codecSelfer1234) encSliceEndpointSubset(v []EndpointSubset, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3820 := range v {
		yy3821 := &yyv3820
		yy3821.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEndpointSubset(v *[]EndpointSubset, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3822 := *v
	yyh3822, yyl3822 := z.DecSliceHelperStart()

	var yyrr3822, yyrl3822 int
	var yyc3822, yyrt3822 bool
	_, _, _ = yyc3822, yyrt3822, yyrl3822
	yyrr3822 = yyl3822

	if yyv3822 == nil {
		if yyrl3822, yyrt3822 = z.DecInferLen(yyl3822, z.DecBasicHandle().MaxInitLen, 72); yyrt3822 {
			yyrr3822 = yyrl3822
		}
		yyv3822 = make([]EndpointSubset, yyrl3822)
		yyc3822 = true
	}

	if yyl3822 == 0 {
		if len(yyv3822) != 0 {
			yyv3822 = yyv3822[:0]
			yyc3822 = true
		}
	} else if yyl3822 > 0 {

		if yyl3822 > cap(yyv3822) {
			yyrl3822, yyrt3822 = z.DecInferLen(yyl3822, z.DecBasicHandle().MaxInitLen, 72)
			yyv3822 = make([]EndpointSubset, yyrl3822)
			yyc3822 = true

			yyrr3822 = len(yyv3822)
		} else if yyl3822 != len(yyv3822) {
			yyv3822 = yyv3822[:yyl3822]
			yyc3822 = true
		}
		yyj3822 := 0
		for ; yyj3822 < yyrr3822; yyj3822++ {
			if r.TryDecodeAsNil() {
				yyv3822[yyj3822] = EndpointSubset{}
			} else {
				yyv3823 := &yyv3822[yyj3822]
				yyv3823.CodecDecodeSelf(d)
			}

		}
		if yyrt3822 {
			for ; yyj3822 < yyl3822; yyj3822++ {
				yyv3822 = append(yyv3822, EndpointSubset{})
				if r.TryDecodeAsNil() {
					yyv3822[yyj3822] = EndpointSubset{}
				} else {
					yyv3824 := &yyv3822[yyj3822]
					yyv3824.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3822 := 0; !r.CheckBreak(); yyj3822++ {
			if yyj3822 >= len(yyv3822) {
				yyv3822 = append(yyv3822, EndpointSubset{}) // var yyz3822 EndpointSubset
				yyc3822 = true
			}

			if yyj3822 < len(yyv3822) {
				if r.TryDecodeAsNil() {
					yyv3822[yyj3822] = EndpointSubset{}
				} else {
					yyv3825 := &yyv3822[yyj3822]
					yyv3825.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3822.End()
	}
	if yyc3822 {
		*v = yyv3822
	}

}

func (x codecSelfer1234) encSliceEndpointAddress(v []EndpointAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3826 := range v {
		yy3827 := &yyv3826
		yy3827.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEndpointAddress(v *[]EndpointAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3828 := *v
	yyh3828, yyl3828 := z.DecSliceHelperStart()

	var yyrr3828, yyrl3828 int
	var yyc3828, yyrt3828 bool
	_, _, _ = yyc3828, yyrt3828, yyrl3828
	yyrr3828 = yyl3828

	if yyv3828 == nil {
		if yyrl3828, yyrt3828 = z.DecInferLen(yyl3828, z.DecBasicHandle().MaxInitLen, 24); yyrt3828 {
			yyrr3828 = yyrl3828
		}
		yyv3828 = make([]EndpointAddress, yyrl3828)
		yyc3828 = true
	}

	if yyl3828 == 0 {
		if len(yyv3828) != 0 {
			yyv3828 = yyv3828[:0]
			yyc3828 = true
		}
	} else if yyl3828 > 0 {

		if yyl3828 > cap(yyv3828) {
			yyrl3828, yyrt3828 = z.DecInferLen(yyl3828, z.DecBasicHandle().MaxInitLen, 24)
			yyv3828 = make([]EndpointAddress, yyrl3828)
			yyc3828 = true

			yyrr3828 = len(yyv3828)
		} else if yyl3828 != len(yyv3828) {
			yyv3828 = yyv3828[:yyl3828]
			yyc3828 = true
		}
		yyj3828 := 0
		for ; yyj3828 < yyrr3828; yyj3828++ {
			if r.TryDecodeAsNil() {
				yyv3828[yyj3828] = EndpointAddress{}
			} else {
				yyv3829 := &yyv3828[yyj3828]
				yyv3829.CodecDecodeSelf(d)
			}

		}
		if yyrt3828 {
			for ; yyj3828 < yyl3828; yyj3828++ {
				yyv3828 = append(yyv3828, EndpointAddress{})
				if r.TryDecodeAsNil() {
					yyv3828[yyj3828] = EndpointAddress{}
				} else {
					yyv3830 := &yyv3828[yyj3828]
					yyv3830.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3828 := 0; !r.CheckBreak(); yyj3828++ {
			if yyj3828 >= len(yyv3828) {
				yyv3828 = append(yyv3828, EndpointAddress{}) // var yyz3828 EndpointAddress
				yyc3828 = true
			}

			if yyj3828 < len(yyv3828) {
				if r.TryDecodeAsNil() {
					yyv3828[yyj3828] = EndpointAddress{}
				} else {
					yyv3831 := &yyv3828[yyj3828]
					yyv3831.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3828.End()
	}
	if yyc3828 {
		*v = yyv3828
	}

}

func (x codecSelfer1234) encSliceEndpointPort(v []EndpointPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3832 := range v {
		yy3833 := &yyv3832
		yy3833.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEndpointPort(v *[]EndpointPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3834 := *v
	yyh3834, yyl3834 := z.DecSliceHelperStart()

	var yyrr3834, yyrl3834 int
	var yyc3834, yyrt3834 bool
	_, _, _ = yyc3834, yyrt3834, yyrl3834
	yyrr3834 = yyl3834

	if yyv3834 == nil {
		if yyrl3834, yyrt3834 = z.DecInferLen(yyl3834, z.DecBasicHandle().MaxInitLen, 40); yyrt3834 {
			yyrr3834 = yyrl3834
		}
		yyv3834 = make([]EndpointPort, yyrl3834)
		yyc3834 = true
	}

	if yyl3834 == 0 {
		if len(yyv3834) != 0 {
			yyv3834 = yyv3834[:0]
			yyc3834 = true
		}
	} else if yyl3834 > 0 {

		if yyl3834 > cap(yyv3834) {
			yyrl3834, yyrt3834 = z.DecInferLen(yyl3834, z.DecBasicHandle().MaxInitLen, 40)
			yyv3834 = make([]EndpointPort, yyrl3834)
			yyc3834 = true

			yyrr3834 = len(yyv3834)
		} else if yyl3834 != len(yyv3834) {
			yyv3834 = yyv3834[:yyl3834]
			yyc3834 = true
		}
		yyj3834 := 0
		for ; yyj3834 < yyrr3834; yyj3834++ {
			if r.TryDecodeAsNil() {
				yyv3834[yyj3834] = EndpointPort{}
			} else {
				yyv3835 := &yyv3834[yyj3834]
				yyv3835.CodecDecodeSelf(d)
			}

		}
		if yyrt3834 {
			for ; yyj3834 < yyl3834; yyj3834++ {
				yyv3834 = append(yyv3834, EndpointPort{})
				if r.TryDecodeAsNil() {
					yyv3834[yyj3834] = EndpointPort{}
				} else {
					yyv3836 := &yyv3834[yyj3834]
					yyv3836.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3834 := 0; !r.CheckBreak(); yyj3834++ {
			if yyj3834 >= len(yyv3834) {
				yyv3834 = append(yyv3834, EndpointPort{}) // var yyz3834 EndpointPort
				yyc3834 = true
			}

			if yyj3834 < len(yyv3834) {
				if r.TryDecodeAsNil() {
					yyv3834[yyj3834] = EndpointPort{}
				} else {
					yyv3837 := &yyv3834[yyj3834]
					yyv3837.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3834.End()
	}
	if yyc3834 {
		*v = yyv3834
	}

}

func (x codecSelfer1234) encSliceEndpoints(v []Endpoints, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3838 := range v {
		yy3839 := &yyv3838
		yy3839.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEndpoints(v *[]Endpoints, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3840 := *v
	yyh3840, yyl3840 := z.DecSliceHelperStart()

	var yyrr3840, yyrl3840 int
	var yyc3840, yyrt3840 bool
	_, _, _ = yyc3840, yyrt3840, yyrl3840
	yyrr3840 = yyl3840

	if yyv3840 == nil {
		if yyrl3840, yyrt3840 = z.DecInferLen(yyl3840, z.DecBasicHandle().MaxInitLen, 232); yyrt3840 {
			yyrr3840 = yyrl3840
		}
		yyv3840 = make([]Endpoints, yyrl3840)
		yyc3840 = true
	}

	if yyl3840 == 0 {
		if len(yyv3840) != 0 {
			yyv3840 = yyv3840[:0]
			yyc3840 = true
		}
	} else if yyl3840 > 0 {

		if yyl3840 > cap(yyv3840) {
			yyrl3840, yyrt3840 = z.DecInferLen(yyl3840, z.DecBasicHandle().MaxInitLen, 232)
			yyv3840 = make([]Endpoints, yyrl3840)
			yyc3840 = true

			yyrr3840 = len(yyv3840)
		} else if yyl3840 != len(yyv3840) {
			yyv3840 = yyv3840[:yyl3840]
			yyc3840 = true
		}
		yyj3840 := 0
		for ; yyj3840 < yyrr3840; yyj3840++ {
			if r.TryDecodeAsNil() {
				yyv3840[yyj3840] = Endpoints{}
			} else {
				yyv3841 := &yyv3840[yyj3840]
				yyv3841.CodecDecodeSelf(d)
			}

		}
		if yyrt3840 {
			for ; yyj3840 < yyl3840; yyj3840++ {
				yyv3840 = append(yyv3840, Endpoints{})
				if r.TryDecodeAsNil() {
					yyv3840[yyj3840] = Endpoints{}
				} else {
					yyv3842 := &yyv3840[yyj3840]
					yyv3842.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3840 := 0; !r.CheckBreak(); yyj3840++ {
			if yyj3840 >= len(yyv3840) {
				yyv3840 = append(yyv3840, Endpoints{}) // var yyz3840 Endpoints
				yyc3840 = true
			}

			if yyj3840 < len(yyv3840) {
				if r.TryDecodeAsNil() {
					yyv3840[yyj3840] = Endpoints{}
				} else {
					yyv3843 := &yyv3840[yyj3840]
					yyv3843.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3840.End()
	}
	if yyc3840 {
		*v = yyv3840
	}

}

func (x codecSelfer1234) encSliceNodeCondition(v []NodeCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3844 := range v {
		yy3845 := &yyv3844
		yy3845.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceNodeCondition(v *[]NodeCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3846 := *v
	yyh3846, yyl3846 := z.DecSliceHelperStart()

	var yyrr3846, yyrl3846 int
	var yyc3846, yyrt3846 bool
	_, _, _ = yyc3846, yyrt3846, yyrl3846
	yyrr3846 = yyl3846

	if yyv3846 == nil {
		if yyrl3846, yyrt3846 = z.DecInferLen(yyl3846, z.DecBasicHandle().MaxInitLen, 112); yyrt3846 {
			yyrr3846 = yyrl3846
		}
		yyv3846 = make([]NodeCondition, yyrl3846)
		yyc3846 = true
	}

	if yyl3846 == 0 {
		if len(yyv3846) != 0 {
			yyv3846 = yyv3846[:0]
			yyc3846 = true
		}
	} else if yyl3846 > 0 {

		if yyl3846 > cap(yyv3846) {
			yyrl3846, yyrt3846 = z.DecInferLen(yyl3846, z.DecBasicHandle().MaxInitLen, 112)
			yyv3846 = make([]NodeCondition, yyrl3846)
			yyc3846 = true

			yyrr3846 = len(yyv3846)
		} else if yyl3846 != len(yyv3846) {
			yyv3846 = yyv3846[:yyl3846]
			yyc3846 = true
		}
		yyj3846 := 0
		for ; yyj3846 < yyrr3846; yyj3846++ {
			if r.TryDecodeAsNil() {
				yyv3846[yyj3846] = NodeCondition{}
			} else {
				yyv3847 := &yyv3846[yyj3846]
				yyv3847.CodecDecodeSelf(d)
			}

		}
		if yyrt3846 {
			for ; yyj3846 < yyl3846; yyj3846++ {
				yyv3846 = append(yyv3846, NodeCondition{})
				if r.TryDecodeAsNil() {
					yyv3846[yyj3846] = NodeCondition{}
				} else {
					yyv3848 := &yyv3846[yyj3846]
					yyv3848.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3846 := 0; !r.CheckBreak(); yyj3846++ {
			if yyj3846 >= len(yyv3846) {
				yyv3846 = append(yyv3846, NodeCondition{}) // var yyz3846 NodeCondition
				yyc3846 = true
			}

			if yyj3846 < len(yyv3846) {
				if r.TryDecodeAsNil() {
					yyv3846[yyj3846] = NodeCondition{}
				} else {
					yyv3849 := &yyv3846[yyj3846]
					yyv3849.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3846.End()
	}
	if yyc3846 {
		*v = yyv3846
	}

}

func (x codecSelfer1234) encSliceNodeAddress(v []NodeAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3850 := range v {
		yy3851 := &yyv3850
		yy3851.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceNodeAddress(v *[]NodeAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3852 := *v
	yyh3852, yyl3852 := z.DecSliceHelperStart()

	var yyrr3852, yyrl3852 int
	var yyc3852, yyrt3852 bool
	_, _, _ = yyc3852, yyrt3852, yyrl3852
	yyrr3852 = yyl3852

	if yyv3852 == nil {
		if yyrl3852, yyrt3852 = z.DecInferLen(yyl3852, z.DecBasicHandle().MaxInitLen, 32); yyrt3852 {
			yyrr3852 = yyrl3852
		}
		yyv3852 = make([]NodeAddress, yyrl3852)
		yyc3852 = true
	}

	if yyl3852 == 0 {
		if len(yyv3852) != 0 {
			yyv3852 = yyv3852[:0]
			yyc3852 = true
		}
	} else if yyl3852 > 0 {

		if yyl3852 > cap(yyv3852) {
			yyrl3852, yyrt3852 = z.DecInferLen(yyl3852, z.DecBasicHandle().MaxInitLen, 32)
			yyv3852 = make([]NodeAddress, yyrl3852)
			yyc3852 = true

			yyrr3852 = len(yyv3852)
		} else if yyl3852 != len(yyv3852) {
			yyv3852 = yyv3852[:yyl3852]
			yyc3852 = true
		}
		yyj3852 := 0
		for ; yyj3852 < yyrr3852; yyj3852++ {
			if r.TryDecodeAsNil() {
				yyv3852[yyj3852] = NodeAddress{}
			} else {
				yyv3853 := &yyv3852[yyj3852]
				yyv3853.CodecDecodeSelf(d)
			}

		}
		if yyrt3852 {
			for ; yyj3852 < yyl3852; yyj3852++ {
				yyv3852 = append(yyv3852, NodeAddress{})
				if r.TryDecodeAsNil() {
					yyv3852[yyj3852] = NodeAddress{}
				} else {
					yyv3854 := &yyv3852[yyj3852]
					yyv3854.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3852 := 0; !r.CheckBreak(); yyj3852++ {
			if yyj3852 >= len(yyv3852) {
				yyv3852 = append(yyv3852, NodeAddress{}) // var yyz3852 NodeAddress
				yyc3852 = true
			}

			if yyj3852 < len(yyv3852) {
				if r.TryDecodeAsNil() {
					yyv3852[yyj3852] = NodeAddress{}
				} else {
					yyv3855 := &yyv3852[yyj3852]
					yyv3855.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3852.End()
	}
	if yyc3852 {
		*v = yyv3852
	}

}

func (x codecSelfer1234) encResourceList(v ResourceList, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk3856, yyv3856 := range v {
		yyk3856.CodecEncodeSelf(e)
		yy3857 := &yyv3856
		yym3858 := z.EncBinary()
		_ = yym3858
		if false {
		} else if z.HasExtensions() && z.EncExt(yy3857) {
		} else if !yym3858 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy3857)
		} else {
			z.EncFallback(yy3857)
		}
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decResourceList(v *ResourceList, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3859 := *v
	yyl3859 := r.ReadMapStart()
	yybh3859 := z.DecBasicHandle()
	if yyv3859 == nil {
		yyrl3859, _ := z.DecInferLen(yyl3859, yybh3859.MaxInitLen, 40)
		yyv3859 = make(map[ResourceName]pkg3_resource.Quantity, yyrl3859)
		*v = yyv3859
	}
	var yymk3859 ResourceName
	var yymv3859 pkg3_resource.Quantity
	var yymg3859 bool
	if yybh3859.MapValueReset {
		yymg3859 = true
	}
	if yyl3859 > 0 {
		for yyj3859 := 0; yyj3859 < yyl3859; yyj3859++ {
			if r.TryDecodeAsNil() {
				yymk3859 = ""
			} else {
				yymk3859 = ResourceName(r.DecodeString())
			}

			if yymg3859 {
				yymv3859 = yyv3859[yymk3859]
			} else {
				yymv3859 = pkg3_resource.Quantity{}
			}
			if r.TryDecodeAsNil() {
				yymv3859 = pkg3_resource.Quantity{}
			} else {
				yyv3861 := &yymv3859
				yym3862 := z.DecBinary()
				_ = yym3862
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3861) {
				} else if !yym3862 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3861)
				} else {
					z.DecFallback(yyv3861, false)
				}
			}

			if yyv3859 != nil {
				yyv3859[yymk3859] = yymv3859
			}
		}
	} else if yyl3859 < 0 {
		for yyj3859 := 0; !r.CheckBreak(); yyj3859++ {
			if r.TryDecodeAsNil() {
				yymk3859 = ""
			} else {
				yymk3859 = ResourceName(r.DecodeString())
			}

			if yymg3859 {
				yymv3859 = yyv3859[yymk3859]
			} else {
				yymv3859 = pkg3_resource.Quantity{}
			}
			if r.TryDecodeAsNil() {
				yymv3859 = pkg3_resource.Quantity{}
			} else {
				yyv3864 := &yymv3859
				yym3865 := z.DecBinary()
				_ = yym3865
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3864) {
				} else if !yym3865 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3864)
				} else {
					z.DecFallback(yyv3864, false)
				}
			}

			if yyv3859 != nil {
				yyv3859[yymk3859] = yymv3859
			}
		}
		r.ReadEnd()
	} // else len==0: TODO: Should we clear map entries?
}

func (x codecSelfer1234) encSliceNode(v []Node, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3866 := range v {
		yy3867 := &yyv3866
		yy3867.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceNode(v *[]Node, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3868 := *v
	yyh3868, yyl3868 := z.DecSliceHelperStart()

	var yyrr3868, yyrl3868 int
	var yyc3868, yyrt3868 bool
	_, _, _ = yyc3868, yyrt3868, yyrl3868
	yyrr3868 = yyl3868

	if yyv3868 == nil {
		if yyrl3868, yyrt3868 = z.DecInferLen(yyl3868, z.DecBasicHandle().MaxInitLen, 472); yyrt3868 {
			yyrr3868 = yyrl3868
		}
		yyv3868 = make([]Node, yyrl3868)
		yyc3868 = true
	}

	if yyl3868 == 0 {
		if len(yyv3868) != 0 {
			yyv3868 = yyv3868[:0]
			yyc3868 = true
		}
	} else if yyl3868 > 0 {

		if yyl3868 > cap(yyv3868) {
			yyrl3868, yyrt3868 = z.DecInferLen(yyl3868, z.DecBasicHandle().MaxInitLen, 472)
			yyv3868 = make([]Node, yyrl3868)
			yyc3868 = true

			yyrr3868 = len(yyv3868)
		} else if yyl3868 != len(yyv3868) {
			yyv3868 = yyv3868[:yyl3868]
			yyc3868 = true
		}
		yyj3868 := 0
		for ; yyj3868 < yyrr3868; yyj3868++ {
			if r.TryDecodeAsNil() {
				yyv3868[yyj3868] = Node{}
			} else {
				yyv3869 := &yyv3868[yyj3868]
				yyv3869.CodecDecodeSelf(d)
			}

		}
		if yyrt3868 {
			for ; yyj3868 < yyl3868; yyj3868++ {
				yyv3868 = append(yyv3868, Node{})
				if r.TryDecodeAsNil() {
					yyv3868[yyj3868] = Node{}
				} else {
					yyv3870 := &yyv3868[yyj3868]
					yyv3870.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3868 := 0; !r.CheckBreak(); yyj3868++ {
			if yyj3868 >= len(yyv3868) {
				yyv3868 = append(yyv3868, Node{}) // var yyz3868 Node
				yyc3868 = true
			}

			if yyj3868 < len(yyv3868) {
				if r.TryDecodeAsNil() {
					yyv3868[yyj3868] = Node{}
				} else {
					yyv3871 := &yyv3868[yyj3868]
					yyv3871.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3868.End()
	}
	if yyc3868 {
		*v = yyv3868
	}

}

func (x codecSelfer1234) encSliceFinalizerName(v []FinalizerName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3872 := range v {
		yyv3872.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceFinalizerName(v *[]FinalizerName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3873 := *v
	yyh3873, yyl3873 := z.DecSliceHelperStart()

	var yyrr3873, yyrl3873 int
	var yyc3873, yyrt3873 bool
	_, _, _ = yyc3873, yyrt3873, yyrl3873
	yyrr3873 = yyl3873

	if yyv3873 == nil {
		if yyrl3873, yyrt3873 = z.DecInferLen(yyl3873, z.DecBasicHandle().MaxInitLen, 16); yyrt3873 {
			yyrr3873 = yyrl3873
		}
		yyv3873 = make([]FinalizerName, yyrl3873)
		yyc3873 = true
	}

	if yyl3873 == 0 {
		if len(yyv3873) != 0 {
			yyv3873 = yyv3873[:0]
			yyc3873 = true
		}
	} else if yyl3873 > 0 {

		if yyl3873 > cap(yyv3873) {
			yyrl3873, yyrt3873 = z.DecInferLen(yyl3873, z.DecBasicHandle().MaxInitLen, 16)

			yyv23873 := yyv3873
			yyv3873 = make([]FinalizerName, yyrl3873)
			if len(yyv3873) > 0 {
				copy(yyv3873, yyv23873[:cap(yyv23873)])
			}
			yyc3873 = true

			yyrr3873 = len(yyv3873)
		} else if yyl3873 != len(yyv3873) {
			yyv3873 = yyv3873[:yyl3873]
			yyc3873 = true
		}
		yyj3873 := 0
		for ; yyj3873 < yyrr3873; yyj3873++ {
			if r.TryDecodeAsNil() {
				yyv3873[yyj3873] = ""
			} else {
				yyv3873[yyj3873] = FinalizerName(r.DecodeString())
			}

		}
		if yyrt3873 {
			for ; yyj3873 < yyl3873; yyj3873++ {
				yyv3873 = append(yyv3873, "")
				if r.TryDecodeAsNil() {
					yyv3873[yyj3873] = ""
				} else {
					yyv3873[yyj3873] = FinalizerName(r.DecodeString())
				}

			}
		}

	} else {
		for yyj3873 := 0; !r.CheckBreak(); yyj3873++ {
			if yyj3873 >= len(yyv3873) {
				yyv3873 = append(yyv3873, "") // var yyz3873 FinalizerName
				yyc3873 = true
			}

			if yyj3873 < len(yyv3873) {
				if r.TryDecodeAsNil() {
					yyv3873[yyj3873] = ""
				} else {
					yyv3873[yyj3873] = FinalizerName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3873.End()
	}
	if yyc3873 {
		*v = yyv3873
	}

}

func (x codecSelfer1234) encSliceNamespace(v []Namespace, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3877 := range v {
		yy3878 := &yyv3877
		yy3878.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceNamespace(v *[]Namespace, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3879 := *v
	yyh3879, yyl3879 := z.DecSliceHelperStart()

	var yyrr3879, yyrl3879 int
	var yyc3879, yyrt3879 bool
	_, _, _ = yyc3879, yyrt3879, yyrl3879
	yyrr3879 = yyl3879

	if yyv3879 == nil {
		if yyrl3879, yyrt3879 = z.DecInferLen(yyl3879, z.DecBasicHandle().MaxInitLen, 264); yyrt3879 {
			yyrr3879 = yyrl3879
		}
		yyv3879 = make([]Namespace, yyrl3879)
		yyc3879 = true
	}

	if yyl3879 == 0 {
		if len(yyv3879) != 0 {
			yyv3879 = yyv3879[:0]
			yyc3879 = true
		}
	} else if yyl3879 > 0 {

		if yyl3879 > cap(yyv3879) {
			yyrl3879, yyrt3879 = z.DecInferLen(yyl3879, z.DecBasicHandle().MaxInitLen, 264)
			yyv3879 = make([]Namespace, yyrl3879)
			yyc3879 = true

			yyrr3879 = len(yyv3879)
		} else if yyl3879 != len(yyv3879) {
			yyv3879 = yyv3879[:yyl3879]
			yyc3879 = true
		}
		yyj3879 := 0
		for ; yyj3879 < yyrr3879; yyj3879++ {
			if r.TryDecodeAsNil() {
				yyv3879[yyj3879] = Namespace{}
			} else {
				yyv3880 := &yyv3879[yyj3879]
				yyv3880.CodecDecodeSelf(d)
			}

		}
		if yyrt3879 {
			for ; yyj3879 < yyl3879; yyj3879++ {
				yyv3879 = append(yyv3879, Namespace{})
				if r.TryDecodeAsNil() {
					yyv3879[yyj3879] = Namespace{}
				} else {
					yyv3881 := &yyv3879[yyj3879]
					yyv3881.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3879 := 0; !r.CheckBreak(); yyj3879++ {
			if yyj3879 >= len(yyv3879) {
				yyv3879 = append(yyv3879, Namespace{}) // var yyz3879 Namespace
				yyc3879 = true
			}

			if yyj3879 < len(yyv3879) {
				if r.TryDecodeAsNil() {
					yyv3879[yyj3879] = Namespace{}
				} else {
					yyv3882 := &yyv3879[yyj3879]
					yyv3882.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3879.End()
	}
	if yyc3879 {
		*v = yyv3879
	}

}

func (x codecSelfer1234) encMapstringSubnet(v map[string]Subnet, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk3883, yyv3883 := range v {
		yym3884 := z.EncBinary()
		_ = yym3884
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF81234, string(yyk3883))
		}
		yy3885 := &yyv3883
		yy3885.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decMapstringSubnet(v *map[string]Subnet, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3886 := *v
	yyl3886 := r.ReadMapStart()
	yybh3886 := z.DecBasicHandle()
	if yyv3886 == nil {
		yyrl3886, _ := z.DecInferLen(yyl3886, yybh3886.MaxInitLen, 48)
		yyv3886 = make(map[string]Subnet, yyrl3886)
		*v = yyv3886
	}
	var yymk3886 string
	var yymv3886 Subnet
	var yymg3886 bool
	if yybh3886.MapValueReset {
		yymg3886 = true
	}
	if yyl3886 > 0 {
		for yyj3886 := 0; yyj3886 < yyl3886; yyj3886++ {
			if r.TryDecodeAsNil() {
				yymk3886 = ""
			} else {
				yymk3886 = string(r.DecodeString())
			}

			if yymg3886 {
				yymv3886 = yyv3886[yymk3886]
			} else {
				yymv3886 = Subnet{}
			}
			if r.TryDecodeAsNil() {
				yymv3886 = Subnet{}
			} else {
				yyv3888 := &yymv3886
				yyv3888.CodecDecodeSelf(d)
			}

			if yyv3886 != nil {
				yyv3886[yymk3886] = yymv3886
			}
		}
	} else if yyl3886 < 0 {
		for yyj3886 := 0; !r.CheckBreak(); yyj3886++ {
			if r.TryDecodeAsNil() {
				yymk3886 = ""
			} else {
				yymk3886 = string(r.DecodeString())
			}

			if yymg3886 {
				yymv3886 = yyv3886[yymk3886]
			} else {
				yymv3886 = Subnet{}
			}
			if r.TryDecodeAsNil() {
				yymv3886 = Subnet{}
			} else {
				yyv3890 := &yymv3886
				yyv3890.CodecDecodeSelf(d)
			}

			if yyv3886 != nil {
				yyv3886[yymk3886] = yymv3886
			}
		}
		r.ReadEnd()
	} // else len==0: TODO: Should we clear map entries?
}

func (x codecSelfer1234) encSliceNetwork(v []Network, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3891 := range v {
		yy3892 := &yyv3891
		yy3892.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceNetwork(v *[]Network, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3893 := *v
	yyh3893, yyl3893 := z.DecSliceHelperStart()

	var yyrr3893, yyrl3893 int
	var yyc3893, yyrt3893 bool
	_, _, _ = yyc3893, yyrt3893, yyrl3893
	yyrr3893 = yyl3893

	if yyv3893 == nil {
		if yyrl3893, yyrt3893 = z.DecInferLen(yyl3893, z.DecBasicHandle().MaxInitLen, 248); yyrt3893 {
			yyrr3893 = yyrl3893
		}
		yyv3893 = make([]Network, yyrl3893)
		yyc3893 = true
	}

	if yyl3893 == 0 {
		if len(yyv3893) != 0 {
			yyv3893 = yyv3893[:0]
			yyc3893 = true
		}
	} else if yyl3893 > 0 {

		if yyl3893 > cap(yyv3893) {
			yyrl3893, yyrt3893 = z.DecInferLen(yyl3893, z.DecBasicHandle().MaxInitLen, 248)
			yyv3893 = make([]Network, yyrl3893)
			yyc3893 = true

			yyrr3893 = len(yyv3893)
		} else if yyl3893 != len(yyv3893) {
			yyv3893 = yyv3893[:yyl3893]
			yyc3893 = true
		}
		yyj3893 := 0
		for ; yyj3893 < yyrr3893; yyj3893++ {
			if r.TryDecodeAsNil() {
				yyv3893[yyj3893] = Network{}
			} else {
				yyv3894 := &yyv3893[yyj3893]
				yyv3894.CodecDecodeSelf(d)
			}

		}
		if yyrt3893 {
			for ; yyj3893 < yyl3893; yyj3893++ {
				yyv3893 = append(yyv3893, Network{})
				if r.TryDecodeAsNil() {
					yyv3893[yyj3893] = Network{}
				} else {
					yyv3895 := &yyv3893[yyj3893]
					yyv3895.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3893 := 0; !r.CheckBreak(); yyj3893++ {
			if yyj3893 >= len(yyv3893) {
				yyv3893 = append(yyv3893, Network{}) // var yyz3893 Network
				yyc3893 = true
			}

			if yyj3893 < len(yyv3893) {
				if r.TryDecodeAsNil() {
					yyv3893[yyj3893] = Network{}
				} else {
					yyv3896 := &yyv3893[yyj3893]
					yyv3896.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3893.End()
	}
	if yyc3893 {
		*v = yyv3893
	}

}

func (x codecSelfer1234) encSliceTenant(v []Tenant, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3897 := range v {
		yy3898 := &yyv3897
		yy3898.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceTenant(v *[]Tenant, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3899 := *v
	yyh3899, yyl3899 := z.DecSliceHelperStart()

	var yyrr3899, yyrl3899 int
	var yyc3899, yyrt3899 bool
	_, _, _ = yyc3899, yyrt3899, yyrl3899
	yyrr3899 = yyl3899

	if yyv3899 == nil {
		if yyrl3899, yyrt3899 = z.DecInferLen(yyl3899, z.DecBasicHandle().MaxInitLen, 248); yyrt3899 {
			yyrr3899 = yyrl3899
		}
		yyv3899 = make([]Tenant, yyrl3899)
		yyc3899 = true
	}

	if yyl3899 == 0 {
		if len(yyv3899) != 0 {
			yyv3899 = yyv3899[:0]
			yyc3899 = true
		}
	} else if yyl3899 > 0 {

		if yyl3899 > cap(yyv3899) {
			yyrl3899, yyrt3899 = z.DecInferLen(yyl3899, z.DecBasicHandle().MaxInitLen, 248)
			yyv3899 = make([]Tenant, yyrl3899)
			yyc3899 = true

			yyrr3899 = len(yyv3899)
		} else if yyl3899 != len(yyv3899) {
			yyv3899 = yyv3899[:yyl3899]
			yyc3899 = true
		}
		yyj3899 := 0
		for ; yyj3899 < yyrr3899; yyj3899++ {
			if r.TryDecodeAsNil() {
				yyv3899[yyj3899] = Tenant{}
			} else {
				yyv3900 := &yyv3899[yyj3899]
				yyv3900.CodecDecodeSelf(d)
			}

		}
		if yyrt3899 {
			for ; yyj3899 < yyl3899; yyj3899++ {
				yyv3899 = append(yyv3899, Tenant{})
				if r.TryDecodeAsNil() {
					yyv3899[yyj3899] = Tenant{}
				} else {
					yyv3901 := &yyv3899[yyj3899]
					yyv3901.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3899 := 0; !r.CheckBreak(); yyj3899++ {
			if yyj3899 >= len(yyv3899) {
				yyv3899 = append(yyv3899, Tenant{}) // var yyz3899 Tenant
				yyc3899 = true
			}

			if yyj3899 < len(yyv3899) {
				if r.TryDecodeAsNil() {
					yyv3899[yyj3899] = Tenant{}
				} else {
					yyv3902 := &yyv3899[yyj3899]
					yyv3902.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3899.End()
	}
	if yyc3899 {
		*v = yyv3899
	}

}

func (x codecSelfer1234) encSliceEvent(v []Event, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3903 := range v {
		yy3904 := &yyv3903
		yy3904.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEvent(v *[]Event, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3905 := *v
	yyh3905, yyl3905 := z.DecSliceHelperStart()

	var yyrr3905, yyrl3905 int
	var yyc3905, yyrt3905 bool
	_, _, _ = yyc3905, yyrt3905, yyrl3905
	yyrr3905 = yyl3905

	if yyv3905 == nil {
		if yyrl3905, yyrt3905 = z.DecInferLen(yyl3905, z.DecBasicHandle().MaxInitLen, 456); yyrt3905 {
			yyrr3905 = yyrl3905
		}
		yyv3905 = make([]Event, yyrl3905)
		yyc3905 = true
	}

	if yyl3905 == 0 {
		if len(yyv3905) != 0 {
			yyv3905 = yyv3905[:0]
			yyc3905 = true
		}
	} else if yyl3905 > 0 {

		if yyl3905 > cap(yyv3905) {
			yyrl3905, yyrt3905 = z.DecInferLen(yyl3905, z.DecBasicHandle().MaxInitLen, 456)
			yyv3905 = make([]Event, yyrl3905)
			yyc3905 = true

			yyrr3905 = len(yyv3905)
		} else if yyl3905 != len(yyv3905) {
			yyv3905 = yyv3905[:yyl3905]
			yyc3905 = true
		}
		yyj3905 := 0
		for ; yyj3905 < yyrr3905; yyj3905++ {
			if r.TryDecodeAsNil() {
				yyv3905[yyj3905] = Event{}
			} else {
				yyv3906 := &yyv3905[yyj3905]
				yyv3906.CodecDecodeSelf(d)
			}

		}
		if yyrt3905 {
			for ; yyj3905 < yyl3905; yyj3905++ {
				yyv3905 = append(yyv3905, Event{})
				if r.TryDecodeAsNil() {
					yyv3905[yyj3905] = Event{}
				} else {
					yyv3907 := &yyv3905[yyj3905]
					yyv3907.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3905 := 0; !r.CheckBreak(); yyj3905++ {
			if yyj3905 >= len(yyv3905) {
				yyv3905 = append(yyv3905, Event{}) // var yyz3905 Event
				yyc3905 = true
			}

			if yyj3905 < len(yyv3905) {
				if r.TryDecodeAsNil() {
					yyv3905[yyj3905] = Event{}
				} else {
					yyv3908 := &yyv3905[yyj3905]
					yyv3908.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3905.End()
	}
	if yyc3905 {
		*v = yyv3905
	}

}

func (x codecSelfer1234) encSliceruntime_Object(v []pkg8_runtime.Object, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3909 := range v {
		if yyv3909 == nil {
			r.EncodeNil()
		} else {
			yym3910 := z.EncBinary()
			_ = yym3910
			if false {
			} else if z.HasExtensions() && z.EncExt(yyv3909) {
			} else {
				z.EncFallback(yyv3909)
			}
		}
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceruntime_Object(v *[]pkg8_runtime.Object, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3911 := *v
	yyh3911, yyl3911 := z.DecSliceHelperStart()

	var yyrr3911, yyrl3911 int
	var yyc3911, yyrt3911 bool
	_, _, _ = yyc3911, yyrt3911, yyrl3911
	yyrr3911 = yyl3911

	if yyv3911 == nil {
		if yyrl3911, yyrt3911 = z.DecInferLen(yyl3911, z.DecBasicHandle().MaxInitLen, 16); yyrt3911 {
			yyrr3911 = yyrl3911
		}
		yyv3911 = make([]pkg8_runtime.Object, yyrl3911)
		yyc3911 = true
	}

	if yyl3911 == 0 {
		if len(yyv3911) != 0 {
			yyv3911 = yyv3911[:0]
			yyc3911 = true
		}
	} else if yyl3911 > 0 {

		if yyl3911 > cap(yyv3911) {
			yyrl3911, yyrt3911 = z.DecInferLen(yyl3911, z.DecBasicHandle().MaxInitLen, 16)
			yyv3911 = make([]pkg8_runtime.Object, yyrl3911)
			yyc3911 = true

			yyrr3911 = len(yyv3911)
		} else if yyl3911 != len(yyv3911) {
			yyv3911 = yyv3911[:yyl3911]
			yyc3911 = true
		}
		yyj3911 := 0
		for ; yyj3911 < yyrr3911; yyj3911++ {
			if r.TryDecodeAsNil() {
				yyv3911[yyj3911] = nil
			} else {
				yyv3912 := &yyv3911[yyj3911]
				yym3913 := z.DecBinary()
				_ = yym3913
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3912) {
				} else {
					z.DecFallback(yyv3912, true)
				}
			}

		}
		if yyrt3911 {
			for ; yyj3911 < yyl3911; yyj3911++ {
				yyv3911 = append(yyv3911, nil)
				if r.TryDecodeAsNil() {
					yyv3911[yyj3911] = nil
				} else {
					yyv3914 := &yyv3911[yyj3911]
					yym3915 := z.DecBinary()
					_ = yym3915
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv3914) {
					} else {
						z.DecFallback(yyv3914, true)
					}
				}

			}
		}

	} else {
		for yyj3911 := 0; !r.CheckBreak(); yyj3911++ {
			if yyj3911 >= len(yyv3911) {
				yyv3911 = append(yyv3911, nil) // var yyz3911 pkg8_runtime.Object
				yyc3911 = true
			}

			if yyj3911 < len(yyv3911) {
				if r.TryDecodeAsNil() {
					yyv3911[yyj3911] = nil
				} else {
					yyv3916 := &yyv3911[yyj3911]
					yym3917 := z.DecBinary()
					_ = yym3917
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv3916) {
					} else {
						z.DecFallback(yyv3916, true)
					}
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3911.End()
	}
	if yyc3911 {
		*v = yyv3911
	}

}

func (x codecSelfer1234) encSliceLimitRangeItem(v []LimitRangeItem, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3918 := range v {
		yy3919 := &yyv3918
		yy3919.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceLimitRangeItem(v *[]LimitRangeItem, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3920 := *v
	yyh3920, yyl3920 := z.DecSliceHelperStart()

	var yyrr3920, yyrl3920 int
	var yyc3920, yyrt3920 bool
	_, _, _ = yyc3920, yyrt3920, yyrl3920
	yyrr3920 = yyl3920

	if yyv3920 == nil {
		if yyrl3920, yyrt3920 = z.DecInferLen(yyl3920, z.DecBasicHandle().MaxInitLen, 56); yyrt3920 {
			yyrr3920 = yyrl3920
		}
		yyv3920 = make([]LimitRangeItem, yyrl3920)
		yyc3920 = true
	}

	if yyl3920 == 0 {
		if len(yyv3920) != 0 {
			yyv3920 = yyv3920[:0]
			yyc3920 = true
		}
	} else if yyl3920 > 0 {

		if yyl3920 > cap(yyv3920) {
			yyrl3920, yyrt3920 = z.DecInferLen(yyl3920, z.DecBasicHandle().MaxInitLen, 56)
			yyv3920 = make([]LimitRangeItem, yyrl3920)
			yyc3920 = true

			yyrr3920 = len(yyv3920)
		} else if yyl3920 != len(yyv3920) {
			yyv3920 = yyv3920[:yyl3920]
			yyc3920 = true
		}
		yyj3920 := 0
		for ; yyj3920 < yyrr3920; yyj3920++ {
			if r.TryDecodeAsNil() {
				yyv3920[yyj3920] = LimitRangeItem{}
			} else {
				yyv3921 := &yyv3920[yyj3920]
				yyv3921.CodecDecodeSelf(d)
			}

		}
		if yyrt3920 {
			for ; yyj3920 < yyl3920; yyj3920++ {
				yyv3920 = append(yyv3920, LimitRangeItem{})
				if r.TryDecodeAsNil() {
					yyv3920[yyj3920] = LimitRangeItem{}
				} else {
					yyv3922 := &yyv3920[yyj3920]
					yyv3922.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3920 := 0; !r.CheckBreak(); yyj3920++ {
			if yyj3920 >= len(yyv3920) {
				yyv3920 = append(yyv3920, LimitRangeItem{}) // var yyz3920 LimitRangeItem
				yyc3920 = true
			}

			if yyj3920 < len(yyv3920) {
				if r.TryDecodeAsNil() {
					yyv3920[yyj3920] = LimitRangeItem{}
				} else {
					yyv3923 := &yyv3920[yyj3920]
					yyv3923.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3920.End()
	}
	if yyc3920 {
		*v = yyv3920
	}

}

func (x codecSelfer1234) encSliceLimitRange(v []LimitRange, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3924 := range v {
		yy3925 := &yyv3924
		yy3925.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceLimitRange(v *[]LimitRange, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3926 := *v
	yyh3926, yyl3926 := z.DecSliceHelperStart()

	var yyrr3926, yyrl3926 int
	var yyc3926, yyrt3926 bool
	_, _, _ = yyc3926, yyrt3926, yyrl3926
	yyrr3926 = yyl3926

	if yyv3926 == nil {
		if yyrl3926, yyrt3926 = z.DecInferLen(yyl3926, z.DecBasicHandle().MaxInitLen, 232); yyrt3926 {
			yyrr3926 = yyrl3926
		}
		yyv3926 = make([]LimitRange, yyrl3926)
		yyc3926 = true
	}

	if yyl3926 == 0 {
		if len(yyv3926) != 0 {
			yyv3926 = yyv3926[:0]
			yyc3926 = true
		}
	} else if yyl3926 > 0 {

		if yyl3926 > cap(yyv3926) {
			yyrl3926, yyrt3926 = z.DecInferLen(yyl3926, z.DecBasicHandle().MaxInitLen, 232)
			yyv3926 = make([]LimitRange, yyrl3926)
			yyc3926 = true

			yyrr3926 = len(yyv3926)
		} else if yyl3926 != len(yyv3926) {
			yyv3926 = yyv3926[:yyl3926]
			yyc3926 = true
		}
		yyj3926 := 0
		for ; yyj3926 < yyrr3926; yyj3926++ {
			if r.TryDecodeAsNil() {
				yyv3926[yyj3926] = LimitRange{}
			} else {
				yyv3927 := &yyv3926[yyj3926]
				yyv3927.CodecDecodeSelf(d)
			}

		}
		if yyrt3926 {
			for ; yyj3926 < yyl3926; yyj3926++ {
				yyv3926 = append(yyv3926, LimitRange{})
				if r.TryDecodeAsNil() {
					yyv3926[yyj3926] = LimitRange{}
				} else {
					yyv3928 := &yyv3926[yyj3926]
					yyv3928.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3926 := 0; !r.CheckBreak(); yyj3926++ {
			if yyj3926 >= len(yyv3926) {
				yyv3926 = append(yyv3926, LimitRange{}) // var yyz3926 LimitRange
				yyc3926 = true
			}

			if yyj3926 < len(yyv3926) {
				if r.TryDecodeAsNil() {
					yyv3926[yyj3926] = LimitRange{}
				} else {
					yyv3929 := &yyv3926[yyj3926]
					yyv3929.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3926.End()
	}
	if yyc3926 {
		*v = yyv3926
	}

}

func (x codecSelfer1234) encSliceResourceQuota(v []ResourceQuota, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3930 := range v {
		yy3931 := &yyv3930
		yy3931.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceResourceQuota(v *[]ResourceQuota, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3932 := *v
	yyh3932, yyl3932 := z.DecSliceHelperStart()

	var yyrr3932, yyrl3932 int
	var yyc3932, yyrt3932 bool
	_, _, _ = yyc3932, yyrt3932, yyrl3932
	yyrr3932 = yyl3932

	if yyv3932 == nil {
		if yyrl3932, yyrt3932 = z.DecInferLen(yyl3932, z.DecBasicHandle().MaxInitLen, 232); yyrt3932 {
			yyrr3932 = yyrl3932
		}
		yyv3932 = make([]ResourceQuota, yyrl3932)
		yyc3932 = true
	}

	if yyl3932 == 0 {
		if len(yyv3932) != 0 {
			yyv3932 = yyv3932[:0]
			yyc3932 = true
		}
	} else if yyl3932 > 0 {

		if yyl3932 > cap(yyv3932) {
			yyrl3932, yyrt3932 = z.DecInferLen(yyl3932, z.DecBasicHandle().MaxInitLen, 232)
			yyv3932 = make([]ResourceQuota, yyrl3932)
			yyc3932 = true

			yyrr3932 = len(yyv3932)
		} else if yyl3932 != len(yyv3932) {
			yyv3932 = yyv3932[:yyl3932]
			yyc3932 = true
		}
		yyj3932 := 0
		for ; yyj3932 < yyrr3932; yyj3932++ {
			if r.TryDecodeAsNil() {
				yyv3932[yyj3932] = ResourceQuota{}
			} else {
				yyv3933 := &yyv3932[yyj3932]
				yyv3933.CodecDecodeSelf(d)
			}

		}
		if yyrt3932 {
			for ; yyj3932 < yyl3932; yyj3932++ {
				yyv3932 = append(yyv3932, ResourceQuota{})
				if r.TryDecodeAsNil() {
					yyv3932[yyj3932] = ResourceQuota{}
				} else {
					yyv3934 := &yyv3932[yyj3932]
					yyv3934.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3932 := 0; !r.CheckBreak(); yyj3932++ {
			if yyj3932 >= len(yyv3932) {
				yyv3932 = append(yyv3932, ResourceQuota{}) // var yyz3932 ResourceQuota
				yyc3932 = true
			}

			if yyj3932 < len(yyv3932) {
				if r.TryDecodeAsNil() {
					yyv3932[yyj3932] = ResourceQuota{}
				} else {
					yyv3935 := &yyv3932[yyj3932]
					yyv3935.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3932.End()
	}
	if yyc3932 {
		*v = yyv3932
	}

}

func (x codecSelfer1234) encMapstringSliceuint8(v map[string][]uint8, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk3936, yyv3936 := range v {
		yym3937 := z.EncBinary()
		_ = yym3937
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF81234, string(yyk3936))
		}
		if yyv3936 == nil {
			r.EncodeNil()
		} else {
			yym3938 := z.EncBinary()
			_ = yym3938
			if false {
			} else {
				r.EncodeStringBytes(codecSelferC_RAW1234, []byte(yyv3936))
			}
		}
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decMapstringSliceuint8(v *map[string][]uint8, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3939 := *v
	yyl3939 := r.ReadMapStart()
	yybh3939 := z.DecBasicHandle()
	if yyv3939 == nil {
		yyrl3939, _ := z.DecInferLen(yyl3939, yybh3939.MaxInitLen, 40)
		yyv3939 = make(map[string][]uint8, yyrl3939)
		*v = yyv3939
	}
	var yymk3939 string
	var yymv3939 []uint8
	var yymg3939 bool
	if yybh3939.MapValueReset {
		yymg3939 = true
	}
	if yyl3939 > 0 {
		for yyj3939 := 0; yyj3939 < yyl3939; yyj3939++ {
			if r.TryDecodeAsNil() {
				yymk3939 = ""
			} else {
				yymk3939 = string(r.DecodeString())
			}

			if yymg3939 {
				yymv3939 = yyv3939[yymk3939]
			} else {
				yymv3939 = nil
			}
			if r.TryDecodeAsNil() {
				yymv3939 = nil
			} else {
				yyv3941 := &yymv3939
				yym3942 := z.DecBinary()
				_ = yym3942
				if false {
				} else {
					*yyv3941 = r.DecodeBytes(*(*[]byte)(yyv3941), false, false)
				}
			}

			if yyv3939 != nil {
				yyv3939[yymk3939] = yymv3939
			}
		}
	} else if yyl3939 < 0 {
		for yyj3939 := 0; !r.CheckBreak(); yyj3939++ {
			if r.TryDecodeAsNil() {
				yymk3939 = ""
			} else {
				yymk3939 = string(r.DecodeString())
			}

			if yymg3939 {
				yymv3939 = yyv3939[yymk3939]
			} else {
				yymv3939 = nil
			}
			if r.TryDecodeAsNil() {
				yymv3939 = nil
			} else {
				yyv3944 := &yymv3939
				yym3945 := z.DecBinary()
				_ = yym3945
				if false {
				} else {
					*yyv3944 = r.DecodeBytes(*(*[]byte)(yyv3944), false, false)
				}
			}

			if yyv3939 != nil {
				yyv3939[yymk3939] = yymv3939
			}
		}
		r.ReadEnd()
	} // else len==0: TODO: Should we clear map entries?
}

func (x codecSelfer1234) encSliceSecret(v []Secret, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3946 := range v {
		yy3947 := &yyv3946
		yy3947.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceSecret(v *[]Secret, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3948 := *v
	yyh3948, yyl3948 := z.DecSliceHelperStart()

	var yyrr3948, yyrl3948 int
	var yyc3948, yyrt3948 bool
	_, _, _ = yyc3948, yyrt3948, yyrl3948
	yyrr3948 = yyl3948

	if yyv3948 == nil {
		if yyrl3948, yyrt3948 = z.DecInferLen(yyl3948, z.DecBasicHandle().MaxInitLen, 232); yyrt3948 {
			yyrr3948 = yyrl3948
		}
		yyv3948 = make([]Secret, yyrl3948)
		yyc3948 = true
	}

	if yyl3948 == 0 {
		if len(yyv3948) != 0 {
			yyv3948 = yyv3948[:0]
			yyc3948 = true
		}
	} else if yyl3948 > 0 {

		if yyl3948 > cap(yyv3948) {
			yyrl3948, yyrt3948 = z.DecInferLen(yyl3948, z.DecBasicHandle().MaxInitLen, 232)
			yyv3948 = make([]Secret, yyrl3948)
			yyc3948 = true

			yyrr3948 = len(yyv3948)
		} else if yyl3948 != len(yyv3948) {
			yyv3948 = yyv3948[:yyl3948]
			yyc3948 = true
		}
		yyj3948 := 0
		for ; yyj3948 < yyrr3948; yyj3948++ {
			if r.TryDecodeAsNil() {
				yyv3948[yyj3948] = Secret{}
			} else {
				yyv3949 := &yyv3948[yyj3948]
				yyv3949.CodecDecodeSelf(d)
			}

		}
		if yyrt3948 {
			for ; yyj3948 < yyl3948; yyj3948++ {
				yyv3948 = append(yyv3948, Secret{})
				if r.TryDecodeAsNil() {
					yyv3948[yyj3948] = Secret{}
				} else {
					yyv3950 := &yyv3948[yyj3948]
					yyv3950.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3948 := 0; !r.CheckBreak(); yyj3948++ {
			if yyj3948 >= len(yyv3948) {
				yyv3948 = append(yyv3948, Secret{}) // var yyz3948 Secret
				yyc3948 = true
			}

			if yyj3948 < len(yyv3948) {
				if r.TryDecodeAsNil() {
					yyv3948[yyj3948] = Secret{}
				} else {
					yyv3951 := &yyv3948[yyj3948]
					yyv3951.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3948.End()
	}
	if yyc3948 {
		*v = yyv3948
	}

}

func (x codecSelfer1234) encSliceComponentCondition(v []ComponentCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3952 := range v {
		yy3953 := &yyv3952
		yy3953.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceComponentCondition(v *[]ComponentCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3954 := *v
	yyh3954, yyl3954 := z.DecSliceHelperStart()

	var yyrr3954, yyrl3954 int
	var yyc3954, yyrt3954 bool
	_, _, _ = yyc3954, yyrt3954, yyrl3954
	yyrr3954 = yyl3954

	if yyv3954 == nil {
		if yyrl3954, yyrt3954 = z.DecInferLen(yyl3954, z.DecBasicHandle().MaxInitLen, 64); yyrt3954 {
			yyrr3954 = yyrl3954
		}
		yyv3954 = make([]ComponentCondition, yyrl3954)
		yyc3954 = true
	}

	if yyl3954 == 0 {
		if len(yyv3954) != 0 {
			yyv3954 = yyv3954[:0]
			yyc3954 = true
		}
	} else if yyl3954 > 0 {

		if yyl3954 > cap(yyv3954) {
			yyrl3954, yyrt3954 = z.DecInferLen(yyl3954, z.DecBasicHandle().MaxInitLen, 64)
			yyv3954 = make([]ComponentCondition, yyrl3954)
			yyc3954 = true

			yyrr3954 = len(yyv3954)
		} else if yyl3954 != len(yyv3954) {
			yyv3954 = yyv3954[:yyl3954]
			yyc3954 = true
		}
		yyj3954 := 0
		for ; yyj3954 < yyrr3954; yyj3954++ {
			if r.TryDecodeAsNil() {
				yyv3954[yyj3954] = ComponentCondition{}
			} else {
				yyv3955 := &yyv3954[yyj3954]
				yyv3955.CodecDecodeSelf(d)
			}

		}
		if yyrt3954 {
			for ; yyj3954 < yyl3954; yyj3954++ {
				yyv3954 = append(yyv3954, ComponentCondition{})
				if r.TryDecodeAsNil() {
					yyv3954[yyj3954] = ComponentCondition{}
				} else {
					yyv3956 := &yyv3954[yyj3954]
					yyv3956.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3954 := 0; !r.CheckBreak(); yyj3954++ {
			if yyj3954 >= len(yyv3954) {
				yyv3954 = append(yyv3954, ComponentCondition{}) // var yyz3954 ComponentCondition
				yyc3954 = true
			}

			if yyj3954 < len(yyv3954) {
				if r.TryDecodeAsNil() {
					yyv3954[yyj3954] = ComponentCondition{}
				} else {
					yyv3957 := &yyv3954[yyj3954]
					yyv3957.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3954.End()
	}
	if yyc3954 {
		*v = yyv3954
	}

}

func (x codecSelfer1234) encSliceComponentStatus(v []ComponentStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3958 := range v {
		yy3959 := &yyv3958
		yy3959.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceComponentStatus(v *[]ComponentStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3960 := *v
	yyh3960, yyl3960 := z.DecSliceHelperStart()

	var yyrr3960, yyrl3960 int
	var yyc3960, yyrt3960 bool
	_, _, _ = yyc3960, yyrt3960, yyrl3960
	yyrr3960 = yyl3960

	if yyv3960 == nil {
		if yyrl3960, yyrt3960 = z.DecInferLen(yyl3960, z.DecBasicHandle().MaxInitLen, 232); yyrt3960 {
			yyrr3960 = yyrl3960
		}
		yyv3960 = make([]ComponentStatus, yyrl3960)
		yyc3960 = true
	}

	if yyl3960 == 0 {
		if len(yyv3960) != 0 {
			yyv3960 = yyv3960[:0]
			yyc3960 = true
		}
	} else if yyl3960 > 0 {

		if yyl3960 > cap(yyv3960) {
			yyrl3960, yyrt3960 = z.DecInferLen(yyl3960, z.DecBasicHandle().MaxInitLen, 232)
			yyv3960 = make([]ComponentStatus, yyrl3960)
			yyc3960 = true

			yyrr3960 = len(yyv3960)
		} else if yyl3960 != len(yyv3960) {
			yyv3960 = yyv3960[:yyl3960]
			yyc3960 = true
		}
		yyj3960 := 0
		for ; yyj3960 < yyrr3960; yyj3960++ {
			if r.TryDecodeAsNil() {
				yyv3960[yyj3960] = ComponentStatus{}
			} else {
				yyv3961 := &yyv3960[yyj3960]
				yyv3961.CodecDecodeSelf(d)
			}

		}
		if yyrt3960 {
			for ; yyj3960 < yyl3960; yyj3960++ {
				yyv3960 = append(yyv3960, ComponentStatus{})
				if r.TryDecodeAsNil() {
					yyv3960[yyj3960] = ComponentStatus{}
				} else {
					yyv3962 := &yyv3960[yyj3960]
					yyv3962.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3960 := 0; !r.CheckBreak(); yyj3960++ {
			if yyj3960 >= len(yyv3960) {
				yyv3960 = append(yyv3960, ComponentStatus{}) // var yyz3960 ComponentStatus
				yyc3960 = true
			}

			if yyj3960 < len(yyv3960) {
				if r.TryDecodeAsNil() {
					yyv3960[yyj3960] = ComponentStatus{}
				} else {
					yyv3963 := &yyv3960[yyj3960]
					yyv3963.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3960.End()
	}
	if yyc3960 {
		*v = yyv3960
	}

}
