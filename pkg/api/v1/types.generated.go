/*
Copyright 2015 The Kubernetes Authors All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package v1

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg3_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg2_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg6_runtime "k8s.io/kubernetes/pkg/runtime"
	pkg1_types "k8s.io/kubernetes/pkg/types"
	pkg5_util "k8s.io/kubernetes/pkg/util"
	"reflect"
	"runtime"
	pkg4_inf "speter.net/go/exp/math/dec/inf"
	time "time"
)

const (
	codecSelferC_UTF81234         = 1
	codecSelferC_RAW1234          = 0
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 4 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			4, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg3_resource.Quantity
		var v1 pkg2_unversioned.Time
		var v2 pkg6_runtime.RawExtension
		var v3 pkg1_types.UID
		var v4 pkg5_util.IntOrString
		var v5 pkg4_inf.Dec
		var v6 time.Time
		_, _, _, _, _, _, _ = v0, v1, v2, v3, v4, v5, v6
	}
}

func (x *ObjectMeta) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [13]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Name != ""
			yyq2[1] = x.GenerateName != ""
			yyq2[2] = x.Tenant != ""
			yyq2[3] = x.Namespace != ""
			yyq2[4] = x.SelfLink != ""
			yyq2[5] = x.UID != ""
			yyq2[6] = x.ResourceVersion != ""
			yyq2[7] = x.Generation != 0
			yyq2[8] = true
			yyq2[9] = x.DeletionTimestamp != nil
			yyq2[10] = x.DeletionGracePeriodSeconds != nil
			yyq2[11] = len(x.Labels) != 0
			yyq2[12] = len(x.Annotations) != 0
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(13)
			} else {
				var yynn2 int = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
			}
			if yyr2 || yy2arr2 {
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[0] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[1] {
					r.EncodeString(codecSelferC_UTF81234, string("generateName"))
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[2] {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Tenant))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[2] {
					r.EncodeString(codecSelferC_UTF81234, string("tenant"))
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Tenant))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[3] {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[3] {
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[4] {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[4] {
					r.EncodeString(codecSelferC_UTF81234, string("selfLink"))
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[5] {
					yym19 := z.EncBinary()
					_ = yym19
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[5] {
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					yym20 := z.EncBinary()
					_ = yym20
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[6] {
					yym22 := z.EncBinary()
					_ = yym22
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[6] {
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					yym23 := z.EncBinary()
					_ = yym23
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[7] {
					yym25 := z.EncBinary()
					_ = yym25
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[7] {
					r.EncodeString(codecSelferC_UTF81234, string("generation"))
					yym26 := z.EncBinary()
					_ = yym26
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[8] {
					yy28 := &x.CreationTimestamp
					yym29 := z.EncBinary()
					_ = yym29
					if false {
					} else if z.HasExtensions() && z.EncExt(yy28) {
					} else if yym29 {
						z.EncBinaryMarshal(yy28)
					} else if !yym29 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy28)
					} else {
						z.EncFallback(yy28)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[8] {
					r.EncodeString(codecSelferC_UTF81234, string("creationTimestamp"))
					yy30 := &x.CreationTimestamp
					yym31 := z.EncBinary()
					_ = yym31
					if false {
					} else if z.HasExtensions() && z.EncExt(yy30) {
					} else if yym31 {
						z.EncBinaryMarshal(yy30)
					} else if !yym31 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy30)
					} else {
						z.EncFallback(yy30)
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[9] {
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym33 := z.EncBinary()
						_ = yym33
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym33 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym33 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[9] {
					r.EncodeString(codecSelferC_UTF81234, string("deletionTimestamp"))
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym34 := z.EncBinary()
						_ = yym34
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym34 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym34 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[10] {
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy36 := *x.DeletionGracePeriodSeconds
						yym37 := z.EncBinary()
						_ = yym37
						if false {
						} else {
							r.EncodeInt(int64(yy36))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[10] {
					r.EncodeString(codecSelferC_UTF81234, string("deletionGracePeriodSeconds"))
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy38 := *x.DeletionGracePeriodSeconds
						yym39 := z.EncBinary()
						_ = yym39
						if false {
						} else {
							r.EncodeInt(int64(yy38))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[11] {
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym41 := z.EncBinary()
						_ = yym41
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[11] {
					r.EncodeString(codecSelferC_UTF81234, string("labels"))
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym42 := z.EncBinary()
						_ = yym42
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[12] {
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym44 := z.EncBinary()
						_ = yym44
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[12] {
					r.EncodeString(codecSelferC_UTF81234, string("annotations"))
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym45 := z.EncBinary()
						_ = yym45
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				}
			}
			if yysep2 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ObjectMeta) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym46 := z.DecBinary()
	_ = yym46
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl47 := r.ReadMapStart()
			if yyl47 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl47, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl47 := r.ReadArrayStart()
			if yyl47 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl47, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectMeta) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys48Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys48Slc
	var yyhl48 bool = l >= 0
	for yyj48 := 0; ; yyj48++ {
		if yyhl48 {
			if yyj48 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys48Slc = r.DecodeBytes(yys48Slc, true, true)
		yys48 := string(yys48Slc)
		switch yys48 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "generateName":
			if r.TryDecodeAsNil() {
				x.GenerateName = ""
			} else {
				x.GenerateName = string(r.DecodeString())
			}
		case "tenant":
			if r.TryDecodeAsNil() {
				x.Tenant = ""
			} else {
				x.Tenant = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "selfLink":
			if r.TryDecodeAsNil() {
				x.SelfLink = ""
			} else {
				x.SelfLink = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "generation":
			if r.TryDecodeAsNil() {
				x.Generation = 0
			} else {
				x.Generation = int64(r.DecodeInt(64))
			}
		case "creationTimestamp":
			if r.TryDecodeAsNil() {
				x.CreationTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv57 := &x.CreationTimestamp
				yym58 := z.DecBinary()
				_ = yym58
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv57) {
				} else if yym58 {
					z.DecBinaryUnmarshal(yyv57)
				} else if !yym58 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv57)
				} else {
					z.DecFallback(yyv57, false)
				}
			}
		case "deletionTimestamp":
			if r.TryDecodeAsNil() {
				if x.DeletionTimestamp != nil {
					x.DeletionTimestamp = nil
				}
			} else {
				if x.DeletionTimestamp == nil {
					x.DeletionTimestamp = new(pkg2_unversioned.Time)
				}
				yym60 := z.DecBinary()
				_ = yym60
				if false {
				} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
				} else if yym60 {
					z.DecBinaryUnmarshal(x.DeletionTimestamp)
				} else if !yym60 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.DeletionTimestamp)
				} else {
					z.DecFallback(x.DeletionTimestamp, false)
				}
			}
		case "deletionGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.DeletionGracePeriodSeconds != nil {
					x.DeletionGracePeriodSeconds = nil
				}
			} else {
				if x.DeletionGracePeriodSeconds == nil {
					x.DeletionGracePeriodSeconds = new(int64)
				}
				yym62 := z.DecBinary()
				_ = yym62
				if false {
				} else {
					*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "labels":
			if r.TryDecodeAsNil() {
				x.Labels = nil
			} else {
				yyv63 := &x.Labels
				yym64 := z.DecBinary()
				_ = yym64
				if false {
				} else {
					z.F.DecMapStringStringX(yyv63, false, d)
				}
			}
		case "annotations":
			if r.TryDecodeAsNil() {
				x.Annotations = nil
			} else {
				yyv65 := &x.Annotations
				yym66 := z.DecBinary()
				_ = yym66
				if false {
				} else {
					z.F.DecMapStringStringX(yyv65, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys48)
		} // end switch yys48
	} // end for yyj48
	if !yyhl48 {
		r.ReadEnd()
	}
}

func (x *ObjectMeta) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj67 int
	var yyb67 bool
	var yyhl67 bool = l >= 0
	yyj67++
	if yyhl67 {
		yyb67 = yyj67 > l
	} else {
		yyb67 = r.CheckBreak()
	}
	if yyb67 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj67++
	if yyhl67 {
		yyb67 = yyj67 > l
	} else {
		yyb67 = r.CheckBreak()
	}
	if yyb67 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.GenerateName = ""
	} else {
		x.GenerateName = string(r.DecodeString())
	}
	yyj67++
	if yyhl67 {
		yyb67 = yyj67 > l
	} else {
		yyb67 = r.CheckBreak()
	}
	if yyb67 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Tenant = ""
	} else {
		x.Tenant = string(r.DecodeString())
	}
	yyj67++
	if yyhl67 {
		yyb67 = yyj67 > l
	} else {
		yyb67 = r.CheckBreak()
	}
	if yyb67 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj67++
	if yyhl67 {
		yyb67 = yyj67 > l
	} else {
		yyb67 = r.CheckBreak()
	}
	if yyb67 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SelfLink = ""
	} else {
		x.SelfLink = string(r.DecodeString())
	}
	yyj67++
	if yyhl67 {
		yyb67 = yyj67 > l
	} else {
		yyb67 = r.CheckBreak()
	}
	if yyb67 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj67++
	if yyhl67 {
		yyb67 = yyj67 > l
	} else {
		yyb67 = r.CheckBreak()
	}
	if yyb67 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj67++
	if yyhl67 {
		yyb67 = yyj67 > l
	} else {
		yyb67 = r.CheckBreak()
	}
	if yyb67 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Generation = 0
	} else {
		x.Generation = int64(r.DecodeInt(64))
	}
	yyj67++
	if yyhl67 {
		yyb67 = yyj67 > l
	} else {
		yyb67 = r.CheckBreak()
	}
	if yyb67 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.CreationTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv76 := &x.CreationTimestamp
		yym77 := z.DecBinary()
		_ = yym77
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv76) {
		} else if yym77 {
			z.DecBinaryUnmarshal(yyv76)
		} else if !yym77 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv76)
		} else {
			z.DecFallback(yyv76, false)
		}
	}
	yyj67++
	if yyhl67 {
		yyb67 = yyj67 > l
	} else {
		yyb67 = r.CheckBreak()
	}
	if yyb67 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.DeletionTimestamp != nil {
			x.DeletionTimestamp = nil
		}
	} else {
		if x.DeletionTimestamp == nil {
			x.DeletionTimestamp = new(pkg2_unversioned.Time)
		}
		yym79 := z.DecBinary()
		_ = yym79
		if false {
		} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
		} else if yym79 {
			z.DecBinaryUnmarshal(x.DeletionTimestamp)
		} else if !yym79 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.DeletionTimestamp)
		} else {
			z.DecFallback(x.DeletionTimestamp, false)
		}
	}
	yyj67++
	if yyhl67 {
		yyb67 = yyj67 > l
	} else {
		yyb67 = r.CheckBreak()
	}
	if yyb67 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.DeletionGracePeriodSeconds != nil {
			x.DeletionGracePeriodSeconds = nil
		}
	} else {
		if x.DeletionGracePeriodSeconds == nil {
			x.DeletionGracePeriodSeconds = new(int64)
		}
		yym81 := z.DecBinary()
		_ = yym81
		if false {
		} else {
			*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj67++
	if yyhl67 {
		yyb67 = yyj67 > l
	} else {
		yyb67 = r.CheckBreak()
	}
	if yyb67 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Labels = nil
	} else {
		yyv82 := &x.Labels
		yym83 := z.DecBinary()
		_ = yym83
		if false {
		} else {
			z.F.DecMapStringStringX(yyv82, false, d)
		}
	}
	yyj67++
	if yyhl67 {
		yyb67 = yyj67 > l
	} else {
		yyb67 = r.CheckBreak()
	}
	if yyb67 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Annotations = nil
	} else {
		yyv84 := &x.Annotations
		yym85 := z.DecBinary()
		_ = yym85
		if false {
		} else {
			z.F.DecMapStringStringX(yyv84, false, d)
		}
	}
	for {
		yyj67++
		if yyhl67 {
			yyb67 = yyj67 > l
		} else {
			yyb67 = r.CheckBreak()
		}
		if yyb67 {
			break
		}
		z.DecStructFieldNotFound(yyj67-1, "")
	}
	r.ReadEnd()
}

func (x *Volume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym86 := z.EncBinary()
		_ = yym86
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep87 := !z.EncBinary()
			yy2arr87 := z.EncBasicHandle().StructToArray
			var yyq87 [17]bool
			_, _, _ = yysep87, yyq87, yy2arr87
			const yyr87 bool = false
			yyq87[1] = x.VolumeSource.HostPath != nil && x.HostPath != nil
			yyq87[2] = x.VolumeSource.EmptyDir != nil && x.EmptyDir != nil
			yyq87[3] = x.VolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq87[4] = x.VolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq87[5] = x.VolumeSource.GitRepo != nil && x.GitRepo != nil
			yyq87[6] = x.VolumeSource.Secret != nil && x.Secret != nil
			yyq87[7] = x.VolumeSource.NFS != nil && x.NFS != nil
			yyq87[8] = x.VolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq87[9] = x.VolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq87[10] = x.VolumeSource.PersistentVolumeClaim != nil && x.PersistentVolumeClaim != nil
			yyq87[11] = x.VolumeSource.RBD != nil && x.RBD != nil
			yyq87[12] = x.VolumeSource.Cinder != nil && x.Cinder != nil
			yyq87[13] = x.VolumeSource.CephFS != nil && x.CephFS != nil
			yyq87[14] = x.VolumeSource.Flocker != nil && x.Flocker != nil
			yyq87[15] = x.VolumeSource.DownwardAPI != nil && x.DownwardAPI != nil
			yyq87[16] = x.VolumeSource.FC != nil && x.FC != nil
			if yyr87 || yy2arr87 {
				r.EncodeArrayStart(17)
			} else {
				var yynn87 int = 1
				for _, b := range yyq87 {
					if b {
						yynn87++
					}
				}
				r.EncodeMapStart(yynn87)
			}
			if yyr87 || yy2arr87 {
				yym89 := z.EncBinary()
				_ = yym89
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				yym90 := z.EncBinary()
				_ = yym90
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			var yyn91 bool
			if x.VolumeSource.HostPath == nil {
				yyn91 = true
				goto LABEL91
			}
		LABEL91:
			if yyr87 || yy2arr87 {
				if yyn91 {
					r.EncodeNil()
				} else {
					if yyq87[1] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq87[1] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					if yyn91 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn92 bool
			if x.VolumeSource.EmptyDir == nil {
				yyn92 = true
				goto LABEL92
			}
		LABEL92:
			if yyr87 || yy2arr87 {
				if yyn92 {
					r.EncodeNil()
				} else {
					if yyq87[2] {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq87[2] {
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					if yyn92 {
						r.EncodeNil()
					} else {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn93 bool
			if x.VolumeSource.GCEPersistentDisk == nil {
				yyn93 = true
				goto LABEL93
			}
		LABEL93:
			if yyr87 || yy2arr87 {
				if yyn93 {
					r.EncodeNil()
				} else {
					if yyq87[3] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq87[3] {
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					if yyn93 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn94 bool
			if x.VolumeSource.AWSElasticBlockStore == nil {
				yyn94 = true
				goto LABEL94
			}
		LABEL94:
			if yyr87 || yy2arr87 {
				if yyn94 {
					r.EncodeNil()
				} else {
					if yyq87[4] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq87[4] {
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					if yyn94 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn95 bool
			if x.VolumeSource.GitRepo == nil {
				yyn95 = true
				goto LABEL95
			}
		LABEL95:
			if yyr87 || yy2arr87 {
				if yyn95 {
					r.EncodeNil()
				} else {
					if yyq87[5] {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq87[5] {
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					if yyn95 {
						r.EncodeNil()
					} else {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn96 bool
			if x.VolumeSource.Secret == nil {
				yyn96 = true
				goto LABEL96
			}
		LABEL96:
			if yyr87 || yy2arr87 {
				if yyn96 {
					r.EncodeNil()
				} else {
					if yyq87[6] {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq87[6] {
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					if yyn96 {
						r.EncodeNil()
					} else {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn97 bool
			if x.VolumeSource.NFS == nil {
				yyn97 = true
				goto LABEL97
			}
		LABEL97:
			if yyr87 || yy2arr87 {
				if yyn97 {
					r.EncodeNil()
				} else {
					if yyq87[7] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq87[7] {
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					if yyn97 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn98 bool
			if x.VolumeSource.ISCSI == nil {
				yyn98 = true
				goto LABEL98
			}
		LABEL98:
			if yyr87 || yy2arr87 {
				if yyn98 {
					r.EncodeNil()
				} else {
					if yyq87[8] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq87[8] {
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					if yyn98 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn99 bool
			if x.VolumeSource.Glusterfs == nil {
				yyn99 = true
				goto LABEL99
			}
		LABEL99:
			if yyr87 || yy2arr87 {
				if yyn99 {
					r.EncodeNil()
				} else {
					if yyq87[9] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq87[9] {
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					if yyn99 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn100 bool
			if x.VolumeSource.PersistentVolumeClaim == nil {
				yyn100 = true
				goto LABEL100
			}
		LABEL100:
			if yyr87 || yy2arr87 {
				if yyn100 {
					r.EncodeNil()
				} else {
					if yyq87[10] {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq87[10] {
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					if yyn100 {
						r.EncodeNil()
					} else {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn101 bool
			if x.VolumeSource.RBD == nil {
				yyn101 = true
				goto LABEL101
			}
		LABEL101:
			if yyr87 || yy2arr87 {
				if yyn101 {
					r.EncodeNil()
				} else {
					if yyq87[11] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq87[11] {
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					if yyn101 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn102 bool
			if x.VolumeSource.Cinder == nil {
				yyn102 = true
				goto LABEL102
			}
		LABEL102:
			if yyr87 || yy2arr87 {
				if yyn102 {
					r.EncodeNil()
				} else {
					if yyq87[12] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq87[12] {
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					if yyn102 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn103 bool
			if x.VolumeSource.CephFS == nil {
				yyn103 = true
				goto LABEL103
			}
		LABEL103:
			if yyr87 || yy2arr87 {
				if yyn103 {
					r.EncodeNil()
				} else {
					if yyq87[13] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq87[13] {
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					if yyn103 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn104 bool
			if x.VolumeSource.Flocker == nil {
				yyn104 = true
				goto LABEL104
			}
		LABEL104:
			if yyr87 || yy2arr87 {
				if yyn104 {
					r.EncodeNil()
				} else {
					if yyq87[14] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq87[14] {
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					if yyn104 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn105 bool
			if x.VolumeSource.DownwardAPI == nil {
				yyn105 = true
				goto LABEL105
			}
		LABEL105:
			if yyr87 || yy2arr87 {
				if yyn105 {
					r.EncodeNil()
				} else {
					if yyq87[15] {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq87[15] {
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					if yyn105 {
						r.EncodeNil()
					} else {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn106 bool
			if x.VolumeSource.FC == nil {
				yyn106 = true
				goto LABEL106
			}
		LABEL106:
			if yyr87 || yy2arr87 {
				if yyn106 {
					r.EncodeNil()
				} else {
					if yyq87[16] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq87[16] {
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					if yyn106 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yysep87 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Volume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym107 := z.DecBinary()
	_ = yym107
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl108 := r.ReadMapStart()
			if yyl108 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl108, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl108 := r.ReadArrayStart()
			if yyl108 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl108, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Volume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys109Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys109Slc
	var yyhl109 bool = l >= 0
	for yyj109 := 0; ; yyj109++ {
		if yyhl109 {
			if yyj109 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys109Slc = r.DecodeBytes(yys109Slc, true, true)
		yys109 := string(yys109Slc)
		switch yys109 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPath":
			if x.VolumeSource.HostPath == nil {
				x.VolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if x.VolumeSource.EmptyDir == nil {
				x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.VolumeSource.GCEPersistentDisk == nil {
				x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.VolumeSource.AWSElasticBlockStore == nil {
				x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if x.VolumeSource.GitRepo == nil {
				x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if x.VolumeSource.Secret == nil {
				x.VolumeSource.Secret = new(SecretVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.VolumeSource.NFS == nil {
				x.VolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.VolumeSource.ISCSI == nil {
				x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.VolumeSource.Glusterfs == nil {
				x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if x.VolumeSource.PersistentVolumeClaim == nil {
				x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.VolumeSource.RBD == nil {
				x.VolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.VolumeSource.Cinder == nil {
				x.VolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.VolumeSource.CephFS == nil {
				x.VolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.VolumeSource.Flocker == nil {
				x.VolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if x.VolumeSource.DownwardAPI == nil {
				x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if x.VolumeSource.FC == nil {
				x.VolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys109)
		} // end switch yys109
	} // end for yyj109
	if !yyhl109 {
		r.ReadEnd()
	}
}

func (x *Volume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj127 int
	var yyb127 bool
	var yyhl127 bool = l >= 0
	yyj127++
	if yyhl127 {
		yyb127 = yyj127 > l
	} else {
		yyb127 = r.CheckBreak()
	}
	if yyb127 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj127++
	if yyhl127 {
		yyb127 = yyj127 > l
	} else {
		yyb127 = r.CheckBreak()
	}
	if yyb127 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj127++
	if yyhl127 {
		yyb127 = yyj127 > l
	} else {
		yyb127 = r.CheckBreak()
	}
	if yyb127 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	yyj127++
	if yyhl127 {
		yyb127 = yyj127 > l
	} else {
		yyb127 = r.CheckBreak()
	}
	if yyb127 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj127++
	if yyhl127 {
		yyb127 = yyj127 > l
	} else {
		yyb127 = r.CheckBreak()
	}
	if yyb127 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj127++
	if yyhl127 {
		yyb127 = yyj127 > l
	} else {
		yyb127 = r.CheckBreak()
	}
	if yyb127 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	yyj127++
	if yyhl127 {
		yyb127 = yyj127 > l
	} else {
		yyb127 = r.CheckBreak()
	}
	if yyb127 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	yyj127++
	if yyhl127 {
		yyb127 = yyj127 > l
	} else {
		yyb127 = r.CheckBreak()
	}
	if yyb127 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj127++
	if yyhl127 {
		yyb127 = yyj127 > l
	} else {
		yyb127 = r.CheckBreak()
	}
	if yyb127 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj127++
	if yyhl127 {
		yyb127 = yyj127 > l
	} else {
		yyb127 = r.CheckBreak()
	}
	if yyb127 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj127++
	if yyhl127 {
		yyb127 = yyj127 > l
	} else {
		yyb127 = r.CheckBreak()
	}
	if yyb127 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	yyj127++
	if yyhl127 {
		yyb127 = yyj127 > l
	} else {
		yyb127 = r.CheckBreak()
	}
	if yyb127 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj127++
	if yyhl127 {
		yyb127 = yyj127 > l
	} else {
		yyb127 = r.CheckBreak()
	}
	if yyb127 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj127++
	if yyhl127 {
		yyb127 = yyj127 > l
	} else {
		yyb127 = r.CheckBreak()
	}
	if yyb127 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj127++
	if yyhl127 {
		yyb127 = yyj127 > l
	} else {
		yyb127 = r.CheckBreak()
	}
	if yyb127 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj127++
	if yyhl127 {
		yyb127 = yyj127 > l
	} else {
		yyb127 = r.CheckBreak()
	}
	if yyb127 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	yyj127++
	if yyhl127 {
		yyb127 = yyj127 > l
	} else {
		yyb127 = r.CheckBreak()
	}
	if yyb127 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	for {
		yyj127++
		if yyhl127 {
			yyb127 = yyj127 > l
		} else {
			yyb127 = r.CheckBreak()
		}
		if yyb127 {
			break
		}
		z.DecStructFieldNotFound(yyj127-1, "")
	}
	r.ReadEnd()
}

func (x *VolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym145 := z.EncBinary()
		_ = yym145
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep146 := !z.EncBinary()
			yy2arr146 := z.EncBasicHandle().StructToArray
			var yyq146 [16]bool
			_, _, _ = yysep146, yyq146, yy2arr146
			const yyr146 bool = false
			yyq146[0] = x.HostPath != nil
			yyq146[1] = x.EmptyDir != nil
			yyq146[2] = x.GCEPersistentDisk != nil
			yyq146[3] = x.AWSElasticBlockStore != nil
			yyq146[4] = x.GitRepo != nil
			yyq146[5] = x.Secret != nil
			yyq146[6] = x.NFS != nil
			yyq146[7] = x.ISCSI != nil
			yyq146[8] = x.Glusterfs != nil
			yyq146[9] = x.PersistentVolumeClaim != nil
			yyq146[10] = x.RBD != nil
			yyq146[11] = x.Cinder != nil
			yyq146[12] = x.CephFS != nil
			yyq146[13] = x.Flocker != nil
			yyq146[14] = x.DownwardAPI != nil
			yyq146[15] = x.FC != nil
			if yyr146 || yy2arr146 {
				r.EncodeArrayStart(16)
			} else {
				var yynn146 int = 0
				for _, b := range yyq146 {
					if b {
						yynn146++
					}
				}
				r.EncodeMapStart(yynn146)
			}
			if yyr146 || yy2arr146 {
				if yyq146[0] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq146[0] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr146 || yy2arr146 {
				if yyq146[1] {
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq146[1] {
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				}
			}
			if yyr146 || yy2arr146 {
				if yyq146[2] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq146[2] {
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr146 || yy2arr146 {
				if yyq146[3] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq146[3] {
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr146 || yy2arr146 {
				if yyq146[4] {
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq146[4] {
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				}
			}
			if yyr146 || yy2arr146 {
				if yyq146[5] {
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq146[5] {
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				}
			}
			if yyr146 || yy2arr146 {
				if yyq146[6] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq146[6] {
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr146 || yy2arr146 {
				if yyq146[7] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq146[7] {
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr146 || yy2arr146 {
				if yyq146[8] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq146[8] {
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr146 || yy2arr146 {
				if yyq146[9] {
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq146[9] {
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				}
			}
			if yyr146 || yy2arr146 {
				if yyq146[10] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq146[10] {
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr146 || yy2arr146 {
				if yyq146[11] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq146[11] {
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr146 || yy2arr146 {
				if yyq146[12] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq146[12] {
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr146 || yy2arr146 {
				if yyq146[13] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq146[13] {
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr146 || yy2arr146 {
				if yyq146[14] {
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq146[14] {
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr146 || yy2arr146 {
				if yyq146[15] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq146[15] {
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yysep146 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *VolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym163 := z.DecBinary()
	_ = yym163
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl164 := r.ReadMapStart()
			if yyl164 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl164, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl164 := r.ReadArrayStart()
			if yyl164 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl164, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys165Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys165Slc
	var yyhl165 bool = l >= 0
	for yyj165 := 0; ; yyj165++ {
		if yyhl165 {
			if yyj165 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys165Slc = r.DecodeBytes(yys165Slc, true, true)
		yys165 := string(yys165Slc)
		switch yys165 {
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys165)
		} // end switch yys165
	} // end for yyj165
	if !yyhl165 {
		r.ReadEnd()
	}
}

func (x *VolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj182 int
	var yyb182 bool
	var yyhl182 bool = l >= 0
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	for {
		yyj182++
		if yyhl182 {
			yyb182 = yyj182 > l
		} else {
			yyb182 = r.CheckBreak()
		}
		if yyb182 {
			break
		}
		z.DecStructFieldNotFound(yyj182-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeClaimVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym199 := z.EncBinary()
		_ = yym199
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep200 := !z.EncBinary()
			yy2arr200 := z.EncBasicHandle().StructToArray
			var yyq200 [2]bool
			_, _, _ = yysep200, yyq200, yy2arr200
			const yyr200 bool = false
			yyq200[1] = x.ReadOnly != false
			if yyr200 || yy2arr200 {
				r.EncodeArrayStart(2)
			} else {
				var yynn200 int = 1
				for _, b := range yyq200 {
					if b {
						yynn200++
					}
				}
				r.EncodeMapStart(yynn200)
			}
			if yyr200 || yy2arr200 {
				yym202 := z.EncBinary()
				_ = yym202
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("claimName"))
				yym203 := z.EncBinary()
				_ = yym203
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			}
			if yyr200 || yy2arr200 {
				if yyq200[1] {
					yym205 := z.EncBinary()
					_ = yym205
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq200[1] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym206 := z.EncBinary()
					_ = yym206
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep200 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym207 := z.DecBinary()
	_ = yym207
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl208 := r.ReadMapStart()
			if yyl208 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl208, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl208 := r.ReadArrayStart()
			if yyl208 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl208, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys209Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys209Slc
	var yyhl209 bool = l >= 0
	for yyj209 := 0; ; yyj209++ {
		if yyhl209 {
			if yyj209 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys209Slc = r.DecodeBytes(yys209Slc, true, true)
		yys209 := string(yys209Slc)
		switch yys209 {
		case "claimName":
			if r.TryDecodeAsNil() {
				x.ClaimName = ""
			} else {
				x.ClaimName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys209)
		} // end switch yys209
	} // end for yyj209
	if !yyhl209 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj212 int
	var yyb212 bool
	var yyhl212 bool = l >= 0
	yyj212++
	if yyhl212 {
		yyb212 = yyj212 > l
	} else {
		yyb212 = r.CheckBreak()
	}
	if yyb212 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ClaimName = ""
	} else {
		x.ClaimName = string(r.DecodeString())
	}
	yyj212++
	if yyhl212 {
		yyb212 = yyj212 > l
	} else {
		yyb212 = r.CheckBreak()
	}
	if yyb212 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj212++
		if yyhl212 {
			yyb212 = yyj212 > l
		} else {
			yyb212 = r.CheckBreak()
		}
		if yyb212 {
			break
		}
		z.DecStructFieldNotFound(yyj212-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym215 := z.EncBinary()
		_ = yym215
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep216 := !z.EncBinary()
			yy2arr216 := z.EncBasicHandle().StructToArray
			var yyq216 [11]bool
			_, _, _ = yysep216, yyq216, yy2arr216
			const yyr216 bool = false
			yyq216[0] = x.GCEPersistentDisk != nil
			yyq216[1] = x.AWSElasticBlockStore != nil
			yyq216[2] = x.HostPath != nil
			yyq216[3] = x.Glusterfs != nil
			yyq216[4] = x.NFS != nil
			yyq216[5] = x.RBD != nil
			yyq216[6] = x.ISCSI != nil
			yyq216[7] = x.Cinder != nil
			yyq216[8] = x.CephFS != nil
			yyq216[9] = x.FC != nil
			yyq216[10] = x.Flocker != nil
			if yyr216 || yy2arr216 {
				r.EncodeArrayStart(11)
			} else {
				var yynn216 int = 0
				for _, b := range yyq216 {
					if b {
						yynn216++
					}
				}
				r.EncodeMapStart(yynn216)
			}
			if yyr216 || yy2arr216 {
				if yyq216[0] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq216[0] {
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr216 || yy2arr216 {
				if yyq216[1] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq216[1] {
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr216 || yy2arr216 {
				if yyq216[2] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq216[2] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr216 || yy2arr216 {
				if yyq216[3] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq216[3] {
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr216 || yy2arr216 {
				if yyq216[4] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq216[4] {
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr216 || yy2arr216 {
				if yyq216[5] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq216[5] {
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr216 || yy2arr216 {
				if yyq216[6] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq216[6] {
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr216 || yy2arr216 {
				if yyq216[7] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq216[7] {
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr216 || yy2arr216 {
				if yyq216[8] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq216[8] {
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr216 || yy2arr216 {
				if yyq216[9] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq216[9] {
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr216 || yy2arr216 {
				if yyq216[10] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq216[10] {
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yysep216 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym228 := z.DecBinary()
	_ = yym228
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl229 := r.ReadMapStart()
			if yyl229 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl229, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl229 := r.ReadArrayStart()
			if yyl229 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl229, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys230Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys230Slc
	var yyhl230 bool = l >= 0
	for yyj230 := 0; ; yyj230++ {
		if yyhl230 {
			if yyj230 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys230Slc = r.DecodeBytes(yys230Slc, true, true)
		yys230 := string(yys230Slc)
		switch yys230 {
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys230)
		} // end switch yys230
	} // end for yyj230
	if !yyhl230 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj242 int
	var yyb242 bool
	var yyhl242 bool = l >= 0
	yyj242++
	if yyhl242 {
		yyb242 = yyj242 > l
	} else {
		yyb242 = r.CheckBreak()
	}
	if yyb242 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj242++
	if yyhl242 {
		yyb242 = yyj242 > l
	} else {
		yyb242 = r.CheckBreak()
	}
	if yyb242 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj242++
	if yyhl242 {
		yyb242 = yyj242 > l
	} else {
		yyb242 = r.CheckBreak()
	}
	if yyb242 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj242++
	if yyhl242 {
		yyb242 = yyj242 > l
	} else {
		yyb242 = r.CheckBreak()
	}
	if yyb242 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj242++
	if yyhl242 {
		yyb242 = yyj242 > l
	} else {
		yyb242 = r.CheckBreak()
	}
	if yyb242 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj242++
	if yyhl242 {
		yyb242 = yyj242 > l
	} else {
		yyb242 = r.CheckBreak()
	}
	if yyb242 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj242++
	if yyhl242 {
		yyb242 = yyj242 > l
	} else {
		yyb242 = r.CheckBreak()
	}
	if yyb242 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj242++
	if yyhl242 {
		yyb242 = yyj242 > l
	} else {
		yyb242 = r.CheckBreak()
	}
	if yyb242 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj242++
	if yyhl242 {
		yyb242 = yyj242 > l
	} else {
		yyb242 = r.CheckBreak()
	}
	if yyb242 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj242++
	if yyhl242 {
		yyb242 = yyj242 > l
	} else {
		yyb242 = r.CheckBreak()
	}
	if yyb242 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj242++
	if yyhl242 {
		yyb242 = yyj242 > l
	} else {
		yyb242 = r.CheckBreak()
	}
	if yyb242 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	for {
		yyj242++
		if yyhl242 {
			yyb242 = yyj242 > l
		} else {
			yyb242 = r.CheckBreak()
		}
		if yyb242 {
			break
		}
		z.DecStructFieldNotFound(yyj242-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym254 := z.EncBinary()
		_ = yym254
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep255 := !z.EncBinary()
			yy2arr255 := z.EncBasicHandle().StructToArray
			var yyq255 [5]bool
			_, _, _ = yysep255, yyq255, yy2arr255
			const yyr255 bool = false
			yyq255[0] = x.Kind != ""
			yyq255[1] = x.APIVersion != ""
			yyq255[2] = true
			yyq255[3] = true
			yyq255[4] = true
			if yyr255 || yy2arr255 {
				r.EncodeArrayStart(5)
			} else {
				var yynn255 int = 0
				for _, b := range yyq255 {
					if b {
						yynn255++
					}
				}
				r.EncodeMapStart(yynn255)
			}
			if yyr255 || yy2arr255 {
				if yyq255[0] {
					yym257 := z.EncBinary()
					_ = yym257
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq255[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym258 := z.EncBinary()
					_ = yym258
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr255 || yy2arr255 {
				if yyq255[1] {
					yym260 := z.EncBinary()
					_ = yym260
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq255[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym261 := z.EncBinary()
					_ = yym261
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr255 || yy2arr255 {
				if yyq255[2] {
					yy263 := &x.ObjectMeta
					yy263.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq255[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy264 := &x.ObjectMeta
					yy264.CodecEncodeSelf(e)
				}
			}
			if yyr255 || yy2arr255 {
				if yyq255[3] {
					yy266 := &x.Spec
					yy266.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq255[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy267 := &x.Spec
					yy267.CodecEncodeSelf(e)
				}
			}
			if yyr255 || yy2arr255 {
				if yyq255[4] {
					yy269 := &x.Status
					yy269.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq255[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy270 := &x.Status
					yy270.CodecEncodeSelf(e)
				}
			}
			if yysep255 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym271 := z.DecBinary()
	_ = yym271
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl272 := r.ReadMapStart()
			if yyl272 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl272, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl272 := r.ReadArrayStart()
			if yyl272 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl272, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys273Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys273Slc
	var yyhl273 bool = l >= 0
	for yyj273 := 0; ; yyj273++ {
		if yyhl273 {
			if yyj273 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys273Slc = r.DecodeBytes(yys273Slc, true, true)
		yys273 := string(yys273Slc)
		switch yys273 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv276 := &x.ObjectMeta
				yyv276.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeSpec{}
			} else {
				yyv277 := &x.Spec
				yyv277.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeStatus{}
			} else {
				yyv278 := &x.Status
				yyv278.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys273)
		} // end switch yys273
	} // end for yyj273
	if !yyhl273 {
		r.ReadEnd()
	}
}

func (x *PersistentVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj279 int
	var yyb279 bool
	var yyhl279 bool = l >= 0
	yyj279++
	if yyhl279 {
		yyb279 = yyj279 > l
	} else {
		yyb279 = r.CheckBreak()
	}
	if yyb279 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj279++
	if yyhl279 {
		yyb279 = yyj279 > l
	} else {
		yyb279 = r.CheckBreak()
	}
	if yyb279 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj279++
	if yyhl279 {
		yyb279 = yyj279 > l
	} else {
		yyb279 = r.CheckBreak()
	}
	if yyb279 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv282 := &x.ObjectMeta
		yyv282.CodecDecodeSelf(d)
	}
	yyj279++
	if yyhl279 {
		yyb279 = yyj279 > l
	} else {
		yyb279 = r.CheckBreak()
	}
	if yyb279 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeSpec{}
	} else {
		yyv283 := &x.Spec
		yyv283.CodecDecodeSelf(d)
	}
	yyj279++
	if yyhl279 {
		yyb279 = yyj279 > l
	} else {
		yyb279 = r.CheckBreak()
	}
	if yyb279 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeStatus{}
	} else {
		yyv284 := &x.Status
		yyv284.CodecDecodeSelf(d)
	}
	for {
		yyj279++
		if yyhl279 {
			yyb279 = yyj279 > l
		} else {
			yyb279 = r.CheckBreak()
		}
		if yyb279 {
			break
		}
		z.DecStructFieldNotFound(yyj279-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym285 := z.EncBinary()
		_ = yym285
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep286 := !z.EncBinary()
			yy2arr286 := z.EncBasicHandle().StructToArray
			var yyq286 [15]bool
			_, _, _ = yysep286, yyq286, yy2arr286
			const yyr286 bool = false
			yyq286[0] = len(x.Capacity) != 0
			yyq286[1] = x.PersistentVolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq286[2] = x.PersistentVolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq286[3] = x.PersistentVolumeSource.HostPath != nil && x.HostPath != nil
			yyq286[4] = x.PersistentVolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq286[5] = x.PersistentVolumeSource.NFS != nil && x.NFS != nil
			yyq286[6] = x.PersistentVolumeSource.RBD != nil && x.RBD != nil
			yyq286[7] = x.PersistentVolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq286[8] = x.PersistentVolumeSource.Cinder != nil && x.Cinder != nil
			yyq286[9] = x.PersistentVolumeSource.CephFS != nil && x.CephFS != nil
			yyq286[10] = x.PersistentVolumeSource.FC != nil && x.FC != nil
			yyq286[11] = x.PersistentVolumeSource.Flocker != nil && x.Flocker != nil
			yyq286[12] = len(x.AccessModes) != 0
			yyq286[13] = x.ClaimRef != nil
			yyq286[14] = x.PersistentVolumeReclaimPolicy != ""
			if yyr286 || yy2arr286 {
				r.EncodeArrayStart(15)
			} else {
				var yynn286 int = 0
				for _, b := range yyq286 {
					if b {
						yynn286++
					}
				}
				r.EncodeMapStart(yynn286)
			}
			if yyr286 || yy2arr286 {
				if yyq286[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq286[0] {
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			var yyn288 bool
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				yyn288 = true
				goto LABEL288
			}
		LABEL288:
			if yyr286 || yy2arr286 {
				if yyn288 {
					r.EncodeNil()
				} else {
					if yyq286[1] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq286[1] {
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					if yyn288 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn289 bool
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				yyn289 = true
				goto LABEL289
			}
		LABEL289:
			if yyr286 || yy2arr286 {
				if yyn289 {
					r.EncodeNil()
				} else {
					if yyq286[2] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq286[2] {
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					if yyn289 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn290 bool
			if x.PersistentVolumeSource.HostPath == nil {
				yyn290 = true
				goto LABEL290
			}
		LABEL290:
			if yyr286 || yy2arr286 {
				if yyn290 {
					r.EncodeNil()
				} else {
					if yyq286[3] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq286[3] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					if yyn290 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn291 bool
			if x.PersistentVolumeSource.Glusterfs == nil {
				yyn291 = true
				goto LABEL291
			}
		LABEL291:
			if yyr286 || yy2arr286 {
				if yyn291 {
					r.EncodeNil()
				} else {
					if yyq286[4] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq286[4] {
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					if yyn291 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn292 bool
			if x.PersistentVolumeSource.NFS == nil {
				yyn292 = true
				goto LABEL292
			}
		LABEL292:
			if yyr286 || yy2arr286 {
				if yyn292 {
					r.EncodeNil()
				} else {
					if yyq286[5] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq286[5] {
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					if yyn292 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn293 bool
			if x.PersistentVolumeSource.RBD == nil {
				yyn293 = true
				goto LABEL293
			}
		LABEL293:
			if yyr286 || yy2arr286 {
				if yyn293 {
					r.EncodeNil()
				} else {
					if yyq286[6] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq286[6] {
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					if yyn293 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn294 bool
			if x.PersistentVolumeSource.ISCSI == nil {
				yyn294 = true
				goto LABEL294
			}
		LABEL294:
			if yyr286 || yy2arr286 {
				if yyn294 {
					r.EncodeNil()
				} else {
					if yyq286[7] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq286[7] {
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					if yyn294 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn295 bool
			if x.PersistentVolumeSource.Cinder == nil {
				yyn295 = true
				goto LABEL295
			}
		LABEL295:
			if yyr286 || yy2arr286 {
				if yyn295 {
					r.EncodeNil()
				} else {
					if yyq286[8] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq286[8] {
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					if yyn295 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn296 bool
			if x.PersistentVolumeSource.CephFS == nil {
				yyn296 = true
				goto LABEL296
			}
		LABEL296:
			if yyr286 || yy2arr286 {
				if yyn296 {
					r.EncodeNil()
				} else {
					if yyq286[9] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq286[9] {
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					if yyn296 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn297 bool
			if x.PersistentVolumeSource.FC == nil {
				yyn297 = true
				goto LABEL297
			}
		LABEL297:
			if yyr286 || yy2arr286 {
				if yyn297 {
					r.EncodeNil()
				} else {
					if yyq286[10] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq286[10] {
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					if yyn297 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn298 bool
			if x.PersistentVolumeSource.Flocker == nil {
				yyn298 = true
				goto LABEL298
			}
		LABEL298:
			if yyr286 || yy2arr286 {
				if yyn298 {
					r.EncodeNil()
				} else {
					if yyq286[11] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq286[11] {
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					if yyn298 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr286 || yy2arr286 {
				if yyq286[12] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym300 := z.EncBinary()
						_ = yym300
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq286[12] {
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym301 := z.EncBinary()
						_ = yym301
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr286 || yy2arr286 {
				if yyq286[13] {
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq286[13] {
					r.EncodeString(codecSelferC_UTF81234, string("claimRef"))
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr286 || yy2arr286 {
				if yyq286[14] {
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq286[14] {
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeReclaimPolicy"))
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				}
			}
			if yysep286 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym304 := z.DecBinary()
	_ = yym304
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl305 := r.ReadMapStart()
			if yyl305 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl305, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl305 := r.ReadArrayStart()
			if yyl305 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl305, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys306Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys306Slc
	var yyhl306 bool = l >= 0
	for yyj306 := 0; ; yyj306++ {
		if yyhl306 {
			if yyj306 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys306Slc = r.DecodeBytes(yys306Slc, true, true)
		yys306 := string(yys306Slc)
		switch yys306 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv307 := &x.Capacity
				yyv307.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if x.PersistentVolumeSource.HostPath == nil {
				x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.PersistentVolumeSource.Glusterfs == nil {
				x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.PersistentVolumeSource.NFS == nil {
				x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.PersistentVolumeSource.RBD == nil {
				x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.PersistentVolumeSource.ISCSI == nil {
				x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.PersistentVolumeSource.Cinder == nil {
				x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.PersistentVolumeSource.CephFS == nil {
				x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if x.PersistentVolumeSource.FC == nil {
				x.PersistentVolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.PersistentVolumeSource.Flocker == nil {
				x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv319 := &x.AccessModes
				yym320 := z.DecBinary()
				_ = yym320
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv319), d)
				}
			}
		case "claimRef":
			if r.TryDecodeAsNil() {
				if x.ClaimRef != nil {
					x.ClaimRef = nil
				}
			} else {
				if x.ClaimRef == nil {
					x.ClaimRef = new(ObjectReference)
				}
				x.ClaimRef.CodecDecodeSelf(d)
			}
		case "persistentVolumeReclaimPolicy":
			if r.TryDecodeAsNil() {
				x.PersistentVolumeReclaimPolicy = ""
			} else {
				x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys306)
		} // end switch yys306
	} // end for yyj306
	if !yyhl306 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj323 int
	var yyb323 bool
	var yyhl323 bool = l >= 0
	yyj323++
	if yyhl323 {
		yyb323 = yyj323 > l
	} else {
		yyb323 = r.CheckBreak()
	}
	if yyb323 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv324 := &x.Capacity
		yyv324.CodecDecodeSelf(d)
	}
	yyj323++
	if yyhl323 {
		yyb323 = yyj323 > l
	} else {
		yyb323 = r.CheckBreak()
	}
	if yyb323 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj323++
	if yyhl323 {
		yyb323 = yyj323 > l
	} else {
		yyb323 = r.CheckBreak()
	}
	if yyb323 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj323++
	if yyhl323 {
		yyb323 = yyj323 > l
	} else {
		yyb323 = r.CheckBreak()
	}
	if yyb323 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj323++
	if yyhl323 {
		yyb323 = yyj323 > l
	} else {
		yyb323 = r.CheckBreak()
	}
	if yyb323 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj323++
	if yyhl323 {
		yyb323 = yyj323 > l
	} else {
		yyb323 = r.CheckBreak()
	}
	if yyb323 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj323++
	if yyhl323 {
		yyb323 = yyj323 > l
	} else {
		yyb323 = r.CheckBreak()
	}
	if yyb323 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj323++
	if yyhl323 {
		yyb323 = yyj323 > l
	} else {
		yyb323 = r.CheckBreak()
	}
	if yyb323 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj323++
	if yyhl323 {
		yyb323 = yyj323 > l
	} else {
		yyb323 = r.CheckBreak()
	}
	if yyb323 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj323++
	if yyhl323 {
		yyb323 = yyj323 > l
	} else {
		yyb323 = r.CheckBreak()
	}
	if yyb323 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj323++
	if yyhl323 {
		yyb323 = yyj323 > l
	} else {
		yyb323 = r.CheckBreak()
	}
	if yyb323 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj323++
	if yyhl323 {
		yyb323 = yyj323 > l
	} else {
		yyb323 = r.CheckBreak()
	}
	if yyb323 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj323++
	if yyhl323 {
		yyb323 = yyj323 > l
	} else {
		yyb323 = r.CheckBreak()
	}
	if yyb323 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv336 := &x.AccessModes
		yym337 := z.DecBinary()
		_ = yym337
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv336), d)
		}
	}
	yyj323++
	if yyhl323 {
		yyb323 = yyj323 > l
	} else {
		yyb323 = r.CheckBreak()
	}
	if yyb323 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ClaimRef != nil {
			x.ClaimRef = nil
		}
	} else {
		if x.ClaimRef == nil {
			x.ClaimRef = new(ObjectReference)
		}
		x.ClaimRef.CodecDecodeSelf(d)
	}
	yyj323++
	if yyhl323 {
		yyb323 = yyj323 > l
	} else {
		yyb323 = r.CheckBreak()
	}
	if yyb323 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.PersistentVolumeReclaimPolicy = ""
	} else {
		x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
	}
	for {
		yyj323++
		if yyhl323 {
			yyb323 = yyj323 > l
		} else {
			yyb323 = r.CheckBreak()
		}
		if yyb323 {
			break
		}
		z.DecStructFieldNotFound(yyj323-1, "")
	}
	r.ReadEnd()
}

func (x PersistentVolumeReclaimPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym340 := z.EncBinary()
	_ = yym340
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeReclaimPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym341 := z.DecBinary()
	_ = yym341
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PersistentVolumeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym342 := z.EncBinary()
		_ = yym342
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep343 := !z.EncBinary()
			yy2arr343 := z.EncBasicHandle().StructToArray
			var yyq343 [3]bool
			_, _, _ = yysep343, yyq343, yy2arr343
			const yyr343 bool = false
			yyq343[0] = x.Phase != ""
			yyq343[1] = x.Message != ""
			yyq343[2] = x.Reason != ""
			if yyr343 || yy2arr343 {
				r.EncodeArrayStart(3)
			} else {
				var yynn343 int = 0
				for _, b := range yyq343 {
					if b {
						yynn343++
					}
				}
				r.EncodeMapStart(yynn343)
			}
			if yyr343 || yy2arr343 {
				if yyq343[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq343[0] {
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr343 || yy2arr343 {
				if yyq343[1] {
					yym346 := z.EncBinary()
					_ = yym346
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq343[1] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym347 := z.EncBinary()
					_ = yym347
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr343 || yy2arr343 {
				if yyq343[2] {
					yym349 := z.EncBinary()
					_ = yym349
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq343[2] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym350 := z.EncBinary()
					_ = yym350
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yysep343 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym351 := z.DecBinary()
	_ = yym351
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl352 := r.ReadMapStart()
			if yyl352 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl352, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl352 := r.ReadArrayStart()
			if yyl352 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl352, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys353Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys353Slc
	var yyhl353 bool = l >= 0
	for yyj353 := 0; ; yyj353++ {
		if yyhl353 {
			if yyj353 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys353Slc = r.DecodeBytes(yys353Slc, true, true)
		yys353 := string(yys353Slc)
		switch yys353 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumePhase(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys353)
		} // end switch yys353
	} // end for yyj353
	if !yyhl353 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj357 int
	var yyb357 bool
	var yyhl357 bool = l >= 0
	yyj357++
	if yyhl357 {
		yyb357 = yyj357 > l
	} else {
		yyb357 = r.CheckBreak()
	}
	if yyb357 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumePhase(r.DecodeString())
	}
	yyj357++
	if yyhl357 {
		yyb357 = yyj357 > l
	} else {
		yyb357 = r.CheckBreak()
	}
	if yyb357 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj357++
	if yyhl357 {
		yyb357 = yyj357 > l
	} else {
		yyb357 = r.CheckBreak()
	}
	if yyb357 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	for {
		yyj357++
		if yyhl357 {
			yyb357 = yyj357 > l
		} else {
			yyb357 = r.CheckBreak()
		}
		if yyb357 {
			break
		}
		z.DecStructFieldNotFound(yyj357-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym361 := z.EncBinary()
		_ = yym361
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep362 := !z.EncBinary()
			yy2arr362 := z.EncBasicHandle().StructToArray
			var yyq362 [4]bool
			_, _, _ = yysep362, yyq362, yy2arr362
			const yyr362 bool = false
			yyq362[0] = x.Kind != ""
			yyq362[1] = x.APIVersion != ""
			yyq362[2] = true
			if yyr362 || yy2arr362 {
				r.EncodeArrayStart(4)
			} else {
				var yynn362 int = 1
				for _, b := range yyq362 {
					if b {
						yynn362++
					}
				}
				r.EncodeMapStart(yynn362)
			}
			if yyr362 || yy2arr362 {
				if yyq362[0] {
					yym364 := z.EncBinary()
					_ = yym364
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq362[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym365 := z.EncBinary()
					_ = yym365
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr362 || yy2arr362 {
				if yyq362[1] {
					yym367 := z.EncBinary()
					_ = yym367
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq362[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym368 := z.EncBinary()
					_ = yym368
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr362 || yy2arr362 {
				if yyq362[2] {
					yy370 := &x.ListMeta
					yym371 := z.EncBinary()
					_ = yym371
					if false {
					} else if z.HasExtensions() && z.EncExt(yy370) {
					} else {
						z.EncFallback(yy370)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq362[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy372 := &x.ListMeta
					yym373 := z.EncBinary()
					_ = yym373
					if false {
					} else if z.HasExtensions() && z.EncExt(yy372) {
					} else {
						z.EncFallback(yy372)
					}
				}
			}
			if yyr362 || yy2arr362 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym375 := z.EncBinary()
					_ = yym375
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym376 := z.EncBinary()
					_ = yym376
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			}
			if yysep362 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym377 := z.DecBinary()
	_ = yym377
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl378 := r.ReadMapStart()
			if yyl378 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl378, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl378 := r.ReadArrayStart()
			if yyl378 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl378, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys379Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys379Slc
	var yyhl379 bool = l >= 0
	for yyj379 := 0; ; yyj379++ {
		if yyhl379 {
			if yyj379 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys379Slc = r.DecodeBytes(yys379Slc, true, true)
		yys379 := string(yys379Slc)
		switch yys379 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv382 := &x.ListMeta
				yym383 := z.DecBinary()
				_ = yym383
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv382) {
				} else {
					z.DecFallback(yyv382, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv384 := &x.Items
				yym385 := z.DecBinary()
				_ = yym385
				if false {
				} else {
					h.decSlicePersistentVolume((*[]PersistentVolume)(yyv384), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys379)
		} // end switch yys379
	} // end for yyj379
	if !yyhl379 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj386 int
	var yyb386 bool
	var yyhl386 bool = l >= 0
	yyj386++
	if yyhl386 {
		yyb386 = yyj386 > l
	} else {
		yyb386 = r.CheckBreak()
	}
	if yyb386 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj386++
	if yyhl386 {
		yyb386 = yyj386 > l
	} else {
		yyb386 = r.CheckBreak()
	}
	if yyb386 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj386++
	if yyhl386 {
		yyb386 = yyj386 > l
	} else {
		yyb386 = r.CheckBreak()
	}
	if yyb386 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv389 := &x.ListMeta
		yym390 := z.DecBinary()
		_ = yym390
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv389) {
		} else {
			z.DecFallback(yyv389, false)
		}
	}
	yyj386++
	if yyhl386 {
		yyb386 = yyj386 > l
	} else {
		yyb386 = r.CheckBreak()
	}
	if yyb386 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv391 := &x.Items
		yym392 := z.DecBinary()
		_ = yym392
		if false {
		} else {
			h.decSlicePersistentVolume((*[]PersistentVolume)(yyv391), d)
		}
	}
	for {
		yyj386++
		if yyhl386 {
			yyb386 = yyj386 > l
		} else {
			yyb386 = r.CheckBreak()
		}
		if yyb386 {
			break
		}
		z.DecStructFieldNotFound(yyj386-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeClaim) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym393 := z.EncBinary()
		_ = yym393
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep394 := !z.EncBinary()
			yy2arr394 := z.EncBasicHandle().StructToArray
			var yyq394 [5]bool
			_, _, _ = yysep394, yyq394, yy2arr394
			const yyr394 bool = false
			yyq394[0] = x.Kind != ""
			yyq394[1] = x.APIVersion != ""
			yyq394[2] = true
			yyq394[3] = true
			yyq394[4] = true
			if yyr394 || yy2arr394 {
				r.EncodeArrayStart(5)
			} else {
				var yynn394 int = 0
				for _, b := range yyq394 {
					if b {
						yynn394++
					}
				}
				r.EncodeMapStart(yynn394)
			}
			if yyr394 || yy2arr394 {
				if yyq394[0] {
					yym396 := z.EncBinary()
					_ = yym396
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq394[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym397 := z.EncBinary()
					_ = yym397
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr394 || yy2arr394 {
				if yyq394[1] {
					yym399 := z.EncBinary()
					_ = yym399
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq394[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym400 := z.EncBinary()
					_ = yym400
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr394 || yy2arr394 {
				if yyq394[2] {
					yy402 := &x.ObjectMeta
					yy402.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq394[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy403 := &x.ObjectMeta
					yy403.CodecEncodeSelf(e)
				}
			}
			if yyr394 || yy2arr394 {
				if yyq394[3] {
					yy405 := &x.Spec
					yy405.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq394[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy406 := &x.Spec
					yy406.CodecEncodeSelf(e)
				}
			}
			if yyr394 || yy2arr394 {
				if yyq394[4] {
					yy408 := &x.Status
					yy408.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq394[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy409 := &x.Status
					yy409.CodecEncodeSelf(e)
				}
			}
			if yysep394 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeClaim) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym410 := z.DecBinary()
	_ = yym410
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl411 := r.ReadMapStart()
			if yyl411 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl411, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl411 := r.ReadArrayStart()
			if yyl411 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl411, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys412Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys412Slc
	var yyhl412 bool = l >= 0
	for yyj412 := 0; ; yyj412++ {
		if yyhl412 {
			if yyj412 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys412Slc = r.DecodeBytes(yys412Slc, true, true)
		yys412 := string(yys412Slc)
		switch yys412 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv415 := &x.ObjectMeta
				yyv415.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeClaimSpec{}
			} else {
				yyv416 := &x.Spec
				yyv416.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeClaimStatus{}
			} else {
				yyv417 := &x.Status
				yyv417.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys412)
		} // end switch yys412
	} // end for yyj412
	if !yyhl412 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj418 int
	var yyb418 bool
	var yyhl418 bool = l >= 0
	yyj418++
	if yyhl418 {
		yyb418 = yyj418 > l
	} else {
		yyb418 = r.CheckBreak()
	}
	if yyb418 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj418++
	if yyhl418 {
		yyb418 = yyj418 > l
	} else {
		yyb418 = r.CheckBreak()
	}
	if yyb418 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj418++
	if yyhl418 {
		yyb418 = yyj418 > l
	} else {
		yyb418 = r.CheckBreak()
	}
	if yyb418 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv421 := &x.ObjectMeta
		yyv421.CodecDecodeSelf(d)
	}
	yyj418++
	if yyhl418 {
		yyb418 = yyj418 > l
	} else {
		yyb418 = r.CheckBreak()
	}
	if yyb418 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeClaimSpec{}
	} else {
		yyv422 := &x.Spec
		yyv422.CodecDecodeSelf(d)
	}
	yyj418++
	if yyhl418 {
		yyb418 = yyj418 > l
	} else {
		yyb418 = r.CheckBreak()
	}
	if yyb418 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeClaimStatus{}
	} else {
		yyv423 := &x.Status
		yyv423.CodecDecodeSelf(d)
	}
	for {
		yyj418++
		if yyhl418 {
			yyb418 = yyj418 > l
		} else {
			yyb418 = r.CheckBreak()
		}
		if yyb418 {
			break
		}
		z.DecStructFieldNotFound(yyj418-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeClaimList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym424 := z.EncBinary()
		_ = yym424
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep425 := !z.EncBinary()
			yy2arr425 := z.EncBasicHandle().StructToArray
			var yyq425 [4]bool
			_, _, _ = yysep425, yyq425, yy2arr425
			const yyr425 bool = false
			yyq425[0] = x.Kind != ""
			yyq425[1] = x.APIVersion != ""
			yyq425[2] = true
			if yyr425 || yy2arr425 {
				r.EncodeArrayStart(4)
			} else {
				var yynn425 int = 1
				for _, b := range yyq425 {
					if b {
						yynn425++
					}
				}
				r.EncodeMapStart(yynn425)
			}
			if yyr425 || yy2arr425 {
				if yyq425[0] {
					yym427 := z.EncBinary()
					_ = yym427
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq425[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym428 := z.EncBinary()
					_ = yym428
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr425 || yy2arr425 {
				if yyq425[1] {
					yym430 := z.EncBinary()
					_ = yym430
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq425[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym431 := z.EncBinary()
					_ = yym431
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr425 || yy2arr425 {
				if yyq425[2] {
					yy433 := &x.ListMeta
					yym434 := z.EncBinary()
					_ = yym434
					if false {
					} else if z.HasExtensions() && z.EncExt(yy433) {
					} else {
						z.EncFallback(yy433)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq425[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy435 := &x.ListMeta
					yym436 := z.EncBinary()
					_ = yym436
					if false {
					} else if z.HasExtensions() && z.EncExt(yy435) {
					} else {
						z.EncFallback(yy435)
					}
				}
			}
			if yyr425 || yy2arr425 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym438 := z.EncBinary()
					_ = yym438
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym439 := z.EncBinary()
					_ = yym439
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			}
			if yysep425 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeClaimList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym440 := z.DecBinary()
	_ = yym440
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl441 := r.ReadMapStart()
			if yyl441 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl441, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl441 := r.ReadArrayStart()
			if yyl441 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl441, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys442Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys442Slc
	var yyhl442 bool = l >= 0
	for yyj442 := 0; ; yyj442++ {
		if yyhl442 {
			if yyj442 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys442Slc = r.DecodeBytes(yys442Slc, true, true)
		yys442 := string(yys442Slc)
		switch yys442 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv445 := &x.ListMeta
				yym446 := z.DecBinary()
				_ = yym446
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv445) {
				} else {
					z.DecFallback(yyv445, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv447 := &x.Items
				yym448 := z.DecBinary()
				_ = yym448
				if false {
				} else {
					h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv447), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys442)
		} // end switch yys442
	} // end for yyj442
	if !yyhl442 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj449 int
	var yyb449 bool
	var yyhl449 bool = l >= 0
	yyj449++
	if yyhl449 {
		yyb449 = yyj449 > l
	} else {
		yyb449 = r.CheckBreak()
	}
	if yyb449 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj449++
	if yyhl449 {
		yyb449 = yyj449 > l
	} else {
		yyb449 = r.CheckBreak()
	}
	if yyb449 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj449++
	if yyhl449 {
		yyb449 = yyj449 > l
	} else {
		yyb449 = r.CheckBreak()
	}
	if yyb449 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv452 := &x.ListMeta
		yym453 := z.DecBinary()
		_ = yym453
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv452) {
		} else {
			z.DecFallback(yyv452, false)
		}
	}
	yyj449++
	if yyhl449 {
		yyb449 = yyj449 > l
	} else {
		yyb449 = r.CheckBreak()
	}
	if yyb449 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv454 := &x.Items
		yym455 := z.DecBinary()
		_ = yym455
		if false {
		} else {
			h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv454), d)
		}
	}
	for {
		yyj449++
		if yyhl449 {
			yyb449 = yyj449 > l
		} else {
			yyb449 = r.CheckBreak()
		}
		if yyb449 {
			break
		}
		z.DecStructFieldNotFound(yyj449-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeClaimSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym456 := z.EncBinary()
		_ = yym456
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep457 := !z.EncBinary()
			yy2arr457 := z.EncBasicHandle().StructToArray
			var yyq457 [3]bool
			_, _, _ = yysep457, yyq457, yy2arr457
			const yyr457 bool = false
			yyq457[0] = len(x.AccessModes) != 0
			yyq457[1] = true
			yyq457[2] = x.VolumeName != ""
			if yyr457 || yy2arr457 {
				r.EncodeArrayStart(3)
			} else {
				var yynn457 int = 0
				for _, b := range yyq457 {
					if b {
						yynn457++
					}
				}
				r.EncodeMapStart(yynn457)
			}
			if yyr457 || yy2arr457 {
				if yyq457[0] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym459 := z.EncBinary()
						_ = yym459
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq457[0] {
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym460 := z.EncBinary()
						_ = yym460
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr457 || yy2arr457 {
				if yyq457[1] {
					yy462 := &x.Resources
					yy462.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq457[1] {
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					yy463 := &x.Resources
					yy463.CodecEncodeSelf(e)
				}
			}
			if yyr457 || yy2arr457 {
				if yyq457[2] {
					yym465 := z.EncBinary()
					_ = yym465
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq457[2] {
					r.EncodeString(codecSelferC_UTF81234, string("volumeName"))
					yym466 := z.EncBinary()
					_ = yym466
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				}
			}
			if yysep457 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeClaimSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym467 := z.DecBinary()
	_ = yym467
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl468 := r.ReadMapStart()
			if yyl468 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl468, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl468 := r.ReadArrayStart()
			if yyl468 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl468, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys469Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys469Slc
	var yyhl469 bool = l >= 0
	for yyj469 := 0; ; yyj469++ {
		if yyhl469 {
			if yyj469 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys469Slc = r.DecodeBytes(yys469Slc, true, true)
		yys469 := string(yys469Slc)
		switch yys469 {
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv470 := &x.AccessModes
				yym471 := z.DecBinary()
				_ = yym471
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv470), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv472 := &x.Resources
				yyv472.CodecDecodeSelf(d)
			}
		case "volumeName":
			if r.TryDecodeAsNil() {
				x.VolumeName = ""
			} else {
				x.VolumeName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys469)
		} // end switch yys469
	} // end for yyj469
	if !yyhl469 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj474 int
	var yyb474 bool
	var yyhl474 bool = l >= 0
	yyj474++
	if yyhl474 {
		yyb474 = yyj474 > l
	} else {
		yyb474 = r.CheckBreak()
	}
	if yyb474 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv475 := &x.AccessModes
		yym476 := z.DecBinary()
		_ = yym476
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv475), d)
		}
	}
	yyj474++
	if yyhl474 {
		yyb474 = yyj474 > l
	} else {
		yyb474 = r.CheckBreak()
	}
	if yyb474 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv477 := &x.Resources
		yyv477.CodecDecodeSelf(d)
	}
	yyj474++
	if yyhl474 {
		yyb474 = yyj474 > l
	} else {
		yyb474 = r.CheckBreak()
	}
	if yyb474 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.VolumeName = ""
	} else {
		x.VolumeName = string(r.DecodeString())
	}
	for {
		yyj474++
		if yyhl474 {
			yyb474 = yyj474 > l
		} else {
			yyb474 = r.CheckBreak()
		}
		if yyb474 {
			break
		}
		z.DecStructFieldNotFound(yyj474-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeClaimStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym479 := z.EncBinary()
		_ = yym479
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep480 := !z.EncBinary()
			yy2arr480 := z.EncBasicHandle().StructToArray
			var yyq480 [3]bool
			_, _, _ = yysep480, yyq480, yy2arr480
			const yyr480 bool = false
			yyq480[0] = x.Phase != ""
			yyq480[1] = len(x.AccessModes) != 0
			yyq480[2] = len(x.Capacity) != 0
			if yyr480 || yy2arr480 {
				r.EncodeArrayStart(3)
			} else {
				var yynn480 int = 0
				for _, b := range yyq480 {
					if b {
						yynn480++
					}
				}
				r.EncodeMapStart(yynn480)
			}
			if yyr480 || yy2arr480 {
				if yyq480[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq480[0] {
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr480 || yy2arr480 {
				if yyq480[1] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym483 := z.EncBinary()
						_ = yym483
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq480[1] {
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym484 := z.EncBinary()
						_ = yym484
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr480 || yy2arr480 {
				if yyq480[2] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq480[2] {
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yysep480 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeClaimStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym486 := z.DecBinary()
	_ = yym486
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl487 := r.ReadMapStart()
			if yyl487 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl487, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl487 := r.ReadArrayStart()
			if yyl487 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl487, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys488Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys488Slc
	var yyhl488 bool = l >= 0
	for yyj488 := 0; ; yyj488++ {
		if yyhl488 {
			if yyj488 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys488Slc = r.DecodeBytes(yys488Slc, true, true)
		yys488 := string(yys488Slc)
		switch yys488 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv490 := &x.AccessModes
				yym491 := z.DecBinary()
				_ = yym491
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv490), d)
				}
			}
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv492 := &x.Capacity
				yyv492.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys488)
		} // end switch yys488
	} // end for yyj488
	if !yyhl488 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj493 int
	var yyb493 bool
	var yyhl493 bool = l >= 0
	yyj493++
	if yyhl493 {
		yyb493 = yyj493 > l
	} else {
		yyb493 = r.CheckBreak()
	}
	if yyb493 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
	}
	yyj493++
	if yyhl493 {
		yyb493 = yyj493 > l
	} else {
		yyb493 = r.CheckBreak()
	}
	if yyb493 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv495 := &x.AccessModes
		yym496 := z.DecBinary()
		_ = yym496
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv495), d)
		}
	}
	yyj493++
	if yyhl493 {
		yyb493 = yyj493 > l
	} else {
		yyb493 = r.CheckBreak()
	}
	if yyb493 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv497 := &x.Capacity
		yyv497.CodecDecodeSelf(d)
	}
	for {
		yyj493++
		if yyhl493 {
			yyb493 = yyj493 > l
		} else {
			yyb493 = r.CheckBreak()
		}
		if yyb493 {
			break
		}
		z.DecStructFieldNotFound(yyj493-1, "")
	}
	r.ReadEnd()
}

func (x PersistentVolumeAccessMode) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym498 := z.EncBinary()
	_ = yym498
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeAccessMode) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym499 := z.DecBinary()
	_ = yym499
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym500 := z.EncBinary()
	_ = yym500
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym501 := z.DecBinary()
	_ = yym501
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumeClaimPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym502 := z.EncBinary()
	_ = yym502
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeClaimPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym503 := z.DecBinary()
	_ = yym503
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *HostPathVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym504 := z.EncBinary()
		_ = yym504
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep505 := !z.EncBinary()
			yy2arr505 := z.EncBasicHandle().StructToArray
			var yyq505 [1]bool
			_, _, _ = yysep505, yyq505, yy2arr505
			const yyr505 bool = false
			if yyr505 || yy2arr505 {
				r.EncodeArrayStart(1)
			} else {
				var yynn505 int = 1
				for _, b := range yyq505 {
					if b {
						yynn505++
					}
				}
				r.EncodeMapStart(yynn505)
			}
			if yyr505 || yy2arr505 {
				yym507 := z.EncBinary()
				_ = yym507
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				yym508 := z.EncBinary()
				_ = yym508
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yysep505 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *HostPathVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym509 := z.DecBinary()
	_ = yym509
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl510 := r.ReadMapStart()
			if yyl510 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl510, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl510 := r.ReadArrayStart()
			if yyl510 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl510, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HostPathVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys511Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys511Slc
	var yyhl511 bool = l >= 0
	for yyj511 := 0; ; yyj511++ {
		if yyhl511 {
			if yyj511 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys511Slc = r.DecodeBytes(yys511Slc, true, true)
		yys511 := string(yys511Slc)
		switch yys511 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys511)
		} // end switch yys511
	} // end for yyj511
	if !yyhl511 {
		r.ReadEnd()
	}
}

func (x *HostPathVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj513 int
	var yyb513 bool
	var yyhl513 bool = l >= 0
	yyj513++
	if yyhl513 {
		yyb513 = yyj513 > l
	} else {
		yyb513 = r.CheckBreak()
	}
	if yyb513 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj513++
		if yyhl513 {
			yyb513 = yyj513 > l
		} else {
			yyb513 = r.CheckBreak()
		}
		if yyb513 {
			break
		}
		z.DecStructFieldNotFound(yyj513-1, "")
	}
	r.ReadEnd()
}

func (x *EmptyDirVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym515 := z.EncBinary()
		_ = yym515
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep516 := !z.EncBinary()
			yy2arr516 := z.EncBasicHandle().StructToArray
			var yyq516 [1]bool
			_, _, _ = yysep516, yyq516, yy2arr516
			const yyr516 bool = false
			yyq516[0] = x.Medium != ""
			if yyr516 || yy2arr516 {
				r.EncodeArrayStart(1)
			} else {
				var yynn516 int = 0
				for _, b := range yyq516 {
					if b {
						yynn516++
					}
				}
				r.EncodeMapStart(yynn516)
			}
			if yyr516 || yy2arr516 {
				if yyq516[0] {
					x.Medium.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq516[0] {
					r.EncodeString(codecSelferC_UTF81234, string("medium"))
					x.Medium.CodecEncodeSelf(e)
				}
			}
			if yysep516 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EmptyDirVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym518 := z.DecBinary()
	_ = yym518
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl519 := r.ReadMapStart()
			if yyl519 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl519, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl519 := r.ReadArrayStart()
			if yyl519 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl519, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys520Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys520Slc
	var yyhl520 bool = l >= 0
	for yyj520 := 0; ; yyj520++ {
		if yyhl520 {
			if yyj520 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys520Slc = r.DecodeBytes(yys520Slc, true, true)
		yys520 := string(yys520Slc)
		switch yys520 {
		case "medium":
			if r.TryDecodeAsNil() {
				x.Medium = ""
			} else {
				x.Medium = StorageMedium(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys520)
		} // end switch yys520
	} // end for yyj520
	if !yyhl520 {
		r.ReadEnd()
	}
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj522 int
	var yyb522 bool
	var yyhl522 bool = l >= 0
	yyj522++
	if yyhl522 {
		yyb522 = yyj522 > l
	} else {
		yyb522 = r.CheckBreak()
	}
	if yyb522 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Medium = ""
	} else {
		x.Medium = StorageMedium(r.DecodeString())
	}
	for {
		yyj522++
		if yyhl522 {
			yyb522 = yyj522 > l
		} else {
			yyb522 = r.CheckBreak()
		}
		if yyb522 {
			break
		}
		z.DecStructFieldNotFound(yyj522-1, "")
	}
	r.ReadEnd()
}

func (x *GlusterfsVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym524 := z.EncBinary()
		_ = yym524
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep525 := !z.EncBinary()
			yy2arr525 := z.EncBasicHandle().StructToArray
			var yyq525 [3]bool
			_, _, _ = yysep525, yyq525, yy2arr525
			const yyr525 bool = false
			yyq525[2] = x.ReadOnly != false
			if yyr525 || yy2arr525 {
				r.EncodeArrayStart(3)
			} else {
				var yynn525 int = 2
				for _, b := range yyq525 {
					if b {
						yynn525++
					}
				}
				r.EncodeMapStart(yynn525)
			}
			if yyr525 || yy2arr525 {
				yym527 := z.EncBinary()
				_ = yym527
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("endpoints"))
				yym528 := z.EncBinary()
				_ = yym528
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			}
			if yyr525 || yy2arr525 {
				yym530 := z.EncBinary()
				_ = yym530
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				yym531 := z.EncBinary()
				_ = yym531
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr525 || yy2arr525 {
				if yyq525[2] {
					yym533 := z.EncBinary()
					_ = yym533
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq525[2] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym534 := z.EncBinary()
					_ = yym534
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep525 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *GlusterfsVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym535 := z.DecBinary()
	_ = yym535
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl536 := r.ReadMapStart()
			if yyl536 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl536, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl536 := r.ReadArrayStart()
			if yyl536 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl536, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys537Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys537Slc
	var yyhl537 bool = l >= 0
	for yyj537 := 0; ; yyj537++ {
		if yyhl537 {
			if yyj537 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys537Slc = r.DecodeBytes(yys537Slc, true, true)
		yys537 := string(yys537Slc)
		switch yys537 {
		case "endpoints":
			if r.TryDecodeAsNil() {
				x.EndpointsName = ""
			} else {
				x.EndpointsName = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys537)
		} // end switch yys537
	} // end for yyj537
	if !yyhl537 {
		r.ReadEnd()
	}
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj541 int
	var yyb541 bool
	var yyhl541 bool = l >= 0
	yyj541++
	if yyhl541 {
		yyb541 = yyj541 > l
	} else {
		yyb541 = r.CheckBreak()
	}
	if yyb541 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.EndpointsName = ""
	} else {
		x.EndpointsName = string(r.DecodeString())
	}
	yyj541++
	if yyhl541 {
		yyb541 = yyj541 > l
	} else {
		yyb541 = r.CheckBreak()
	}
	if yyb541 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj541++
	if yyhl541 {
		yyb541 = yyj541 > l
	} else {
		yyb541 = r.CheckBreak()
	}
	if yyb541 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj541++
		if yyhl541 {
			yyb541 = yyj541 > l
		} else {
			yyb541 = r.CheckBreak()
		}
		if yyb541 {
			break
		}
		z.DecStructFieldNotFound(yyj541-1, "")
	}
	r.ReadEnd()
}

func (x StorageMedium) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym545 := z.EncBinary()
	_ = yym545
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *StorageMedium) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym546 := z.DecBinary()
	_ = yym546
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *RBDVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym547 := z.EncBinary()
		_ = yym547
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep548 := !z.EncBinary()
			yy2arr548 := z.EncBasicHandle().StructToArray
			var yyq548 [8]bool
			_, _, _ = yysep548, yyq548, yy2arr548
			const yyr548 bool = false
			yyq548[2] = x.FSType != ""
			yyq548[7] = x.ReadOnly != false
			if yyr548 || yy2arr548 {
				r.EncodeArrayStart(8)
			} else {
				var yynn548 int = 6
				for _, b := range yyq548 {
					if b {
						yynn548++
					}
				}
				r.EncodeMapStart(yynn548)
			}
			if yyr548 || yy2arr548 {
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym550 := z.EncBinary()
					_ = yym550
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym551 := z.EncBinary()
					_ = yym551
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			}
			if yyr548 || yy2arr548 {
				yym553 := z.EncBinary()
				_ = yym553
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				yym554 := z.EncBinary()
				_ = yym554
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			}
			if yyr548 || yy2arr548 {
				if yyq548[2] {
					yym556 := z.EncBinary()
					_ = yym556
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq548[2] {
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					yym557 := z.EncBinary()
					_ = yym557
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr548 || yy2arr548 {
				yym559 := z.EncBinary()
				_ = yym559
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("pool"))
				yym560 := z.EncBinary()
				_ = yym560
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
				}
			}
			if yyr548 || yy2arr548 {
				yym562 := z.EncBinary()
				_ = yym562
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("user"))
				yym563 := z.EncBinary()
				_ = yym563
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
				}
			}
			if yyr548 || yy2arr548 {
				yym565 := z.EncBinary()
				_ = yym565
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("keyring"))
				yym566 := z.EncBinary()
				_ = yym566
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
				}
			}
			if yyr548 || yy2arr548 {
				if x.SecretRef == nil {
					r.EncodeNil()
				} else {
					x.SecretRef.CodecEncodeSelf(e)
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
				if x.SecretRef == nil {
					r.EncodeNil()
				} else {
					x.SecretRef.CodecEncodeSelf(e)
				}
			}
			if yyr548 || yy2arr548 {
				if yyq548[7] {
					yym569 := z.EncBinary()
					_ = yym569
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq548[7] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym570 := z.EncBinary()
					_ = yym570
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep548 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *RBDVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym571 := z.DecBinary()
	_ = yym571
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl572 := r.ReadMapStart()
			if yyl572 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl572, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl572 := r.ReadArrayStart()
			if yyl572 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl572, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RBDVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys573Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys573Slc
	var yyhl573 bool = l >= 0
	for yyj573 := 0; ; yyj573++ {
		if yyhl573 {
			if yyj573 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys573Slc = r.DecodeBytes(yys573Slc, true, true)
		yys573 := string(yys573Slc)
		switch yys573 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.CephMonitors = nil
			} else {
				yyv574 := &x.CephMonitors
				yym575 := z.DecBinary()
				_ = yym575
				if false {
				} else {
					z.F.DecSliceStringX(yyv574, false, d)
				}
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.RBDImage = ""
			} else {
				x.RBDImage = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "pool":
			if r.TryDecodeAsNil() {
				x.RBDPool = ""
			} else {
				x.RBDPool = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.RadosUser = ""
			} else {
				x.RadosUser = string(r.DecodeString())
			}
		case "keyring":
			if r.TryDecodeAsNil() {
				x.Keyring = ""
			} else {
				x.Keyring = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys573)
		} // end switch yys573
	} // end for yyj573
	if !yyhl573 {
		r.ReadEnd()
	}
}

func (x *RBDVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj583 int
	var yyb583 bool
	var yyhl583 bool = l >= 0
	yyj583++
	if yyhl583 {
		yyb583 = yyj583 > l
	} else {
		yyb583 = r.CheckBreak()
	}
	if yyb583 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.CephMonitors = nil
	} else {
		yyv584 := &x.CephMonitors
		yym585 := z.DecBinary()
		_ = yym585
		if false {
		} else {
			z.F.DecSliceStringX(yyv584, false, d)
		}
	}
	yyj583++
	if yyhl583 {
		yyb583 = yyj583 > l
	} else {
		yyb583 = r.CheckBreak()
	}
	if yyb583 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.RBDImage = ""
	} else {
		x.RBDImage = string(r.DecodeString())
	}
	yyj583++
	if yyhl583 {
		yyb583 = yyj583 > l
	} else {
		yyb583 = r.CheckBreak()
	}
	if yyb583 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj583++
	if yyhl583 {
		yyb583 = yyj583 > l
	} else {
		yyb583 = r.CheckBreak()
	}
	if yyb583 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.RBDPool = ""
	} else {
		x.RBDPool = string(r.DecodeString())
	}
	yyj583++
	if yyhl583 {
		yyb583 = yyj583 > l
	} else {
		yyb583 = r.CheckBreak()
	}
	if yyb583 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.RadosUser = ""
	} else {
		x.RadosUser = string(r.DecodeString())
	}
	yyj583++
	if yyhl583 {
		yyb583 = yyj583 > l
	} else {
		yyb583 = r.CheckBreak()
	}
	if yyb583 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Keyring = ""
	} else {
		x.Keyring = string(r.DecodeString())
	}
	yyj583++
	if yyhl583 {
		yyb583 = yyj583 > l
	} else {
		yyb583 = r.CheckBreak()
	}
	if yyb583 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj583++
	if yyhl583 {
		yyb583 = yyj583 > l
	} else {
		yyb583 = r.CheckBreak()
	}
	if yyb583 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj583++
		if yyhl583 {
			yyb583 = yyj583 > l
		} else {
			yyb583 = r.CheckBreak()
		}
		if yyb583 {
			break
		}
		z.DecStructFieldNotFound(yyj583-1, "")
	}
	r.ReadEnd()
}

func (x *CinderVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym593 := z.EncBinary()
		_ = yym593
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep594 := !z.EncBinary()
			yy2arr594 := z.EncBasicHandle().StructToArray
			var yyq594 [4]bool
			_, _, _ = yysep594, yyq594, yy2arr594
			const yyr594 bool = false
			yyq594[1] = x.FSType != ""
			yyq594[2] = x.ReadOnly != false
			yyq594[3] = x.WithOpenStackCP != false
			if yyr594 || yy2arr594 {
				r.EncodeArrayStart(4)
			} else {
				var yynn594 int = 1
				for _, b := range yyq594 {
					if b {
						yynn594++
					}
				}
				r.EncodeMapStart(yynn594)
			}
			if yyr594 || yy2arr594 {
				yym596 := z.EncBinary()
				_ = yym596
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				yym597 := z.EncBinary()
				_ = yym597
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr594 || yy2arr594 {
				if yyq594[1] {
					yym599 := z.EncBinary()
					_ = yym599
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq594[1] {
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					yym600 := z.EncBinary()
					_ = yym600
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr594 || yy2arr594 {
				if yyq594[2] {
					yym602 := z.EncBinary()
					_ = yym602
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq594[2] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym603 := z.EncBinary()
					_ = yym603
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr594 || yy2arr594 {
				if yyq594[3] {
					yym605 := z.EncBinary()
					_ = yym605
					if false {
					} else {
						r.EncodeBool(bool(x.WithOpenStackCP))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq594[3] {
					r.EncodeString(codecSelferC_UTF81234, string("withOpenStackCP"))
					yym606 := z.EncBinary()
					_ = yym606
					if false {
					} else {
						r.EncodeBool(bool(x.WithOpenStackCP))
					}
				}
			}
			if yysep594 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *CinderVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym607 := z.DecBinary()
	_ = yym607
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl608 := r.ReadMapStart()
			if yyl608 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl608, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl608 := r.ReadArrayStart()
			if yyl608 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl608, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CinderVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys609Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys609Slc
	var yyhl609 bool = l >= 0
	for yyj609 := 0; ; yyj609++ {
		if yyhl609 {
			if yyj609 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys609Slc = r.DecodeBytes(yys609Slc, true, true)
		yys609 := string(yys609Slc)
		switch yys609 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "withOpenStackCP":
			if r.TryDecodeAsNil() {
				x.WithOpenStackCP = false
			} else {
				x.WithOpenStackCP = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys609)
		} // end switch yys609
	} // end for yyj609
	if !yyhl609 {
		r.ReadEnd()
	}
}

func (x *CinderVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj614 int
	var yyb614 bool
	var yyhl614 bool = l >= 0
	yyj614++
	if yyhl614 {
		yyb614 = yyj614 > l
	} else {
		yyb614 = r.CheckBreak()
	}
	if yyb614 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj614++
	if yyhl614 {
		yyb614 = yyj614 > l
	} else {
		yyb614 = r.CheckBreak()
	}
	if yyb614 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj614++
	if yyhl614 {
		yyb614 = yyj614 > l
	} else {
		yyb614 = r.CheckBreak()
	}
	if yyb614 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj614++
	if yyhl614 {
		yyb614 = yyj614 > l
	} else {
		yyb614 = r.CheckBreak()
	}
	if yyb614 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.WithOpenStackCP = false
	} else {
		x.WithOpenStackCP = bool(r.DecodeBool())
	}
	for {
		yyj614++
		if yyhl614 {
			yyb614 = yyj614 > l
		} else {
			yyb614 = r.CheckBreak()
		}
		if yyb614 {
			break
		}
		z.DecStructFieldNotFound(yyj614-1, "")
	}
	r.ReadEnd()
}

func (x *CephFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym619 := z.EncBinary()
		_ = yym619
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep620 := !z.EncBinary()
			yy2arr620 := z.EncBasicHandle().StructToArray
			var yyq620 [5]bool
			_, _, _ = yysep620, yyq620, yy2arr620
			const yyr620 bool = false
			yyq620[1] = x.User != ""
			yyq620[2] = x.SecretFile != ""
			yyq620[3] = x.SecretRef != nil
			yyq620[4] = x.ReadOnly != false
			if yyr620 || yy2arr620 {
				r.EncodeArrayStart(5)
			} else {
				var yynn620 int = 1
				for _, b := range yyq620 {
					if b {
						yynn620++
					}
				}
				r.EncodeMapStart(yynn620)
			}
			if yyr620 || yy2arr620 {
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym622 := z.EncBinary()
					_ = yym622
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym623 := z.EncBinary()
					_ = yym623
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			}
			if yyr620 || yy2arr620 {
				if yyq620[1] {
					yym625 := z.EncBinary()
					_ = yym625
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq620[1] {
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					yym626 := z.EncBinary()
					_ = yym626
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr620 || yy2arr620 {
				if yyq620[2] {
					yym628 := z.EncBinary()
					_ = yym628
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq620[2] {
					r.EncodeString(codecSelferC_UTF81234, string("secretFile"))
					yym629 := z.EncBinary()
					_ = yym629
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				}
			}
			if yyr620 || yy2arr620 {
				if yyq620[3] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq620[3] {
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr620 || yy2arr620 {
				if yyq620[4] {
					yym632 := z.EncBinary()
					_ = yym632
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq620[4] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym633 := z.EncBinary()
					_ = yym633
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep620 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *CephFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym634 := z.DecBinary()
	_ = yym634
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl635 := r.ReadMapStart()
			if yyl635 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl635, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl635 := r.ReadArrayStart()
			if yyl635 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl635, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CephFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys636Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys636Slc
	var yyhl636 bool = l >= 0
	for yyj636 := 0; ; yyj636++ {
		if yyhl636 {
			if yyj636 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys636Slc = r.DecodeBytes(yys636Slc, true, true)
		yys636 := string(yys636Slc)
		switch yys636 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.Monitors = nil
			} else {
				yyv637 := &x.Monitors
				yym638 := z.DecBinary()
				_ = yym638
				if false {
				} else {
					z.F.DecSliceStringX(yyv637, false, d)
				}
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "secretFile":
			if r.TryDecodeAsNil() {
				x.SecretFile = ""
			} else {
				x.SecretFile = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys636)
		} // end switch yys636
	} // end for yyj636
	if !yyhl636 {
		r.ReadEnd()
	}
}

func (x *CephFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj643 int
	var yyb643 bool
	var yyhl643 bool = l >= 0
	yyj643++
	if yyhl643 {
		yyb643 = yyj643 > l
	} else {
		yyb643 = r.CheckBreak()
	}
	if yyb643 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Monitors = nil
	} else {
		yyv644 := &x.Monitors
		yym645 := z.DecBinary()
		_ = yym645
		if false {
		} else {
			z.F.DecSliceStringX(yyv644, false, d)
		}
	}
	yyj643++
	if yyhl643 {
		yyb643 = yyj643 > l
	} else {
		yyb643 = r.CheckBreak()
	}
	if yyb643 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj643++
	if yyhl643 {
		yyb643 = yyj643 > l
	} else {
		yyb643 = r.CheckBreak()
	}
	if yyb643 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SecretFile = ""
	} else {
		x.SecretFile = string(r.DecodeString())
	}
	yyj643++
	if yyhl643 {
		yyb643 = yyj643 > l
	} else {
		yyb643 = r.CheckBreak()
	}
	if yyb643 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj643++
	if yyhl643 {
		yyb643 = yyj643 > l
	} else {
		yyb643 = r.CheckBreak()
	}
	if yyb643 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj643++
		if yyhl643 {
			yyb643 = yyj643 > l
		} else {
			yyb643 = r.CheckBreak()
		}
		if yyb643 {
			break
		}
		z.DecStructFieldNotFound(yyj643-1, "")
	}
	r.ReadEnd()
}

func (x *FlockerVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym650 := z.EncBinary()
		_ = yym650
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep651 := !z.EncBinary()
			yy2arr651 := z.EncBasicHandle().StructToArray
			var yyq651 [1]bool
			_, _, _ = yysep651, yyq651, yy2arr651
			const yyr651 bool = false
			if yyr651 || yy2arr651 {
				r.EncodeArrayStart(1)
			} else {
				var yynn651 int = 1
				for _, b := range yyq651 {
					if b {
						yynn651++
					}
				}
				r.EncodeMapStart(yynn651)
			}
			if yyr651 || yy2arr651 {
				yym653 := z.EncBinary()
				_ = yym653
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("datasetName"))
				yym654 := z.EncBinary()
				_ = yym654
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			}
			if yysep651 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *FlockerVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym655 := z.DecBinary()
	_ = yym655
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl656 := r.ReadMapStart()
			if yyl656 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl656, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl656 := r.ReadArrayStart()
			if yyl656 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl656, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlockerVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys657Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys657Slc
	var yyhl657 bool = l >= 0
	for yyj657 := 0; ; yyj657++ {
		if yyhl657 {
			if yyj657 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys657Slc = r.DecodeBytes(yys657Slc, true, true)
		yys657 := string(yys657Slc)
		switch yys657 {
		case "datasetName":
			if r.TryDecodeAsNil() {
				x.DatasetName = ""
			} else {
				x.DatasetName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys657)
		} // end switch yys657
	} // end for yyj657
	if !yyhl657 {
		r.ReadEnd()
	}
}

func (x *FlockerVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj659 int
	var yyb659 bool
	var yyhl659 bool = l >= 0
	yyj659++
	if yyhl659 {
		yyb659 = yyj659 > l
	} else {
		yyb659 = r.CheckBreak()
	}
	if yyb659 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DatasetName = ""
	} else {
		x.DatasetName = string(r.DecodeString())
	}
	for {
		yyj659++
		if yyhl659 {
			yyb659 = yyj659 > l
		} else {
			yyb659 = r.CheckBreak()
		}
		if yyb659 {
			break
		}
		z.DecStructFieldNotFound(yyj659-1, "")
	}
	r.ReadEnd()
}

func (x Protocol) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym661 := z.EncBinary()
	_ = yym661
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Protocol) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym662 := z.DecBinary()
	_ = yym662
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym663 := z.EncBinary()
		_ = yym663
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep664 := !z.EncBinary()
			yy2arr664 := z.EncBasicHandle().StructToArray
			var yyq664 [4]bool
			_, _, _ = yysep664, yyq664, yy2arr664
			const yyr664 bool = false
			yyq664[2] = x.Partition != 0
			yyq664[3] = x.ReadOnly != false
			if yyr664 || yy2arr664 {
				r.EncodeArrayStart(4)
			} else {
				var yynn664 int = 2
				for _, b := range yyq664 {
					if b {
						yynn664++
					}
				}
				r.EncodeMapStart(yynn664)
			}
			if yyr664 || yy2arr664 {
				yym666 := z.EncBinary()
				_ = yym666
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("pdName"))
				yym667 := z.EncBinary()
				_ = yym667
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			}
			if yyr664 || yy2arr664 {
				yym669 := z.EncBinary()
				_ = yym669
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("fsType"))
				yym670 := z.EncBinary()
				_ = yym670
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			}
			if yyr664 || yy2arr664 {
				if yyq664[2] {
					yym672 := z.EncBinary()
					_ = yym672
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq664[2] {
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					yym673 := z.EncBinary()
					_ = yym673
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr664 || yy2arr664 {
				if yyq664[3] {
					yym675 := z.EncBinary()
					_ = yym675
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq664[3] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym676 := z.EncBinary()
					_ = yym676
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep664 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym677 := z.DecBinary()
	_ = yym677
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl678 := r.ReadMapStart()
			if yyl678 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl678, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl678 := r.ReadArrayStart()
			if yyl678 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl678, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys679Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys679Slc
	var yyhl679 bool = l >= 0
	for yyj679 := 0; ; yyj679++ {
		if yyhl679 {
			if yyj679 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys679Slc = r.DecodeBytes(yys679Slc, true, true)
		yys679 := string(yys679Slc)
		switch yys679 {
		case "pdName":
			if r.TryDecodeAsNil() {
				x.PDName = ""
			} else {
				x.PDName = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys679)
		} // end switch yys679
	} // end for yyj679
	if !yyhl679 {
		r.ReadEnd()
	}
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj684 int
	var yyb684 bool
	var yyhl684 bool = l >= 0
	yyj684++
	if yyhl684 {
		yyb684 = yyj684 > l
	} else {
		yyb684 = r.CheckBreak()
	}
	if yyb684 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.PDName = ""
	} else {
		x.PDName = string(r.DecodeString())
	}
	yyj684++
	if yyhl684 {
		yyb684 = yyj684 > l
	} else {
		yyb684 = r.CheckBreak()
	}
	if yyb684 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj684++
	if yyhl684 {
		yyb684 = yyj684 > l
	} else {
		yyb684 = r.CheckBreak()
	}
	if yyb684 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj684++
	if yyhl684 {
		yyb684 = yyj684 > l
	} else {
		yyb684 = r.CheckBreak()
	}
	if yyb684 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj684++
		if yyhl684 {
			yyb684 = yyj684 > l
		} else {
			yyb684 = r.CheckBreak()
		}
		if yyb684 {
			break
		}
		z.DecStructFieldNotFound(yyj684-1, "")
	}
	r.ReadEnd()
}

func (x *AWSElasticBlockStoreVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym689 := z.EncBinary()
		_ = yym689
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep690 := !z.EncBinary()
			yy2arr690 := z.EncBasicHandle().StructToArray
			var yyq690 [4]bool
			_, _, _ = yysep690, yyq690, yy2arr690
			const yyr690 bool = false
			yyq690[2] = x.Partition != 0
			yyq690[3] = x.ReadOnly != false
			if yyr690 || yy2arr690 {
				r.EncodeArrayStart(4)
			} else {
				var yynn690 int = 2
				for _, b := range yyq690 {
					if b {
						yynn690++
					}
				}
				r.EncodeMapStart(yynn690)
			}
			if yyr690 || yy2arr690 {
				yym692 := z.EncBinary()
				_ = yym692
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				yym693 := z.EncBinary()
				_ = yym693
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr690 || yy2arr690 {
				yym695 := z.EncBinary()
				_ = yym695
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("fsType"))
				yym696 := z.EncBinary()
				_ = yym696
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			}
			if yyr690 || yy2arr690 {
				if yyq690[2] {
					yym698 := z.EncBinary()
					_ = yym698
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq690[2] {
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					yym699 := z.EncBinary()
					_ = yym699
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr690 || yy2arr690 {
				if yyq690[3] {
					yym701 := z.EncBinary()
					_ = yym701
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq690[3] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym702 := z.EncBinary()
					_ = yym702
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep690 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym703 := z.DecBinary()
	_ = yym703
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl704 := r.ReadMapStart()
			if yyl704 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl704, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl704 := r.ReadArrayStart()
			if yyl704 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl704, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys705Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys705Slc
	var yyhl705 bool = l >= 0
	for yyj705 := 0; ; yyj705++ {
		if yyhl705 {
			if yyj705 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys705Slc = r.DecodeBytes(yys705Slc, true, true)
		yys705 := string(yys705Slc)
		switch yys705 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys705)
		} // end switch yys705
	} // end for yyj705
	if !yyhl705 {
		r.ReadEnd()
	}
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj710 int
	var yyb710 bool
	var yyhl710 bool = l >= 0
	yyj710++
	if yyhl710 {
		yyb710 = yyj710 > l
	} else {
		yyb710 = r.CheckBreak()
	}
	if yyb710 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj710++
	if yyhl710 {
		yyb710 = yyj710 > l
	} else {
		yyb710 = r.CheckBreak()
	}
	if yyb710 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj710++
	if yyhl710 {
		yyb710 = yyj710 > l
	} else {
		yyb710 = r.CheckBreak()
	}
	if yyb710 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj710++
	if yyhl710 {
		yyb710 = yyj710 > l
	} else {
		yyb710 = r.CheckBreak()
	}
	if yyb710 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj710++
		if yyhl710 {
			yyb710 = yyj710 > l
		} else {
			yyb710 = r.CheckBreak()
		}
		if yyb710 {
			break
		}
		z.DecStructFieldNotFound(yyj710-1, "")
	}
	r.ReadEnd()
}

func (x *GitRepoVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym715 := z.EncBinary()
		_ = yym715
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep716 := !z.EncBinary()
			yy2arr716 := z.EncBasicHandle().StructToArray
			var yyq716 [2]bool
			_, _, _ = yysep716, yyq716, yy2arr716
			const yyr716 bool = false
			if yyr716 || yy2arr716 {
				r.EncodeArrayStart(2)
			} else {
				var yynn716 int = 2
				for _, b := range yyq716 {
					if b {
						yynn716++
					}
				}
				r.EncodeMapStart(yynn716)
			}
			if yyr716 || yy2arr716 {
				yym718 := z.EncBinary()
				_ = yym718
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("repository"))
				yym719 := z.EncBinary()
				_ = yym719
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			}
			if yyr716 || yy2arr716 {
				yym721 := z.EncBinary()
				_ = yym721
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("revision"))
				yym722 := z.EncBinary()
				_ = yym722
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
				}
			}
			if yysep716 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *GitRepoVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym723 := z.DecBinary()
	_ = yym723
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl724 := r.ReadMapStart()
			if yyl724 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl724, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl724 := r.ReadArrayStart()
			if yyl724 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl724, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys725Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys725Slc
	var yyhl725 bool = l >= 0
	for yyj725 := 0; ; yyj725++ {
		if yyhl725 {
			if yyj725 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys725Slc = r.DecodeBytes(yys725Slc, true, true)
		yys725 := string(yys725Slc)
		switch yys725 {
		case "repository":
			if r.TryDecodeAsNil() {
				x.Repository = ""
			} else {
				x.Repository = string(r.DecodeString())
			}
		case "revision":
			if r.TryDecodeAsNil() {
				x.Revision = ""
			} else {
				x.Revision = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys725)
		} // end switch yys725
	} // end for yyj725
	if !yyhl725 {
		r.ReadEnd()
	}
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj728 int
	var yyb728 bool
	var yyhl728 bool = l >= 0
	yyj728++
	if yyhl728 {
		yyb728 = yyj728 > l
	} else {
		yyb728 = r.CheckBreak()
	}
	if yyb728 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Repository = ""
	} else {
		x.Repository = string(r.DecodeString())
	}
	yyj728++
	if yyhl728 {
		yyb728 = yyj728 > l
	} else {
		yyb728 = r.CheckBreak()
	}
	if yyb728 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Revision = ""
	} else {
		x.Revision = string(r.DecodeString())
	}
	for {
		yyj728++
		if yyhl728 {
			yyb728 = yyj728 > l
		} else {
			yyb728 = r.CheckBreak()
		}
		if yyb728 {
			break
		}
		z.DecStructFieldNotFound(yyj728-1, "")
	}
	r.ReadEnd()
}

func (x *SecretVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym731 := z.EncBinary()
		_ = yym731
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep732 := !z.EncBinary()
			yy2arr732 := z.EncBasicHandle().StructToArray
			var yyq732 [1]bool
			_, _, _ = yysep732, yyq732, yy2arr732
			const yyr732 bool = false
			if yyr732 || yy2arr732 {
				r.EncodeArrayStart(1)
			} else {
				var yynn732 int = 1
				for _, b := range yyq732 {
					if b {
						yynn732++
					}
				}
				r.EncodeMapStart(yynn732)
			}
			if yyr732 || yy2arr732 {
				yym734 := z.EncBinary()
				_ = yym734
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("secretName"))
				yym735 := z.EncBinary()
				_ = yym735
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			}
			if yysep732 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *SecretVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym736 := z.DecBinary()
	_ = yym736
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl737 := r.ReadMapStart()
			if yyl737 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl737, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl737 := r.ReadArrayStart()
			if yyl737 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl737, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys738Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys738Slc
	var yyhl738 bool = l >= 0
	for yyj738 := 0; ; yyj738++ {
		if yyhl738 {
			if yyj738 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys738Slc = r.DecodeBytes(yys738Slc, true, true)
		yys738 := string(yys738Slc)
		switch yys738 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys738)
		} // end switch yys738
	} // end for yyj738
	if !yyhl738 {
		r.ReadEnd()
	}
}

func (x *SecretVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj740 int
	var yyb740 bool
	var yyhl740 bool = l >= 0
	yyj740++
	if yyhl740 {
		yyb740 = yyj740 > l
	} else {
		yyb740 = r.CheckBreak()
	}
	if yyb740 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	for {
		yyj740++
		if yyhl740 {
			yyb740 = yyj740 > l
		} else {
			yyb740 = r.CheckBreak()
		}
		if yyb740 {
			break
		}
		z.DecStructFieldNotFound(yyj740-1, "")
	}
	r.ReadEnd()
}

func (x *NFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym742 := z.EncBinary()
		_ = yym742
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep743 := !z.EncBinary()
			yy2arr743 := z.EncBasicHandle().StructToArray
			var yyq743 [3]bool
			_, _, _ = yysep743, yyq743, yy2arr743
			const yyr743 bool = false
			yyq743[2] = x.ReadOnly != false
			if yyr743 || yy2arr743 {
				r.EncodeArrayStart(3)
			} else {
				var yynn743 int = 2
				for _, b := range yyq743 {
					if b {
						yynn743++
					}
				}
				r.EncodeMapStart(yynn743)
			}
			if yyr743 || yy2arr743 {
				yym745 := z.EncBinary()
				_ = yym745
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("server"))
				yym746 := z.EncBinary()
				_ = yym746
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			}
			if yyr743 || yy2arr743 {
				yym748 := z.EncBinary()
				_ = yym748
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				yym749 := z.EncBinary()
				_ = yym749
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr743 || yy2arr743 {
				if yyq743[2] {
					yym751 := z.EncBinary()
					_ = yym751
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq743[2] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym752 := z.EncBinary()
					_ = yym752
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep743 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym753 := z.DecBinary()
	_ = yym753
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl754 := r.ReadMapStart()
			if yyl754 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl754, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl754 := r.ReadArrayStart()
			if yyl754 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl754, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys755Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys755Slc
	var yyhl755 bool = l >= 0
	for yyj755 := 0; ; yyj755++ {
		if yyhl755 {
			if yyj755 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys755Slc = r.DecodeBytes(yys755Slc, true, true)
		yys755 := string(yys755Slc)
		switch yys755 {
		case "server":
			if r.TryDecodeAsNil() {
				x.Server = ""
			} else {
				x.Server = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys755)
		} // end switch yys755
	} // end for yyj755
	if !yyhl755 {
		r.ReadEnd()
	}
}

func (x *NFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj759 int
	var yyb759 bool
	var yyhl759 bool = l >= 0
	yyj759++
	if yyhl759 {
		yyb759 = yyj759 > l
	} else {
		yyb759 = r.CheckBreak()
	}
	if yyb759 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Server = ""
	} else {
		x.Server = string(r.DecodeString())
	}
	yyj759++
	if yyhl759 {
		yyb759 = yyj759 > l
	} else {
		yyb759 = r.CheckBreak()
	}
	if yyb759 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj759++
	if yyhl759 {
		yyb759 = yyj759 > l
	} else {
		yyb759 = r.CheckBreak()
	}
	if yyb759 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj759++
		if yyhl759 {
			yyb759 = yyj759 > l
		} else {
			yyb759 = r.CheckBreak()
		}
		if yyb759 {
			break
		}
		z.DecStructFieldNotFound(yyj759-1, "")
	}
	r.ReadEnd()
}

func (x *ISCSIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym763 := z.EncBinary()
		_ = yym763
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep764 := !z.EncBinary()
			yy2arr764 := z.EncBasicHandle().StructToArray
			var yyq764 [5]bool
			_, _, _ = yysep764, yyq764, yy2arr764
			const yyr764 bool = false
			yyq764[4] = x.ReadOnly != false
			if yyr764 || yy2arr764 {
				r.EncodeArrayStart(5)
			} else {
				var yynn764 int = 4
				for _, b := range yyq764 {
					if b {
						yynn764++
					}
				}
				r.EncodeMapStart(yynn764)
			}
			if yyr764 || yy2arr764 {
				yym766 := z.EncBinary()
				_ = yym766
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("targetPortal"))
				yym767 := z.EncBinary()
				_ = yym767
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
				}
			}
			if yyr764 || yy2arr764 {
				yym769 := z.EncBinary()
				_ = yym769
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("iqn"))
				yym770 := z.EncBinary()
				_ = yym770
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
				}
			}
			if yyr764 || yy2arr764 {
				yym772 := z.EncBinary()
				_ = yym772
				if false {
				} else {
					r.EncodeInt(int64(x.Lun))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				yym773 := z.EncBinary()
				_ = yym773
				if false {
				} else {
					r.EncodeInt(int64(x.Lun))
				}
			}
			if yyr764 || yy2arr764 {
				yym775 := z.EncBinary()
				_ = yym775
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("fsType"))
				yym776 := z.EncBinary()
				_ = yym776
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			}
			if yyr764 || yy2arr764 {
				if yyq764[4] {
					yym778 := z.EncBinary()
					_ = yym778
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq764[4] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym779 := z.EncBinary()
					_ = yym779
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep764 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ISCSIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym780 := z.DecBinary()
	_ = yym780
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl781 := r.ReadMapStart()
			if yyl781 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl781, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl781 := r.ReadArrayStart()
			if yyl781 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl781, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys782Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys782Slc
	var yyhl782 bool = l >= 0
	for yyj782 := 0; ; yyj782++ {
		if yyhl782 {
			if yyj782 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys782Slc = r.DecodeBytes(yys782Slc, true, true)
		yys782 := string(yys782Slc)
		switch yys782 {
		case "targetPortal":
			if r.TryDecodeAsNil() {
				x.TargetPortal = ""
			} else {
				x.TargetPortal = string(r.DecodeString())
			}
		case "iqn":
			if r.TryDecodeAsNil() {
				x.IQN = ""
			} else {
				x.IQN = string(r.DecodeString())
			}
		case "lun":
			if r.TryDecodeAsNil() {
				x.Lun = 0
			} else {
				x.Lun = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys782)
		} // end switch yys782
	} // end for yyj782
	if !yyhl782 {
		r.ReadEnd()
	}
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj788 int
	var yyb788 bool
	var yyhl788 bool = l >= 0
	yyj788++
	if yyhl788 {
		yyb788 = yyj788 > l
	} else {
		yyb788 = r.CheckBreak()
	}
	if yyb788 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TargetPortal = ""
	} else {
		x.TargetPortal = string(r.DecodeString())
	}
	yyj788++
	if yyhl788 {
		yyb788 = yyj788 > l
	} else {
		yyb788 = r.CheckBreak()
	}
	if yyb788 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.IQN = ""
	} else {
		x.IQN = string(r.DecodeString())
	}
	yyj788++
	if yyhl788 {
		yyb788 = yyj788 > l
	} else {
		yyb788 = r.CheckBreak()
	}
	if yyb788 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Lun = 0
	} else {
		x.Lun = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj788++
	if yyhl788 {
		yyb788 = yyj788 > l
	} else {
		yyb788 = r.CheckBreak()
	}
	if yyb788 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj788++
	if yyhl788 {
		yyb788 = yyj788 > l
	} else {
		yyb788 = r.CheckBreak()
	}
	if yyb788 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj788++
		if yyhl788 {
			yyb788 = yyj788 > l
		} else {
			yyb788 = r.CheckBreak()
		}
		if yyb788 {
			break
		}
		z.DecStructFieldNotFound(yyj788-1, "")
	}
	r.ReadEnd()
}

func (x *FCVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym794 := z.EncBinary()
		_ = yym794
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep795 := !z.EncBinary()
			yy2arr795 := z.EncBasicHandle().StructToArray
			var yyq795 [4]bool
			_, _, _ = yysep795, yyq795, yy2arr795
			const yyr795 bool = false
			yyq795[3] = x.ReadOnly != false
			if yyr795 || yy2arr795 {
				r.EncodeArrayStart(4)
			} else {
				var yynn795 int = 3
				for _, b := range yyq795 {
					if b {
						yynn795++
					}
				}
				r.EncodeMapStart(yynn795)
			}
			if yyr795 || yy2arr795 {
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym797 := z.EncBinary()
					_ = yym797
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("targetWWNs"))
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym798 := z.EncBinary()
					_ = yym798
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			}
			if yyr795 || yy2arr795 {
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy800 := *x.Lun
					yym801 := z.EncBinary()
					_ = yym801
					if false {
					} else {
						r.EncodeInt(int64(yy800))
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy802 := *x.Lun
					yym803 := z.EncBinary()
					_ = yym803
					if false {
					} else {
						r.EncodeInt(int64(yy802))
					}
				}
			}
			if yyr795 || yy2arr795 {
				yym805 := z.EncBinary()
				_ = yym805
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("fsType"))
				yym806 := z.EncBinary()
				_ = yym806
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			}
			if yyr795 || yy2arr795 {
				if yyq795[3] {
					yym808 := z.EncBinary()
					_ = yym808
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq795[3] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym809 := z.EncBinary()
					_ = yym809
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep795 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *FCVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym810 := z.DecBinary()
	_ = yym810
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl811 := r.ReadMapStart()
			if yyl811 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl811, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl811 := r.ReadArrayStart()
			if yyl811 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl811, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FCVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys812Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys812Slc
	var yyhl812 bool = l >= 0
	for yyj812 := 0; ; yyj812++ {
		if yyhl812 {
			if yyj812 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys812Slc = r.DecodeBytes(yys812Slc, true, true)
		yys812 := string(yys812Slc)
		switch yys812 {
		case "targetWWNs":
			if r.TryDecodeAsNil() {
				x.TargetWWNs = nil
			} else {
				yyv813 := &x.TargetWWNs
				yym814 := z.DecBinary()
				_ = yym814
				if false {
				} else {
					z.F.DecSliceStringX(yyv813, false, d)
				}
			}
		case "lun":
			if r.TryDecodeAsNil() {
				if x.Lun != nil {
					x.Lun = nil
				}
			} else {
				if x.Lun == nil {
					x.Lun = new(int)
				}
				yym816 := z.DecBinary()
				_ = yym816
				if false {
				} else {
					*((*int)(x.Lun)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys812)
		} // end switch yys812
	} // end for yyj812
	if !yyhl812 {
		r.ReadEnd()
	}
}

func (x *FCVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj819 int
	var yyb819 bool
	var yyhl819 bool = l >= 0
	yyj819++
	if yyhl819 {
		yyb819 = yyj819 > l
	} else {
		yyb819 = r.CheckBreak()
	}
	if yyb819 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TargetWWNs = nil
	} else {
		yyv820 := &x.TargetWWNs
		yym821 := z.DecBinary()
		_ = yym821
		if false {
		} else {
			z.F.DecSliceStringX(yyv820, false, d)
		}
	}
	yyj819++
	if yyhl819 {
		yyb819 = yyj819 > l
	} else {
		yyb819 = r.CheckBreak()
	}
	if yyb819 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Lun != nil {
			x.Lun = nil
		}
	} else {
		if x.Lun == nil {
			x.Lun = new(int)
		}
		yym823 := z.DecBinary()
		_ = yym823
		if false {
		} else {
			*((*int)(x.Lun)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	yyj819++
	if yyhl819 {
		yyb819 = yyj819 > l
	} else {
		yyb819 = r.CheckBreak()
	}
	if yyb819 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj819++
	if yyhl819 {
		yyb819 = yyj819 > l
	} else {
		yyb819 = r.CheckBreak()
	}
	if yyb819 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj819++
		if yyhl819 {
			yyb819 = yyj819 > l
		} else {
			yyb819 = r.CheckBreak()
		}
		if yyb819 {
			break
		}
		z.DecStructFieldNotFound(yyj819-1, "")
	}
	r.ReadEnd()
}

func (x *ContainerPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym826 := z.EncBinary()
		_ = yym826
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep827 := !z.EncBinary()
			yy2arr827 := z.EncBasicHandle().StructToArray
			var yyq827 [5]bool
			_, _, _ = yysep827, yyq827, yy2arr827
			const yyr827 bool = false
			yyq827[0] = x.Name != ""
			yyq827[1] = x.HostPort != 0
			yyq827[3] = x.Protocol != ""
			yyq827[4] = x.HostIP != ""
			if yyr827 || yy2arr827 {
				r.EncodeArrayStart(5)
			} else {
				var yynn827 int = 1
				for _, b := range yyq827 {
					if b {
						yynn827++
					}
				}
				r.EncodeMapStart(yynn827)
			}
			if yyr827 || yy2arr827 {
				if yyq827[0] {
					yym829 := z.EncBinary()
					_ = yym829
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq827[0] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					yym830 := z.EncBinary()
					_ = yym830
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr827 || yy2arr827 {
				if yyq827[1] {
					yym832 := z.EncBinary()
					_ = yym832
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq827[1] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPort"))
					yym833 := z.EncBinary()
					_ = yym833
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				}
			}
			if yyr827 || yy2arr827 {
				yym835 := z.EncBinary()
				_ = yym835
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("containerPort"))
				yym836 := z.EncBinary()
				_ = yym836
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			}
			if yyr827 || yy2arr827 {
				if yyq827[3] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq827[3] {
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr827 || yy2arr827 {
				if yyq827[4] {
					yym839 := z.EncBinary()
					_ = yym839
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq827[4] {
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					yym840 := z.EncBinary()
					_ = yym840
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yysep827 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym841 := z.DecBinary()
	_ = yym841
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl842 := r.ReadMapStart()
			if yyl842 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl842, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl842 := r.ReadArrayStart()
			if yyl842 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl842, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys843Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys843Slc
	var yyhl843 bool = l >= 0
	for yyj843 := 0; ; yyj843++ {
		if yyhl843 {
			if yyj843 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys843Slc = r.DecodeBytes(yys843Slc, true, true)
		yys843 := string(yys843Slc)
		switch yys843 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPort":
			if r.TryDecodeAsNil() {
				x.HostPort = 0
			} else {
				x.HostPort = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "containerPort":
			if r.TryDecodeAsNil() {
				x.ContainerPort = 0
			} else {
				x.ContainerPort = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys843)
		} // end switch yys843
	} // end for yyj843
	if !yyhl843 {
		r.ReadEnd()
	}
}

func (x *ContainerPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj849 int
	var yyb849 bool
	var yyhl849 bool = l >= 0
	yyj849++
	if yyhl849 {
		yyb849 = yyj849 > l
	} else {
		yyb849 = r.CheckBreak()
	}
	if yyb849 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj849++
	if yyhl849 {
		yyb849 = yyj849 > l
	} else {
		yyb849 = r.CheckBreak()
	}
	if yyb849 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostPort = 0
	} else {
		x.HostPort = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj849++
	if yyhl849 {
		yyb849 = yyj849 > l
	} else {
		yyb849 = r.CheckBreak()
	}
	if yyb849 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ContainerPort = 0
	} else {
		x.ContainerPort = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj849++
	if yyhl849 {
		yyb849 = yyj849 > l
	} else {
		yyb849 = r.CheckBreak()
	}
	if yyb849 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj849++
	if yyhl849 {
		yyb849 = yyj849 > l
	} else {
		yyb849 = r.CheckBreak()
	}
	if yyb849 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	for {
		yyj849++
		if yyhl849 {
			yyb849 = yyj849 > l
		} else {
			yyb849 = r.CheckBreak()
		}
		if yyb849 {
			break
		}
		z.DecStructFieldNotFound(yyj849-1, "")
	}
	r.ReadEnd()
}

func (x *VolumeMount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym855 := z.EncBinary()
		_ = yym855
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep856 := !z.EncBinary()
			yy2arr856 := z.EncBasicHandle().StructToArray
			var yyq856 [3]bool
			_, _, _ = yysep856, yyq856, yy2arr856
			const yyr856 bool = false
			yyq856[1] = x.ReadOnly != false
			if yyr856 || yy2arr856 {
				r.EncodeArrayStart(3)
			} else {
				var yynn856 int = 2
				for _, b := range yyq856 {
					if b {
						yynn856++
					}
				}
				r.EncodeMapStart(yynn856)
			}
			if yyr856 || yy2arr856 {
				yym858 := z.EncBinary()
				_ = yym858
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				yym859 := z.EncBinary()
				_ = yym859
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr856 || yy2arr856 {
				if yyq856[1] {
					yym861 := z.EncBinary()
					_ = yym861
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq856[1] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym862 := z.EncBinary()
					_ = yym862
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr856 || yy2arr856 {
				yym864 := z.EncBinary()
				_ = yym864
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("mountPath"))
				yym865 := z.EncBinary()
				_ = yym865
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			}
			if yysep856 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *VolumeMount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym866 := z.DecBinary()
	_ = yym866
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl867 := r.ReadMapStart()
			if yyl867 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl867, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl867 := r.ReadArrayStart()
			if yyl867 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl867, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeMount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys868Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys868Slc
	var yyhl868 bool = l >= 0
	for yyj868 := 0; ; yyj868++ {
		if yyhl868 {
			if yyj868 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys868Slc = r.DecodeBytes(yys868Slc, true, true)
		yys868 := string(yys868Slc)
		switch yys868 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "mountPath":
			if r.TryDecodeAsNil() {
				x.MountPath = ""
			} else {
				x.MountPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys868)
		} // end switch yys868
	} // end for yyj868
	if !yyhl868 {
		r.ReadEnd()
	}
}

func (x *VolumeMount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj872 int
	var yyb872 bool
	var yyhl872 bool = l >= 0
	yyj872++
	if yyhl872 {
		yyb872 = yyj872 > l
	} else {
		yyb872 = r.CheckBreak()
	}
	if yyb872 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj872++
	if yyhl872 {
		yyb872 = yyj872 > l
	} else {
		yyb872 = r.CheckBreak()
	}
	if yyb872 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj872++
	if yyhl872 {
		yyb872 = yyj872 > l
	} else {
		yyb872 = r.CheckBreak()
	}
	if yyb872 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MountPath = ""
	} else {
		x.MountPath = string(r.DecodeString())
	}
	for {
		yyj872++
		if yyhl872 {
			yyb872 = yyj872 > l
		} else {
			yyb872 = r.CheckBreak()
		}
		if yyb872 {
			break
		}
		z.DecStructFieldNotFound(yyj872-1, "")
	}
	r.ReadEnd()
}

func (x *EnvVar) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym876 := z.EncBinary()
		_ = yym876
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep877 := !z.EncBinary()
			yy2arr877 := z.EncBasicHandle().StructToArray
			var yyq877 [3]bool
			_, _, _ = yysep877, yyq877, yy2arr877
			const yyr877 bool = false
			yyq877[1] = x.Value != ""
			yyq877[2] = x.ValueFrom != nil
			if yyr877 || yy2arr877 {
				r.EncodeArrayStart(3)
			} else {
				var yynn877 int = 1
				for _, b := range yyq877 {
					if b {
						yynn877++
					}
				}
				r.EncodeMapStart(yynn877)
			}
			if yyr877 || yy2arr877 {
				yym879 := z.EncBinary()
				_ = yym879
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				yym880 := z.EncBinary()
				_ = yym880
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr877 || yy2arr877 {
				if yyq877[1] {
					yym882 := z.EncBinary()
					_ = yym882
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq877[1] {
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					yym883 := z.EncBinary()
					_ = yym883
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr877 || yy2arr877 {
				if yyq877[2] {
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq877[2] {
					r.EncodeString(codecSelferC_UTF81234, string("valueFrom"))
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				}
			}
			if yysep877 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EnvVar) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym885 := z.DecBinary()
	_ = yym885
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl886 := r.ReadMapStart()
			if yyl886 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl886, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl886 := r.ReadArrayStart()
			if yyl886 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl886, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVar) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys887Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys887Slc
	var yyhl887 bool = l >= 0
	for yyj887 := 0; ; yyj887++ {
		if yyhl887 {
			if yyj887 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys887Slc = r.DecodeBytes(yys887Slc, true, true)
		yys887 := string(yys887Slc)
		switch yys887 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "valueFrom":
			if r.TryDecodeAsNil() {
				if x.ValueFrom != nil {
					x.ValueFrom = nil
				}
			} else {
				if x.ValueFrom == nil {
					x.ValueFrom = new(EnvVarSource)
				}
				x.ValueFrom.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys887)
		} // end switch yys887
	} // end for yyj887
	if !yyhl887 {
		r.ReadEnd()
	}
}

func (x *EnvVar) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj891 int
	var yyb891 bool
	var yyhl891 bool = l >= 0
	yyj891++
	if yyhl891 {
		yyb891 = yyj891 > l
	} else {
		yyb891 = r.CheckBreak()
	}
	if yyb891 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj891++
	if yyhl891 {
		yyb891 = yyj891 > l
	} else {
		yyb891 = r.CheckBreak()
	}
	if yyb891 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj891++
	if yyhl891 {
		yyb891 = yyj891 > l
	} else {
		yyb891 = r.CheckBreak()
	}
	if yyb891 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ValueFrom != nil {
			x.ValueFrom = nil
		}
	} else {
		if x.ValueFrom == nil {
			x.ValueFrom = new(EnvVarSource)
		}
		x.ValueFrom.CodecDecodeSelf(d)
	}
	for {
		yyj891++
		if yyhl891 {
			yyb891 = yyj891 > l
		} else {
			yyb891 = r.CheckBreak()
		}
		if yyb891 {
			break
		}
		z.DecStructFieldNotFound(yyj891-1, "")
	}
	r.ReadEnd()
}

func (x *EnvVarSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym895 := z.EncBinary()
		_ = yym895
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep896 := !z.EncBinary()
			yy2arr896 := z.EncBasicHandle().StructToArray
			var yyq896 [1]bool
			_, _, _ = yysep896, yyq896, yy2arr896
			const yyr896 bool = false
			if yyr896 || yy2arr896 {
				r.EncodeArrayStart(1)
			} else {
				var yynn896 int = 1
				for _, b := range yyq896 {
					if b {
						yynn896++
					}
				}
				r.EncodeMapStart(yynn896)
			}
			if yyr896 || yy2arr896 {
				if x.FieldRef == nil {
					r.EncodeNil()
				} else {
					x.FieldRef.CodecEncodeSelf(e)
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
				if x.FieldRef == nil {
					r.EncodeNil()
				} else {
					x.FieldRef.CodecEncodeSelf(e)
				}
			}
			if yysep896 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EnvVarSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym898 := z.DecBinary()
	_ = yym898
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl899 := r.ReadMapStart()
			if yyl899 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl899, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl899 := r.ReadArrayStart()
			if yyl899 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl899, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVarSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys900Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys900Slc
	var yyhl900 bool = l >= 0
	for yyj900 := 0; ; yyj900++ {
		if yyhl900 {
			if yyj900 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys900Slc = r.DecodeBytes(yys900Slc, true, true)
		yys900 := string(yys900Slc)
		switch yys900 {
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys900)
		} // end switch yys900
	} // end for yyj900
	if !yyhl900 {
		r.ReadEnd()
	}
}

func (x *EnvVarSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj902 int
	var yyb902 bool
	var yyhl902 bool = l >= 0
	yyj902++
	if yyhl902 {
		yyb902 = yyj902 > l
	} else {
		yyb902 = r.CheckBreak()
	}
	if yyb902 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	for {
		yyj902++
		if yyhl902 {
			yyb902 = yyj902 > l
		} else {
			yyb902 = r.CheckBreak()
		}
		if yyb902 {
			break
		}
		z.DecStructFieldNotFound(yyj902-1, "")
	}
	r.ReadEnd()
}

func (x *ObjectFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym904 := z.EncBinary()
		_ = yym904
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep905 := !z.EncBinary()
			yy2arr905 := z.EncBasicHandle().StructToArray
			var yyq905 [2]bool
			_, _, _ = yysep905, yyq905, yy2arr905
			const yyr905 bool = false
			yyq905[0] = x.APIVersion != ""
			if yyr905 || yy2arr905 {
				r.EncodeArrayStart(2)
			} else {
				var yynn905 int = 1
				for _, b := range yyq905 {
					if b {
						yynn905++
					}
				}
				r.EncodeMapStart(yynn905)
			}
			if yyr905 || yy2arr905 {
				if yyq905[0] {
					yym907 := z.EncBinary()
					_ = yym907
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq905[0] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym908 := z.EncBinary()
					_ = yym908
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr905 || yy2arr905 {
				yym910 := z.EncBinary()
				_ = yym910
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
				yym911 := z.EncBinary()
				_ = yym911
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			}
			if yysep905 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ObjectFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym912 := z.DecBinary()
	_ = yym912
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl913 := r.ReadMapStart()
			if yyl913 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl913, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl913 := r.ReadArrayStart()
			if yyl913 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl913, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys914Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys914Slc
	var yyhl914 bool = l >= 0
	for yyj914 := 0; ; yyj914++ {
		if yyhl914 {
			if yyj914 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys914Slc = r.DecodeBytes(yys914Slc, true, true)
		yys914 := string(yys914Slc)
		switch yys914 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys914)
		} // end switch yys914
	} // end for yyj914
	if !yyhl914 {
		r.ReadEnd()
	}
}

func (x *ObjectFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj917 int
	var yyb917 bool
	var yyhl917 bool = l >= 0
	yyj917++
	if yyhl917 {
		yyb917 = yyj917 > l
	} else {
		yyb917 = r.CheckBreak()
	}
	if yyb917 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj917++
	if yyhl917 {
		yyb917 = yyj917 > l
	} else {
		yyb917 = r.CheckBreak()
	}
	if yyb917 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj917++
		if yyhl917 {
			yyb917 = yyj917 > l
		} else {
			yyb917 = r.CheckBreak()
		}
		if yyb917 {
			break
		}
		z.DecStructFieldNotFound(yyj917-1, "")
	}
	r.ReadEnd()
}

func (x *HTTPGetAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym920 := z.EncBinary()
		_ = yym920
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep921 := !z.EncBinary()
			yy2arr921 := z.EncBasicHandle().StructToArray
			var yyq921 [4]bool
			_, _, _ = yysep921, yyq921, yy2arr921
			const yyr921 bool = false
			yyq921[0] = x.Path != ""
			yyq921[2] = x.Host != ""
			yyq921[3] = x.Scheme != ""
			if yyr921 || yy2arr921 {
				r.EncodeArrayStart(4)
			} else {
				var yynn921 int = 1
				for _, b := range yyq921 {
					if b {
						yynn921++
					}
				}
				r.EncodeMapStart(yynn921)
			}
			if yyr921 || yy2arr921 {
				if yyq921[0] {
					yym923 := z.EncBinary()
					_ = yym923
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq921[0] {
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					yym924 := z.EncBinary()
					_ = yym924
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr921 || yy2arr921 {
				yy926 := &x.Port
				yym927 := z.EncBinary()
				_ = yym927
				if false {
				} else if z.HasExtensions() && z.EncExt(yy926) {
				} else if !yym927 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy926)
				} else {
					z.EncFallback(yy926)
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				yy928 := &x.Port
				yym929 := z.EncBinary()
				_ = yym929
				if false {
				} else if z.HasExtensions() && z.EncExt(yy928) {
				} else if !yym929 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy928)
				} else {
					z.EncFallback(yy928)
				}
			}
			if yyr921 || yy2arr921 {
				if yyq921[2] {
					yym931 := z.EncBinary()
					_ = yym931
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq921[2] {
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					yym932 := z.EncBinary()
					_ = yym932
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr921 || yy2arr921 {
				if yyq921[3] {
					x.Scheme.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq921[3] {
					r.EncodeString(codecSelferC_UTF81234, string("scheme"))
					x.Scheme.CodecEncodeSelf(e)
				}
			}
			if yysep921 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *HTTPGetAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym934 := z.DecBinary()
	_ = yym934
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl935 := r.ReadMapStart()
			if yyl935 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl935, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl935 := r.ReadArrayStart()
			if yyl935 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl935, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPGetAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys936Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys936Slc
	var yyhl936 bool = l >= 0
	for yyj936 := 0; ; yyj936++ {
		if yyhl936 {
			if yyj936 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys936Slc = r.DecodeBytes(yys936Slc, true, true)
		yys936 := string(yys936Slc)
		switch yys936 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg5_util.IntOrString{}
			} else {
				yyv938 := &x.Port
				yym939 := z.DecBinary()
				_ = yym939
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv938) {
				} else if !yym939 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv938)
				} else {
					z.DecFallback(yyv938, false)
				}
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "scheme":
			if r.TryDecodeAsNil() {
				x.Scheme = ""
			} else {
				x.Scheme = URIScheme(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys936)
		} // end switch yys936
	} // end for yyj936
	if !yyhl936 {
		r.ReadEnd()
	}
}

func (x *HTTPGetAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj942 int
	var yyb942 bool
	var yyhl942 bool = l >= 0
	yyj942++
	if yyhl942 {
		yyb942 = yyj942 > l
	} else {
		yyb942 = r.CheckBreak()
	}
	if yyb942 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj942++
	if yyhl942 {
		yyb942 = yyj942 > l
	} else {
		yyb942 = r.CheckBreak()
	}
	if yyb942 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Port = pkg5_util.IntOrString{}
	} else {
		yyv944 := &x.Port
		yym945 := z.DecBinary()
		_ = yym945
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv944) {
		} else if !yym945 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv944)
		} else {
			z.DecFallback(yyv944, false)
		}
	}
	yyj942++
	if yyhl942 {
		yyb942 = yyj942 > l
	} else {
		yyb942 = r.CheckBreak()
	}
	if yyb942 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	yyj942++
	if yyhl942 {
		yyb942 = yyj942 > l
	} else {
		yyb942 = r.CheckBreak()
	}
	if yyb942 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Scheme = ""
	} else {
		x.Scheme = URIScheme(r.DecodeString())
	}
	for {
		yyj942++
		if yyhl942 {
			yyb942 = yyj942 > l
		} else {
			yyb942 = r.CheckBreak()
		}
		if yyb942 {
			break
		}
		z.DecStructFieldNotFound(yyj942-1, "")
	}
	r.ReadEnd()
}

func (x URIScheme) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym948 := z.EncBinary()
	_ = yym948
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *URIScheme) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym949 := z.DecBinary()
	_ = yym949
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *TCPSocketAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym950 := z.EncBinary()
		_ = yym950
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep951 := !z.EncBinary()
			yy2arr951 := z.EncBasicHandle().StructToArray
			var yyq951 [1]bool
			_, _, _ = yysep951, yyq951, yy2arr951
			const yyr951 bool = false
			if yyr951 || yy2arr951 {
				r.EncodeArrayStart(1)
			} else {
				var yynn951 int = 1
				for _, b := range yyq951 {
					if b {
						yynn951++
					}
				}
				r.EncodeMapStart(yynn951)
			}
			if yyr951 || yy2arr951 {
				yy953 := &x.Port
				yym954 := z.EncBinary()
				_ = yym954
				if false {
				} else if z.HasExtensions() && z.EncExt(yy953) {
				} else if !yym954 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy953)
				} else {
					z.EncFallback(yy953)
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				yy955 := &x.Port
				yym956 := z.EncBinary()
				_ = yym956
				if false {
				} else if z.HasExtensions() && z.EncExt(yy955) {
				} else if !yym956 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy955)
				} else {
					z.EncFallback(yy955)
				}
			}
			if yysep951 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *TCPSocketAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym957 := z.DecBinary()
	_ = yym957
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl958 := r.ReadMapStart()
			if yyl958 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl958, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl958 := r.ReadArrayStart()
			if yyl958 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl958, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *TCPSocketAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys959Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys959Slc
	var yyhl959 bool = l >= 0
	for yyj959 := 0; ; yyj959++ {
		if yyhl959 {
			if yyj959 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys959Slc = r.DecodeBytes(yys959Slc, true, true)
		yys959 := string(yys959Slc)
		switch yys959 {
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg5_util.IntOrString{}
			} else {
				yyv960 := &x.Port
				yym961 := z.DecBinary()
				_ = yym961
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv960) {
				} else if !yym961 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv960)
				} else {
					z.DecFallback(yyv960, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys959)
		} // end switch yys959
	} // end for yyj959
	if !yyhl959 {
		r.ReadEnd()
	}
}

func (x *TCPSocketAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj962 int
	var yyb962 bool
	var yyhl962 bool = l >= 0
	yyj962++
	if yyhl962 {
		yyb962 = yyj962 > l
	} else {
		yyb962 = r.CheckBreak()
	}
	if yyb962 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Port = pkg5_util.IntOrString{}
	} else {
		yyv963 := &x.Port
		yym964 := z.DecBinary()
		_ = yym964
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv963) {
		} else if !yym964 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv963)
		} else {
			z.DecFallback(yyv963, false)
		}
	}
	for {
		yyj962++
		if yyhl962 {
			yyb962 = yyj962 > l
		} else {
			yyb962 = r.CheckBreak()
		}
		if yyb962 {
			break
		}
		z.DecStructFieldNotFound(yyj962-1, "")
	}
	r.ReadEnd()
}

func (x *ExecAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym965 := z.EncBinary()
		_ = yym965
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep966 := !z.EncBinary()
			yy2arr966 := z.EncBasicHandle().StructToArray
			var yyq966 [1]bool
			_, _, _ = yysep966, yyq966, yy2arr966
			const yyr966 bool = false
			yyq966[0] = len(x.Command) != 0
			if yyr966 || yy2arr966 {
				r.EncodeArrayStart(1)
			} else {
				var yynn966 int = 0
				for _, b := range yyq966 {
					if b {
						yynn966++
					}
				}
				r.EncodeMapStart(yynn966)
			}
			if yyr966 || yy2arr966 {
				if yyq966[0] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym968 := z.EncBinary()
						_ = yym968
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq966[0] {
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym969 := z.EncBinary()
						_ = yym969
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yysep966 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ExecAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym970 := z.DecBinary()
	_ = yym970
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl971 := r.ReadMapStart()
			if yyl971 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl971, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl971 := r.ReadArrayStart()
			if yyl971 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl971, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExecAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys972Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys972Slc
	var yyhl972 bool = l >= 0
	for yyj972 := 0; ; yyj972++ {
		if yyhl972 {
			if yyj972 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys972Slc = r.DecodeBytes(yys972Slc, true, true)
		yys972 := string(yys972Slc)
		switch yys972 {
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv973 := &x.Command
				yym974 := z.DecBinary()
				_ = yym974
				if false {
				} else {
					z.F.DecSliceStringX(yyv973, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys972)
		} // end switch yys972
	} // end for yyj972
	if !yyhl972 {
		r.ReadEnd()
	}
}

func (x *ExecAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj975 int
	var yyb975 bool
	var yyhl975 bool = l >= 0
	yyj975++
	if yyhl975 {
		yyb975 = yyj975 > l
	} else {
		yyb975 = r.CheckBreak()
	}
	if yyb975 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv976 := &x.Command
		yym977 := z.DecBinary()
		_ = yym977
		if false {
		} else {
			z.F.DecSliceStringX(yyv976, false, d)
		}
	}
	for {
		yyj975++
		if yyhl975 {
			yyb975 = yyj975 > l
		} else {
			yyb975 = r.CheckBreak()
		}
		if yyb975 {
			break
		}
		z.DecStructFieldNotFound(yyj975-1, "")
	}
	r.ReadEnd()
}

func (x *Probe) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym978 := z.EncBinary()
		_ = yym978
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep979 := !z.EncBinary()
			yy2arr979 := z.EncBasicHandle().StructToArray
			var yyq979 [8]bool
			_, _, _ = yysep979, yyq979, yy2arr979
			const yyr979 bool = false
			yyq979[0] = x.Handler.Exec != nil && x.Exec != nil
			yyq979[1] = x.Handler.HTTPGet != nil && x.HTTPGet != nil
			yyq979[2] = x.Handler.TCPSocket != nil && x.TCPSocket != nil
			yyq979[3] = x.InitialDelaySeconds != 0
			yyq979[4] = x.TimeoutSeconds != 0
			yyq979[5] = x.PeriodSeconds != 0
			yyq979[6] = x.SuccessThreshold != 0
			yyq979[7] = x.FailureThreshold != 0
			if yyr979 || yy2arr979 {
				r.EncodeArrayStart(8)
			} else {
				var yynn979 int = 0
				for _, b := range yyq979 {
					if b {
						yynn979++
					}
				}
				r.EncodeMapStart(yynn979)
			}
			var yyn980 bool
			if x.Handler.Exec == nil {
				yyn980 = true
				goto LABEL980
			}
		LABEL980:
			if yyr979 || yy2arr979 {
				if yyn980 {
					r.EncodeNil()
				} else {
					if yyq979[0] {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq979[0] {
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					if yyn980 {
						r.EncodeNil()
					} else {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn981 bool
			if x.Handler.HTTPGet == nil {
				yyn981 = true
				goto LABEL981
			}
		LABEL981:
			if yyr979 || yy2arr979 {
				if yyn981 {
					r.EncodeNil()
				} else {
					if yyq979[1] {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq979[1] {
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					if yyn981 {
						r.EncodeNil()
					} else {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn982 bool
			if x.Handler.TCPSocket == nil {
				yyn982 = true
				goto LABEL982
			}
		LABEL982:
			if yyr979 || yy2arr979 {
				if yyn982 {
					r.EncodeNil()
				} else {
					if yyq979[2] {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq979[2] {
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					if yyn982 {
						r.EncodeNil()
					} else {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr979 || yy2arr979 {
				if yyq979[3] {
					yym984 := z.EncBinary()
					_ = yym984
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq979[3] {
					r.EncodeString(codecSelferC_UTF81234, string("initialDelaySeconds"))
					yym985 := z.EncBinary()
					_ = yym985
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				}
			}
			if yyr979 || yy2arr979 {
				if yyq979[4] {
					yym987 := z.EncBinary()
					_ = yym987
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq979[4] {
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					yym988 := z.EncBinary()
					_ = yym988
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				}
			}
			if yyr979 || yy2arr979 {
				if yyq979[5] {
					yym990 := z.EncBinary()
					_ = yym990
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq979[5] {
					r.EncodeString(codecSelferC_UTF81234, string("periodSeconds"))
					yym991 := z.EncBinary()
					_ = yym991
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				}
			}
			if yyr979 || yy2arr979 {
				if yyq979[6] {
					yym993 := z.EncBinary()
					_ = yym993
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq979[6] {
					r.EncodeString(codecSelferC_UTF81234, string("successThreshold"))
					yym994 := z.EncBinary()
					_ = yym994
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				}
			}
			if yyr979 || yy2arr979 {
				if yyq979[7] {
					yym996 := z.EncBinary()
					_ = yym996
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq979[7] {
					r.EncodeString(codecSelferC_UTF81234, string("failureThreshold"))
					yym997 := z.EncBinary()
					_ = yym997
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				}
			}
			if yysep979 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Probe) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym998 := z.DecBinary()
	_ = yym998
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl999 := r.ReadMapStart()
			if yyl999 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl999, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl999 := r.ReadArrayStart()
			if yyl999 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl999, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Probe) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1000Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1000Slc
	var yyhl1000 bool = l >= 0
	for yyj1000 := 0; ; yyj1000++ {
		if yyhl1000 {
			if yyj1000 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1000Slc = r.DecodeBytes(yys1000Slc, true, true)
		yys1000 := string(yys1000Slc)
		switch yys1000 {
		case "exec":
			if x.Handler.Exec == nil {
				x.Handler.Exec = new(ExecAction)
			}
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if x.Handler.HTTPGet == nil {
				x.Handler.HTTPGet = new(HTTPGetAction)
			}
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if x.Handler.TCPSocket == nil {
				x.Handler.TCPSocket = new(TCPSocketAction)
			}
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		case "initialDelaySeconds":
			if r.TryDecodeAsNil() {
				x.InitialDelaySeconds = 0
			} else {
				x.InitialDelaySeconds = int64(r.DecodeInt(64))
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				x.TimeoutSeconds = 0
			} else {
				x.TimeoutSeconds = int64(r.DecodeInt(64))
			}
		case "periodSeconds":
			if r.TryDecodeAsNil() {
				x.PeriodSeconds = 0
			} else {
				x.PeriodSeconds = int64(r.DecodeInt(64))
			}
		case "successThreshold":
			if r.TryDecodeAsNil() {
				x.SuccessThreshold = 0
			} else {
				x.SuccessThreshold = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "failureThreshold":
			if r.TryDecodeAsNil() {
				x.FailureThreshold = 0
			} else {
				x.FailureThreshold = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1000)
		} // end switch yys1000
	} // end for yyj1000
	if !yyhl1000 {
		r.ReadEnd()
	}
}

func (x *Probe) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1009 int
	var yyb1009 bool
	var yyhl1009 bool = l >= 0
	yyj1009++
	if yyhl1009 {
		yyb1009 = yyj1009 > l
	} else {
		yyb1009 = r.CheckBreak()
	}
	if yyb1009 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	yyj1009++
	if yyhl1009 {
		yyb1009 = yyj1009 > l
	} else {
		yyb1009 = r.CheckBreak()
	}
	if yyb1009 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	yyj1009++
	if yyhl1009 {
		yyb1009 = yyj1009 > l
	} else {
		yyb1009 = r.CheckBreak()
	}
	if yyb1009 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	yyj1009++
	if yyhl1009 {
		yyb1009 = yyj1009 > l
	} else {
		yyb1009 = r.CheckBreak()
	}
	if yyb1009 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.InitialDelaySeconds = 0
	} else {
		x.InitialDelaySeconds = int64(r.DecodeInt(64))
	}
	yyj1009++
	if yyhl1009 {
		yyb1009 = yyj1009 > l
	} else {
		yyb1009 = r.CheckBreak()
	}
	if yyb1009 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TimeoutSeconds = 0
	} else {
		x.TimeoutSeconds = int64(r.DecodeInt(64))
	}
	yyj1009++
	if yyhl1009 {
		yyb1009 = yyj1009 > l
	} else {
		yyb1009 = r.CheckBreak()
	}
	if yyb1009 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.PeriodSeconds = 0
	} else {
		x.PeriodSeconds = int64(r.DecodeInt(64))
	}
	yyj1009++
	if yyhl1009 {
		yyb1009 = yyj1009 > l
	} else {
		yyb1009 = r.CheckBreak()
	}
	if yyb1009 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SuccessThreshold = 0
	} else {
		x.SuccessThreshold = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1009++
	if yyhl1009 {
		yyb1009 = yyj1009 > l
	} else {
		yyb1009 = r.CheckBreak()
	}
	if yyb1009 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FailureThreshold = 0
	} else {
		x.FailureThreshold = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj1009++
		if yyhl1009 {
			yyb1009 = yyj1009 > l
		} else {
			yyb1009 = r.CheckBreak()
		}
		if yyb1009 {
			break
		}
		z.DecStructFieldNotFound(yyj1009-1, "")
	}
	r.ReadEnd()
}

func (x PullPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1018 := z.EncBinary()
	_ = yym1018
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PullPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1019 := z.DecBinary()
	_ = yym1019
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Capability) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1020 := z.EncBinary()
	_ = yym1020
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Capability) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1021 := z.DecBinary()
	_ = yym1021
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Capabilities) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1022 := z.EncBinary()
		_ = yym1022
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1023 := !z.EncBinary()
			yy2arr1023 := z.EncBasicHandle().StructToArray
			var yyq1023 [2]bool
			_, _, _ = yysep1023, yyq1023, yy2arr1023
			const yyr1023 bool = false
			yyq1023[0] = len(x.Add) != 0
			yyq1023[1] = len(x.Drop) != 0
			if yyr1023 || yy2arr1023 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1023 int = 0
				for _, b := range yyq1023 {
					if b {
						yynn1023++
					}
				}
				r.EncodeMapStart(yynn1023)
			}
			if yyr1023 || yy2arr1023 {
				if yyq1023[0] {
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1025 := z.EncBinary()
						_ = yym1025
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1023[0] {
					r.EncodeString(codecSelferC_UTF81234, string("add"))
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1026 := z.EncBinary()
						_ = yym1026
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				}
			}
			if yyr1023 || yy2arr1023 {
				if yyq1023[1] {
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1028 := z.EncBinary()
						_ = yym1028
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1023[1] {
					r.EncodeString(codecSelferC_UTF81234, string("drop"))
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1029 := z.EncBinary()
						_ = yym1029
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				}
			}
			if yysep1023 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Capabilities) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1030 := z.DecBinary()
	_ = yym1030
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1031 := r.ReadMapStart()
			if yyl1031 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1031, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1031 := r.ReadArrayStart()
			if yyl1031 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1031, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Capabilities) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1032Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1032Slc
	var yyhl1032 bool = l >= 0
	for yyj1032 := 0; ; yyj1032++ {
		if yyhl1032 {
			if yyj1032 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1032Slc = r.DecodeBytes(yys1032Slc, true, true)
		yys1032 := string(yys1032Slc)
		switch yys1032 {
		case "add":
			if r.TryDecodeAsNil() {
				x.Add = nil
			} else {
				yyv1033 := &x.Add
				yym1034 := z.DecBinary()
				_ = yym1034
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1033), d)
				}
			}
		case "drop":
			if r.TryDecodeAsNil() {
				x.Drop = nil
			} else {
				yyv1035 := &x.Drop
				yym1036 := z.DecBinary()
				_ = yym1036
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1035), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1032)
		} // end switch yys1032
	} // end for yyj1032
	if !yyhl1032 {
		r.ReadEnd()
	}
}

func (x *Capabilities) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1037 int
	var yyb1037 bool
	var yyhl1037 bool = l >= 0
	yyj1037++
	if yyhl1037 {
		yyb1037 = yyj1037 > l
	} else {
		yyb1037 = r.CheckBreak()
	}
	if yyb1037 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Add = nil
	} else {
		yyv1038 := &x.Add
		yym1039 := z.DecBinary()
		_ = yym1039
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1038), d)
		}
	}
	yyj1037++
	if yyhl1037 {
		yyb1037 = yyj1037 > l
	} else {
		yyb1037 = r.CheckBreak()
	}
	if yyb1037 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Drop = nil
	} else {
		yyv1040 := &x.Drop
		yym1041 := z.DecBinary()
		_ = yym1041
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1040), d)
		}
	}
	for {
		yyj1037++
		if yyhl1037 {
			yyb1037 = yyj1037 > l
		} else {
			yyb1037 = r.CheckBreak()
		}
		if yyb1037 {
			break
		}
		z.DecStructFieldNotFound(yyj1037-1, "")
	}
	r.ReadEnd()
}

func (x *ResourceRequirements) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1042 := z.EncBinary()
		_ = yym1042
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1043 := !z.EncBinary()
			yy2arr1043 := z.EncBasicHandle().StructToArray
			var yyq1043 [2]bool
			_, _, _ = yysep1043, yyq1043, yy2arr1043
			const yyr1043 bool = false
			yyq1043[0] = len(x.Limits) != 0
			yyq1043[1] = len(x.Requests) != 0
			if yyr1043 || yy2arr1043 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1043 int = 0
				for _, b := range yyq1043 {
					if b {
						yynn1043++
					}
				}
				r.EncodeMapStart(yynn1043)
			}
			if yyr1043 || yy2arr1043 {
				if yyq1043[0] {
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1043[0] {
					r.EncodeString(codecSelferC_UTF81234, string("limits"))
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1043 || yy2arr1043 {
				if yyq1043[1] {
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1043[1] {
					r.EncodeString(codecSelferC_UTF81234, string("requests"))
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				}
			}
			if yysep1043 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ResourceRequirements) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1046 := z.DecBinary()
	_ = yym1046
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1047 := r.ReadMapStart()
			if yyl1047 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1047, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1047 := r.ReadArrayStart()
			if yyl1047 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1047, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceRequirements) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1048Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1048Slc
	var yyhl1048 bool = l >= 0
	for yyj1048 := 0; ; yyj1048++ {
		if yyhl1048 {
			if yyj1048 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1048Slc = r.DecodeBytes(yys1048Slc, true, true)
		yys1048 := string(yys1048Slc)
		switch yys1048 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv1049 := &x.Limits
				yyv1049.CodecDecodeSelf(d)
			}
		case "requests":
			if r.TryDecodeAsNil() {
				x.Requests = nil
			} else {
				yyv1050 := &x.Requests
				yyv1050.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1048)
		} // end switch yys1048
	} // end for yyj1048
	if !yyhl1048 {
		r.ReadEnd()
	}
}

func (x *ResourceRequirements) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1051 int
	var yyb1051 bool
	var yyhl1051 bool = l >= 0
	yyj1051++
	if yyhl1051 {
		yyb1051 = yyj1051 > l
	} else {
		yyb1051 = r.CheckBreak()
	}
	if yyb1051 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv1052 := &x.Limits
		yyv1052.CodecDecodeSelf(d)
	}
	yyj1051++
	if yyhl1051 {
		yyb1051 = yyj1051 > l
	} else {
		yyb1051 = r.CheckBreak()
	}
	if yyb1051 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Requests = nil
	} else {
		yyv1053 := &x.Requests
		yyv1053.CodecDecodeSelf(d)
	}
	for {
		yyj1051++
		if yyhl1051 {
			yyb1051 = yyj1051 > l
		} else {
			yyb1051 = r.CheckBreak()
		}
		if yyb1051 {
			break
		}
		z.DecStructFieldNotFound(yyj1051-1, "")
	}
	r.ReadEnd()
}

func (x *Container) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1054 := z.EncBinary()
		_ = yym1054
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1055 := !z.EncBinary()
			yy2arr1055 := z.EncBasicHandle().StructToArray
			var yyq1055 [18]bool
			_, _, _ = yysep1055, yyq1055, yy2arr1055
			const yyr1055 bool = false
			yyq1055[1] = x.Image != ""
			yyq1055[2] = len(x.Command) != 0
			yyq1055[3] = len(x.Args) != 0
			yyq1055[4] = x.WorkingDir != ""
			yyq1055[5] = len(x.Ports) != 0
			yyq1055[6] = len(x.Env) != 0
			yyq1055[7] = true
			yyq1055[8] = len(x.VolumeMounts) != 0
			yyq1055[9] = x.LivenessProbe != nil
			yyq1055[10] = x.ReadinessProbe != nil
			yyq1055[11] = x.Lifecycle != nil
			yyq1055[12] = x.TerminationMessagePath != ""
			yyq1055[13] = x.ImagePullPolicy != ""
			yyq1055[14] = x.SecurityContext != nil
			yyq1055[15] = x.Stdin != false
			yyq1055[16] = x.StdinOnce != false
			yyq1055[17] = x.TTY != false
			if yyr1055 || yy2arr1055 {
				r.EncodeArrayStart(18)
			} else {
				var yynn1055 int = 1
				for _, b := range yyq1055 {
					if b {
						yynn1055++
					}
				}
				r.EncodeMapStart(yynn1055)
			}
			if yyr1055 || yy2arr1055 {
				yym1057 := z.EncBinary()
				_ = yym1057
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				yym1058 := z.EncBinary()
				_ = yym1058
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1055 || yy2arr1055 {
				if yyq1055[1] {
					yym1060 := z.EncBinary()
					_ = yym1060
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Image))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1055[1] {
					r.EncodeString(codecSelferC_UTF81234, string("image"))
					yym1061 := z.EncBinary()
					_ = yym1061
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Image))
					}
				}
			}
			if yyr1055 || yy2arr1055 {
				if yyq1055[2] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1063 := z.EncBinary()
						_ = yym1063
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1055[2] {
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1064 := z.EncBinary()
						_ = yym1064
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1055 || yy2arr1055 {
				if yyq1055[3] {
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1066 := z.EncBinary()
						_ = yym1066
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1055[3] {
					r.EncodeString(codecSelferC_UTF81234, string("args"))
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1067 := z.EncBinary()
						_ = yym1067
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				}
			}
			if yyr1055 || yy2arr1055 {
				if yyq1055[4] {
					yym1069 := z.EncBinary()
					_ = yym1069
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1055[4] {
					r.EncodeString(codecSelferC_UTF81234, string("workingDir"))
					yym1070 := z.EncBinary()
					_ = yym1070
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				}
			}
			if yyr1055 || yy2arr1055 {
				if yyq1055[5] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1072 := z.EncBinary()
						_ = yym1072
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1055[5] {
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1073 := z.EncBinary()
						_ = yym1073
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr1055 || yy2arr1055 {
				if yyq1055[6] {
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1075 := z.EncBinary()
						_ = yym1075
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1055[6] {
					r.EncodeString(codecSelferC_UTF81234, string("env"))
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1076 := z.EncBinary()
						_ = yym1076
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				}
			}
			if yyr1055 || yy2arr1055 {
				if yyq1055[7] {
					yy1078 := &x.Resources
					yy1078.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1055[7] {
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					yy1079 := &x.Resources
					yy1079.CodecEncodeSelf(e)
				}
			}
			if yyr1055 || yy2arr1055 {
				if yyq1055[8] {
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1081 := z.EncBinary()
						_ = yym1081
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1055[8] {
					r.EncodeString(codecSelferC_UTF81234, string("volumeMounts"))
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1082 := z.EncBinary()
						_ = yym1082
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				}
			}
			if yyr1055 || yy2arr1055 {
				if yyq1055[9] {
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1055[9] {
					r.EncodeString(codecSelferC_UTF81234, string("livenessProbe"))
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1055 || yy2arr1055 {
				if yyq1055[10] {
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1055[10] {
					r.EncodeString(codecSelferC_UTF81234, string("readinessProbe"))
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1055 || yy2arr1055 {
				if yyq1055[11] {
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1055[11] {
					r.EncodeString(codecSelferC_UTF81234, string("lifecycle"))
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1055 || yy2arr1055 {
				if yyq1055[12] {
					yym1087 := z.EncBinary()
					_ = yym1087
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1055[12] {
					r.EncodeString(codecSelferC_UTF81234, string("terminationMessagePath"))
					yym1088 := z.EncBinary()
					_ = yym1088
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				}
			}
			if yyr1055 || yy2arr1055 {
				if yyq1055[13] {
					x.ImagePullPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1055[13] {
					r.EncodeString(codecSelferC_UTF81234, string("imagePullPolicy"))
					x.ImagePullPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1055 || yy2arr1055 {
				if yyq1055[14] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1055[14] {
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1055 || yy2arr1055 {
				if yyq1055[15] {
					yym1092 := z.EncBinary()
					_ = yym1092
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1055[15] {
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					yym1093 := z.EncBinary()
					_ = yym1093
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr1055 || yy2arr1055 {
				if yyq1055[16] {
					yym1095 := z.EncBinary()
					_ = yym1095
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1055[16] {
					r.EncodeString(codecSelferC_UTF81234, string("stdinOnce"))
					yym1096 := z.EncBinary()
					_ = yym1096
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				}
			}
			if yyr1055 || yy2arr1055 {
				if yyq1055[17] {
					yym1098 := z.EncBinary()
					_ = yym1098
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1055[17] {
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					yym1099 := z.EncBinary()
					_ = yym1099
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yysep1055 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Container) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1100 := z.DecBinary()
	_ = yym1100
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1101 := r.ReadMapStart()
			if yyl1101 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1101, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1101 := r.ReadArrayStart()
			if yyl1101 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1101, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Container) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1102Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1102Slc
	var yyhl1102 bool = l >= 0
	for yyj1102 := 0; ; yyj1102++ {
		if yyhl1102 {
			if yyj1102 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1102Slc = r.DecodeBytes(yys1102Slc, true, true)
		yys1102 := string(yys1102Slc)
		switch yys1102 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1105 := &x.Command
				yym1106 := z.DecBinary()
				_ = yym1106
				if false {
				} else {
					z.F.DecSliceStringX(yyv1105, false, d)
				}
			}
		case "args":
			if r.TryDecodeAsNil() {
				x.Args = nil
			} else {
				yyv1107 := &x.Args
				yym1108 := z.DecBinary()
				_ = yym1108
				if false {
				} else {
					z.F.DecSliceStringX(yyv1107, false, d)
				}
			}
		case "workingDir":
			if r.TryDecodeAsNil() {
				x.WorkingDir = ""
			} else {
				x.WorkingDir = string(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1110 := &x.Ports
				yym1111 := z.DecBinary()
				_ = yym1111
				if false {
				} else {
					h.decSliceContainerPort((*[]ContainerPort)(yyv1110), d)
				}
			}
		case "env":
			if r.TryDecodeAsNil() {
				x.Env = nil
			} else {
				yyv1112 := &x.Env
				yym1113 := z.DecBinary()
				_ = yym1113
				if false {
				} else {
					h.decSliceEnvVar((*[]EnvVar)(yyv1112), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv1114 := &x.Resources
				yyv1114.CodecDecodeSelf(d)
			}
		case "volumeMounts":
			if r.TryDecodeAsNil() {
				x.VolumeMounts = nil
			} else {
				yyv1115 := &x.VolumeMounts
				yym1116 := z.DecBinary()
				_ = yym1116
				if false {
				} else {
					h.decSliceVolumeMount((*[]VolumeMount)(yyv1115), d)
				}
			}
		case "livenessProbe":
			if r.TryDecodeAsNil() {
				if x.LivenessProbe != nil {
					x.LivenessProbe = nil
				}
			} else {
				if x.LivenessProbe == nil {
					x.LivenessProbe = new(Probe)
				}
				x.LivenessProbe.CodecDecodeSelf(d)
			}
		case "readinessProbe":
			if r.TryDecodeAsNil() {
				if x.ReadinessProbe != nil {
					x.ReadinessProbe = nil
				}
			} else {
				if x.ReadinessProbe == nil {
					x.ReadinessProbe = new(Probe)
				}
				x.ReadinessProbe.CodecDecodeSelf(d)
			}
		case "lifecycle":
			if r.TryDecodeAsNil() {
				if x.Lifecycle != nil {
					x.Lifecycle = nil
				}
			} else {
				if x.Lifecycle == nil {
					x.Lifecycle = new(Lifecycle)
				}
				x.Lifecycle.CodecDecodeSelf(d)
			}
		case "terminationMessagePath":
			if r.TryDecodeAsNil() {
				x.TerminationMessagePath = ""
			} else {
				x.TerminationMessagePath = string(r.DecodeString())
			}
		case "imagePullPolicy":
			if r.TryDecodeAsNil() {
				x.ImagePullPolicy = ""
			} else {
				x.ImagePullPolicy = PullPolicy(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(SecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdinOnce":
			if r.TryDecodeAsNil() {
				x.StdinOnce = false
			} else {
				x.StdinOnce = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1102)
		} // end switch yys1102
	} // end for yyj1102
	if !yyhl1102 {
		r.ReadEnd()
	}
}

func (x *Container) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1126 int
	var yyb1126 bool
	var yyhl1126 bool = l >= 0
	yyj1126++
	if yyhl1126 {
		yyb1126 = yyj1126 > l
	} else {
		yyb1126 = r.CheckBreak()
	}
	if yyb1126 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1126++
	if yyhl1126 {
		yyb1126 = yyj1126 > l
	} else {
		yyb1126 = r.CheckBreak()
	}
	if yyb1126 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1126++
	if yyhl1126 {
		yyb1126 = yyj1126 > l
	} else {
		yyb1126 = r.CheckBreak()
	}
	if yyb1126 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1129 := &x.Command
		yym1130 := z.DecBinary()
		_ = yym1130
		if false {
		} else {
			z.F.DecSliceStringX(yyv1129, false, d)
		}
	}
	yyj1126++
	if yyhl1126 {
		yyb1126 = yyj1126 > l
	} else {
		yyb1126 = r.CheckBreak()
	}
	if yyb1126 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Args = nil
	} else {
		yyv1131 := &x.Args
		yym1132 := z.DecBinary()
		_ = yym1132
		if false {
		} else {
			z.F.DecSliceStringX(yyv1131, false, d)
		}
	}
	yyj1126++
	if yyhl1126 {
		yyb1126 = yyj1126 > l
	} else {
		yyb1126 = r.CheckBreak()
	}
	if yyb1126 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.WorkingDir = ""
	} else {
		x.WorkingDir = string(r.DecodeString())
	}
	yyj1126++
	if yyhl1126 {
		yyb1126 = yyj1126 > l
	} else {
		yyb1126 = r.CheckBreak()
	}
	if yyb1126 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1134 := &x.Ports
		yym1135 := z.DecBinary()
		_ = yym1135
		if false {
		} else {
			h.decSliceContainerPort((*[]ContainerPort)(yyv1134), d)
		}
	}
	yyj1126++
	if yyhl1126 {
		yyb1126 = yyj1126 > l
	} else {
		yyb1126 = r.CheckBreak()
	}
	if yyb1126 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Env = nil
	} else {
		yyv1136 := &x.Env
		yym1137 := z.DecBinary()
		_ = yym1137
		if false {
		} else {
			h.decSliceEnvVar((*[]EnvVar)(yyv1136), d)
		}
	}
	yyj1126++
	if yyhl1126 {
		yyb1126 = yyj1126 > l
	} else {
		yyb1126 = r.CheckBreak()
	}
	if yyb1126 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv1138 := &x.Resources
		yyv1138.CodecDecodeSelf(d)
	}
	yyj1126++
	if yyhl1126 {
		yyb1126 = yyj1126 > l
	} else {
		yyb1126 = r.CheckBreak()
	}
	if yyb1126 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.VolumeMounts = nil
	} else {
		yyv1139 := &x.VolumeMounts
		yym1140 := z.DecBinary()
		_ = yym1140
		if false {
		} else {
			h.decSliceVolumeMount((*[]VolumeMount)(yyv1139), d)
		}
	}
	yyj1126++
	if yyhl1126 {
		yyb1126 = yyj1126 > l
	} else {
		yyb1126 = r.CheckBreak()
	}
	if yyb1126 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.LivenessProbe != nil {
			x.LivenessProbe = nil
		}
	} else {
		if x.LivenessProbe == nil {
			x.LivenessProbe = new(Probe)
		}
		x.LivenessProbe.CodecDecodeSelf(d)
	}
	yyj1126++
	if yyhl1126 {
		yyb1126 = yyj1126 > l
	} else {
		yyb1126 = r.CheckBreak()
	}
	if yyb1126 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ReadinessProbe != nil {
			x.ReadinessProbe = nil
		}
	} else {
		if x.ReadinessProbe == nil {
			x.ReadinessProbe = new(Probe)
		}
		x.ReadinessProbe.CodecDecodeSelf(d)
	}
	yyj1126++
	if yyhl1126 {
		yyb1126 = yyj1126 > l
	} else {
		yyb1126 = r.CheckBreak()
	}
	if yyb1126 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Lifecycle != nil {
			x.Lifecycle = nil
		}
	} else {
		if x.Lifecycle == nil {
			x.Lifecycle = new(Lifecycle)
		}
		x.Lifecycle.CodecDecodeSelf(d)
	}
	yyj1126++
	if yyhl1126 {
		yyb1126 = yyj1126 > l
	} else {
		yyb1126 = r.CheckBreak()
	}
	if yyb1126 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TerminationMessagePath = ""
	} else {
		x.TerminationMessagePath = string(r.DecodeString())
	}
	yyj1126++
	if yyhl1126 {
		yyb1126 = yyj1126 > l
	} else {
		yyb1126 = r.CheckBreak()
	}
	if yyb1126 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ImagePullPolicy = ""
	} else {
		x.ImagePullPolicy = PullPolicy(r.DecodeString())
	}
	yyj1126++
	if yyhl1126 {
		yyb1126 = yyj1126 > l
	} else {
		yyb1126 = r.CheckBreak()
	}
	if yyb1126 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(SecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1126++
	if yyhl1126 {
		yyb1126 = yyj1126 > l
	} else {
		yyb1126 = r.CheckBreak()
	}
	if yyb1126 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj1126++
	if yyhl1126 {
		yyb1126 = yyj1126 > l
	} else {
		yyb1126 = r.CheckBreak()
	}
	if yyb1126 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.StdinOnce = false
	} else {
		x.StdinOnce = bool(r.DecodeBool())
	}
	yyj1126++
	if yyhl1126 {
		yyb1126 = yyj1126 > l
	} else {
		yyb1126 = r.CheckBreak()
	}
	if yyb1126 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	for {
		yyj1126++
		if yyhl1126 {
			yyb1126 = yyj1126 > l
		} else {
			yyb1126 = r.CheckBreak()
		}
		if yyb1126 {
			break
		}
		z.DecStructFieldNotFound(yyj1126-1, "")
	}
	r.ReadEnd()
}

func (x *Handler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1150 := z.EncBinary()
		_ = yym1150
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1151 := !z.EncBinary()
			yy2arr1151 := z.EncBasicHandle().StructToArray
			var yyq1151 [3]bool
			_, _, _ = yysep1151, yyq1151, yy2arr1151
			const yyr1151 bool = false
			yyq1151[0] = x.Exec != nil
			yyq1151[1] = x.HTTPGet != nil
			yyq1151[2] = x.TCPSocket != nil
			if yyr1151 || yy2arr1151 {
				r.EncodeArrayStart(3)
			} else {
				var yynn1151 int = 0
				for _, b := range yyq1151 {
					if b {
						yynn1151++
					}
				}
				r.EncodeMapStart(yynn1151)
			}
			if yyr1151 || yy2arr1151 {
				if yyq1151[0] {
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1151[0] {
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1151 || yy2arr1151 {
				if yyq1151[1] {
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1151[1] {
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1151 || yy2arr1151 {
				if yyq1151[2] {
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1151[2] {
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				}
			}
			if yysep1151 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Handler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1155 := z.DecBinary()
	_ = yym1155
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1156 := r.ReadMapStart()
			if yyl1156 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1156, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1156 := r.ReadArrayStart()
			if yyl1156 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1156, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Handler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1157Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1157Slc
	var yyhl1157 bool = l >= 0
	for yyj1157 := 0; ; yyj1157++ {
		if yyhl1157 {
			if yyj1157 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1157Slc = r.DecodeBytes(yys1157Slc, true, true)
		yys1157 := string(yys1157Slc)
		switch yys1157 {
		case "exec":
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1157)
		} // end switch yys1157
	} // end for yyj1157
	if !yyhl1157 {
		r.ReadEnd()
	}
}

func (x *Handler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1161 int
	var yyb1161 bool
	var yyhl1161 bool = l >= 0
	yyj1161++
	if yyhl1161 {
		yyb1161 = yyj1161 > l
	} else {
		yyb1161 = r.CheckBreak()
	}
	if yyb1161 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	yyj1161++
	if yyhl1161 {
		yyb1161 = yyj1161 > l
	} else {
		yyb1161 = r.CheckBreak()
	}
	if yyb1161 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	yyj1161++
	if yyhl1161 {
		yyb1161 = yyj1161 > l
	} else {
		yyb1161 = r.CheckBreak()
	}
	if yyb1161 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	for {
		yyj1161++
		if yyhl1161 {
			yyb1161 = yyj1161 > l
		} else {
			yyb1161 = r.CheckBreak()
		}
		if yyb1161 {
			break
		}
		z.DecStructFieldNotFound(yyj1161-1, "")
	}
	r.ReadEnd()
}

func (x *Lifecycle) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1165 := z.EncBinary()
		_ = yym1165
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1166 := !z.EncBinary()
			yy2arr1166 := z.EncBasicHandle().StructToArray
			var yyq1166 [2]bool
			_, _, _ = yysep1166, yyq1166, yy2arr1166
			const yyr1166 bool = false
			yyq1166[0] = x.PostStart != nil
			yyq1166[1] = x.PreStop != nil
			if yyr1166 || yy2arr1166 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1166 int = 0
				for _, b := range yyq1166 {
					if b {
						yynn1166++
					}
				}
				r.EncodeMapStart(yynn1166)
			}
			if yyr1166 || yy2arr1166 {
				if yyq1166[0] {
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1166[0] {
					r.EncodeString(codecSelferC_UTF81234, string("postStart"))
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1166 || yy2arr1166 {
				if yyq1166[1] {
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1166[1] {
					r.EncodeString(codecSelferC_UTF81234, string("preStop"))
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				}
			}
			if yysep1166 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Lifecycle) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1169 := z.DecBinary()
	_ = yym1169
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1170 := r.ReadMapStart()
			if yyl1170 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1170, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1170 := r.ReadArrayStart()
			if yyl1170 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1170, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Lifecycle) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1171Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1171Slc
	var yyhl1171 bool = l >= 0
	for yyj1171 := 0; ; yyj1171++ {
		if yyhl1171 {
			if yyj1171 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1171Slc = r.DecodeBytes(yys1171Slc, true, true)
		yys1171 := string(yys1171Slc)
		switch yys1171 {
		case "postStart":
			if r.TryDecodeAsNil() {
				if x.PostStart != nil {
					x.PostStart = nil
				}
			} else {
				if x.PostStart == nil {
					x.PostStart = new(Handler)
				}
				x.PostStart.CodecDecodeSelf(d)
			}
		case "preStop":
			if r.TryDecodeAsNil() {
				if x.PreStop != nil {
					x.PreStop = nil
				}
			} else {
				if x.PreStop == nil {
					x.PreStop = new(Handler)
				}
				x.PreStop.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1171)
		} // end switch yys1171
	} // end for yyj1171
	if !yyhl1171 {
		r.ReadEnd()
	}
}

func (x *Lifecycle) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1174 int
	var yyb1174 bool
	var yyhl1174 bool = l >= 0
	yyj1174++
	if yyhl1174 {
		yyb1174 = yyj1174 > l
	} else {
		yyb1174 = r.CheckBreak()
	}
	if yyb1174 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.PostStart != nil {
			x.PostStart = nil
		}
	} else {
		if x.PostStart == nil {
			x.PostStart = new(Handler)
		}
		x.PostStart.CodecDecodeSelf(d)
	}
	yyj1174++
	if yyhl1174 {
		yyb1174 = yyj1174 > l
	} else {
		yyb1174 = r.CheckBreak()
	}
	if yyb1174 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.PreStop != nil {
			x.PreStop = nil
		}
	} else {
		if x.PreStop == nil {
			x.PreStop = new(Handler)
		}
		x.PreStop.CodecDecodeSelf(d)
	}
	for {
		yyj1174++
		if yyhl1174 {
			yyb1174 = yyj1174 > l
		} else {
			yyb1174 = r.CheckBreak()
		}
		if yyb1174 {
			break
		}
		z.DecStructFieldNotFound(yyj1174-1, "")
	}
	r.ReadEnd()
}

func (x ConditionStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1177 := z.EncBinary()
	_ = yym1177
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ConditionStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1178 := z.DecBinary()
	_ = yym1178
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ContainerStateWaiting) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1179 := z.EncBinary()
		_ = yym1179
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1180 := !z.EncBinary()
			yy2arr1180 := z.EncBasicHandle().StructToArray
			var yyq1180 [2]bool
			_, _, _ = yysep1180, yyq1180, yy2arr1180
			const yyr1180 bool = false
			yyq1180[0] = x.Reason != ""
			yyq1180[1] = x.Message != ""
			if yyr1180 || yy2arr1180 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1180 int = 0
				for _, b := range yyq1180 {
					if b {
						yynn1180++
					}
				}
				r.EncodeMapStart(yynn1180)
			}
			if yyr1180 || yy2arr1180 {
				if yyq1180[0] {
					yym1182 := z.EncBinary()
					_ = yym1182
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1180[0] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym1183 := z.EncBinary()
					_ = yym1183
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1180 || yy2arr1180 {
				if yyq1180[1] {
					yym1185 := z.EncBinary()
					_ = yym1185
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1180[1] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym1186 := z.EncBinary()
					_ = yym1186
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yysep1180 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerStateWaiting) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1187 := z.DecBinary()
	_ = yym1187
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1188 := r.ReadMapStart()
			if yyl1188 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1188, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1188 := r.ReadArrayStart()
			if yyl1188 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1188, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateWaiting) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1189Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1189Slc
	var yyhl1189 bool = l >= 0
	for yyj1189 := 0; ; yyj1189++ {
		if yyhl1189 {
			if yyj1189 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1189Slc = r.DecodeBytes(yys1189Slc, true, true)
		yys1189 := string(yys1189Slc)
		switch yys1189 {
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1189)
		} // end switch yys1189
	} // end for yyj1189
	if !yyhl1189 {
		r.ReadEnd()
	}
}

func (x *ContainerStateWaiting) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1192 int
	var yyb1192 bool
	var yyhl1192 bool = l >= 0
	yyj1192++
	if yyhl1192 {
		yyb1192 = yyj1192 > l
	} else {
		yyb1192 = r.CheckBreak()
	}
	if yyb1192 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1192++
	if yyhl1192 {
		yyb1192 = yyj1192 > l
	} else {
		yyb1192 = r.CheckBreak()
	}
	if yyb1192 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1192++
		if yyhl1192 {
			yyb1192 = yyj1192 > l
		} else {
			yyb1192 = r.CheckBreak()
		}
		if yyb1192 {
			break
		}
		z.DecStructFieldNotFound(yyj1192-1, "")
	}
	r.ReadEnd()
}

func (x *ContainerStateRunning) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1195 := z.EncBinary()
		_ = yym1195
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1196 := !z.EncBinary()
			yy2arr1196 := z.EncBasicHandle().StructToArray
			var yyq1196 [1]bool
			_, _, _ = yysep1196, yyq1196, yy2arr1196
			const yyr1196 bool = false
			yyq1196[0] = true
			if yyr1196 || yy2arr1196 {
				r.EncodeArrayStart(1)
			} else {
				var yynn1196 int = 0
				for _, b := range yyq1196 {
					if b {
						yynn1196++
					}
				}
				r.EncodeMapStart(yynn1196)
			}
			if yyr1196 || yy2arr1196 {
				if yyq1196[0] {
					yy1198 := &x.StartedAt
					yym1199 := z.EncBinary()
					_ = yym1199
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1198) {
					} else if yym1199 {
						z.EncBinaryMarshal(yy1198)
					} else if !yym1199 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1198)
					} else {
						z.EncFallback(yy1198)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1196[0] {
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					yy1200 := &x.StartedAt
					yym1201 := z.EncBinary()
					_ = yym1201
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1200) {
					} else if yym1201 {
						z.EncBinaryMarshal(yy1200)
					} else if !yym1201 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1200)
					} else {
						z.EncFallback(yy1200)
					}
				}
			}
			if yysep1196 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerStateRunning) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1202 := z.DecBinary()
	_ = yym1202
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1203 := r.ReadMapStart()
			if yyl1203 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1203, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1203 := r.ReadArrayStart()
			if yyl1203 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1203, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateRunning) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1204Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1204Slc
	var yyhl1204 bool = l >= 0
	for yyj1204 := 0; ; yyj1204++ {
		if yyhl1204 {
			if yyj1204 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1204Slc = r.DecodeBytes(yys1204Slc, true, true)
		yys1204 := string(yys1204Slc)
		switch yys1204 {
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1205 := &x.StartedAt
				yym1206 := z.DecBinary()
				_ = yym1206
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1205) {
				} else if yym1206 {
					z.DecBinaryUnmarshal(yyv1205)
				} else if !yym1206 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1205)
				} else {
					z.DecFallback(yyv1205, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1204)
		} // end switch yys1204
	} // end for yyj1204
	if !yyhl1204 {
		r.ReadEnd()
	}
}

func (x *ContainerStateRunning) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1207 int
	var yyb1207 bool
	var yyhl1207 bool = l >= 0
	yyj1207++
	if yyhl1207 {
		yyb1207 = yyj1207 > l
	} else {
		yyb1207 = r.CheckBreak()
	}
	if yyb1207 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1208 := &x.StartedAt
		yym1209 := z.DecBinary()
		_ = yym1209
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1208) {
		} else if yym1209 {
			z.DecBinaryUnmarshal(yyv1208)
		} else if !yym1209 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1208)
		} else {
			z.DecFallback(yyv1208, false)
		}
	}
	for {
		yyj1207++
		if yyhl1207 {
			yyb1207 = yyj1207 > l
		} else {
			yyb1207 = r.CheckBreak()
		}
		if yyb1207 {
			break
		}
		z.DecStructFieldNotFound(yyj1207-1, "")
	}
	r.ReadEnd()
}

func (x *ContainerStateTerminated) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1210 := z.EncBinary()
		_ = yym1210
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1211 := !z.EncBinary()
			yy2arr1211 := z.EncBasicHandle().StructToArray
			var yyq1211 [7]bool
			_, _, _ = yysep1211, yyq1211, yy2arr1211
			const yyr1211 bool = false
			yyq1211[1] = x.Signal != 0
			yyq1211[2] = x.Reason != ""
			yyq1211[3] = x.Message != ""
			yyq1211[4] = true
			yyq1211[5] = true
			yyq1211[6] = x.ContainerID != ""
			if yyr1211 || yy2arr1211 {
				r.EncodeArrayStart(7)
			} else {
				var yynn1211 int = 1
				for _, b := range yyq1211 {
					if b {
						yynn1211++
					}
				}
				r.EncodeMapStart(yynn1211)
			}
			if yyr1211 || yy2arr1211 {
				yym1213 := z.EncBinary()
				_ = yym1213
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("exitCode"))
				yym1214 := z.EncBinary()
				_ = yym1214
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			}
			if yyr1211 || yy2arr1211 {
				if yyq1211[1] {
					yym1216 := z.EncBinary()
					_ = yym1216
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1211[1] {
					r.EncodeString(codecSelferC_UTF81234, string("signal"))
					yym1217 := z.EncBinary()
					_ = yym1217
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				}
			}
			if yyr1211 || yy2arr1211 {
				if yyq1211[2] {
					yym1219 := z.EncBinary()
					_ = yym1219
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1211[2] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym1220 := z.EncBinary()
					_ = yym1220
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1211 || yy2arr1211 {
				if yyq1211[3] {
					yym1222 := z.EncBinary()
					_ = yym1222
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1211[3] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym1223 := z.EncBinary()
					_ = yym1223
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1211 || yy2arr1211 {
				if yyq1211[4] {
					yy1225 := &x.StartedAt
					yym1226 := z.EncBinary()
					_ = yym1226
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1225) {
					} else if yym1226 {
						z.EncBinaryMarshal(yy1225)
					} else if !yym1226 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1225)
					} else {
						z.EncFallback(yy1225)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1211[4] {
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					yy1227 := &x.StartedAt
					yym1228 := z.EncBinary()
					_ = yym1228
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1227) {
					} else if yym1228 {
						z.EncBinaryMarshal(yy1227)
					} else if !yym1228 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1227)
					} else {
						z.EncFallback(yy1227)
					}
				}
			}
			if yyr1211 || yy2arr1211 {
				if yyq1211[5] {
					yy1230 := &x.FinishedAt
					yym1231 := z.EncBinary()
					_ = yym1231
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1230) {
					} else if yym1231 {
						z.EncBinaryMarshal(yy1230)
					} else if !yym1231 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1230)
					} else {
						z.EncFallback(yy1230)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1211[5] {
					r.EncodeString(codecSelferC_UTF81234, string("finishedAt"))
					yy1232 := &x.FinishedAt
					yym1233 := z.EncBinary()
					_ = yym1233
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1232) {
					} else if yym1233 {
						z.EncBinaryMarshal(yy1232)
					} else if !yym1233 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1232)
					} else {
						z.EncFallback(yy1232)
					}
				}
			}
			if yyr1211 || yy2arr1211 {
				if yyq1211[6] {
					yym1235 := z.EncBinary()
					_ = yym1235
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1211[6] {
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					yym1236 := z.EncBinary()
					_ = yym1236
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yysep1211 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerStateTerminated) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1237 := z.DecBinary()
	_ = yym1237
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1238 := r.ReadMapStart()
			if yyl1238 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1238, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1238 := r.ReadArrayStart()
			if yyl1238 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1238, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateTerminated) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1239Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1239Slc
	var yyhl1239 bool = l >= 0
	for yyj1239 := 0; ; yyj1239++ {
		if yyhl1239 {
			if yyj1239 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1239Slc = r.DecodeBytes(yys1239Slc, true, true)
		yys1239 := string(yys1239Slc)
		switch yys1239 {
		case "exitCode":
			if r.TryDecodeAsNil() {
				x.ExitCode = 0
			} else {
				x.ExitCode = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "signal":
			if r.TryDecodeAsNil() {
				x.Signal = 0
			} else {
				x.Signal = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1244 := &x.StartedAt
				yym1245 := z.DecBinary()
				_ = yym1245
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1244) {
				} else if yym1245 {
					z.DecBinaryUnmarshal(yyv1244)
				} else if !yym1245 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1244)
				} else {
					z.DecFallback(yyv1244, false)
				}
			}
		case "finishedAt":
			if r.TryDecodeAsNil() {
				x.FinishedAt = pkg2_unversioned.Time{}
			} else {
				yyv1246 := &x.FinishedAt
				yym1247 := z.DecBinary()
				_ = yym1247
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1246) {
				} else if yym1247 {
					z.DecBinaryUnmarshal(yyv1246)
				} else if !yym1247 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1246)
				} else {
					z.DecFallback(yyv1246, false)
				}
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1239)
		} // end switch yys1239
	} // end for yyj1239
	if !yyhl1239 {
		r.ReadEnd()
	}
}

func (x *ContainerStateTerminated) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1249 int
	var yyb1249 bool
	var yyhl1249 bool = l >= 0
	yyj1249++
	if yyhl1249 {
		yyb1249 = yyj1249 > l
	} else {
		yyb1249 = r.CheckBreak()
	}
	if yyb1249 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ExitCode = 0
	} else {
		x.ExitCode = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1249++
	if yyhl1249 {
		yyb1249 = yyj1249 > l
	} else {
		yyb1249 = r.CheckBreak()
	}
	if yyb1249 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Signal = 0
	} else {
		x.Signal = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1249++
	if yyhl1249 {
		yyb1249 = yyj1249 > l
	} else {
		yyb1249 = r.CheckBreak()
	}
	if yyb1249 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1249++
	if yyhl1249 {
		yyb1249 = yyj1249 > l
	} else {
		yyb1249 = r.CheckBreak()
	}
	if yyb1249 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1249++
	if yyhl1249 {
		yyb1249 = yyj1249 > l
	} else {
		yyb1249 = r.CheckBreak()
	}
	if yyb1249 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1254 := &x.StartedAt
		yym1255 := z.DecBinary()
		_ = yym1255
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1254) {
		} else if yym1255 {
			z.DecBinaryUnmarshal(yyv1254)
		} else if !yym1255 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1254)
		} else {
			z.DecFallback(yyv1254, false)
		}
	}
	yyj1249++
	if yyhl1249 {
		yyb1249 = yyj1249 > l
	} else {
		yyb1249 = r.CheckBreak()
	}
	if yyb1249 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FinishedAt = pkg2_unversioned.Time{}
	} else {
		yyv1256 := &x.FinishedAt
		yym1257 := z.DecBinary()
		_ = yym1257
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1256) {
		} else if yym1257 {
			z.DecBinaryUnmarshal(yyv1256)
		} else if !yym1257 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1256)
		} else {
			z.DecFallback(yyv1256, false)
		}
	}
	yyj1249++
	if yyhl1249 {
		yyb1249 = yyj1249 > l
	} else {
		yyb1249 = r.CheckBreak()
	}
	if yyb1249 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1249++
		if yyhl1249 {
			yyb1249 = yyj1249 > l
		} else {
			yyb1249 = r.CheckBreak()
		}
		if yyb1249 {
			break
		}
		z.DecStructFieldNotFound(yyj1249-1, "")
	}
	r.ReadEnd()
}

func (x *ContainerState) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1259 := z.EncBinary()
		_ = yym1259
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1260 := !z.EncBinary()
			yy2arr1260 := z.EncBasicHandle().StructToArray
			var yyq1260 [3]bool
			_, _, _ = yysep1260, yyq1260, yy2arr1260
			const yyr1260 bool = false
			yyq1260[0] = x.Waiting != nil
			yyq1260[1] = x.Running != nil
			yyq1260[2] = x.Terminated != nil
			if yyr1260 || yy2arr1260 {
				r.EncodeArrayStart(3)
			} else {
				var yynn1260 int = 0
				for _, b := range yyq1260 {
					if b {
						yynn1260++
					}
				}
				r.EncodeMapStart(yynn1260)
			}
			if yyr1260 || yy2arr1260 {
				if yyq1260[0] {
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1260[0] {
					r.EncodeString(codecSelferC_UTF81234, string("waiting"))
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1260 || yy2arr1260 {
				if yyq1260[1] {
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1260[1] {
					r.EncodeString(codecSelferC_UTF81234, string("running"))
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1260 || yy2arr1260 {
				if yyq1260[2] {
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1260[2] {
					r.EncodeString(codecSelferC_UTF81234, string("terminated"))
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				}
			}
			if yysep1260 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerState) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1264 := z.DecBinary()
	_ = yym1264
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1265 := r.ReadMapStart()
			if yyl1265 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1265, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1265 := r.ReadArrayStart()
			if yyl1265 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1265, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerState) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1266Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1266Slc
	var yyhl1266 bool = l >= 0
	for yyj1266 := 0; ; yyj1266++ {
		if yyhl1266 {
			if yyj1266 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1266Slc = r.DecodeBytes(yys1266Slc, true, true)
		yys1266 := string(yys1266Slc)
		switch yys1266 {
		case "waiting":
			if r.TryDecodeAsNil() {
				if x.Waiting != nil {
					x.Waiting = nil
				}
			} else {
				if x.Waiting == nil {
					x.Waiting = new(ContainerStateWaiting)
				}
				x.Waiting.CodecDecodeSelf(d)
			}
		case "running":
			if r.TryDecodeAsNil() {
				if x.Running != nil {
					x.Running = nil
				}
			} else {
				if x.Running == nil {
					x.Running = new(ContainerStateRunning)
				}
				x.Running.CodecDecodeSelf(d)
			}
		case "terminated":
			if r.TryDecodeAsNil() {
				if x.Terminated != nil {
					x.Terminated = nil
				}
			} else {
				if x.Terminated == nil {
					x.Terminated = new(ContainerStateTerminated)
				}
				x.Terminated.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1266)
		} // end switch yys1266
	} // end for yyj1266
	if !yyhl1266 {
		r.ReadEnd()
	}
}

func (x *ContainerState) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1270 int
	var yyb1270 bool
	var yyhl1270 bool = l >= 0
	yyj1270++
	if yyhl1270 {
		yyb1270 = yyj1270 > l
	} else {
		yyb1270 = r.CheckBreak()
	}
	if yyb1270 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Waiting != nil {
			x.Waiting = nil
		}
	} else {
		if x.Waiting == nil {
			x.Waiting = new(ContainerStateWaiting)
		}
		x.Waiting.CodecDecodeSelf(d)
	}
	yyj1270++
	if yyhl1270 {
		yyb1270 = yyj1270 > l
	} else {
		yyb1270 = r.CheckBreak()
	}
	if yyb1270 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Running != nil {
			x.Running = nil
		}
	} else {
		if x.Running == nil {
			x.Running = new(ContainerStateRunning)
		}
		x.Running.CodecDecodeSelf(d)
	}
	yyj1270++
	if yyhl1270 {
		yyb1270 = yyj1270 > l
	} else {
		yyb1270 = r.CheckBreak()
	}
	if yyb1270 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Terminated != nil {
			x.Terminated = nil
		}
	} else {
		if x.Terminated == nil {
			x.Terminated = new(ContainerStateTerminated)
		}
		x.Terminated.CodecDecodeSelf(d)
	}
	for {
		yyj1270++
		if yyhl1270 {
			yyb1270 = yyj1270 > l
		} else {
			yyb1270 = r.CheckBreak()
		}
		if yyb1270 {
			break
		}
		z.DecStructFieldNotFound(yyj1270-1, "")
	}
	r.ReadEnd()
}

func (x *ContainerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1274 := z.EncBinary()
		_ = yym1274
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1275 := !z.EncBinary()
			yy2arr1275 := z.EncBasicHandle().StructToArray
			var yyq1275 [8]bool
			_, _, _ = yysep1275, yyq1275, yy2arr1275
			const yyr1275 bool = false
			yyq1275[1] = true
			yyq1275[2] = true
			yyq1275[7] = x.ContainerID != ""
			if yyr1275 || yy2arr1275 {
				r.EncodeArrayStart(8)
			} else {
				var yynn1275 int = 5
				for _, b := range yyq1275 {
					if b {
						yynn1275++
					}
				}
				r.EncodeMapStart(yynn1275)
			}
			if yyr1275 || yy2arr1275 {
				yym1277 := z.EncBinary()
				_ = yym1277
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				yym1278 := z.EncBinary()
				_ = yym1278
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1275 || yy2arr1275 {
				if yyq1275[1] {
					yy1280 := &x.State
					yy1280.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1275[1] {
					r.EncodeString(codecSelferC_UTF81234, string("state"))
					yy1281 := &x.State
					yy1281.CodecEncodeSelf(e)
				}
			}
			if yyr1275 || yy2arr1275 {
				if yyq1275[2] {
					yy1283 := &x.LastTerminationState
					yy1283.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1275[2] {
					r.EncodeString(codecSelferC_UTF81234, string("lastState"))
					yy1284 := &x.LastTerminationState
					yy1284.CodecEncodeSelf(e)
				}
			}
			if yyr1275 || yy2arr1275 {
				yym1286 := z.EncBinary()
				_ = yym1286
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("ready"))
				yym1287 := z.EncBinary()
				_ = yym1287
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			}
			if yyr1275 || yy2arr1275 {
				yym1289 := z.EncBinary()
				_ = yym1289
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("restartCount"))
				yym1290 := z.EncBinary()
				_ = yym1290
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			}
			if yyr1275 || yy2arr1275 {
				yym1292 := z.EncBinary()
				_ = yym1292
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				yym1293 := z.EncBinary()
				_ = yym1293
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1275 || yy2arr1275 {
				yym1295 := z.EncBinary()
				_ = yym1295
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("imageID"))
				yym1296 := z.EncBinary()
				_ = yym1296
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			}
			if yyr1275 || yy2arr1275 {
				if yyq1275[7] {
					yym1298 := z.EncBinary()
					_ = yym1298
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1275[7] {
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					yym1299 := z.EncBinary()
					_ = yym1299
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yysep1275 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1300 := z.DecBinary()
	_ = yym1300
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1301 := r.ReadMapStart()
			if yyl1301 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1301, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1301 := r.ReadArrayStart()
			if yyl1301 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1301, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1302Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1302Slc
	var yyhl1302 bool = l >= 0
	for yyj1302 := 0; ; yyj1302++ {
		if yyhl1302 {
			if yyj1302 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1302Slc = r.DecodeBytes(yys1302Slc, true, true)
		yys1302 := string(yys1302Slc)
		switch yys1302 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "state":
			if r.TryDecodeAsNil() {
				x.State = ContainerState{}
			} else {
				yyv1304 := &x.State
				yyv1304.CodecDecodeSelf(d)
			}
		case "lastState":
			if r.TryDecodeAsNil() {
				x.LastTerminationState = ContainerState{}
			} else {
				yyv1305 := &x.LastTerminationState
				yyv1305.CodecDecodeSelf(d)
			}
		case "ready":
			if r.TryDecodeAsNil() {
				x.Ready = false
			} else {
				x.Ready = bool(r.DecodeBool())
			}
		case "restartCount":
			if r.TryDecodeAsNil() {
				x.RestartCount = 0
			} else {
				x.RestartCount = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "imageID":
			if r.TryDecodeAsNil() {
				x.ImageID = ""
			} else {
				x.ImageID = string(r.DecodeString())
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1302)
		} // end switch yys1302
	} // end for yyj1302
	if !yyhl1302 {
		r.ReadEnd()
	}
}

func (x *ContainerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1311 int
	var yyb1311 bool
	var yyhl1311 bool = l >= 0
	yyj1311++
	if yyhl1311 {
		yyb1311 = yyj1311 > l
	} else {
		yyb1311 = r.CheckBreak()
	}
	if yyb1311 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1311++
	if yyhl1311 {
		yyb1311 = yyj1311 > l
	} else {
		yyb1311 = r.CheckBreak()
	}
	if yyb1311 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.State = ContainerState{}
	} else {
		yyv1313 := &x.State
		yyv1313.CodecDecodeSelf(d)
	}
	yyj1311++
	if yyhl1311 {
		yyb1311 = yyj1311 > l
	} else {
		yyb1311 = r.CheckBreak()
	}
	if yyb1311 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastTerminationState = ContainerState{}
	} else {
		yyv1314 := &x.LastTerminationState
		yyv1314.CodecDecodeSelf(d)
	}
	yyj1311++
	if yyhl1311 {
		yyb1311 = yyj1311 > l
	} else {
		yyb1311 = r.CheckBreak()
	}
	if yyb1311 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Ready = false
	} else {
		x.Ready = bool(r.DecodeBool())
	}
	yyj1311++
	if yyhl1311 {
		yyb1311 = yyj1311 > l
	} else {
		yyb1311 = r.CheckBreak()
	}
	if yyb1311 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.RestartCount = 0
	} else {
		x.RestartCount = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1311++
	if yyhl1311 {
		yyb1311 = yyj1311 > l
	} else {
		yyb1311 = r.CheckBreak()
	}
	if yyb1311 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1311++
	if yyhl1311 {
		yyb1311 = yyj1311 > l
	} else {
		yyb1311 = r.CheckBreak()
	}
	if yyb1311 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ImageID = ""
	} else {
		x.ImageID = string(r.DecodeString())
	}
	yyj1311++
	if yyhl1311 {
		yyb1311 = yyj1311 > l
	} else {
		yyb1311 = r.CheckBreak()
	}
	if yyb1311 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1311++
		if yyhl1311 {
			yyb1311 = yyj1311 > l
		} else {
			yyb1311 = r.CheckBreak()
		}
		if yyb1311 {
			break
		}
		z.DecStructFieldNotFound(yyj1311-1, "")
	}
	r.ReadEnd()
}

func (x PodPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1320 := z.EncBinary()
	_ = yym1320
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1321 := z.DecBinary()
	_ = yym1321
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PodConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1322 := z.EncBinary()
	_ = yym1322
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1323 := z.DecBinary()
	_ = yym1323
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1324 := z.EncBinary()
		_ = yym1324
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1325 := !z.EncBinary()
			yy2arr1325 := z.EncBasicHandle().StructToArray
			var yyq1325 [6]bool
			_, _, _ = yysep1325, yyq1325, yy2arr1325
			const yyr1325 bool = false
			yyq1325[2] = true
			yyq1325[3] = true
			yyq1325[4] = x.Reason != ""
			yyq1325[5] = x.Message != ""
			if yyr1325 || yy2arr1325 {
				r.EncodeArrayStart(6)
			} else {
				var yynn1325 int = 2
				for _, b := range yyq1325 {
					if b {
						yynn1325++
					}
				}
				r.EncodeMapStart(yynn1325)
			}
			if yyr1325 || yy2arr1325 {
				x.Type.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				x.Type.CodecEncodeSelf(e)
			}
			if yyr1325 || yy2arr1325 {
				x.Status.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				x.Status.CodecEncodeSelf(e)
			}
			if yyr1325 || yy2arr1325 {
				if yyq1325[2] {
					yy1329 := &x.LastProbeTime
					yym1330 := z.EncBinary()
					_ = yym1330
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1329) {
					} else if yym1330 {
						z.EncBinaryMarshal(yy1329)
					} else if !yym1330 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1329)
					} else {
						z.EncFallback(yy1329)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1325[2] {
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					yy1331 := &x.LastProbeTime
					yym1332 := z.EncBinary()
					_ = yym1332
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1331) {
					} else if yym1332 {
						z.EncBinaryMarshal(yy1331)
					} else if !yym1332 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1331)
					} else {
						z.EncFallback(yy1331)
					}
				}
			}
			if yyr1325 || yy2arr1325 {
				if yyq1325[3] {
					yy1334 := &x.LastTransitionTime
					yym1335 := z.EncBinary()
					_ = yym1335
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1334) {
					} else if yym1335 {
						z.EncBinaryMarshal(yy1334)
					} else if !yym1335 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1334)
					} else {
						z.EncFallback(yy1334)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1325[3] {
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					yy1336 := &x.LastTransitionTime
					yym1337 := z.EncBinary()
					_ = yym1337
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1336) {
					} else if yym1337 {
						z.EncBinaryMarshal(yy1336)
					} else if !yym1337 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1336)
					} else {
						z.EncFallback(yy1336)
					}
				}
			}
			if yyr1325 || yy2arr1325 {
				if yyq1325[4] {
					yym1339 := z.EncBinary()
					_ = yym1339
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1325[4] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym1340 := z.EncBinary()
					_ = yym1340
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1325 || yy2arr1325 {
				if yyq1325[5] {
					yym1342 := z.EncBinary()
					_ = yym1342
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1325[5] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym1343 := z.EncBinary()
					_ = yym1343
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yysep1325 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1344 := z.DecBinary()
	_ = yym1344
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1345 := r.ReadMapStart()
			if yyl1345 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1345, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1345 := r.ReadArrayStart()
			if yyl1345 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1345, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1346Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1346Slc
	var yyhl1346 bool = l >= 0
	for yyj1346 := 0; ; yyj1346++ {
		if yyhl1346 {
			if yyj1346 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1346Slc = r.DecodeBytes(yys1346Slc, true, true)
		yys1346 := string(yys1346Slc)
		switch yys1346 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = PodConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg2_unversioned.Time{}
			} else {
				yyv1349 := &x.LastProbeTime
				yym1350 := z.DecBinary()
				_ = yym1350
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1349) {
				} else if yym1350 {
					z.DecBinaryUnmarshal(yyv1349)
				} else if !yym1350 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1349)
				} else {
					z.DecFallback(yyv1349, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv1351 := &x.LastTransitionTime
				yym1352 := z.DecBinary()
				_ = yym1352
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1351) {
				} else if yym1352 {
					z.DecBinaryUnmarshal(yyv1351)
				} else if !yym1352 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1351)
				} else {
					z.DecFallback(yyv1351, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1346)
		} // end switch yys1346
	} // end for yyj1346
	if !yyhl1346 {
		r.ReadEnd()
	}
}

func (x *PodCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1355 int
	var yyb1355 bool
	var yyhl1355 bool = l >= 0
	yyj1355++
	if yyhl1355 {
		yyb1355 = yyj1355 > l
	} else {
		yyb1355 = r.CheckBreak()
	}
	if yyb1355 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = PodConditionType(r.DecodeString())
	}
	yyj1355++
	if yyhl1355 {
		yyb1355 = yyj1355 > l
	} else {
		yyb1355 = r.CheckBreak()
	}
	if yyb1355 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj1355++
	if yyhl1355 {
		yyb1355 = yyj1355 > l
	} else {
		yyb1355 = r.CheckBreak()
	}
	if yyb1355 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg2_unversioned.Time{}
	} else {
		yyv1358 := &x.LastProbeTime
		yym1359 := z.DecBinary()
		_ = yym1359
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1358) {
		} else if yym1359 {
			z.DecBinaryUnmarshal(yyv1358)
		} else if !yym1359 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1358)
		} else {
			z.DecFallback(yyv1358, false)
		}
	}
	yyj1355++
	if yyhl1355 {
		yyb1355 = yyj1355 > l
	} else {
		yyb1355 = r.CheckBreak()
	}
	if yyb1355 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv1360 := &x.LastTransitionTime
		yym1361 := z.DecBinary()
		_ = yym1361
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1360) {
		} else if yym1361 {
			z.DecBinaryUnmarshal(yyv1360)
		} else if !yym1361 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1360)
		} else {
			z.DecFallback(yyv1360, false)
		}
	}
	yyj1355++
	if yyhl1355 {
		yyb1355 = yyj1355 > l
	} else {
		yyb1355 = r.CheckBreak()
	}
	if yyb1355 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1355++
	if yyhl1355 {
		yyb1355 = yyj1355 > l
	} else {
		yyb1355 = r.CheckBreak()
	}
	if yyb1355 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1355++
		if yyhl1355 {
			yyb1355 = yyj1355 > l
		} else {
			yyb1355 = r.CheckBreak()
		}
		if yyb1355 {
			break
		}
		z.DecStructFieldNotFound(yyj1355-1, "")
	}
	r.ReadEnd()
}

func (x RestartPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1364 := z.EncBinary()
	_ = yym1364
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *RestartPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1365 := z.DecBinary()
	_ = yym1365
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x DNSPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1366 := z.EncBinary()
	_ = yym1366
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DNSPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1367 := z.DecBinary()
	_ = yym1367
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1368 := z.EncBinary()
		_ = yym1368
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1369 := !z.EncBinary()
			yy2arr1369 := z.EncBasicHandle().StructToArray
			var yyq1369 [15]bool
			_, _, _ = yysep1369, yyq1369, yy2arr1369
			const yyr1369 bool = false
			yyq1369[0] = len(x.Volumes) != 0
			yyq1369[2] = x.RestartPolicy != ""
			yyq1369[3] = x.TerminationGracePeriodSeconds != nil
			yyq1369[4] = x.ActiveDeadlineSeconds != nil
			yyq1369[5] = x.DNSPolicy != ""
			yyq1369[6] = len(x.NodeSelector) != 0
			yyq1369[7] = x.ServiceAccountName != ""
			yyq1369[8] = x.DeprecatedServiceAccount != ""
			yyq1369[9] = x.NodeName != ""
			yyq1369[10] = x.HostNetwork != false
			yyq1369[11] = x.HostPID != false
			yyq1369[12] = x.HostIPC != false
			yyq1369[13] = x.SecurityContext != nil
			yyq1369[14] = len(x.ImagePullSecrets) != 0
			if yyr1369 || yy2arr1369 {
				r.EncodeArrayStart(15)
			} else {
				var yynn1369 int = 1
				for _, b := range yyq1369 {
					if b {
						yynn1369++
					}
				}
				r.EncodeMapStart(yynn1369)
			}
			if yyr1369 || yy2arr1369 {
				if yyq1369[0] {
					if x.Volumes == nil {
						r.EncodeNil()
					} else {
						yym1371 := z.EncBinary()
						_ = yym1371
						if false {
						} else {
							h.encSliceVolume(([]Volume)(x.Volumes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1369[0] {
					r.EncodeString(codecSelferC_UTF81234, string("volumes"))
					if x.Volumes == nil {
						r.EncodeNil()
					} else {
						yym1372 := z.EncBinary()
						_ = yym1372
						if false {
						} else {
							h.encSliceVolume(([]Volume)(x.Volumes), e)
						}
					}
				}
			}
			if yyr1369 || yy2arr1369 {
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym1374 := z.EncBinary()
					_ = yym1374
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("containers"))
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym1375 := z.EncBinary()
					_ = yym1375
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			}
			if yyr1369 || yy2arr1369 {
				if yyq1369[2] {
					x.RestartPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1369[2] {
					r.EncodeString(codecSelferC_UTF81234, string("restartPolicy"))
					x.RestartPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1369 || yy2arr1369 {
				if yyq1369[3] {
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy1378 := *x.TerminationGracePeriodSeconds
						yym1379 := z.EncBinary()
						_ = yym1379
						if false {
						} else {
							r.EncodeInt(int64(yy1378))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1369[3] {
					r.EncodeString(codecSelferC_UTF81234, string("terminationGracePeriodSeconds"))
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy1380 := *x.TerminationGracePeriodSeconds
						yym1381 := z.EncBinary()
						_ = yym1381
						if false {
						} else {
							r.EncodeInt(int64(yy1380))
						}
					}
				}
			}
			if yyr1369 || yy2arr1369 {
				if yyq1369[4] {
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy1383 := *x.ActiveDeadlineSeconds
						yym1384 := z.EncBinary()
						_ = yym1384
						if false {
						} else {
							r.EncodeInt(int64(yy1383))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1369[4] {
					r.EncodeString(codecSelferC_UTF81234, string("activeDeadlineSeconds"))
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy1385 := *x.ActiveDeadlineSeconds
						yym1386 := z.EncBinary()
						_ = yym1386
						if false {
						} else {
							r.EncodeInt(int64(yy1385))
						}
					}
				}
			}
			if yyr1369 || yy2arr1369 {
				if yyq1369[5] {
					x.DNSPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1369[5] {
					r.EncodeString(codecSelferC_UTF81234, string("dnsPolicy"))
					x.DNSPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1369 || yy2arr1369 {
				if yyq1369[6] {
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym1389 := z.EncBinary()
						_ = yym1389
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1369[6] {
					r.EncodeString(codecSelferC_UTF81234, string("nodeSelector"))
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym1390 := z.EncBinary()
						_ = yym1390
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				}
			}
			if yyr1369 || yy2arr1369 {
				if yyq1369[7] {
					yym1392 := z.EncBinary()
					_ = yym1392
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1369[7] {
					r.EncodeString(codecSelferC_UTF81234, string("serviceAccountName"))
					yym1393 := z.EncBinary()
					_ = yym1393
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
					}
				}
			}
			if yyr1369 || yy2arr1369 {
				if yyq1369[8] {
					yym1395 := z.EncBinary()
					_ = yym1395
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DeprecatedServiceAccount))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1369[8] {
					r.EncodeString(codecSelferC_UTF81234, string("serviceAccount"))
					yym1396 := z.EncBinary()
					_ = yym1396
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DeprecatedServiceAccount))
					}
				}
			}
			if yyr1369 || yy2arr1369 {
				if yyq1369[9] {
					yym1398 := z.EncBinary()
					_ = yym1398
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1369[9] {
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					yym1399 := z.EncBinary()
					_ = yym1399
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				}
			}
			if yyr1369 || yy2arr1369 {
				if yyq1369[10] {
					yym1401 := z.EncBinary()
					_ = yym1401
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1369[10] {
					r.EncodeString(codecSelferC_UTF81234, string("hostNetwork"))
					yym1402 := z.EncBinary()
					_ = yym1402
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				}
			}
			if yyr1369 || yy2arr1369 {
				if yyq1369[11] {
					yym1404 := z.EncBinary()
					_ = yym1404
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1369[11] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPID"))
					yym1405 := z.EncBinary()
					_ = yym1405
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				}
			}
			if yyr1369 || yy2arr1369 {
				if yyq1369[12] {
					yym1407 := z.EncBinary()
					_ = yym1407
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1369[12] {
					r.EncodeString(codecSelferC_UTF81234, string("hostIPC"))
					yym1408 := z.EncBinary()
					_ = yym1408
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				}
			}
			if yyr1369 || yy2arr1369 {
				if yyq1369[13] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1369[13] {
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1369 || yy2arr1369 {
				if yyq1369[14] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1411 := z.EncBinary()
						_ = yym1411
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1369[14] {
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1412 := z.EncBinary()
						_ = yym1412
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yysep1369 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1413 := z.DecBinary()
	_ = yym1413
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1414 := r.ReadMapStart()
			if yyl1414 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1414, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1414 := r.ReadArrayStart()
			if yyl1414 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1414, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1415Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1415Slc
	var yyhl1415 bool = l >= 0
	for yyj1415 := 0; ; yyj1415++ {
		if yyhl1415 {
			if yyj1415 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1415Slc = r.DecodeBytes(yys1415Slc, true, true)
		yys1415 := string(yys1415Slc)
		switch yys1415 {
		case "volumes":
			if r.TryDecodeAsNil() {
				x.Volumes = nil
			} else {
				yyv1416 := &x.Volumes
				yym1417 := z.DecBinary()
				_ = yym1417
				if false {
				} else {
					h.decSliceVolume((*[]Volume)(yyv1416), d)
				}
			}
		case "containers":
			if r.TryDecodeAsNil() {
				x.Containers = nil
			} else {
				yyv1418 := &x.Containers
				yym1419 := z.DecBinary()
				_ = yym1419
				if false {
				} else {
					h.decSliceContainer((*[]Container)(yyv1418), d)
				}
			}
		case "restartPolicy":
			if r.TryDecodeAsNil() {
				x.RestartPolicy = ""
			} else {
				x.RestartPolicy = RestartPolicy(r.DecodeString())
			}
		case "terminationGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.TerminationGracePeriodSeconds != nil {
					x.TerminationGracePeriodSeconds = nil
				}
			} else {
				if x.TerminationGracePeriodSeconds == nil {
					x.TerminationGracePeriodSeconds = new(int64)
				}
				yym1422 := z.DecBinary()
				_ = yym1422
				if false {
				} else {
					*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "activeDeadlineSeconds":
			if r.TryDecodeAsNil() {
				if x.ActiveDeadlineSeconds != nil {
					x.ActiveDeadlineSeconds = nil
				}
			} else {
				if x.ActiveDeadlineSeconds == nil {
					x.ActiveDeadlineSeconds = new(int64)
				}
				yym1424 := z.DecBinary()
				_ = yym1424
				if false {
				} else {
					*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "dnsPolicy":
			if r.TryDecodeAsNil() {
				x.DNSPolicy = ""
			} else {
				x.DNSPolicy = DNSPolicy(r.DecodeString())
			}
		case "nodeSelector":
			if r.TryDecodeAsNil() {
				x.NodeSelector = nil
			} else {
				yyv1426 := &x.NodeSelector
				yym1427 := z.DecBinary()
				_ = yym1427
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1426, false, d)
				}
			}
		case "serviceAccountName":
			if r.TryDecodeAsNil() {
				x.ServiceAccountName = ""
			} else {
				x.ServiceAccountName = string(r.DecodeString())
			}
		case "serviceAccount":
			if r.TryDecodeAsNil() {
				x.DeprecatedServiceAccount = ""
			} else {
				x.DeprecatedServiceAccount = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				x.NodeName = ""
			} else {
				x.NodeName = string(r.DecodeString())
			}
		case "hostNetwork":
			if r.TryDecodeAsNil() {
				x.HostNetwork = false
			} else {
				x.HostNetwork = bool(r.DecodeBool())
			}
		case "hostPID":
			if r.TryDecodeAsNil() {
				x.HostPID = false
			} else {
				x.HostPID = bool(r.DecodeBool())
			}
		case "hostIPC":
			if r.TryDecodeAsNil() {
				x.HostIPC = false
			} else {
				x.HostIPC = bool(r.DecodeBool())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(PodSecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv1435 := &x.ImagePullSecrets
				yym1436 := z.DecBinary()
				_ = yym1436
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv1435), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1415)
		} // end switch yys1415
	} // end for yyj1415
	if !yyhl1415 {
		r.ReadEnd()
	}
}

func (x *PodSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1437 int
	var yyb1437 bool
	var yyhl1437 bool = l >= 0
	yyj1437++
	if yyhl1437 {
		yyb1437 = yyj1437 > l
	} else {
		yyb1437 = r.CheckBreak()
	}
	if yyb1437 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Volumes = nil
	} else {
		yyv1438 := &x.Volumes
		yym1439 := z.DecBinary()
		_ = yym1439
		if false {
		} else {
			h.decSliceVolume((*[]Volume)(yyv1438), d)
		}
	}
	yyj1437++
	if yyhl1437 {
		yyb1437 = yyj1437 > l
	} else {
		yyb1437 = r.CheckBreak()
	}
	if yyb1437 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Containers = nil
	} else {
		yyv1440 := &x.Containers
		yym1441 := z.DecBinary()
		_ = yym1441
		if false {
		} else {
			h.decSliceContainer((*[]Container)(yyv1440), d)
		}
	}
	yyj1437++
	if yyhl1437 {
		yyb1437 = yyj1437 > l
	} else {
		yyb1437 = r.CheckBreak()
	}
	if yyb1437 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.RestartPolicy = ""
	} else {
		x.RestartPolicy = RestartPolicy(r.DecodeString())
	}
	yyj1437++
	if yyhl1437 {
		yyb1437 = yyj1437 > l
	} else {
		yyb1437 = r.CheckBreak()
	}
	if yyb1437 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.TerminationGracePeriodSeconds != nil {
			x.TerminationGracePeriodSeconds = nil
		}
	} else {
		if x.TerminationGracePeriodSeconds == nil {
			x.TerminationGracePeriodSeconds = new(int64)
		}
		yym1444 := z.DecBinary()
		_ = yym1444
		if false {
		} else {
			*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj1437++
	if yyhl1437 {
		yyb1437 = yyj1437 > l
	} else {
		yyb1437 = r.CheckBreak()
	}
	if yyb1437 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ActiveDeadlineSeconds != nil {
			x.ActiveDeadlineSeconds = nil
		}
	} else {
		if x.ActiveDeadlineSeconds == nil {
			x.ActiveDeadlineSeconds = new(int64)
		}
		yym1446 := z.DecBinary()
		_ = yym1446
		if false {
		} else {
			*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj1437++
	if yyhl1437 {
		yyb1437 = yyj1437 > l
	} else {
		yyb1437 = r.CheckBreak()
	}
	if yyb1437 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DNSPolicy = ""
	} else {
		x.DNSPolicy = DNSPolicy(r.DecodeString())
	}
	yyj1437++
	if yyhl1437 {
		yyb1437 = yyj1437 > l
	} else {
		yyb1437 = r.CheckBreak()
	}
	if yyb1437 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.NodeSelector = nil
	} else {
		yyv1448 := &x.NodeSelector
		yym1449 := z.DecBinary()
		_ = yym1449
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1448, false, d)
		}
	}
	yyj1437++
	if yyhl1437 {
		yyb1437 = yyj1437 > l
	} else {
		yyb1437 = r.CheckBreak()
	}
	if yyb1437 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ServiceAccountName = ""
	} else {
		x.ServiceAccountName = string(r.DecodeString())
	}
	yyj1437++
	if yyhl1437 {
		yyb1437 = yyj1437 > l
	} else {
		yyb1437 = r.CheckBreak()
	}
	if yyb1437 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DeprecatedServiceAccount = ""
	} else {
		x.DeprecatedServiceAccount = string(r.DecodeString())
	}
	yyj1437++
	if yyhl1437 {
		yyb1437 = yyj1437 > l
	} else {
		yyb1437 = r.CheckBreak()
	}
	if yyb1437 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.NodeName = ""
	} else {
		x.NodeName = string(r.DecodeString())
	}
	yyj1437++
	if yyhl1437 {
		yyb1437 = yyj1437 > l
	} else {
		yyb1437 = r.CheckBreak()
	}
	if yyb1437 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostNetwork = false
	} else {
		x.HostNetwork = bool(r.DecodeBool())
	}
	yyj1437++
	if yyhl1437 {
		yyb1437 = yyj1437 > l
	} else {
		yyb1437 = r.CheckBreak()
	}
	if yyb1437 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostPID = false
	} else {
		x.HostPID = bool(r.DecodeBool())
	}
	yyj1437++
	if yyhl1437 {
		yyb1437 = yyj1437 > l
	} else {
		yyb1437 = r.CheckBreak()
	}
	if yyb1437 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostIPC = false
	} else {
		x.HostIPC = bool(r.DecodeBool())
	}
	yyj1437++
	if yyhl1437 {
		yyb1437 = yyj1437 > l
	} else {
		yyb1437 = r.CheckBreak()
	}
	if yyb1437 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(PodSecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1437++
	if yyhl1437 {
		yyb1437 = yyj1437 > l
	} else {
		yyb1437 = r.CheckBreak()
	}
	if yyb1437 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv1457 := &x.ImagePullSecrets
		yym1458 := z.DecBinary()
		_ = yym1458
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv1457), d)
		}
	}
	for {
		yyj1437++
		if yyhl1437 {
			yyb1437 = yyj1437 > l
		} else {
			yyb1437 = r.CheckBreak()
		}
		if yyb1437 {
			break
		}
		z.DecStructFieldNotFound(yyj1437-1, "")
	}
	r.ReadEnd()
}

func (x *PodSecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1459 := z.EncBinary()
		_ = yym1459
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1460 := !z.EncBinary()
			yy2arr1460 := z.EncBasicHandle().StructToArray
			var yyq1460 [5]bool
			_, _, _ = yysep1460, yyq1460, yy2arr1460
			const yyr1460 bool = false
			yyq1460[0] = x.SELinuxOptions != nil
			yyq1460[1] = x.RunAsUser != nil
			yyq1460[2] = x.RunAsNonRoot != nil
			yyq1460[3] = len(x.SupplementalGroups) != 0
			yyq1460[4] = x.FSGroup != nil
			if yyr1460 || yy2arr1460 {
				r.EncodeArrayStart(5)
			} else {
				var yynn1460 int = 0
				for _, b := range yyq1460 {
					if b {
						yynn1460++
					}
				}
				r.EncodeMapStart(yynn1460)
			}
			if yyr1460 || yy2arr1460 {
				if yyq1460[0] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1460[0] {
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1460 || yy2arr1460 {
				if yyq1460[1] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy1463 := *x.RunAsUser
						yym1464 := z.EncBinary()
						_ = yym1464
						if false {
						} else {
							r.EncodeInt(int64(yy1463))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1460[1] {
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy1465 := *x.RunAsUser
						yym1466 := z.EncBinary()
						_ = yym1466
						if false {
						} else {
							r.EncodeInt(int64(yy1465))
						}
					}
				}
			}
			if yyr1460 || yy2arr1460 {
				if yyq1460[2] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy1468 := *x.RunAsNonRoot
						yym1469 := z.EncBinary()
						_ = yym1469
						if false {
						} else {
							r.EncodeBool(bool(yy1468))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1460[2] {
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy1470 := *x.RunAsNonRoot
						yym1471 := z.EncBinary()
						_ = yym1471
						if false {
						} else {
							r.EncodeBool(bool(yy1470))
						}
					}
				}
			}
			if yyr1460 || yy2arr1460 {
				if yyq1460[3] {
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym1473 := z.EncBinary()
						_ = yym1473
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1460[3] {
					r.EncodeString(codecSelferC_UTF81234, string("supplementalGroups"))
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym1474 := z.EncBinary()
						_ = yym1474
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				}
			}
			if yyr1460 || yy2arr1460 {
				if yyq1460[4] {
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy1476 := *x.FSGroup
						yym1477 := z.EncBinary()
						_ = yym1477
						if false {
						} else {
							r.EncodeInt(int64(yy1476))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1460[4] {
					r.EncodeString(codecSelferC_UTF81234, string("fsGroup"))
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy1478 := *x.FSGroup
						yym1479 := z.EncBinary()
						_ = yym1479
						if false {
						} else {
							r.EncodeInt(int64(yy1478))
						}
					}
				}
			}
			if yysep1460 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodSecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1480 := z.DecBinary()
	_ = yym1480
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1481 := r.ReadMapStart()
			if yyl1481 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1481, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1481 := r.ReadArrayStart()
			if yyl1481 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1481, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1482Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1482Slc
	var yyhl1482 bool = l >= 0
	for yyj1482 := 0; ; yyj1482++ {
		if yyhl1482 {
			if yyj1482 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1482Slc = r.DecodeBytes(yys1482Slc, true, true)
		yys1482 := string(yys1482Slc)
		switch yys1482 {
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym1485 := z.DecBinary()
				_ = yym1485
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym1487 := z.DecBinary()
				_ = yym1487
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		case "supplementalGroups":
			if r.TryDecodeAsNil() {
				x.SupplementalGroups = nil
			} else {
				yyv1488 := &x.SupplementalGroups
				yym1489 := z.DecBinary()
				_ = yym1489
				if false {
				} else {
					z.F.DecSliceInt64X(yyv1488, false, d)
				}
			}
		case "fsGroup":
			if r.TryDecodeAsNil() {
				if x.FSGroup != nil {
					x.FSGroup = nil
				}
			} else {
				if x.FSGroup == nil {
					x.FSGroup = new(int64)
				}
				yym1491 := z.DecBinary()
				_ = yym1491
				if false {
				} else {
					*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1482)
		} // end switch yys1482
	} // end for yyj1482
	if !yyhl1482 {
		r.ReadEnd()
	}
}

func (x *PodSecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1492 int
	var yyb1492 bool
	var yyhl1492 bool = l >= 0
	yyj1492++
	if yyhl1492 {
		yyb1492 = yyj1492 > l
	} else {
		yyb1492 = r.CheckBreak()
	}
	if yyb1492 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj1492++
	if yyhl1492 {
		yyb1492 = yyj1492 > l
	} else {
		yyb1492 = r.CheckBreak()
	}
	if yyb1492 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym1495 := z.DecBinary()
		_ = yym1495
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj1492++
	if yyhl1492 {
		yyb1492 = yyj1492 > l
	} else {
		yyb1492 = r.CheckBreak()
	}
	if yyb1492 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym1497 := z.DecBinary()
		_ = yym1497
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	yyj1492++
	if yyhl1492 {
		yyb1492 = yyj1492 > l
	} else {
		yyb1492 = r.CheckBreak()
	}
	if yyb1492 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SupplementalGroups = nil
	} else {
		yyv1498 := &x.SupplementalGroups
		yym1499 := z.DecBinary()
		_ = yym1499
		if false {
		} else {
			z.F.DecSliceInt64X(yyv1498, false, d)
		}
	}
	yyj1492++
	if yyhl1492 {
		yyb1492 = yyj1492 > l
	} else {
		yyb1492 = r.CheckBreak()
	}
	if yyb1492 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.FSGroup != nil {
			x.FSGroup = nil
		}
	} else {
		if x.FSGroup == nil {
			x.FSGroup = new(int64)
		}
		yym1501 := z.DecBinary()
		_ = yym1501
		if false {
		} else {
			*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj1492++
		if yyhl1492 {
			yyb1492 = yyj1492 > l
		} else {
			yyb1492 = r.CheckBreak()
		}
		if yyb1492 {
			break
		}
		z.DecStructFieldNotFound(yyj1492-1, "")
	}
	r.ReadEnd()
}

func (x *PodStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1502 := z.EncBinary()
		_ = yym1502
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1503 := !z.EncBinary()
			yy2arr1503 := z.EncBasicHandle().StructToArray
			var yyq1503 [8]bool
			_, _, _ = yysep1503, yyq1503, yy2arr1503
			const yyr1503 bool = false
			yyq1503[0] = x.Phase != ""
			yyq1503[1] = len(x.Conditions) != 0
			yyq1503[2] = x.Message != ""
			yyq1503[3] = x.Reason != ""
			yyq1503[4] = x.HostIP != ""
			yyq1503[5] = x.PodIP != ""
			yyq1503[6] = x.StartTime != nil
			yyq1503[7] = len(x.ContainerStatuses) != 0
			if yyr1503 || yy2arr1503 {
				r.EncodeArrayStart(8)
			} else {
				var yynn1503 int = 0
				for _, b := range yyq1503 {
					if b {
						yynn1503++
					}
				}
				r.EncodeMapStart(yynn1503)
			}
			if yyr1503 || yy2arr1503 {
				if yyq1503[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1503[0] {
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr1503 || yy2arr1503 {
				if yyq1503[1] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym1506 := z.EncBinary()
						_ = yym1506
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1503[1] {
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym1507 := z.EncBinary()
						_ = yym1507
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr1503 || yy2arr1503 {
				if yyq1503[2] {
					yym1509 := z.EncBinary()
					_ = yym1509
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1503[2] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym1510 := z.EncBinary()
					_ = yym1510
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1503 || yy2arr1503 {
				if yyq1503[3] {
					yym1512 := z.EncBinary()
					_ = yym1512
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1503[3] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym1513 := z.EncBinary()
					_ = yym1513
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1503 || yy2arr1503 {
				if yyq1503[4] {
					yym1515 := z.EncBinary()
					_ = yym1515
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1503[4] {
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					yym1516 := z.EncBinary()
					_ = yym1516
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr1503 || yy2arr1503 {
				if yyq1503[5] {
					yym1518 := z.EncBinary()
					_ = yym1518
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1503[5] {
					r.EncodeString(codecSelferC_UTF81234, string("podIP"))
					yym1519 := z.EncBinary()
					_ = yym1519
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				}
			}
			if yyr1503 || yy2arr1503 {
				if yyq1503[6] {
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym1521 := z.EncBinary()
						_ = yym1521
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym1521 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym1521 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1503[6] {
					r.EncodeString(codecSelferC_UTF81234, string("startTime"))
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym1522 := z.EncBinary()
						_ = yym1522
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym1522 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym1522 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				}
			}
			if yyr1503 || yy2arr1503 {
				if yyq1503[7] {
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym1524 := z.EncBinary()
						_ = yym1524
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1503[7] {
					r.EncodeString(codecSelferC_UTF81234, string("containerStatuses"))
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym1525 := z.EncBinary()
						_ = yym1525
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				}
			}
			if yysep1503 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1526 := z.DecBinary()
	_ = yym1526
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1527 := r.ReadMapStart()
			if yyl1527 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1527, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1527 := r.ReadArrayStart()
			if yyl1527 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1527, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1528Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1528Slc
	var yyhl1528 bool = l >= 0
	for yyj1528 := 0; ; yyj1528++ {
		if yyhl1528 {
			if yyj1528 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1528Slc = r.DecodeBytes(yys1528Slc, true, true)
		yys1528 := string(yys1528Slc)
		switch yys1528 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PodPhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv1530 := &x.Conditions
				yym1531 := z.DecBinary()
				_ = yym1531
				if false {
				} else {
					h.decSlicePodCondition((*[]PodCondition)(yyv1530), d)
				}
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		case "podIP":
			if r.TryDecodeAsNil() {
				x.PodIP = ""
			} else {
				x.PodIP = string(r.DecodeString())
			}
		case "startTime":
			if r.TryDecodeAsNil() {
				if x.StartTime != nil {
					x.StartTime = nil
				}
			} else {
				if x.StartTime == nil {
					x.StartTime = new(pkg2_unversioned.Time)
				}
				yym1537 := z.DecBinary()
				_ = yym1537
				if false {
				} else if z.HasExtensions() && z.DecExt(x.StartTime) {
				} else if yym1537 {
					z.DecBinaryUnmarshal(x.StartTime)
				} else if !yym1537 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.StartTime)
				} else {
					z.DecFallback(x.StartTime, false)
				}
			}
		case "containerStatuses":
			if r.TryDecodeAsNil() {
				x.ContainerStatuses = nil
			} else {
				yyv1538 := &x.ContainerStatuses
				yym1539 := z.DecBinary()
				_ = yym1539
				if false {
				} else {
					h.decSliceContainerStatus((*[]ContainerStatus)(yyv1538), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1528)
		} // end switch yys1528
	} // end for yyj1528
	if !yyhl1528 {
		r.ReadEnd()
	}
}

func (x *PodStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1540 int
	var yyb1540 bool
	var yyhl1540 bool = l >= 0
	yyj1540++
	if yyhl1540 {
		yyb1540 = yyj1540 > l
	} else {
		yyb1540 = r.CheckBreak()
	}
	if yyb1540 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PodPhase(r.DecodeString())
	}
	yyj1540++
	if yyhl1540 {
		yyb1540 = yyj1540 > l
	} else {
		yyb1540 = r.CheckBreak()
	}
	if yyb1540 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv1542 := &x.Conditions
		yym1543 := z.DecBinary()
		_ = yym1543
		if false {
		} else {
			h.decSlicePodCondition((*[]PodCondition)(yyv1542), d)
		}
	}
	yyj1540++
	if yyhl1540 {
		yyb1540 = yyj1540 > l
	} else {
		yyb1540 = r.CheckBreak()
	}
	if yyb1540 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1540++
	if yyhl1540 {
		yyb1540 = yyj1540 > l
	} else {
		yyb1540 = r.CheckBreak()
	}
	if yyb1540 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1540++
	if yyhl1540 {
		yyb1540 = yyj1540 > l
	} else {
		yyb1540 = r.CheckBreak()
	}
	if yyb1540 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	yyj1540++
	if yyhl1540 {
		yyb1540 = yyj1540 > l
	} else {
		yyb1540 = r.CheckBreak()
	}
	if yyb1540 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.PodIP = ""
	} else {
		x.PodIP = string(r.DecodeString())
	}
	yyj1540++
	if yyhl1540 {
		yyb1540 = yyj1540 > l
	} else {
		yyb1540 = r.CheckBreak()
	}
	if yyb1540 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.StartTime != nil {
			x.StartTime = nil
		}
	} else {
		if x.StartTime == nil {
			x.StartTime = new(pkg2_unversioned.Time)
		}
		yym1549 := z.DecBinary()
		_ = yym1549
		if false {
		} else if z.HasExtensions() && z.DecExt(x.StartTime) {
		} else if yym1549 {
			z.DecBinaryUnmarshal(x.StartTime)
		} else if !yym1549 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.StartTime)
		} else {
			z.DecFallback(x.StartTime, false)
		}
	}
	yyj1540++
	if yyhl1540 {
		yyb1540 = yyj1540 > l
	} else {
		yyb1540 = r.CheckBreak()
	}
	if yyb1540 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ContainerStatuses = nil
	} else {
		yyv1550 := &x.ContainerStatuses
		yym1551 := z.DecBinary()
		_ = yym1551
		if false {
		} else {
			h.decSliceContainerStatus((*[]ContainerStatus)(yyv1550), d)
		}
	}
	for {
		yyj1540++
		if yyhl1540 {
			yyb1540 = yyj1540 > l
		} else {
			yyb1540 = r.CheckBreak()
		}
		if yyb1540 {
			break
		}
		z.DecStructFieldNotFound(yyj1540-1, "")
	}
	r.ReadEnd()
}

func (x *PodStatusResult) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1552 := z.EncBinary()
		_ = yym1552
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1553 := !z.EncBinary()
			yy2arr1553 := z.EncBasicHandle().StructToArray
			var yyq1553 [4]bool
			_, _, _ = yysep1553, yyq1553, yy2arr1553
			const yyr1553 bool = false
			yyq1553[0] = x.Kind != ""
			yyq1553[1] = x.APIVersion != ""
			yyq1553[2] = true
			yyq1553[3] = true
			if yyr1553 || yy2arr1553 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1553 int = 0
				for _, b := range yyq1553 {
					if b {
						yynn1553++
					}
				}
				r.EncodeMapStart(yynn1553)
			}
			if yyr1553 || yy2arr1553 {
				if yyq1553[0] {
					yym1555 := z.EncBinary()
					_ = yym1555
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1553[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1556 := z.EncBinary()
					_ = yym1556
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1553 || yy2arr1553 {
				if yyq1553[1] {
					yym1558 := z.EncBinary()
					_ = yym1558
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1553[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1559 := z.EncBinary()
					_ = yym1559
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1553 || yy2arr1553 {
				if yyq1553[2] {
					yy1561 := &x.ObjectMeta
					yy1561.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1553[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1562 := &x.ObjectMeta
					yy1562.CodecEncodeSelf(e)
				}
			}
			if yyr1553 || yy2arr1553 {
				if yyq1553[3] {
					yy1564 := &x.Status
					yy1564.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1553[3] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy1565 := &x.Status
					yy1565.CodecEncodeSelf(e)
				}
			}
			if yysep1553 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodStatusResult) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1566 := z.DecBinary()
	_ = yym1566
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1567 := r.ReadMapStart()
			if yyl1567 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1567, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1567 := r.ReadArrayStart()
			if yyl1567 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1567, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatusResult) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1568Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1568Slc
	var yyhl1568 bool = l >= 0
	for yyj1568 := 0; ; yyj1568++ {
		if yyhl1568 {
			if yyj1568 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1568Slc = r.DecodeBytes(yys1568Slc, true, true)
		yys1568 := string(yys1568Slc)
		switch yys1568 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1571 := &x.ObjectMeta
				yyv1571.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv1572 := &x.Status
				yyv1572.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1568)
		} // end switch yys1568
	} // end for yyj1568
	if !yyhl1568 {
		r.ReadEnd()
	}
}

func (x *PodStatusResult) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1573 int
	var yyb1573 bool
	var yyhl1573 bool = l >= 0
	yyj1573++
	if yyhl1573 {
		yyb1573 = yyj1573 > l
	} else {
		yyb1573 = r.CheckBreak()
	}
	if yyb1573 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1573++
	if yyhl1573 {
		yyb1573 = yyj1573 > l
	} else {
		yyb1573 = r.CheckBreak()
	}
	if yyb1573 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1573++
	if yyhl1573 {
		yyb1573 = yyj1573 > l
	} else {
		yyb1573 = r.CheckBreak()
	}
	if yyb1573 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1576 := &x.ObjectMeta
		yyv1576.CodecDecodeSelf(d)
	}
	yyj1573++
	if yyhl1573 {
		yyb1573 = yyj1573 > l
	} else {
		yyb1573 = r.CheckBreak()
	}
	if yyb1573 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv1577 := &x.Status
		yyv1577.CodecDecodeSelf(d)
	}
	for {
		yyj1573++
		if yyhl1573 {
			yyb1573 = yyj1573 > l
		} else {
			yyb1573 = r.CheckBreak()
		}
		if yyb1573 {
			break
		}
		z.DecStructFieldNotFound(yyj1573-1, "")
	}
	r.ReadEnd()
}

func (x *Pod) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1578 := z.EncBinary()
		_ = yym1578
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1579 := !z.EncBinary()
			yy2arr1579 := z.EncBasicHandle().StructToArray
			var yyq1579 [5]bool
			_, _, _ = yysep1579, yyq1579, yy2arr1579
			const yyr1579 bool = false
			yyq1579[0] = x.Kind != ""
			yyq1579[1] = x.APIVersion != ""
			yyq1579[2] = true
			yyq1579[3] = true
			yyq1579[4] = true
			if yyr1579 || yy2arr1579 {
				r.EncodeArrayStart(5)
			} else {
				var yynn1579 int = 0
				for _, b := range yyq1579 {
					if b {
						yynn1579++
					}
				}
				r.EncodeMapStart(yynn1579)
			}
			if yyr1579 || yy2arr1579 {
				if yyq1579[0] {
					yym1581 := z.EncBinary()
					_ = yym1581
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1579[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1582 := z.EncBinary()
					_ = yym1582
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1579 || yy2arr1579 {
				if yyq1579[1] {
					yym1584 := z.EncBinary()
					_ = yym1584
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1579[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1585 := z.EncBinary()
					_ = yym1585
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1579 || yy2arr1579 {
				if yyq1579[2] {
					yy1587 := &x.ObjectMeta
					yy1587.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1579[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1588 := &x.ObjectMeta
					yy1588.CodecEncodeSelf(e)
				}
			}
			if yyr1579 || yy2arr1579 {
				if yyq1579[3] {
					yy1590 := &x.Spec
					yy1590.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1579[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy1591 := &x.Spec
					yy1591.CodecEncodeSelf(e)
				}
			}
			if yyr1579 || yy2arr1579 {
				if yyq1579[4] {
					yy1593 := &x.Status
					yy1593.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1579[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy1594 := &x.Status
					yy1594.CodecEncodeSelf(e)
				}
			}
			if yysep1579 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Pod) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1595 := z.DecBinary()
	_ = yym1595
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1596 := r.ReadMapStart()
			if yyl1596 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1596, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1596 := r.ReadArrayStart()
			if yyl1596 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1596, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Pod) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1597Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1597Slc
	var yyhl1597 bool = l >= 0
	for yyj1597 := 0; ; yyj1597++ {
		if yyhl1597 {
			if yyj1597 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1597Slc = r.DecodeBytes(yys1597Slc, true, true)
		yys1597 := string(yys1597Slc)
		switch yys1597 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1600 := &x.ObjectMeta
				yyv1600.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv1601 := &x.Spec
				yyv1601.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv1602 := &x.Status
				yyv1602.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1597)
		} // end switch yys1597
	} // end for yyj1597
	if !yyhl1597 {
		r.ReadEnd()
	}
}

func (x *Pod) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1603 int
	var yyb1603 bool
	var yyhl1603 bool = l >= 0
	yyj1603++
	if yyhl1603 {
		yyb1603 = yyj1603 > l
	} else {
		yyb1603 = r.CheckBreak()
	}
	if yyb1603 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1603++
	if yyhl1603 {
		yyb1603 = yyj1603 > l
	} else {
		yyb1603 = r.CheckBreak()
	}
	if yyb1603 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1603++
	if yyhl1603 {
		yyb1603 = yyj1603 > l
	} else {
		yyb1603 = r.CheckBreak()
	}
	if yyb1603 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1606 := &x.ObjectMeta
		yyv1606.CodecDecodeSelf(d)
	}
	yyj1603++
	if yyhl1603 {
		yyb1603 = yyj1603 > l
	} else {
		yyb1603 = r.CheckBreak()
	}
	if yyb1603 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv1607 := &x.Spec
		yyv1607.CodecDecodeSelf(d)
	}
	yyj1603++
	if yyhl1603 {
		yyb1603 = yyj1603 > l
	} else {
		yyb1603 = r.CheckBreak()
	}
	if yyb1603 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv1608 := &x.Status
		yyv1608.CodecDecodeSelf(d)
	}
	for {
		yyj1603++
		if yyhl1603 {
			yyb1603 = yyj1603 > l
		} else {
			yyb1603 = r.CheckBreak()
		}
		if yyb1603 {
			break
		}
		z.DecStructFieldNotFound(yyj1603-1, "")
	}
	r.ReadEnd()
}

func (x *PodList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1609 := z.EncBinary()
		_ = yym1609
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1610 := !z.EncBinary()
			yy2arr1610 := z.EncBasicHandle().StructToArray
			var yyq1610 [4]bool
			_, _, _ = yysep1610, yyq1610, yy2arr1610
			const yyr1610 bool = false
			yyq1610[0] = x.Kind != ""
			yyq1610[1] = x.APIVersion != ""
			yyq1610[2] = true
			if yyr1610 || yy2arr1610 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1610 int = 1
				for _, b := range yyq1610 {
					if b {
						yynn1610++
					}
				}
				r.EncodeMapStart(yynn1610)
			}
			if yyr1610 || yy2arr1610 {
				if yyq1610[0] {
					yym1612 := z.EncBinary()
					_ = yym1612
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1610[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1613 := z.EncBinary()
					_ = yym1613
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1610 || yy2arr1610 {
				if yyq1610[1] {
					yym1615 := z.EncBinary()
					_ = yym1615
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1610[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1616 := z.EncBinary()
					_ = yym1616
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1610 || yy2arr1610 {
				if yyq1610[2] {
					yy1618 := &x.ListMeta
					yym1619 := z.EncBinary()
					_ = yym1619
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1618) {
					} else {
						z.EncFallback(yy1618)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1610[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1620 := &x.ListMeta
					yym1621 := z.EncBinary()
					_ = yym1621
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1620) {
					} else {
						z.EncFallback(yy1620)
					}
				}
			}
			if yyr1610 || yy2arr1610 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1623 := z.EncBinary()
					_ = yym1623
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1624 := z.EncBinary()
					_ = yym1624
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			}
			if yysep1610 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1625 := z.DecBinary()
	_ = yym1625
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1626 := r.ReadMapStart()
			if yyl1626 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1626, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1626 := r.ReadArrayStart()
			if yyl1626 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1626, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1627Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1627Slc
	var yyhl1627 bool = l >= 0
	for yyj1627 := 0; ; yyj1627++ {
		if yyhl1627 {
			if yyj1627 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1627Slc = r.DecodeBytes(yys1627Slc, true, true)
		yys1627 := string(yys1627Slc)
		switch yys1627 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1630 := &x.ListMeta
				yym1631 := z.DecBinary()
				_ = yym1631
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1630) {
				} else {
					z.DecFallback(yyv1630, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1632 := &x.Items
				yym1633 := z.DecBinary()
				_ = yym1633
				if false {
				} else {
					h.decSlicePod((*[]Pod)(yyv1632), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1627)
		} // end switch yys1627
	} // end for yyj1627
	if !yyhl1627 {
		r.ReadEnd()
	}
}

func (x *PodList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1634 int
	var yyb1634 bool
	var yyhl1634 bool = l >= 0
	yyj1634++
	if yyhl1634 {
		yyb1634 = yyj1634 > l
	} else {
		yyb1634 = r.CheckBreak()
	}
	if yyb1634 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1634++
	if yyhl1634 {
		yyb1634 = yyj1634 > l
	} else {
		yyb1634 = r.CheckBreak()
	}
	if yyb1634 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1634++
	if yyhl1634 {
		yyb1634 = yyj1634 > l
	} else {
		yyb1634 = r.CheckBreak()
	}
	if yyb1634 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1637 := &x.ListMeta
		yym1638 := z.DecBinary()
		_ = yym1638
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1637) {
		} else {
			z.DecFallback(yyv1637, false)
		}
	}
	yyj1634++
	if yyhl1634 {
		yyb1634 = yyj1634 > l
	} else {
		yyb1634 = r.CheckBreak()
	}
	if yyb1634 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1639 := &x.Items
		yym1640 := z.DecBinary()
		_ = yym1640
		if false {
		} else {
			h.decSlicePod((*[]Pod)(yyv1639), d)
		}
	}
	for {
		yyj1634++
		if yyhl1634 {
			yyb1634 = yyj1634 > l
		} else {
			yyb1634 = r.CheckBreak()
		}
		if yyb1634 {
			break
		}
		z.DecStructFieldNotFound(yyj1634-1, "")
	}
	r.ReadEnd()
}

func (x *PodTemplateSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1641 := z.EncBinary()
		_ = yym1641
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1642 := !z.EncBinary()
			yy2arr1642 := z.EncBasicHandle().StructToArray
			var yyq1642 [2]bool
			_, _, _ = yysep1642, yyq1642, yy2arr1642
			const yyr1642 bool = false
			yyq1642[0] = true
			yyq1642[1] = true
			if yyr1642 || yy2arr1642 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1642 int = 0
				for _, b := range yyq1642 {
					if b {
						yynn1642++
					}
				}
				r.EncodeMapStart(yynn1642)
			}
			if yyr1642 || yy2arr1642 {
				if yyq1642[0] {
					yy1644 := &x.ObjectMeta
					yy1644.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1642[0] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1645 := &x.ObjectMeta
					yy1645.CodecEncodeSelf(e)
				}
			}
			if yyr1642 || yy2arr1642 {
				if yyq1642[1] {
					yy1647 := &x.Spec
					yy1647.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1642[1] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy1648 := &x.Spec
					yy1648.CodecEncodeSelf(e)
				}
			}
			if yysep1642 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodTemplateSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1649 := z.DecBinary()
	_ = yym1649
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1650 := r.ReadMapStart()
			if yyl1650 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1650, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1650 := r.ReadArrayStart()
			if yyl1650 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1650, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1651Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1651Slc
	var yyhl1651 bool = l >= 0
	for yyj1651 := 0; ; yyj1651++ {
		if yyhl1651 {
			if yyj1651 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1651Slc = r.DecodeBytes(yys1651Slc, true, true)
		yys1651 := string(yys1651Slc)
		switch yys1651 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1652 := &x.ObjectMeta
				yyv1652.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv1653 := &x.Spec
				yyv1653.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1651)
		} // end switch yys1651
	} // end for yyj1651
	if !yyhl1651 {
		r.ReadEnd()
	}
}

func (x *PodTemplateSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1654 int
	var yyb1654 bool
	var yyhl1654 bool = l >= 0
	yyj1654++
	if yyhl1654 {
		yyb1654 = yyj1654 > l
	} else {
		yyb1654 = r.CheckBreak()
	}
	if yyb1654 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1655 := &x.ObjectMeta
		yyv1655.CodecDecodeSelf(d)
	}
	yyj1654++
	if yyhl1654 {
		yyb1654 = yyj1654 > l
	} else {
		yyb1654 = r.CheckBreak()
	}
	if yyb1654 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv1656 := &x.Spec
		yyv1656.CodecDecodeSelf(d)
	}
	for {
		yyj1654++
		if yyhl1654 {
			yyb1654 = yyj1654 > l
		} else {
			yyb1654 = r.CheckBreak()
		}
		if yyb1654 {
			break
		}
		z.DecStructFieldNotFound(yyj1654-1, "")
	}
	r.ReadEnd()
}

func (x *PodTemplate) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1657 := z.EncBinary()
		_ = yym1657
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1658 := !z.EncBinary()
			yy2arr1658 := z.EncBasicHandle().StructToArray
			var yyq1658 [4]bool
			_, _, _ = yysep1658, yyq1658, yy2arr1658
			const yyr1658 bool = false
			yyq1658[0] = x.Kind != ""
			yyq1658[1] = x.APIVersion != ""
			yyq1658[2] = true
			yyq1658[3] = true
			if yyr1658 || yy2arr1658 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1658 int = 0
				for _, b := range yyq1658 {
					if b {
						yynn1658++
					}
				}
				r.EncodeMapStart(yynn1658)
			}
			if yyr1658 || yy2arr1658 {
				if yyq1658[0] {
					yym1660 := z.EncBinary()
					_ = yym1660
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1658[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1661 := z.EncBinary()
					_ = yym1661
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1658 || yy2arr1658 {
				if yyq1658[1] {
					yym1663 := z.EncBinary()
					_ = yym1663
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1658[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1664 := z.EncBinary()
					_ = yym1664
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1658 || yy2arr1658 {
				if yyq1658[2] {
					yy1666 := &x.ObjectMeta
					yy1666.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1658[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1667 := &x.ObjectMeta
					yy1667.CodecEncodeSelf(e)
				}
			}
			if yyr1658 || yy2arr1658 {
				if yyq1658[3] {
					yy1669 := &x.Template
					yy1669.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1658[3] {
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					yy1670 := &x.Template
					yy1670.CodecEncodeSelf(e)
				}
			}
			if yysep1658 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodTemplate) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1671 := z.DecBinary()
	_ = yym1671
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1672 := r.ReadMapStart()
			if yyl1672 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1672, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1672 := r.ReadArrayStart()
			if yyl1672 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1672, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplate) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1673Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1673Slc
	var yyhl1673 bool = l >= 0
	for yyj1673 := 0; ; yyj1673++ {
		if yyhl1673 {
			if yyj1673 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1673Slc = r.DecodeBytes(yys1673Slc, true, true)
		yys1673 := string(yys1673Slc)
		switch yys1673 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1676 := &x.ObjectMeta
				yyv1676.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = PodTemplateSpec{}
			} else {
				yyv1677 := &x.Template
				yyv1677.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1673)
		} // end switch yys1673
	} // end for yyj1673
	if !yyhl1673 {
		r.ReadEnd()
	}
}

func (x *PodTemplate) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1678 int
	var yyb1678 bool
	var yyhl1678 bool = l >= 0
	yyj1678++
	if yyhl1678 {
		yyb1678 = yyj1678 > l
	} else {
		yyb1678 = r.CheckBreak()
	}
	if yyb1678 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1678++
	if yyhl1678 {
		yyb1678 = yyj1678 > l
	} else {
		yyb1678 = r.CheckBreak()
	}
	if yyb1678 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1678++
	if yyhl1678 {
		yyb1678 = yyj1678 > l
	} else {
		yyb1678 = r.CheckBreak()
	}
	if yyb1678 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1681 := &x.ObjectMeta
		yyv1681.CodecDecodeSelf(d)
	}
	yyj1678++
	if yyhl1678 {
		yyb1678 = yyj1678 > l
	} else {
		yyb1678 = r.CheckBreak()
	}
	if yyb1678 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Template = PodTemplateSpec{}
	} else {
		yyv1682 := &x.Template
		yyv1682.CodecDecodeSelf(d)
	}
	for {
		yyj1678++
		if yyhl1678 {
			yyb1678 = yyj1678 > l
		} else {
			yyb1678 = r.CheckBreak()
		}
		if yyb1678 {
			break
		}
		z.DecStructFieldNotFound(yyj1678-1, "")
	}
	r.ReadEnd()
}

func (x *PodTemplateList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1683 := z.EncBinary()
		_ = yym1683
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1684 := !z.EncBinary()
			yy2arr1684 := z.EncBasicHandle().StructToArray
			var yyq1684 [4]bool
			_, _, _ = yysep1684, yyq1684, yy2arr1684
			const yyr1684 bool = false
			yyq1684[0] = x.Kind != ""
			yyq1684[1] = x.APIVersion != ""
			yyq1684[2] = true
			if yyr1684 || yy2arr1684 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1684 int = 1
				for _, b := range yyq1684 {
					if b {
						yynn1684++
					}
				}
				r.EncodeMapStart(yynn1684)
			}
			if yyr1684 || yy2arr1684 {
				if yyq1684[0] {
					yym1686 := z.EncBinary()
					_ = yym1686
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1684[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1687 := z.EncBinary()
					_ = yym1687
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1684 || yy2arr1684 {
				if yyq1684[1] {
					yym1689 := z.EncBinary()
					_ = yym1689
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1684[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1690 := z.EncBinary()
					_ = yym1690
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1684 || yy2arr1684 {
				if yyq1684[2] {
					yy1692 := &x.ListMeta
					yym1693 := z.EncBinary()
					_ = yym1693
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1692) {
					} else {
						z.EncFallback(yy1692)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1684[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1694 := &x.ListMeta
					yym1695 := z.EncBinary()
					_ = yym1695
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1694) {
					} else {
						z.EncFallback(yy1694)
					}
				}
			}
			if yyr1684 || yy2arr1684 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1697 := z.EncBinary()
					_ = yym1697
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1698 := z.EncBinary()
					_ = yym1698
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			}
			if yysep1684 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodTemplateList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1699 := z.DecBinary()
	_ = yym1699
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1700 := r.ReadMapStart()
			if yyl1700 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1700, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1700 := r.ReadArrayStart()
			if yyl1700 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1700, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1701Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1701Slc
	var yyhl1701 bool = l >= 0
	for yyj1701 := 0; ; yyj1701++ {
		if yyhl1701 {
			if yyj1701 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1701Slc = r.DecodeBytes(yys1701Slc, true, true)
		yys1701 := string(yys1701Slc)
		switch yys1701 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1704 := &x.ListMeta
				yym1705 := z.DecBinary()
				_ = yym1705
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1704) {
				} else {
					z.DecFallback(yyv1704, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1706 := &x.Items
				yym1707 := z.DecBinary()
				_ = yym1707
				if false {
				} else {
					h.decSlicePodTemplate((*[]PodTemplate)(yyv1706), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1701)
		} // end switch yys1701
	} // end for yyj1701
	if !yyhl1701 {
		r.ReadEnd()
	}
}

func (x *PodTemplateList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1708 int
	var yyb1708 bool
	var yyhl1708 bool = l >= 0
	yyj1708++
	if yyhl1708 {
		yyb1708 = yyj1708 > l
	} else {
		yyb1708 = r.CheckBreak()
	}
	if yyb1708 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1708++
	if yyhl1708 {
		yyb1708 = yyj1708 > l
	} else {
		yyb1708 = r.CheckBreak()
	}
	if yyb1708 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1708++
	if yyhl1708 {
		yyb1708 = yyj1708 > l
	} else {
		yyb1708 = r.CheckBreak()
	}
	if yyb1708 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1711 := &x.ListMeta
		yym1712 := z.DecBinary()
		_ = yym1712
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1711) {
		} else {
			z.DecFallback(yyv1711, false)
		}
	}
	yyj1708++
	if yyhl1708 {
		yyb1708 = yyj1708 > l
	} else {
		yyb1708 = r.CheckBreak()
	}
	if yyb1708 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1713 := &x.Items
		yym1714 := z.DecBinary()
		_ = yym1714
		if false {
		} else {
			h.decSlicePodTemplate((*[]PodTemplate)(yyv1713), d)
		}
	}
	for {
		yyj1708++
		if yyhl1708 {
			yyb1708 = yyj1708 > l
		} else {
			yyb1708 = r.CheckBreak()
		}
		if yyb1708 {
			break
		}
		z.DecStructFieldNotFound(yyj1708-1, "")
	}
	r.ReadEnd()
}

func (x *ReplicationControllerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1715 := z.EncBinary()
		_ = yym1715
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1716 := !z.EncBinary()
			yy2arr1716 := z.EncBasicHandle().StructToArray
			var yyq1716 [3]bool
			_, _, _ = yysep1716, yyq1716, yy2arr1716
			const yyr1716 bool = false
			yyq1716[0] = x.Replicas != nil
			yyq1716[1] = len(x.Selector) != 0
			yyq1716[2] = x.Template != nil
			if yyr1716 || yy2arr1716 {
				r.EncodeArrayStart(3)
			} else {
				var yynn1716 int = 0
				for _, b := range yyq1716 {
					if b {
						yynn1716++
					}
				}
				r.EncodeMapStart(yynn1716)
			}
			if yyr1716 || yy2arr1716 {
				if yyq1716[0] {
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy1718 := *x.Replicas
						yym1719 := z.EncBinary()
						_ = yym1719
						if false {
						} else {
							r.EncodeInt(int64(yy1718))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1716[0] {
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy1720 := *x.Replicas
						yym1721 := z.EncBinary()
						_ = yym1721
						if false {
						} else {
							r.EncodeInt(int64(yy1720))
						}
					}
				}
			}
			if yyr1716 || yy2arr1716 {
				if yyq1716[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym1723 := z.EncBinary()
						_ = yym1723
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1716[1] {
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym1724 := z.EncBinary()
						_ = yym1724
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr1716 || yy2arr1716 {
				if yyq1716[2] {
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1716[2] {
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				}
			}
			if yysep1716 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ReplicationControllerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1726 := z.DecBinary()
	_ = yym1726
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1727 := r.ReadMapStart()
			if yyl1727 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1727, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1727 := r.ReadArrayStart()
			if yyl1727 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1727, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1728Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1728Slc
	var yyhl1728 bool = l >= 0
	for yyj1728 := 0; ; yyj1728++ {
		if yyhl1728 {
			if yyj1728 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1728Slc = r.DecodeBytes(yys1728Slc, true, true)
		yys1728 := string(yys1728Slc)
		switch yys1728 {
		case "replicas":
			if r.TryDecodeAsNil() {
				if x.Replicas != nil {
					x.Replicas = nil
				}
			} else {
				if x.Replicas == nil {
					x.Replicas = new(int)
				}
				yym1730 := z.DecBinary()
				_ = yym1730
				if false {
				} else {
					*((*int)(x.Replicas)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv1731 := &x.Selector
				yym1732 := z.DecBinary()
				_ = yym1732
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1731, false, d)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				if x.Template != nil {
					x.Template = nil
				}
			} else {
				if x.Template == nil {
					x.Template = new(PodTemplateSpec)
				}
				x.Template.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1728)
		} // end switch yys1728
	} // end for yyj1728
	if !yyhl1728 {
		r.ReadEnd()
	}
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1734 int
	var yyb1734 bool
	var yyhl1734 bool = l >= 0
	yyj1734++
	if yyhl1734 {
		yyb1734 = yyj1734 > l
	} else {
		yyb1734 = r.CheckBreak()
	}
	if yyb1734 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Replicas != nil {
			x.Replicas = nil
		}
	} else {
		if x.Replicas == nil {
			x.Replicas = new(int)
		}
		yym1736 := z.DecBinary()
		_ = yym1736
		if false {
		} else {
			*((*int)(x.Replicas)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	yyj1734++
	if yyhl1734 {
		yyb1734 = yyj1734 > l
	} else {
		yyb1734 = r.CheckBreak()
	}
	if yyb1734 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv1737 := &x.Selector
		yym1738 := z.DecBinary()
		_ = yym1738
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1737, false, d)
		}
	}
	yyj1734++
	if yyhl1734 {
		yyb1734 = yyj1734 > l
	} else {
		yyb1734 = r.CheckBreak()
	}
	if yyb1734 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Template != nil {
			x.Template = nil
		}
	} else {
		if x.Template == nil {
			x.Template = new(PodTemplateSpec)
		}
		x.Template.CodecDecodeSelf(d)
	}
	for {
		yyj1734++
		if yyhl1734 {
			yyb1734 = yyj1734 > l
		} else {
			yyb1734 = r.CheckBreak()
		}
		if yyb1734 {
			break
		}
		z.DecStructFieldNotFound(yyj1734-1, "")
	}
	r.ReadEnd()
}

func (x *ReplicationControllerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1740 := z.EncBinary()
		_ = yym1740
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1741 := !z.EncBinary()
			yy2arr1741 := z.EncBasicHandle().StructToArray
			var yyq1741 [2]bool
			_, _, _ = yysep1741, yyq1741, yy2arr1741
			const yyr1741 bool = false
			yyq1741[1] = x.ObservedGeneration != 0
			if yyr1741 || yy2arr1741 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1741 int = 1
				for _, b := range yyq1741 {
					if b {
						yynn1741++
					}
				}
				r.EncodeMapStart(yynn1741)
			}
			if yyr1741 || yy2arr1741 {
				yym1743 := z.EncBinary()
				_ = yym1743
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				yym1744 := z.EncBinary()
				_ = yym1744
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr1741 || yy2arr1741 {
				if yyq1741[1] {
					yym1746 := z.EncBinary()
					_ = yym1746
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1741[1] {
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					yym1747 := z.EncBinary()
					_ = yym1747
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yysep1741 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ReplicationControllerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1748 := z.DecBinary()
	_ = yym1748
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1749 := r.ReadMapStart()
			if yyl1749 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1749, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1749 := r.ReadArrayStart()
			if yyl1749 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1749, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1750Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1750Slc
	var yyhl1750 bool = l >= 0
	for yyj1750 := 0; ; yyj1750++ {
		if yyhl1750 {
			if yyj1750 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1750Slc = r.DecodeBytes(yys1750Slc, true, true)
		yys1750 := string(yys1750Slc)
		switch yys1750 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1750)
		} // end switch yys1750
	} // end for yyj1750
	if !yyhl1750 {
		r.ReadEnd()
	}
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1753 int
	var yyb1753 bool
	var yyhl1753 bool = l >= 0
	yyj1753++
	if yyhl1753 {
		yyb1753 = yyj1753 > l
	} else {
		yyb1753 = r.CheckBreak()
	}
	if yyb1753 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1753++
	if yyhl1753 {
		yyb1753 = yyj1753 > l
	} else {
		yyb1753 = r.CheckBreak()
	}
	if yyb1753 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	for {
		yyj1753++
		if yyhl1753 {
			yyb1753 = yyj1753 > l
		} else {
			yyb1753 = r.CheckBreak()
		}
		if yyb1753 {
			break
		}
		z.DecStructFieldNotFound(yyj1753-1, "")
	}
	r.ReadEnd()
}

func (x *ReplicationController) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1756 := z.EncBinary()
		_ = yym1756
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1757 := !z.EncBinary()
			yy2arr1757 := z.EncBasicHandle().StructToArray
			var yyq1757 [5]bool
			_, _, _ = yysep1757, yyq1757, yy2arr1757
			const yyr1757 bool = false
			yyq1757[0] = x.Kind != ""
			yyq1757[1] = x.APIVersion != ""
			yyq1757[2] = true
			yyq1757[3] = true
			yyq1757[4] = true
			if yyr1757 || yy2arr1757 {
				r.EncodeArrayStart(5)
			} else {
				var yynn1757 int = 0
				for _, b := range yyq1757 {
					if b {
						yynn1757++
					}
				}
				r.EncodeMapStart(yynn1757)
			}
			if yyr1757 || yy2arr1757 {
				if yyq1757[0] {
					yym1759 := z.EncBinary()
					_ = yym1759
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1757[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1760 := z.EncBinary()
					_ = yym1760
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1757 || yy2arr1757 {
				if yyq1757[1] {
					yym1762 := z.EncBinary()
					_ = yym1762
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1757[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1763 := z.EncBinary()
					_ = yym1763
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1757 || yy2arr1757 {
				if yyq1757[2] {
					yy1765 := &x.ObjectMeta
					yy1765.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1757[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1766 := &x.ObjectMeta
					yy1766.CodecEncodeSelf(e)
				}
			}
			if yyr1757 || yy2arr1757 {
				if yyq1757[3] {
					yy1768 := &x.Spec
					yy1768.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1757[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy1769 := &x.Spec
					yy1769.CodecEncodeSelf(e)
				}
			}
			if yyr1757 || yy2arr1757 {
				if yyq1757[4] {
					yy1771 := &x.Status
					yy1771.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1757[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy1772 := &x.Status
					yy1772.CodecEncodeSelf(e)
				}
			}
			if yysep1757 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ReplicationController) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1773 := z.DecBinary()
	_ = yym1773
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1774 := r.ReadMapStart()
			if yyl1774 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1774, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1774 := r.ReadArrayStart()
			if yyl1774 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1774, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationController) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1775Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1775Slc
	var yyhl1775 bool = l >= 0
	for yyj1775 := 0; ; yyj1775++ {
		if yyhl1775 {
			if yyj1775 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1775Slc = r.DecodeBytes(yys1775Slc, true, true)
		yys1775 := string(yys1775Slc)
		switch yys1775 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1778 := &x.ObjectMeta
				yyv1778.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ReplicationControllerSpec{}
			} else {
				yyv1779 := &x.Spec
				yyv1779.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ReplicationControllerStatus{}
			} else {
				yyv1780 := &x.Status
				yyv1780.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1775)
		} // end switch yys1775
	} // end for yyj1775
	if !yyhl1775 {
		r.ReadEnd()
	}
}

func (x *ReplicationController) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1781 int
	var yyb1781 bool
	var yyhl1781 bool = l >= 0
	yyj1781++
	if yyhl1781 {
		yyb1781 = yyj1781 > l
	} else {
		yyb1781 = r.CheckBreak()
	}
	if yyb1781 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1781++
	if yyhl1781 {
		yyb1781 = yyj1781 > l
	} else {
		yyb1781 = r.CheckBreak()
	}
	if yyb1781 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1781++
	if yyhl1781 {
		yyb1781 = yyj1781 > l
	} else {
		yyb1781 = r.CheckBreak()
	}
	if yyb1781 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1784 := &x.ObjectMeta
		yyv1784.CodecDecodeSelf(d)
	}
	yyj1781++
	if yyhl1781 {
		yyb1781 = yyj1781 > l
	} else {
		yyb1781 = r.CheckBreak()
	}
	if yyb1781 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = ReplicationControllerSpec{}
	} else {
		yyv1785 := &x.Spec
		yyv1785.CodecDecodeSelf(d)
	}
	yyj1781++
	if yyhl1781 {
		yyb1781 = yyj1781 > l
	} else {
		yyb1781 = r.CheckBreak()
	}
	if yyb1781 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ReplicationControllerStatus{}
	} else {
		yyv1786 := &x.Status
		yyv1786.CodecDecodeSelf(d)
	}
	for {
		yyj1781++
		if yyhl1781 {
			yyb1781 = yyj1781 > l
		} else {
			yyb1781 = r.CheckBreak()
		}
		if yyb1781 {
			break
		}
		z.DecStructFieldNotFound(yyj1781-1, "")
	}
	r.ReadEnd()
}

func (x *ReplicationControllerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1787 := z.EncBinary()
		_ = yym1787
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1788 := !z.EncBinary()
			yy2arr1788 := z.EncBasicHandle().StructToArray
			var yyq1788 [4]bool
			_, _, _ = yysep1788, yyq1788, yy2arr1788
			const yyr1788 bool = false
			yyq1788[0] = x.Kind != ""
			yyq1788[1] = x.APIVersion != ""
			yyq1788[2] = true
			if yyr1788 || yy2arr1788 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1788 int = 1
				for _, b := range yyq1788 {
					if b {
						yynn1788++
					}
				}
				r.EncodeMapStart(yynn1788)
			}
			if yyr1788 || yy2arr1788 {
				if yyq1788[0] {
					yym1790 := z.EncBinary()
					_ = yym1790
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1788[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1791 := z.EncBinary()
					_ = yym1791
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1788 || yy2arr1788 {
				if yyq1788[1] {
					yym1793 := z.EncBinary()
					_ = yym1793
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1788[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1794 := z.EncBinary()
					_ = yym1794
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1788 || yy2arr1788 {
				if yyq1788[2] {
					yy1796 := &x.ListMeta
					yym1797 := z.EncBinary()
					_ = yym1797
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1796) {
					} else {
						z.EncFallback(yy1796)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1788[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1798 := &x.ListMeta
					yym1799 := z.EncBinary()
					_ = yym1799
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1798) {
					} else {
						z.EncFallback(yy1798)
					}
				}
			}
			if yyr1788 || yy2arr1788 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1801 := z.EncBinary()
					_ = yym1801
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1802 := z.EncBinary()
					_ = yym1802
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			}
			if yysep1788 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ReplicationControllerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1803 := z.DecBinary()
	_ = yym1803
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1804 := r.ReadMapStart()
			if yyl1804 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1804, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1804 := r.ReadArrayStart()
			if yyl1804 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1804, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1805Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1805Slc
	var yyhl1805 bool = l >= 0
	for yyj1805 := 0; ; yyj1805++ {
		if yyhl1805 {
			if yyj1805 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1805Slc = r.DecodeBytes(yys1805Slc, true, true)
		yys1805 := string(yys1805Slc)
		switch yys1805 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1808 := &x.ListMeta
				yym1809 := z.DecBinary()
				_ = yym1809
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1808) {
				} else {
					z.DecFallback(yyv1808, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1810 := &x.Items
				yym1811 := z.DecBinary()
				_ = yym1811
				if false {
				} else {
					h.decSliceReplicationController((*[]ReplicationController)(yyv1810), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1805)
		} // end switch yys1805
	} // end for yyj1805
	if !yyhl1805 {
		r.ReadEnd()
	}
}

func (x *ReplicationControllerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1812 int
	var yyb1812 bool
	var yyhl1812 bool = l >= 0
	yyj1812++
	if yyhl1812 {
		yyb1812 = yyj1812 > l
	} else {
		yyb1812 = r.CheckBreak()
	}
	if yyb1812 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1812++
	if yyhl1812 {
		yyb1812 = yyj1812 > l
	} else {
		yyb1812 = r.CheckBreak()
	}
	if yyb1812 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1812++
	if yyhl1812 {
		yyb1812 = yyj1812 > l
	} else {
		yyb1812 = r.CheckBreak()
	}
	if yyb1812 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1815 := &x.ListMeta
		yym1816 := z.DecBinary()
		_ = yym1816
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1815) {
		} else {
			z.DecFallback(yyv1815, false)
		}
	}
	yyj1812++
	if yyhl1812 {
		yyb1812 = yyj1812 > l
	} else {
		yyb1812 = r.CheckBreak()
	}
	if yyb1812 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1817 := &x.Items
		yym1818 := z.DecBinary()
		_ = yym1818
		if false {
		} else {
			h.decSliceReplicationController((*[]ReplicationController)(yyv1817), d)
		}
	}
	for {
		yyj1812++
		if yyhl1812 {
			yyb1812 = yyj1812 > l
		} else {
			yyb1812 = r.CheckBreak()
		}
		if yyb1812 {
			break
		}
		z.DecStructFieldNotFound(yyj1812-1, "")
	}
	r.ReadEnd()
}

func (x ServiceAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1819 := z.EncBinary()
	_ = yym1819
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1820 := z.DecBinary()
	_ = yym1820
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ServiceType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1821 := z.EncBinary()
	_ = yym1821
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1822 := z.DecBinary()
	_ = yym1822
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ServiceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1823 := z.EncBinary()
		_ = yym1823
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1824 := !z.EncBinary()
			yy2arr1824 := z.EncBasicHandle().StructToArray
			var yyq1824 [1]bool
			_, _, _ = yysep1824, yyq1824, yy2arr1824
			const yyr1824 bool = false
			yyq1824[0] = true
			if yyr1824 || yy2arr1824 {
				r.EncodeArrayStart(1)
			} else {
				var yynn1824 int = 0
				for _, b := range yyq1824 {
					if b {
						yynn1824++
					}
				}
				r.EncodeMapStart(yynn1824)
			}
			if yyr1824 || yy2arr1824 {
				if yyq1824[0] {
					yy1826 := &x.LoadBalancer
					yy1826.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1824[0] {
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancer"))
					yy1827 := &x.LoadBalancer
					yy1827.CodecEncodeSelf(e)
				}
			}
			if yysep1824 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServiceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1828 := z.DecBinary()
	_ = yym1828
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1829 := r.ReadMapStart()
			if yyl1829 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1829, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1829 := r.ReadArrayStart()
			if yyl1829 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1829, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1830Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1830Slc
	var yyhl1830 bool = l >= 0
	for yyj1830 := 0; ; yyj1830++ {
		if yyhl1830 {
			if yyj1830 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1830Slc = r.DecodeBytes(yys1830Slc, true, true)
		yys1830 := string(yys1830Slc)
		switch yys1830 {
		case "loadBalancer":
			if r.TryDecodeAsNil() {
				x.LoadBalancer = LoadBalancerStatus{}
			} else {
				yyv1831 := &x.LoadBalancer
				yyv1831.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1830)
		} // end switch yys1830
	} // end for yyj1830
	if !yyhl1830 {
		r.ReadEnd()
	}
}

func (x *ServiceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1832 int
	var yyb1832 bool
	var yyhl1832 bool = l >= 0
	yyj1832++
	if yyhl1832 {
		yyb1832 = yyj1832 > l
	} else {
		yyb1832 = r.CheckBreak()
	}
	if yyb1832 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LoadBalancer = LoadBalancerStatus{}
	} else {
		yyv1833 := &x.LoadBalancer
		yyv1833.CodecDecodeSelf(d)
	}
	for {
		yyj1832++
		if yyhl1832 {
			yyb1832 = yyj1832 > l
		} else {
			yyb1832 = r.CheckBreak()
		}
		if yyb1832 {
			break
		}
		z.DecStructFieldNotFound(yyj1832-1, "")
	}
	r.ReadEnd()
}

func (x *LoadBalancerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1834 := z.EncBinary()
		_ = yym1834
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1835 := !z.EncBinary()
			yy2arr1835 := z.EncBasicHandle().StructToArray
			var yyq1835 [1]bool
			_, _, _ = yysep1835, yyq1835, yy2arr1835
			const yyr1835 bool = false
			yyq1835[0] = len(x.Ingress) != 0
			if yyr1835 || yy2arr1835 {
				r.EncodeArrayStart(1)
			} else {
				var yynn1835 int = 0
				for _, b := range yyq1835 {
					if b {
						yynn1835++
					}
				}
				r.EncodeMapStart(yynn1835)
			}
			if yyr1835 || yy2arr1835 {
				if yyq1835[0] {
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym1837 := z.EncBinary()
						_ = yym1837
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1835[0] {
					r.EncodeString(codecSelferC_UTF81234, string("ingress"))
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym1838 := z.EncBinary()
						_ = yym1838
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				}
			}
			if yysep1835 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LoadBalancerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1839 := z.DecBinary()
	_ = yym1839
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1840 := r.ReadMapStart()
			if yyl1840 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1840, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1840 := r.ReadArrayStart()
			if yyl1840 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1840, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1841Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1841Slc
	var yyhl1841 bool = l >= 0
	for yyj1841 := 0; ; yyj1841++ {
		if yyhl1841 {
			if yyj1841 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1841Slc = r.DecodeBytes(yys1841Slc, true, true)
		yys1841 := string(yys1841Slc)
		switch yys1841 {
		case "ingress":
			if r.TryDecodeAsNil() {
				x.Ingress = nil
			} else {
				yyv1842 := &x.Ingress
				yym1843 := z.DecBinary()
				_ = yym1843
				if false {
				} else {
					h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv1842), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1841)
		} // end switch yys1841
	} // end for yyj1841
	if !yyhl1841 {
		r.ReadEnd()
	}
}

func (x *LoadBalancerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1844 int
	var yyb1844 bool
	var yyhl1844 bool = l >= 0
	yyj1844++
	if yyhl1844 {
		yyb1844 = yyj1844 > l
	} else {
		yyb1844 = r.CheckBreak()
	}
	if yyb1844 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Ingress = nil
	} else {
		yyv1845 := &x.Ingress
		yym1846 := z.DecBinary()
		_ = yym1846
		if false {
		} else {
			h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv1845), d)
		}
	}
	for {
		yyj1844++
		if yyhl1844 {
			yyb1844 = yyj1844 > l
		} else {
			yyb1844 = r.CheckBreak()
		}
		if yyb1844 {
			break
		}
		z.DecStructFieldNotFound(yyj1844-1, "")
	}
	r.ReadEnd()
}

func (x *LoadBalancerIngress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1847 := z.EncBinary()
		_ = yym1847
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1848 := !z.EncBinary()
			yy2arr1848 := z.EncBasicHandle().StructToArray
			var yyq1848 [2]bool
			_, _, _ = yysep1848, yyq1848, yy2arr1848
			const yyr1848 bool = false
			yyq1848[0] = x.IP != ""
			yyq1848[1] = x.Hostname != ""
			if yyr1848 || yy2arr1848 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1848 int = 0
				for _, b := range yyq1848 {
					if b {
						yynn1848++
					}
				}
				r.EncodeMapStart(yynn1848)
			}
			if yyr1848 || yy2arr1848 {
				if yyq1848[0] {
					yym1850 := z.EncBinary()
					_ = yym1850
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1848[0] {
					r.EncodeString(codecSelferC_UTF81234, string("ip"))
					yym1851 := z.EncBinary()
					_ = yym1851
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				}
			}
			if yyr1848 || yy2arr1848 {
				if yyq1848[1] {
					yym1853 := z.EncBinary()
					_ = yym1853
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1848[1] {
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					yym1854 := z.EncBinary()
					_ = yym1854
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yysep1848 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LoadBalancerIngress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1855 := z.DecBinary()
	_ = yym1855
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1856 := r.ReadMapStart()
			if yyl1856 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1856, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1856 := r.ReadArrayStart()
			if yyl1856 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1856, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerIngress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1857Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1857Slc
	var yyhl1857 bool = l >= 0
	for yyj1857 := 0; ; yyj1857++ {
		if yyhl1857 {
			if yyj1857 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1857Slc = r.DecodeBytes(yys1857Slc, true, true)
		yys1857 := string(yys1857Slc)
		switch yys1857 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1857)
		} // end switch yys1857
	} // end for yyj1857
	if !yyhl1857 {
		r.ReadEnd()
	}
}

func (x *LoadBalancerIngress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1860 int
	var yyb1860 bool
	var yyhl1860 bool = l >= 0
	yyj1860++
	if yyhl1860 {
		yyb1860 = yyj1860 > l
	} else {
		yyb1860 = r.CheckBreak()
	}
	if yyb1860 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj1860++
	if yyhl1860 {
		yyb1860 = yyj1860 > l
	} else {
		yyb1860 = r.CheckBreak()
	}
	if yyb1860 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	for {
		yyj1860++
		if yyhl1860 {
			yyb1860 = yyj1860 > l
		} else {
			yyb1860 = r.CheckBreak()
		}
		if yyb1860 {
			break
		}
		z.DecStructFieldNotFound(yyj1860-1, "")
	}
	r.ReadEnd()
}

func (x *ServiceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1863 := z.EncBinary()
		_ = yym1863
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1864 := !z.EncBinary()
			yy2arr1864 := z.EncBasicHandle().StructToArray
			var yyq1864 [8]bool
			_, _, _ = yysep1864, yyq1864, yy2arr1864
			const yyr1864 bool = false
			yyq1864[1] = len(x.Selector) != 0
			yyq1864[2] = x.ClusterIP != ""
			yyq1864[3] = x.Type != ""
			yyq1864[4] = len(x.ExternalIPs) != 0
			yyq1864[5] = len(x.DeprecatedPublicIPs) != 0
			yyq1864[6] = x.SessionAffinity != ""
			yyq1864[7] = x.LoadBalancerIP != ""
			if yyr1864 || yy2arr1864 {
				r.EncodeArrayStart(8)
			} else {
				var yynn1864 int = 1
				for _, b := range yyq1864 {
					if b {
						yynn1864++
					}
				}
				r.EncodeMapStart(yynn1864)
			}
			if yyr1864 || yy2arr1864 {
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym1866 := z.EncBinary()
					_ = yym1866
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("ports"))
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym1867 := z.EncBinary()
					_ = yym1867
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			}
			if yyr1864 || yy2arr1864 {
				if yyq1864[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym1869 := z.EncBinary()
						_ = yym1869
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1864[1] {
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym1870 := z.EncBinary()
						_ = yym1870
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr1864 || yy2arr1864 {
				if yyq1864[2] {
					yym1872 := z.EncBinary()
					_ = yym1872
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1864[2] {
					r.EncodeString(codecSelferC_UTF81234, string("clusterIP"))
					yym1873 := z.EncBinary()
					_ = yym1873
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				}
			}
			if yyr1864 || yy2arr1864 {
				if yyq1864[3] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1864[3] {
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr1864 || yy2arr1864 {
				if yyq1864[4] {
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym1876 := z.EncBinary()
						_ = yym1876
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1864[4] {
					r.EncodeString(codecSelferC_UTF81234, string("externalIPs"))
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym1877 := z.EncBinary()
						_ = yym1877
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				}
			}
			if yyr1864 || yy2arr1864 {
				if yyq1864[5] {
					if x.DeprecatedPublicIPs == nil {
						r.EncodeNil()
					} else {
						yym1879 := z.EncBinary()
						_ = yym1879
						if false {
						} else {
							z.F.EncSliceStringV(x.DeprecatedPublicIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1864[5] {
					r.EncodeString(codecSelferC_UTF81234, string("deprecatedPublicIPs"))
					if x.DeprecatedPublicIPs == nil {
						r.EncodeNil()
					} else {
						yym1880 := z.EncBinary()
						_ = yym1880
						if false {
						} else {
							z.F.EncSliceStringV(x.DeprecatedPublicIPs, false, e)
						}
					}
				}
			}
			if yyr1864 || yy2arr1864 {
				if yyq1864[6] {
					x.SessionAffinity.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1864[6] {
					r.EncodeString(codecSelferC_UTF81234, string("sessionAffinity"))
					x.SessionAffinity.CodecEncodeSelf(e)
				}
			}
			if yyr1864 || yy2arr1864 {
				if yyq1864[7] {
					yym1883 := z.EncBinary()
					_ = yym1883
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1864[7] {
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerIP"))
					yym1884 := z.EncBinary()
					_ = yym1884
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				}
			}
			if yysep1864 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServiceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1885 := z.DecBinary()
	_ = yym1885
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1886 := r.ReadMapStart()
			if yyl1886 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1886, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1886 := r.ReadArrayStart()
			if yyl1886 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1886, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1887Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1887Slc
	var yyhl1887 bool = l >= 0
	for yyj1887 := 0; ; yyj1887++ {
		if yyhl1887 {
			if yyj1887 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1887Slc = r.DecodeBytes(yys1887Slc, true, true)
		yys1887 := string(yys1887Slc)
		switch yys1887 {
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1888 := &x.Ports
				yym1889 := z.DecBinary()
				_ = yym1889
				if false {
				} else {
					h.decSliceServicePort((*[]ServicePort)(yyv1888), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv1890 := &x.Selector
				yym1891 := z.DecBinary()
				_ = yym1891
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1890, false, d)
				}
			}
		case "clusterIP":
			if r.TryDecodeAsNil() {
				x.ClusterIP = ""
			} else {
				x.ClusterIP = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ServiceType(r.DecodeString())
			}
		case "externalIPs":
			if r.TryDecodeAsNil() {
				x.ExternalIPs = nil
			} else {
				yyv1894 := &x.ExternalIPs
				yym1895 := z.DecBinary()
				_ = yym1895
				if false {
				} else {
					z.F.DecSliceStringX(yyv1894, false, d)
				}
			}
		case "deprecatedPublicIPs":
			if r.TryDecodeAsNil() {
				x.DeprecatedPublicIPs = nil
			} else {
				yyv1896 := &x.DeprecatedPublicIPs
				yym1897 := z.DecBinary()
				_ = yym1897
				if false {
				} else {
					z.F.DecSliceStringX(yyv1896, false, d)
				}
			}
		case "sessionAffinity":
			if r.TryDecodeAsNil() {
				x.SessionAffinity = ""
			} else {
				x.SessionAffinity = ServiceAffinity(r.DecodeString())
			}
		case "loadBalancerIP":
			if r.TryDecodeAsNil() {
				x.LoadBalancerIP = ""
			} else {
				x.LoadBalancerIP = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1887)
		} // end switch yys1887
	} // end for yyj1887
	if !yyhl1887 {
		r.ReadEnd()
	}
}

func (x *ServiceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1900 int
	var yyb1900 bool
	var yyhl1900 bool = l >= 0
	yyj1900++
	if yyhl1900 {
		yyb1900 = yyj1900 > l
	} else {
		yyb1900 = r.CheckBreak()
	}
	if yyb1900 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1901 := &x.Ports
		yym1902 := z.DecBinary()
		_ = yym1902
		if false {
		} else {
			h.decSliceServicePort((*[]ServicePort)(yyv1901), d)
		}
	}
	yyj1900++
	if yyhl1900 {
		yyb1900 = yyj1900 > l
	} else {
		yyb1900 = r.CheckBreak()
	}
	if yyb1900 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv1903 := &x.Selector
		yym1904 := z.DecBinary()
		_ = yym1904
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1903, false, d)
		}
	}
	yyj1900++
	if yyhl1900 {
		yyb1900 = yyj1900 > l
	} else {
		yyb1900 = r.CheckBreak()
	}
	if yyb1900 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ClusterIP = ""
	} else {
		x.ClusterIP = string(r.DecodeString())
	}
	yyj1900++
	if yyhl1900 {
		yyb1900 = yyj1900 > l
	} else {
		yyb1900 = r.CheckBreak()
	}
	if yyb1900 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ServiceType(r.DecodeString())
	}
	yyj1900++
	if yyhl1900 {
		yyb1900 = yyj1900 > l
	} else {
		yyb1900 = r.CheckBreak()
	}
	if yyb1900 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ExternalIPs = nil
	} else {
		yyv1907 := &x.ExternalIPs
		yym1908 := z.DecBinary()
		_ = yym1908
		if false {
		} else {
			z.F.DecSliceStringX(yyv1907, false, d)
		}
	}
	yyj1900++
	if yyhl1900 {
		yyb1900 = yyj1900 > l
	} else {
		yyb1900 = r.CheckBreak()
	}
	if yyb1900 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DeprecatedPublicIPs = nil
	} else {
		yyv1909 := &x.DeprecatedPublicIPs
		yym1910 := z.DecBinary()
		_ = yym1910
		if false {
		} else {
			z.F.DecSliceStringX(yyv1909, false, d)
		}
	}
	yyj1900++
	if yyhl1900 {
		yyb1900 = yyj1900 > l
	} else {
		yyb1900 = r.CheckBreak()
	}
	if yyb1900 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SessionAffinity = ""
	} else {
		x.SessionAffinity = ServiceAffinity(r.DecodeString())
	}
	yyj1900++
	if yyhl1900 {
		yyb1900 = yyj1900 > l
	} else {
		yyb1900 = r.CheckBreak()
	}
	if yyb1900 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LoadBalancerIP = ""
	} else {
		x.LoadBalancerIP = string(r.DecodeString())
	}
	for {
		yyj1900++
		if yyhl1900 {
			yyb1900 = yyj1900 > l
		} else {
			yyb1900 = r.CheckBreak()
		}
		if yyb1900 {
			break
		}
		z.DecStructFieldNotFound(yyj1900-1, "")
	}
	r.ReadEnd()
}

func (x *ServicePort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1913 := z.EncBinary()
		_ = yym1913
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1914 := !z.EncBinary()
			yy2arr1914 := z.EncBasicHandle().StructToArray
			var yyq1914 [5]bool
			_, _, _ = yysep1914, yyq1914, yy2arr1914
			const yyr1914 bool = false
			yyq1914[0] = x.Name != ""
			yyq1914[1] = x.Protocol != ""
			yyq1914[3] = true
			yyq1914[4] = x.NodePort != 0
			if yyr1914 || yy2arr1914 {
				r.EncodeArrayStart(5)
			} else {
				var yynn1914 int = 1
				for _, b := range yyq1914 {
					if b {
						yynn1914++
					}
				}
				r.EncodeMapStart(yynn1914)
			}
			if yyr1914 || yy2arr1914 {
				if yyq1914[0] {
					yym1916 := z.EncBinary()
					_ = yym1916
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1914[0] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					yym1917 := z.EncBinary()
					_ = yym1917
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1914 || yy2arr1914 {
				if yyq1914[1] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1914[1] {
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr1914 || yy2arr1914 {
				yym1920 := z.EncBinary()
				_ = yym1920
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				yym1921 := z.EncBinary()
				_ = yym1921
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr1914 || yy2arr1914 {
				if yyq1914[3] {
					yy1923 := &x.TargetPort
					yym1924 := z.EncBinary()
					_ = yym1924
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1923) {
					} else if !yym1924 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1923)
					} else {
						z.EncFallback(yy1923)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1914[3] {
					r.EncodeString(codecSelferC_UTF81234, string("targetPort"))
					yy1925 := &x.TargetPort
					yym1926 := z.EncBinary()
					_ = yym1926
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1925) {
					} else if !yym1926 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1925)
					} else {
						z.EncFallback(yy1925)
					}
				}
			}
			if yyr1914 || yy2arr1914 {
				if yyq1914[4] {
					yym1928 := z.EncBinary()
					_ = yym1928
					if false {
					} else {
						r.EncodeInt(int64(x.NodePort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1914[4] {
					r.EncodeString(codecSelferC_UTF81234, string("nodePort"))
					yym1929 := z.EncBinary()
					_ = yym1929
					if false {
					} else {
						r.EncodeInt(int64(x.NodePort))
					}
				}
			}
			if yysep1914 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServicePort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1930 := z.DecBinary()
	_ = yym1930
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1931 := r.ReadMapStart()
			if yyl1931 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1931, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1931 := r.ReadArrayStart()
			if yyl1931 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1931, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServicePort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1932Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1932Slc
	var yyhl1932 bool = l >= 0
	for yyj1932 := 0; ; yyj1932++ {
		if yyhl1932 {
			if yyj1932 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1932Slc = r.DecodeBytes(yys1932Slc, true, true)
		yys1932 := string(yys1932Slc)
		switch yys1932 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "targetPort":
			if r.TryDecodeAsNil() {
				x.TargetPort = pkg5_util.IntOrString{}
			} else {
				yyv1936 := &x.TargetPort
				yym1937 := z.DecBinary()
				_ = yym1937
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1936) {
				} else if !yym1937 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1936)
				} else {
					z.DecFallback(yyv1936, false)
				}
			}
		case "nodePort":
			if r.TryDecodeAsNil() {
				x.NodePort = 0
			} else {
				x.NodePort = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1932)
		} // end switch yys1932
	} // end for yyj1932
	if !yyhl1932 {
		r.ReadEnd()
	}
}

func (x *ServicePort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1939 int
	var yyb1939 bool
	var yyhl1939 bool = l >= 0
	yyj1939++
	if yyhl1939 {
		yyb1939 = yyj1939 > l
	} else {
		yyb1939 = r.CheckBreak()
	}
	if yyb1939 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1939++
	if yyhl1939 {
		yyb1939 = yyj1939 > l
	} else {
		yyb1939 = r.CheckBreak()
	}
	if yyb1939 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj1939++
	if yyhl1939 {
		yyb1939 = yyj1939 > l
	} else {
		yyb1939 = r.CheckBreak()
	}
	if yyb1939 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1939++
	if yyhl1939 {
		yyb1939 = yyj1939 > l
	} else {
		yyb1939 = r.CheckBreak()
	}
	if yyb1939 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TargetPort = pkg5_util.IntOrString{}
	} else {
		yyv1943 := &x.TargetPort
		yym1944 := z.DecBinary()
		_ = yym1944
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1943) {
		} else if !yym1944 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1943)
		} else {
			z.DecFallback(yyv1943, false)
		}
	}
	yyj1939++
	if yyhl1939 {
		yyb1939 = yyj1939 > l
	} else {
		yyb1939 = r.CheckBreak()
	}
	if yyb1939 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.NodePort = 0
	} else {
		x.NodePort = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj1939++
		if yyhl1939 {
			yyb1939 = yyj1939 > l
		} else {
			yyb1939 = r.CheckBreak()
		}
		if yyb1939 {
			break
		}
		z.DecStructFieldNotFound(yyj1939-1, "")
	}
	r.ReadEnd()
}

func (x *Service) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1946 := z.EncBinary()
		_ = yym1946
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1947 := !z.EncBinary()
			yy2arr1947 := z.EncBasicHandle().StructToArray
			var yyq1947 [5]bool
			_, _, _ = yysep1947, yyq1947, yy2arr1947
			const yyr1947 bool = false
			yyq1947[0] = x.Kind != ""
			yyq1947[1] = x.APIVersion != ""
			yyq1947[2] = true
			yyq1947[3] = true
			yyq1947[4] = true
			if yyr1947 || yy2arr1947 {
				r.EncodeArrayStart(5)
			} else {
				var yynn1947 int = 0
				for _, b := range yyq1947 {
					if b {
						yynn1947++
					}
				}
				r.EncodeMapStart(yynn1947)
			}
			if yyr1947 || yy2arr1947 {
				if yyq1947[0] {
					yym1949 := z.EncBinary()
					_ = yym1949
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1947[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1950 := z.EncBinary()
					_ = yym1950
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1947 || yy2arr1947 {
				if yyq1947[1] {
					yym1952 := z.EncBinary()
					_ = yym1952
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1947[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1953 := z.EncBinary()
					_ = yym1953
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1947 || yy2arr1947 {
				if yyq1947[2] {
					yy1955 := &x.ObjectMeta
					yy1955.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1947[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1956 := &x.ObjectMeta
					yy1956.CodecEncodeSelf(e)
				}
			}
			if yyr1947 || yy2arr1947 {
				if yyq1947[3] {
					yy1958 := &x.Spec
					yy1958.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1947[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy1959 := &x.Spec
					yy1959.CodecEncodeSelf(e)
				}
			}
			if yyr1947 || yy2arr1947 {
				if yyq1947[4] {
					yy1961 := &x.Status
					yy1961.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1947[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy1962 := &x.Status
					yy1962.CodecEncodeSelf(e)
				}
			}
			if yysep1947 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Service) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1963 := z.DecBinary()
	_ = yym1963
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1964 := r.ReadMapStart()
			if yyl1964 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1964, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1964 := r.ReadArrayStart()
			if yyl1964 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1964, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Service) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1965Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1965Slc
	var yyhl1965 bool = l >= 0
	for yyj1965 := 0; ; yyj1965++ {
		if yyhl1965 {
			if yyj1965 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1965Slc = r.DecodeBytes(yys1965Slc, true, true)
		yys1965 := string(yys1965Slc)
		switch yys1965 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1968 := &x.ObjectMeta
				yyv1968.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ServiceSpec{}
			} else {
				yyv1969 := &x.Spec
				yyv1969.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ServiceStatus{}
			} else {
				yyv1970 := &x.Status
				yyv1970.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1965)
		} // end switch yys1965
	} // end for yyj1965
	if !yyhl1965 {
		r.ReadEnd()
	}
}

func (x *Service) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1971 int
	var yyb1971 bool
	var yyhl1971 bool = l >= 0
	yyj1971++
	if yyhl1971 {
		yyb1971 = yyj1971 > l
	} else {
		yyb1971 = r.CheckBreak()
	}
	if yyb1971 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1971++
	if yyhl1971 {
		yyb1971 = yyj1971 > l
	} else {
		yyb1971 = r.CheckBreak()
	}
	if yyb1971 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1971++
	if yyhl1971 {
		yyb1971 = yyj1971 > l
	} else {
		yyb1971 = r.CheckBreak()
	}
	if yyb1971 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1974 := &x.ObjectMeta
		yyv1974.CodecDecodeSelf(d)
	}
	yyj1971++
	if yyhl1971 {
		yyb1971 = yyj1971 > l
	} else {
		yyb1971 = r.CheckBreak()
	}
	if yyb1971 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = ServiceSpec{}
	} else {
		yyv1975 := &x.Spec
		yyv1975.CodecDecodeSelf(d)
	}
	yyj1971++
	if yyhl1971 {
		yyb1971 = yyj1971 > l
	} else {
		yyb1971 = r.CheckBreak()
	}
	if yyb1971 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ServiceStatus{}
	} else {
		yyv1976 := &x.Status
		yyv1976.CodecDecodeSelf(d)
	}
	for {
		yyj1971++
		if yyhl1971 {
			yyb1971 = yyj1971 > l
		} else {
			yyb1971 = r.CheckBreak()
		}
		if yyb1971 {
			break
		}
		z.DecStructFieldNotFound(yyj1971-1, "")
	}
	r.ReadEnd()
}

func (x *ServiceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1977 := z.EncBinary()
		_ = yym1977
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1978 := !z.EncBinary()
			yy2arr1978 := z.EncBasicHandle().StructToArray
			var yyq1978 [4]bool
			_, _, _ = yysep1978, yyq1978, yy2arr1978
			const yyr1978 bool = false
			yyq1978[0] = x.Kind != ""
			yyq1978[1] = x.APIVersion != ""
			yyq1978[2] = true
			if yyr1978 || yy2arr1978 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1978 int = 1
				for _, b := range yyq1978 {
					if b {
						yynn1978++
					}
				}
				r.EncodeMapStart(yynn1978)
			}
			if yyr1978 || yy2arr1978 {
				if yyq1978[0] {
					yym1980 := z.EncBinary()
					_ = yym1980
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1978[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1981 := z.EncBinary()
					_ = yym1981
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1978 || yy2arr1978 {
				if yyq1978[1] {
					yym1983 := z.EncBinary()
					_ = yym1983
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1978[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1984 := z.EncBinary()
					_ = yym1984
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1978 || yy2arr1978 {
				if yyq1978[2] {
					yy1986 := &x.ListMeta
					yym1987 := z.EncBinary()
					_ = yym1987
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1986) {
					} else {
						z.EncFallback(yy1986)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1978[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1988 := &x.ListMeta
					yym1989 := z.EncBinary()
					_ = yym1989
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1988) {
					} else {
						z.EncFallback(yy1988)
					}
				}
			}
			if yyr1978 || yy2arr1978 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1991 := z.EncBinary()
					_ = yym1991
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1992 := z.EncBinary()
					_ = yym1992
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			}
			if yysep1978 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServiceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1993 := z.DecBinary()
	_ = yym1993
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1994 := r.ReadMapStart()
			if yyl1994 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1994, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1994 := r.ReadArrayStart()
			if yyl1994 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1994, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1995Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1995Slc
	var yyhl1995 bool = l >= 0
	for yyj1995 := 0; ; yyj1995++ {
		if yyhl1995 {
			if yyj1995 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1995Slc = r.DecodeBytes(yys1995Slc, true, true)
		yys1995 := string(yys1995Slc)
		switch yys1995 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1998 := &x.ListMeta
				yym1999 := z.DecBinary()
				_ = yym1999
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1998) {
				} else {
					z.DecFallback(yyv1998, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2000 := &x.Items
				yym2001 := z.DecBinary()
				_ = yym2001
				if false {
				} else {
					h.decSliceService((*[]Service)(yyv2000), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1995)
		} // end switch yys1995
	} // end for yyj1995
	if !yyhl1995 {
		r.ReadEnd()
	}
}

func (x *ServiceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2002 int
	var yyb2002 bool
	var yyhl2002 bool = l >= 0
	yyj2002++
	if yyhl2002 {
		yyb2002 = yyj2002 > l
	} else {
		yyb2002 = r.CheckBreak()
	}
	if yyb2002 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2002++
	if yyhl2002 {
		yyb2002 = yyj2002 > l
	} else {
		yyb2002 = r.CheckBreak()
	}
	if yyb2002 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2002++
	if yyhl2002 {
		yyb2002 = yyj2002 > l
	} else {
		yyb2002 = r.CheckBreak()
	}
	if yyb2002 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2005 := &x.ListMeta
		yym2006 := z.DecBinary()
		_ = yym2006
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2005) {
		} else {
			z.DecFallback(yyv2005, false)
		}
	}
	yyj2002++
	if yyhl2002 {
		yyb2002 = yyj2002 > l
	} else {
		yyb2002 = r.CheckBreak()
	}
	if yyb2002 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2007 := &x.Items
		yym2008 := z.DecBinary()
		_ = yym2008
		if false {
		} else {
			h.decSliceService((*[]Service)(yyv2007), d)
		}
	}
	for {
		yyj2002++
		if yyhl2002 {
			yyb2002 = yyj2002 > l
		} else {
			yyb2002 = r.CheckBreak()
		}
		if yyb2002 {
			break
		}
		z.DecStructFieldNotFound(yyj2002-1, "")
	}
	r.ReadEnd()
}

func (x *ServiceAccount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2009 := z.EncBinary()
		_ = yym2009
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2010 := !z.EncBinary()
			yy2arr2010 := z.EncBasicHandle().StructToArray
			var yyq2010 [5]bool
			_, _, _ = yysep2010, yyq2010, yy2arr2010
			const yyr2010 bool = false
			yyq2010[0] = x.Kind != ""
			yyq2010[1] = x.APIVersion != ""
			yyq2010[2] = true
			yyq2010[3] = len(x.Secrets) != 0
			yyq2010[4] = len(x.ImagePullSecrets) != 0
			if yyr2010 || yy2arr2010 {
				r.EncodeArrayStart(5)
			} else {
				var yynn2010 int = 0
				for _, b := range yyq2010 {
					if b {
						yynn2010++
					}
				}
				r.EncodeMapStart(yynn2010)
			}
			if yyr2010 || yy2arr2010 {
				if yyq2010[0] {
					yym2012 := z.EncBinary()
					_ = yym2012
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2010[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2013 := z.EncBinary()
					_ = yym2013
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2010 || yy2arr2010 {
				if yyq2010[1] {
					yym2015 := z.EncBinary()
					_ = yym2015
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2010[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2016 := z.EncBinary()
					_ = yym2016
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2010 || yy2arr2010 {
				if yyq2010[2] {
					yy2018 := &x.ObjectMeta
					yy2018.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2010[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2019 := &x.ObjectMeta
					yy2019.CodecEncodeSelf(e)
				}
			}
			if yyr2010 || yy2arr2010 {
				if yyq2010[3] {
					if x.Secrets == nil {
						r.EncodeNil()
					} else {
						yym2021 := z.EncBinary()
						_ = yym2021
						if false {
						} else {
							h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2010[3] {
					r.EncodeString(codecSelferC_UTF81234, string("secrets"))
					if x.Secrets == nil {
						r.EncodeNil()
					} else {
						yym2022 := z.EncBinary()
						_ = yym2022
						if false {
						} else {
							h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
						}
					}
				}
			}
			if yyr2010 || yy2arr2010 {
				if yyq2010[4] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2024 := z.EncBinary()
						_ = yym2024
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2010[4] {
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2025 := z.EncBinary()
						_ = yym2025
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yysep2010 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServiceAccount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2026 := z.DecBinary()
	_ = yym2026
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2027 := r.ReadMapStart()
			if yyl2027 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2027, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2027 := r.ReadArrayStart()
			if yyl2027 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2027, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2028Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2028Slc
	var yyhl2028 bool = l >= 0
	for yyj2028 := 0; ; yyj2028++ {
		if yyhl2028 {
			if yyj2028 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2028Slc = r.DecodeBytes(yys2028Slc, true, true)
		yys2028 := string(yys2028Slc)
		switch yys2028 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2031 := &x.ObjectMeta
				yyv2031.CodecDecodeSelf(d)
			}
		case "secrets":
			if r.TryDecodeAsNil() {
				x.Secrets = nil
			} else {
				yyv2032 := &x.Secrets
				yym2033 := z.DecBinary()
				_ = yym2033
				if false {
				} else {
					h.decSliceObjectReference((*[]ObjectReference)(yyv2032), d)
				}
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv2034 := &x.ImagePullSecrets
				yym2035 := z.DecBinary()
				_ = yym2035
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2034), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2028)
		} // end switch yys2028
	} // end for yyj2028
	if !yyhl2028 {
		r.ReadEnd()
	}
}

func (x *ServiceAccount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2036 int
	var yyb2036 bool
	var yyhl2036 bool = l >= 0
	yyj2036++
	if yyhl2036 {
		yyb2036 = yyj2036 > l
	} else {
		yyb2036 = r.CheckBreak()
	}
	if yyb2036 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2036++
	if yyhl2036 {
		yyb2036 = yyj2036 > l
	} else {
		yyb2036 = r.CheckBreak()
	}
	if yyb2036 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2036++
	if yyhl2036 {
		yyb2036 = yyj2036 > l
	} else {
		yyb2036 = r.CheckBreak()
	}
	if yyb2036 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2039 := &x.ObjectMeta
		yyv2039.CodecDecodeSelf(d)
	}
	yyj2036++
	if yyhl2036 {
		yyb2036 = yyj2036 > l
	} else {
		yyb2036 = r.CheckBreak()
	}
	if yyb2036 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Secrets = nil
	} else {
		yyv2040 := &x.Secrets
		yym2041 := z.DecBinary()
		_ = yym2041
		if false {
		} else {
			h.decSliceObjectReference((*[]ObjectReference)(yyv2040), d)
		}
	}
	yyj2036++
	if yyhl2036 {
		yyb2036 = yyj2036 > l
	} else {
		yyb2036 = r.CheckBreak()
	}
	if yyb2036 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv2042 := &x.ImagePullSecrets
		yym2043 := z.DecBinary()
		_ = yym2043
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2042), d)
		}
	}
	for {
		yyj2036++
		if yyhl2036 {
			yyb2036 = yyj2036 > l
		} else {
			yyb2036 = r.CheckBreak()
		}
		if yyb2036 {
			break
		}
		z.DecStructFieldNotFound(yyj2036-1, "")
	}
	r.ReadEnd()
}

func (x *ServiceAccountList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2044 := z.EncBinary()
		_ = yym2044
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2045 := !z.EncBinary()
			yy2arr2045 := z.EncBasicHandle().StructToArray
			var yyq2045 [4]bool
			_, _, _ = yysep2045, yyq2045, yy2arr2045
			const yyr2045 bool = false
			yyq2045[0] = x.Kind != ""
			yyq2045[1] = x.APIVersion != ""
			yyq2045[2] = true
			if yyr2045 || yy2arr2045 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2045 int = 1
				for _, b := range yyq2045 {
					if b {
						yynn2045++
					}
				}
				r.EncodeMapStart(yynn2045)
			}
			if yyr2045 || yy2arr2045 {
				if yyq2045[0] {
					yym2047 := z.EncBinary()
					_ = yym2047
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2045[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2048 := z.EncBinary()
					_ = yym2048
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2045 || yy2arr2045 {
				if yyq2045[1] {
					yym2050 := z.EncBinary()
					_ = yym2050
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2045[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2051 := z.EncBinary()
					_ = yym2051
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2045 || yy2arr2045 {
				if yyq2045[2] {
					yy2053 := &x.ListMeta
					yym2054 := z.EncBinary()
					_ = yym2054
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2053) {
					} else {
						z.EncFallback(yy2053)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2045[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2055 := &x.ListMeta
					yym2056 := z.EncBinary()
					_ = yym2056
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2055) {
					} else {
						z.EncFallback(yy2055)
					}
				}
			}
			if yyr2045 || yy2arr2045 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2058 := z.EncBinary()
					_ = yym2058
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2059 := z.EncBinary()
					_ = yym2059
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			}
			if yysep2045 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServiceAccountList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2060 := z.DecBinary()
	_ = yym2060
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2061 := r.ReadMapStart()
			if yyl2061 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2061, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2061 := r.ReadArrayStart()
			if yyl2061 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2061, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccountList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2062Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2062Slc
	var yyhl2062 bool = l >= 0
	for yyj2062 := 0; ; yyj2062++ {
		if yyhl2062 {
			if yyj2062 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2062Slc = r.DecodeBytes(yys2062Slc, true, true)
		yys2062 := string(yys2062Slc)
		switch yys2062 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2065 := &x.ListMeta
				yym2066 := z.DecBinary()
				_ = yym2066
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2065) {
				} else {
					z.DecFallback(yyv2065, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2067 := &x.Items
				yym2068 := z.DecBinary()
				_ = yym2068
				if false {
				} else {
					h.decSliceServiceAccount((*[]ServiceAccount)(yyv2067), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2062)
		} // end switch yys2062
	} // end for yyj2062
	if !yyhl2062 {
		r.ReadEnd()
	}
}

func (x *ServiceAccountList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2069 int
	var yyb2069 bool
	var yyhl2069 bool = l >= 0
	yyj2069++
	if yyhl2069 {
		yyb2069 = yyj2069 > l
	} else {
		yyb2069 = r.CheckBreak()
	}
	if yyb2069 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2069++
	if yyhl2069 {
		yyb2069 = yyj2069 > l
	} else {
		yyb2069 = r.CheckBreak()
	}
	if yyb2069 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2069++
	if yyhl2069 {
		yyb2069 = yyj2069 > l
	} else {
		yyb2069 = r.CheckBreak()
	}
	if yyb2069 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2072 := &x.ListMeta
		yym2073 := z.DecBinary()
		_ = yym2073
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2072) {
		} else {
			z.DecFallback(yyv2072, false)
		}
	}
	yyj2069++
	if yyhl2069 {
		yyb2069 = yyj2069 > l
	} else {
		yyb2069 = r.CheckBreak()
	}
	if yyb2069 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2074 := &x.Items
		yym2075 := z.DecBinary()
		_ = yym2075
		if false {
		} else {
			h.decSliceServiceAccount((*[]ServiceAccount)(yyv2074), d)
		}
	}
	for {
		yyj2069++
		if yyhl2069 {
			yyb2069 = yyj2069 > l
		} else {
			yyb2069 = r.CheckBreak()
		}
		if yyb2069 {
			break
		}
		z.DecStructFieldNotFound(yyj2069-1, "")
	}
	r.ReadEnd()
}

func (x *Endpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2076 := z.EncBinary()
		_ = yym2076
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2077 := !z.EncBinary()
			yy2arr2077 := z.EncBasicHandle().StructToArray
			var yyq2077 [4]bool
			_, _, _ = yysep2077, yyq2077, yy2arr2077
			const yyr2077 bool = false
			yyq2077[0] = x.Kind != ""
			yyq2077[1] = x.APIVersion != ""
			yyq2077[2] = true
			if yyr2077 || yy2arr2077 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2077 int = 1
				for _, b := range yyq2077 {
					if b {
						yynn2077++
					}
				}
				r.EncodeMapStart(yynn2077)
			}
			if yyr2077 || yy2arr2077 {
				if yyq2077[0] {
					yym2079 := z.EncBinary()
					_ = yym2079
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2077[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2080 := z.EncBinary()
					_ = yym2080
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2077 || yy2arr2077 {
				if yyq2077[1] {
					yym2082 := z.EncBinary()
					_ = yym2082
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2077[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2083 := z.EncBinary()
					_ = yym2083
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2077 || yy2arr2077 {
				if yyq2077[2] {
					yy2085 := &x.ObjectMeta
					yy2085.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2077[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2086 := &x.ObjectMeta
					yy2086.CodecEncodeSelf(e)
				}
			}
			if yyr2077 || yy2arr2077 {
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2088 := z.EncBinary()
					_ = yym2088
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("subsets"))
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2089 := z.EncBinary()
					_ = yym2089
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			}
			if yysep2077 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Endpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2090 := z.DecBinary()
	_ = yym2090
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2091 := r.ReadMapStart()
			if yyl2091 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2091, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2091 := r.ReadArrayStart()
			if yyl2091 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2091, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Endpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2092Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2092Slc
	var yyhl2092 bool = l >= 0
	for yyj2092 := 0; ; yyj2092++ {
		if yyhl2092 {
			if yyj2092 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2092Slc = r.DecodeBytes(yys2092Slc, true, true)
		yys2092 := string(yys2092Slc)
		switch yys2092 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2095 := &x.ObjectMeta
				yyv2095.CodecDecodeSelf(d)
			}
		case "subsets":
			if r.TryDecodeAsNil() {
				x.Subsets = nil
			} else {
				yyv2096 := &x.Subsets
				yym2097 := z.DecBinary()
				_ = yym2097
				if false {
				} else {
					h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2096), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2092)
		} // end switch yys2092
	} // end for yyj2092
	if !yyhl2092 {
		r.ReadEnd()
	}
}

func (x *Endpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2098 int
	var yyb2098 bool
	var yyhl2098 bool = l >= 0
	yyj2098++
	if yyhl2098 {
		yyb2098 = yyj2098 > l
	} else {
		yyb2098 = r.CheckBreak()
	}
	if yyb2098 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2098++
	if yyhl2098 {
		yyb2098 = yyj2098 > l
	} else {
		yyb2098 = r.CheckBreak()
	}
	if yyb2098 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2098++
	if yyhl2098 {
		yyb2098 = yyj2098 > l
	} else {
		yyb2098 = r.CheckBreak()
	}
	if yyb2098 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2101 := &x.ObjectMeta
		yyv2101.CodecDecodeSelf(d)
	}
	yyj2098++
	if yyhl2098 {
		yyb2098 = yyj2098 > l
	} else {
		yyb2098 = r.CheckBreak()
	}
	if yyb2098 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Subsets = nil
	} else {
		yyv2102 := &x.Subsets
		yym2103 := z.DecBinary()
		_ = yym2103
		if false {
		} else {
			h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2102), d)
		}
	}
	for {
		yyj2098++
		if yyhl2098 {
			yyb2098 = yyj2098 > l
		} else {
			yyb2098 = r.CheckBreak()
		}
		if yyb2098 {
			break
		}
		z.DecStructFieldNotFound(yyj2098-1, "")
	}
	r.ReadEnd()
}

func (x *EndpointSubset) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2104 := z.EncBinary()
		_ = yym2104
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2105 := !z.EncBinary()
			yy2arr2105 := z.EncBasicHandle().StructToArray
			var yyq2105 [3]bool
			_, _, _ = yysep2105, yyq2105, yy2arr2105
			const yyr2105 bool = false
			yyq2105[0] = len(x.Addresses) != 0
			yyq2105[1] = len(x.NotReadyAddresses) != 0
			yyq2105[2] = len(x.Ports) != 0
			if yyr2105 || yy2arr2105 {
				r.EncodeArrayStart(3)
			} else {
				var yynn2105 int = 0
				for _, b := range yyq2105 {
					if b {
						yynn2105++
					}
				}
				r.EncodeMapStart(yynn2105)
			}
			if yyr2105 || yy2arr2105 {
				if yyq2105[0] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2107 := z.EncBinary()
						_ = yym2107
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2105[0] {
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2108 := z.EncBinary()
						_ = yym2108
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr2105 || yy2arr2105 {
				if yyq2105[1] {
					if x.NotReadyAddresses == nil {
						r.EncodeNil()
					} else {
						yym2110 := z.EncBinary()
						_ = yym2110
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2105[1] {
					r.EncodeString(codecSelferC_UTF81234, string("notReadyAddresses"))
					if x.NotReadyAddresses == nil {
						r.EncodeNil()
					} else {
						yym2111 := z.EncBinary()
						_ = yym2111
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
						}
					}
				}
			}
			if yyr2105 || yy2arr2105 {
				if yyq2105[2] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym2113 := z.EncBinary()
						_ = yym2113
						if false {
						} else {
							h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2105[2] {
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym2114 := z.EncBinary()
						_ = yym2114
						if false {
						} else {
							h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
						}
					}
				}
			}
			if yysep2105 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EndpointSubset) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2115 := z.DecBinary()
	_ = yym2115
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2116 := r.ReadMapStart()
			if yyl2116 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2116, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2116 := r.ReadArrayStart()
			if yyl2116 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2116, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointSubset) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2117Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2117Slc
	var yyhl2117 bool = l >= 0
	for yyj2117 := 0; ; yyj2117++ {
		if yyhl2117 {
			if yyj2117 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2117Slc = r.DecodeBytes(yys2117Slc, true, true)
		yys2117 := string(yys2117Slc)
		switch yys2117 {
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2118 := &x.Addresses
				yym2119 := z.DecBinary()
				_ = yym2119
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2118), d)
				}
			}
		case "notReadyAddresses":
			if r.TryDecodeAsNil() {
				x.NotReadyAddresses = nil
			} else {
				yyv2120 := &x.NotReadyAddresses
				yym2121 := z.DecBinary()
				_ = yym2121
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2120), d)
				}
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2122 := &x.Ports
				yym2123 := z.DecBinary()
				_ = yym2123
				if false {
				} else {
					h.decSliceEndpointPort((*[]EndpointPort)(yyv2122), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2117)
		} // end switch yys2117
	} // end for yyj2117
	if !yyhl2117 {
		r.ReadEnd()
	}
}

func (x *EndpointSubset) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2124 int
	var yyb2124 bool
	var yyhl2124 bool = l >= 0
	yyj2124++
	if yyhl2124 {
		yyb2124 = yyj2124 > l
	} else {
		yyb2124 = r.CheckBreak()
	}
	if yyb2124 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2125 := &x.Addresses
		yym2126 := z.DecBinary()
		_ = yym2126
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2125), d)
		}
	}
	yyj2124++
	if yyhl2124 {
		yyb2124 = yyj2124 > l
	} else {
		yyb2124 = r.CheckBreak()
	}
	if yyb2124 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.NotReadyAddresses = nil
	} else {
		yyv2127 := &x.NotReadyAddresses
		yym2128 := z.DecBinary()
		_ = yym2128
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2127), d)
		}
	}
	yyj2124++
	if yyhl2124 {
		yyb2124 = yyj2124 > l
	} else {
		yyb2124 = r.CheckBreak()
	}
	if yyb2124 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2129 := &x.Ports
		yym2130 := z.DecBinary()
		_ = yym2130
		if false {
		} else {
			h.decSliceEndpointPort((*[]EndpointPort)(yyv2129), d)
		}
	}
	for {
		yyj2124++
		if yyhl2124 {
			yyb2124 = yyj2124 > l
		} else {
			yyb2124 = r.CheckBreak()
		}
		if yyb2124 {
			break
		}
		z.DecStructFieldNotFound(yyj2124-1, "")
	}
	r.ReadEnd()
}

func (x *EndpointAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2131 := z.EncBinary()
		_ = yym2131
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2132 := !z.EncBinary()
			yy2arr2132 := z.EncBasicHandle().StructToArray
			var yyq2132 [2]bool
			_, _, _ = yysep2132, yyq2132, yy2arr2132
			const yyr2132 bool = false
			yyq2132[1] = x.TargetRef != nil
			if yyr2132 || yy2arr2132 {
				r.EncodeArrayStart(2)
			} else {
				var yynn2132 int = 1
				for _, b := range yyq2132 {
					if b {
						yynn2132++
					}
				}
				r.EncodeMapStart(yynn2132)
			}
			if yyr2132 || yy2arr2132 {
				yym2134 := z.EncBinary()
				_ = yym2134
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("ip"))
				yym2135 := z.EncBinary()
				_ = yym2135
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			}
			if yyr2132 || yy2arr2132 {
				if yyq2132[1] {
					if x.TargetRef == nil {
						r.EncodeNil()
					} else {
						x.TargetRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2132[1] {
					r.EncodeString(codecSelferC_UTF81234, string("targetRef"))
					if x.TargetRef == nil {
						r.EncodeNil()
					} else {
						x.TargetRef.CodecEncodeSelf(e)
					}
				}
			}
			if yysep2132 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EndpointAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2137 := z.DecBinary()
	_ = yym2137
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2138 := r.ReadMapStart()
			if yyl2138 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2138, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2138 := r.ReadArrayStart()
			if yyl2138 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2138, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2139Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2139Slc
	var yyhl2139 bool = l >= 0
	for yyj2139 := 0; ; yyj2139++ {
		if yyhl2139 {
			if yyj2139 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2139Slc = r.DecodeBytes(yys2139Slc, true, true)
		yys2139 := string(yys2139Slc)
		switch yys2139 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "targetRef":
			if r.TryDecodeAsNil() {
				if x.TargetRef != nil {
					x.TargetRef = nil
				}
			} else {
				if x.TargetRef == nil {
					x.TargetRef = new(ObjectReference)
				}
				x.TargetRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2139)
		} // end switch yys2139
	} // end for yyj2139
	if !yyhl2139 {
		r.ReadEnd()
	}
}

func (x *EndpointAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2142 int
	var yyb2142 bool
	var yyhl2142 bool = l >= 0
	yyj2142++
	if yyhl2142 {
		yyb2142 = yyj2142 > l
	} else {
		yyb2142 = r.CheckBreak()
	}
	if yyb2142 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2142++
	if yyhl2142 {
		yyb2142 = yyj2142 > l
	} else {
		yyb2142 = r.CheckBreak()
	}
	if yyb2142 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.TargetRef != nil {
			x.TargetRef = nil
		}
	} else {
		if x.TargetRef == nil {
			x.TargetRef = new(ObjectReference)
		}
		x.TargetRef.CodecDecodeSelf(d)
	}
	for {
		yyj2142++
		if yyhl2142 {
			yyb2142 = yyj2142 > l
		} else {
			yyb2142 = r.CheckBreak()
		}
		if yyb2142 {
			break
		}
		z.DecStructFieldNotFound(yyj2142-1, "")
	}
	r.ReadEnd()
}

func (x *EndpointPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2145 := z.EncBinary()
		_ = yym2145
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2146 := !z.EncBinary()
			yy2arr2146 := z.EncBasicHandle().StructToArray
			var yyq2146 [3]bool
			_, _, _ = yysep2146, yyq2146, yy2arr2146
			const yyr2146 bool = false
			yyq2146[0] = x.Name != ""
			yyq2146[2] = x.Protocol != ""
			if yyr2146 || yy2arr2146 {
				r.EncodeArrayStart(3)
			} else {
				var yynn2146 int = 1
				for _, b := range yyq2146 {
					if b {
						yynn2146++
					}
				}
				r.EncodeMapStart(yynn2146)
			}
			if yyr2146 || yy2arr2146 {
				if yyq2146[0] {
					yym2148 := z.EncBinary()
					_ = yym2148
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2146[0] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					yym2149 := z.EncBinary()
					_ = yym2149
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2146 || yy2arr2146 {
				yym2151 := z.EncBinary()
				_ = yym2151
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				yym2152 := z.EncBinary()
				_ = yym2152
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2146 || yy2arr2146 {
				if yyq2146[2] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2146[2] {
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yysep2146 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EndpointPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2154 := z.DecBinary()
	_ = yym2154
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2155 := r.ReadMapStart()
			if yyl2155 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2155, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2155 := r.ReadArrayStart()
			if yyl2155 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2155, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2156Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2156Slc
	var yyhl2156 bool = l >= 0
	for yyj2156 := 0; ; yyj2156++ {
		if yyhl2156 {
			if yyj2156 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2156Slc = r.DecodeBytes(yys2156Slc, true, true)
		yys2156 := string(yys2156Slc)
		switch yys2156 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2156)
		} // end switch yys2156
	} // end for yyj2156
	if !yyhl2156 {
		r.ReadEnd()
	}
}

func (x *EndpointPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2160 int
	var yyb2160 bool
	var yyhl2160 bool = l >= 0
	yyj2160++
	if yyhl2160 {
		yyb2160 = yyj2160 > l
	} else {
		yyb2160 = r.CheckBreak()
	}
	if yyb2160 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2160++
	if yyhl2160 {
		yyb2160 = yyj2160 > l
	} else {
		yyb2160 = r.CheckBreak()
	}
	if yyb2160 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj2160++
	if yyhl2160 {
		yyb2160 = yyj2160 > l
	} else {
		yyb2160 = r.CheckBreak()
	}
	if yyb2160 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	for {
		yyj2160++
		if yyhl2160 {
			yyb2160 = yyj2160 > l
		} else {
			yyb2160 = r.CheckBreak()
		}
		if yyb2160 {
			break
		}
		z.DecStructFieldNotFound(yyj2160-1, "")
	}
	r.ReadEnd()
}

func (x *EndpointsList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2164 := z.EncBinary()
		_ = yym2164
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2165 := !z.EncBinary()
			yy2arr2165 := z.EncBasicHandle().StructToArray
			var yyq2165 [4]bool
			_, _, _ = yysep2165, yyq2165, yy2arr2165
			const yyr2165 bool = false
			yyq2165[0] = x.Kind != ""
			yyq2165[1] = x.APIVersion != ""
			yyq2165[2] = true
			if yyr2165 || yy2arr2165 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2165 int = 1
				for _, b := range yyq2165 {
					if b {
						yynn2165++
					}
				}
				r.EncodeMapStart(yynn2165)
			}
			if yyr2165 || yy2arr2165 {
				if yyq2165[0] {
					yym2167 := z.EncBinary()
					_ = yym2167
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2165[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2168 := z.EncBinary()
					_ = yym2168
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2165 || yy2arr2165 {
				if yyq2165[1] {
					yym2170 := z.EncBinary()
					_ = yym2170
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2165[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2171 := z.EncBinary()
					_ = yym2171
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2165 || yy2arr2165 {
				if yyq2165[2] {
					yy2173 := &x.ListMeta
					yym2174 := z.EncBinary()
					_ = yym2174
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2173) {
					} else {
						z.EncFallback(yy2173)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2165[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2175 := &x.ListMeta
					yym2176 := z.EncBinary()
					_ = yym2176
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2175) {
					} else {
						z.EncFallback(yy2175)
					}
				}
			}
			if yyr2165 || yy2arr2165 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2178 := z.EncBinary()
					_ = yym2178
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2179 := z.EncBinary()
					_ = yym2179
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			}
			if yysep2165 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EndpointsList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2180 := z.DecBinary()
	_ = yym2180
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2181 := r.ReadMapStart()
			if yyl2181 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2181, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2181 := r.ReadArrayStart()
			if yyl2181 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2181, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointsList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2182Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2182Slc
	var yyhl2182 bool = l >= 0
	for yyj2182 := 0; ; yyj2182++ {
		if yyhl2182 {
			if yyj2182 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2182Slc = r.DecodeBytes(yys2182Slc, true, true)
		yys2182 := string(yys2182Slc)
		switch yys2182 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2185 := &x.ListMeta
				yym2186 := z.DecBinary()
				_ = yym2186
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2185) {
				} else {
					z.DecFallback(yyv2185, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2187 := &x.Items
				yym2188 := z.DecBinary()
				_ = yym2188
				if false {
				} else {
					h.decSliceEndpoints((*[]Endpoints)(yyv2187), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2182)
		} // end switch yys2182
	} // end for yyj2182
	if !yyhl2182 {
		r.ReadEnd()
	}
}

func (x *EndpointsList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2189 int
	var yyb2189 bool
	var yyhl2189 bool = l >= 0
	yyj2189++
	if yyhl2189 {
		yyb2189 = yyj2189 > l
	} else {
		yyb2189 = r.CheckBreak()
	}
	if yyb2189 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2189++
	if yyhl2189 {
		yyb2189 = yyj2189 > l
	} else {
		yyb2189 = r.CheckBreak()
	}
	if yyb2189 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2189++
	if yyhl2189 {
		yyb2189 = yyj2189 > l
	} else {
		yyb2189 = r.CheckBreak()
	}
	if yyb2189 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2192 := &x.ListMeta
		yym2193 := z.DecBinary()
		_ = yym2193
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2192) {
		} else {
			z.DecFallback(yyv2192, false)
		}
	}
	yyj2189++
	if yyhl2189 {
		yyb2189 = yyj2189 > l
	} else {
		yyb2189 = r.CheckBreak()
	}
	if yyb2189 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2194 := &x.Items
		yym2195 := z.DecBinary()
		_ = yym2195
		if false {
		} else {
			h.decSliceEndpoints((*[]Endpoints)(yyv2194), d)
		}
	}
	for {
		yyj2189++
		if yyhl2189 {
			yyb2189 = yyj2189 > l
		} else {
			yyb2189 = r.CheckBreak()
		}
		if yyb2189 {
			break
		}
		z.DecStructFieldNotFound(yyj2189-1, "")
	}
	r.ReadEnd()
}

func (x *NodeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2196 := z.EncBinary()
		_ = yym2196
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2197 := !z.EncBinary()
			yy2arr2197 := z.EncBasicHandle().StructToArray
			var yyq2197 [4]bool
			_, _, _ = yysep2197, yyq2197, yy2arr2197
			const yyr2197 bool = false
			yyq2197[0] = x.PodCIDR != ""
			yyq2197[1] = x.ExternalID != ""
			yyq2197[2] = x.ProviderID != ""
			yyq2197[3] = x.Unschedulable != false
			if yyr2197 || yy2arr2197 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2197 int = 0
				for _, b := range yyq2197 {
					if b {
						yynn2197++
					}
				}
				r.EncodeMapStart(yynn2197)
			}
			if yyr2197 || yy2arr2197 {
				if yyq2197[0] {
					yym2199 := z.EncBinary()
					_ = yym2199
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2197[0] {
					r.EncodeString(codecSelferC_UTF81234, string("podCIDR"))
					yym2200 := z.EncBinary()
					_ = yym2200
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				}
			}
			if yyr2197 || yy2arr2197 {
				if yyq2197[1] {
					yym2202 := z.EncBinary()
					_ = yym2202
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2197[1] {
					r.EncodeString(codecSelferC_UTF81234, string("externalID"))
					yym2203 := z.EncBinary()
					_ = yym2203
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				}
			}
			if yyr2197 || yy2arr2197 {
				if yyq2197[2] {
					yym2205 := z.EncBinary()
					_ = yym2205
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2197[2] {
					r.EncodeString(codecSelferC_UTF81234, string("providerID"))
					yym2206 := z.EncBinary()
					_ = yym2206
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				}
			}
			if yyr2197 || yy2arr2197 {
				if yyq2197[3] {
					yym2208 := z.EncBinary()
					_ = yym2208
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2197[3] {
					r.EncodeString(codecSelferC_UTF81234, string("unschedulable"))
					yym2209 := z.EncBinary()
					_ = yym2209
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				}
			}
			if yysep2197 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2210 := z.DecBinary()
	_ = yym2210
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2211 := r.ReadMapStart()
			if yyl2211 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2211, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2211 := r.ReadArrayStart()
			if yyl2211 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2211, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2212Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2212Slc
	var yyhl2212 bool = l >= 0
	for yyj2212 := 0; ; yyj2212++ {
		if yyhl2212 {
			if yyj2212 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2212Slc = r.DecodeBytes(yys2212Slc, true, true)
		yys2212 := string(yys2212Slc)
		switch yys2212 {
		case "podCIDR":
			if r.TryDecodeAsNil() {
				x.PodCIDR = ""
			} else {
				x.PodCIDR = string(r.DecodeString())
			}
		case "externalID":
			if r.TryDecodeAsNil() {
				x.ExternalID = ""
			} else {
				x.ExternalID = string(r.DecodeString())
			}
		case "providerID":
			if r.TryDecodeAsNil() {
				x.ProviderID = ""
			} else {
				x.ProviderID = string(r.DecodeString())
			}
		case "unschedulable":
			if r.TryDecodeAsNil() {
				x.Unschedulable = false
			} else {
				x.Unschedulable = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2212)
		} // end switch yys2212
	} // end for yyj2212
	if !yyhl2212 {
		r.ReadEnd()
	}
}

func (x *NodeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2217 int
	var yyb2217 bool
	var yyhl2217 bool = l >= 0
	yyj2217++
	if yyhl2217 {
		yyb2217 = yyj2217 > l
	} else {
		yyb2217 = r.CheckBreak()
	}
	if yyb2217 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.PodCIDR = ""
	} else {
		x.PodCIDR = string(r.DecodeString())
	}
	yyj2217++
	if yyhl2217 {
		yyb2217 = yyj2217 > l
	} else {
		yyb2217 = r.CheckBreak()
	}
	if yyb2217 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ExternalID = ""
	} else {
		x.ExternalID = string(r.DecodeString())
	}
	yyj2217++
	if yyhl2217 {
		yyb2217 = yyj2217 > l
	} else {
		yyb2217 = r.CheckBreak()
	}
	if yyb2217 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ProviderID = ""
	} else {
		x.ProviderID = string(r.DecodeString())
	}
	yyj2217++
	if yyhl2217 {
		yyb2217 = yyj2217 > l
	} else {
		yyb2217 = r.CheckBreak()
	}
	if yyb2217 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Unschedulable = false
	} else {
		x.Unschedulable = bool(r.DecodeBool())
	}
	for {
		yyj2217++
		if yyhl2217 {
			yyb2217 = yyj2217 > l
		} else {
			yyb2217 = r.CheckBreak()
		}
		if yyb2217 {
			break
		}
		z.DecStructFieldNotFound(yyj2217-1, "")
	}
	r.ReadEnd()
}

func (x *DaemonEndpoint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2222 := z.EncBinary()
		_ = yym2222
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2223 := !z.EncBinary()
			yy2arr2223 := z.EncBasicHandle().StructToArray
			var yyq2223 [1]bool
			_, _, _ = yysep2223, yyq2223, yy2arr2223
			const yyr2223 bool = false
			if yyr2223 || yy2arr2223 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2223 int = 1
				for _, b := range yyq2223 {
					if b {
						yynn2223++
					}
				}
				r.EncodeMapStart(yynn2223)
			}
			if yyr2223 || yy2arr2223 {
				yym2225 := z.EncBinary()
				_ = yym2225
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				yym2226 := z.EncBinary()
				_ = yym2226
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yysep2223 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DaemonEndpoint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2227 := z.DecBinary()
	_ = yym2227
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2228 := r.ReadMapStart()
			if yyl2228 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2228, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2228 := r.ReadArrayStart()
			if yyl2228 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2228, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonEndpoint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2229Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2229Slc
	var yyhl2229 bool = l >= 0
	for yyj2229 := 0; ; yyj2229++ {
		if yyhl2229 {
			if yyj2229 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2229Slc = r.DecodeBytes(yys2229Slc, true, true)
		yys2229 := string(yys2229Slc)
		switch yys2229 {
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2229)
		} // end switch yys2229
	} // end for yyj2229
	if !yyhl2229 {
		r.ReadEnd()
	}
}

func (x *DaemonEndpoint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2231 int
	var yyb2231 bool
	var yyhl2231 bool = l >= 0
	yyj2231++
	if yyhl2231 {
		yyb2231 = yyj2231 > l
	} else {
		yyb2231 = r.CheckBreak()
	}
	if yyb2231 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj2231++
		if yyhl2231 {
			yyb2231 = yyj2231 > l
		} else {
			yyb2231 = r.CheckBreak()
		}
		if yyb2231 {
			break
		}
		z.DecStructFieldNotFound(yyj2231-1, "")
	}
	r.ReadEnd()
}

func (x *NodeDaemonEndpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2233 := z.EncBinary()
		_ = yym2233
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2234 := !z.EncBinary()
			yy2arr2234 := z.EncBasicHandle().StructToArray
			var yyq2234 [1]bool
			_, _, _ = yysep2234, yyq2234, yy2arr2234
			const yyr2234 bool = false
			yyq2234[0] = true
			if yyr2234 || yy2arr2234 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2234 int = 0
				for _, b := range yyq2234 {
					if b {
						yynn2234++
					}
				}
				r.EncodeMapStart(yynn2234)
			}
			if yyr2234 || yy2arr2234 {
				if yyq2234[0] {
					yy2236 := &x.KubeletEndpoint
					yy2236.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2234[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kubeletEndpoint"))
					yy2237 := &x.KubeletEndpoint
					yy2237.CodecEncodeSelf(e)
				}
			}
			if yysep2234 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeDaemonEndpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2238 := z.DecBinary()
	_ = yym2238
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2239 := r.ReadMapStart()
			if yyl2239 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2239, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2239 := r.ReadArrayStart()
			if yyl2239 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2239, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2240Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2240Slc
	var yyhl2240 bool = l >= 0
	for yyj2240 := 0; ; yyj2240++ {
		if yyhl2240 {
			if yyj2240 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2240Slc = r.DecodeBytes(yys2240Slc, true, true)
		yys2240 := string(yys2240Slc)
		switch yys2240 {
		case "kubeletEndpoint":
			if r.TryDecodeAsNil() {
				x.KubeletEndpoint = DaemonEndpoint{}
			} else {
				yyv2241 := &x.KubeletEndpoint
				yyv2241.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2240)
		} // end switch yys2240
	} // end for yyj2240
	if !yyhl2240 {
		r.ReadEnd()
	}
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2242 int
	var yyb2242 bool
	var yyhl2242 bool = l >= 0
	yyj2242++
	if yyhl2242 {
		yyb2242 = yyj2242 > l
	} else {
		yyb2242 = r.CheckBreak()
	}
	if yyb2242 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.KubeletEndpoint = DaemonEndpoint{}
	} else {
		yyv2243 := &x.KubeletEndpoint
		yyv2243.CodecDecodeSelf(d)
	}
	for {
		yyj2242++
		if yyhl2242 {
			yyb2242 = yyj2242 > l
		} else {
			yyb2242 = r.CheckBreak()
		}
		if yyb2242 {
			break
		}
		z.DecStructFieldNotFound(yyj2242-1, "")
	}
	r.ReadEnd()
}

func (x *NodeSystemInfo) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2244 := z.EncBinary()
		_ = yym2244
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2245 := !z.EncBinary()
			yy2arr2245 := z.EncBasicHandle().StructToArray
			var yyq2245 [8]bool
			_, _, _ = yysep2245, yyq2245, yy2arr2245
			const yyr2245 bool = false
			if yyr2245 || yy2arr2245 {
				r.EncodeArrayStart(8)
			} else {
				var yynn2245 int = 8
				for _, b := range yyq2245 {
					if b {
						yynn2245++
					}
				}
				r.EncodeMapStart(yynn2245)
			}
			if yyr2245 || yy2arr2245 {
				yym2247 := z.EncBinary()
				_ = yym2247
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("machineID"))
				yym2248 := z.EncBinary()
				_ = yym2248
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			}
			if yyr2245 || yy2arr2245 {
				yym2250 := z.EncBinary()
				_ = yym2250
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("systemUUID"))
				yym2251 := z.EncBinary()
				_ = yym2251
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			}
			if yyr2245 || yy2arr2245 {
				yym2253 := z.EncBinary()
				_ = yym2253
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("bootID"))
				yym2254 := z.EncBinary()
				_ = yym2254
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			}
			if yyr2245 || yy2arr2245 {
				yym2256 := z.EncBinary()
				_ = yym2256
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("kernelVersion"))
				yym2257 := z.EncBinary()
				_ = yym2257
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			}
			if yyr2245 || yy2arr2245 {
				yym2259 := z.EncBinary()
				_ = yym2259
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OsImage))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("osImage"))
				yym2260 := z.EncBinary()
				_ = yym2260
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OsImage))
				}
			}
			if yyr2245 || yy2arr2245 {
				yym2262 := z.EncBinary()
				_ = yym2262
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("containerRuntimeVersion"))
				yym2263 := z.EncBinary()
				_ = yym2263
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			}
			if yyr2245 || yy2arr2245 {
				yym2265 := z.EncBinary()
				_ = yym2265
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("kubeletVersion"))
				yym2266 := z.EncBinary()
				_ = yym2266
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			}
			if yyr2245 || yy2arr2245 {
				yym2268 := z.EncBinary()
				_ = yym2268
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("kubeProxyVersion"))
				yym2269 := z.EncBinary()
				_ = yym2269
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			}
			if yysep2245 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeSystemInfo) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2270 := z.DecBinary()
	_ = yym2270
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2271 := r.ReadMapStart()
			if yyl2271 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2271, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2271 := r.ReadArrayStart()
			if yyl2271 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2271, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSystemInfo) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2272Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2272Slc
	var yyhl2272 bool = l >= 0
	for yyj2272 := 0; ; yyj2272++ {
		if yyhl2272 {
			if yyj2272 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2272Slc = r.DecodeBytes(yys2272Slc, true, true)
		yys2272 := string(yys2272Slc)
		switch yys2272 {
		case "machineID":
			if r.TryDecodeAsNil() {
				x.MachineID = ""
			} else {
				x.MachineID = string(r.DecodeString())
			}
		case "systemUUID":
			if r.TryDecodeAsNil() {
				x.SystemUUID = ""
			} else {
				x.SystemUUID = string(r.DecodeString())
			}
		case "bootID":
			if r.TryDecodeAsNil() {
				x.BootID = ""
			} else {
				x.BootID = string(r.DecodeString())
			}
		case "kernelVersion":
			if r.TryDecodeAsNil() {
				x.KernelVersion = ""
			} else {
				x.KernelVersion = string(r.DecodeString())
			}
		case "osImage":
			if r.TryDecodeAsNil() {
				x.OsImage = ""
			} else {
				x.OsImage = string(r.DecodeString())
			}
		case "containerRuntimeVersion":
			if r.TryDecodeAsNil() {
				x.ContainerRuntimeVersion = ""
			} else {
				x.ContainerRuntimeVersion = string(r.DecodeString())
			}
		case "kubeletVersion":
			if r.TryDecodeAsNil() {
				x.KubeletVersion = ""
			} else {
				x.KubeletVersion = string(r.DecodeString())
			}
		case "kubeProxyVersion":
			if r.TryDecodeAsNil() {
				x.KubeProxyVersion = ""
			} else {
				x.KubeProxyVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2272)
		} // end switch yys2272
	} // end for yyj2272
	if !yyhl2272 {
		r.ReadEnd()
	}
}

func (x *NodeSystemInfo) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2281 int
	var yyb2281 bool
	var yyhl2281 bool = l >= 0
	yyj2281++
	if yyhl2281 {
		yyb2281 = yyj2281 > l
	} else {
		yyb2281 = r.CheckBreak()
	}
	if yyb2281 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MachineID = ""
	} else {
		x.MachineID = string(r.DecodeString())
	}
	yyj2281++
	if yyhl2281 {
		yyb2281 = yyj2281 > l
	} else {
		yyb2281 = r.CheckBreak()
	}
	if yyb2281 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SystemUUID = ""
	} else {
		x.SystemUUID = string(r.DecodeString())
	}
	yyj2281++
	if yyhl2281 {
		yyb2281 = yyj2281 > l
	} else {
		yyb2281 = r.CheckBreak()
	}
	if yyb2281 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.BootID = ""
	} else {
		x.BootID = string(r.DecodeString())
	}
	yyj2281++
	if yyhl2281 {
		yyb2281 = yyj2281 > l
	} else {
		yyb2281 = r.CheckBreak()
	}
	if yyb2281 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.KernelVersion = ""
	} else {
		x.KernelVersion = string(r.DecodeString())
	}
	yyj2281++
	if yyhl2281 {
		yyb2281 = yyj2281 > l
	} else {
		yyb2281 = r.CheckBreak()
	}
	if yyb2281 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.OsImage = ""
	} else {
		x.OsImage = string(r.DecodeString())
	}
	yyj2281++
	if yyhl2281 {
		yyb2281 = yyj2281 > l
	} else {
		yyb2281 = r.CheckBreak()
	}
	if yyb2281 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ContainerRuntimeVersion = ""
	} else {
		x.ContainerRuntimeVersion = string(r.DecodeString())
	}
	yyj2281++
	if yyhl2281 {
		yyb2281 = yyj2281 > l
	} else {
		yyb2281 = r.CheckBreak()
	}
	if yyb2281 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.KubeletVersion = ""
	} else {
		x.KubeletVersion = string(r.DecodeString())
	}
	yyj2281++
	if yyhl2281 {
		yyb2281 = yyj2281 > l
	} else {
		yyb2281 = r.CheckBreak()
	}
	if yyb2281 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.KubeProxyVersion = ""
	} else {
		x.KubeProxyVersion = string(r.DecodeString())
	}
	for {
		yyj2281++
		if yyhl2281 {
			yyb2281 = yyj2281 > l
		} else {
			yyb2281 = r.CheckBreak()
		}
		if yyb2281 {
			break
		}
		z.DecStructFieldNotFound(yyj2281-1, "")
	}
	r.ReadEnd()
}

func (x *NodeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2290 := z.EncBinary()
		_ = yym2290
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2291 := !z.EncBinary()
			yy2arr2291 := z.EncBasicHandle().StructToArray
			var yyq2291 [6]bool
			_, _, _ = yysep2291, yyq2291, yy2arr2291
			const yyr2291 bool = false
			yyq2291[0] = len(x.Capacity) != 0
			yyq2291[1] = x.Phase != ""
			yyq2291[2] = len(x.Conditions) != 0
			yyq2291[3] = len(x.Addresses) != 0
			yyq2291[4] = true
			yyq2291[5] = true
			if yyr2291 || yy2arr2291 {
				r.EncodeArrayStart(6)
			} else {
				var yynn2291 int = 0
				for _, b := range yyq2291 {
					if b {
						yynn2291++
					}
				}
				r.EncodeMapStart(yynn2291)
			}
			if yyr2291 || yy2arr2291 {
				if yyq2291[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2291[0] {
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2291 || yy2arr2291 {
				if yyq2291[1] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2291[1] {
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2291 || yy2arr2291 {
				if yyq2291[2] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2295 := z.EncBinary()
						_ = yym2295
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2291[2] {
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2296 := z.EncBinary()
						_ = yym2296
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2291 || yy2arr2291 {
				if yyq2291[3] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2298 := z.EncBinary()
						_ = yym2298
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2291[3] {
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2299 := z.EncBinary()
						_ = yym2299
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr2291 || yy2arr2291 {
				if yyq2291[4] {
					yy2301 := &x.DaemonEndpoints
					yy2301.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2291[4] {
					r.EncodeString(codecSelferC_UTF81234, string("daemonEndpoints"))
					yy2302 := &x.DaemonEndpoints
					yy2302.CodecEncodeSelf(e)
				}
			}
			if yyr2291 || yy2arr2291 {
				if yyq2291[5] {
					yy2304 := &x.NodeInfo
					yy2304.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2291[5] {
					r.EncodeString(codecSelferC_UTF81234, string("nodeInfo"))
					yy2305 := &x.NodeInfo
					yy2305.CodecEncodeSelf(e)
				}
			}
			if yysep2291 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2306 := z.DecBinary()
	_ = yym2306
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2307 := r.ReadMapStart()
			if yyl2307 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2307, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2307 := r.ReadArrayStart()
			if yyl2307 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2307, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2308Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2308Slc
	var yyhl2308 bool = l >= 0
	for yyj2308 := 0; ; yyj2308++ {
		if yyhl2308 {
			if yyj2308 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2308Slc = r.DecodeBytes(yys2308Slc, true, true)
		yys2308 := string(yys2308Slc)
		switch yys2308 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv2309 := &x.Capacity
				yyv2309.CodecDecodeSelf(d)
			}
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NodePhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv2311 := &x.Conditions
				yym2312 := z.DecBinary()
				_ = yym2312
				if false {
				} else {
					h.decSliceNodeCondition((*[]NodeCondition)(yyv2311), d)
				}
			}
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2313 := &x.Addresses
				yym2314 := z.DecBinary()
				_ = yym2314
				if false {
				} else {
					h.decSliceNodeAddress((*[]NodeAddress)(yyv2313), d)
				}
			}
		case "daemonEndpoints":
			if r.TryDecodeAsNil() {
				x.DaemonEndpoints = NodeDaemonEndpoints{}
			} else {
				yyv2315 := &x.DaemonEndpoints
				yyv2315.CodecDecodeSelf(d)
			}
		case "nodeInfo":
			if r.TryDecodeAsNil() {
				x.NodeInfo = NodeSystemInfo{}
			} else {
				yyv2316 := &x.NodeInfo
				yyv2316.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2308)
		} // end switch yys2308
	} // end for yyj2308
	if !yyhl2308 {
		r.ReadEnd()
	}
}

func (x *NodeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2317 int
	var yyb2317 bool
	var yyhl2317 bool = l >= 0
	yyj2317++
	if yyhl2317 {
		yyb2317 = yyj2317 > l
	} else {
		yyb2317 = r.CheckBreak()
	}
	if yyb2317 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv2318 := &x.Capacity
		yyv2318.CodecDecodeSelf(d)
	}
	yyj2317++
	if yyhl2317 {
		yyb2317 = yyj2317 > l
	} else {
		yyb2317 = r.CheckBreak()
	}
	if yyb2317 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NodePhase(r.DecodeString())
	}
	yyj2317++
	if yyhl2317 {
		yyb2317 = yyj2317 > l
	} else {
		yyb2317 = r.CheckBreak()
	}
	if yyb2317 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv2320 := &x.Conditions
		yym2321 := z.DecBinary()
		_ = yym2321
		if false {
		} else {
			h.decSliceNodeCondition((*[]NodeCondition)(yyv2320), d)
		}
	}
	yyj2317++
	if yyhl2317 {
		yyb2317 = yyj2317 > l
	} else {
		yyb2317 = r.CheckBreak()
	}
	if yyb2317 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2322 := &x.Addresses
		yym2323 := z.DecBinary()
		_ = yym2323
		if false {
		} else {
			h.decSliceNodeAddress((*[]NodeAddress)(yyv2322), d)
		}
	}
	yyj2317++
	if yyhl2317 {
		yyb2317 = yyj2317 > l
	} else {
		yyb2317 = r.CheckBreak()
	}
	if yyb2317 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DaemonEndpoints = NodeDaemonEndpoints{}
	} else {
		yyv2324 := &x.DaemonEndpoints
		yyv2324.CodecDecodeSelf(d)
	}
	yyj2317++
	if yyhl2317 {
		yyb2317 = yyj2317 > l
	} else {
		yyb2317 = r.CheckBreak()
	}
	if yyb2317 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.NodeInfo = NodeSystemInfo{}
	} else {
		yyv2325 := &x.NodeInfo
		yyv2325.CodecDecodeSelf(d)
	}
	for {
		yyj2317++
		if yyhl2317 {
			yyb2317 = yyj2317 > l
		} else {
			yyb2317 = r.CheckBreak()
		}
		if yyb2317 {
			break
		}
		z.DecStructFieldNotFound(yyj2317-1, "")
	}
	r.ReadEnd()
}

func (x NodePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2326 := z.EncBinary()
	_ = yym2326
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2327 := z.DecBinary()
	_ = yym2327
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x NodeConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2328 := z.EncBinary()
	_ = yym2328
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2329 := z.DecBinary()
	_ = yym2329
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2330 := z.EncBinary()
		_ = yym2330
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2331 := !z.EncBinary()
			yy2arr2331 := z.EncBasicHandle().StructToArray
			var yyq2331 [6]bool
			_, _, _ = yysep2331, yyq2331, yy2arr2331
			const yyr2331 bool = false
			yyq2331[2] = true
			yyq2331[3] = true
			yyq2331[4] = x.Reason != ""
			yyq2331[5] = x.Message != ""
			if yyr2331 || yy2arr2331 {
				r.EncodeArrayStart(6)
			} else {
				var yynn2331 int = 2
				for _, b := range yyq2331 {
					if b {
						yynn2331++
					}
				}
				r.EncodeMapStart(yynn2331)
			}
			if yyr2331 || yy2arr2331 {
				x.Type.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				x.Type.CodecEncodeSelf(e)
			}
			if yyr2331 || yy2arr2331 {
				x.Status.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				x.Status.CodecEncodeSelf(e)
			}
			if yyr2331 || yy2arr2331 {
				if yyq2331[2] {
					yy2335 := &x.LastHeartbeatTime
					yym2336 := z.EncBinary()
					_ = yym2336
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2335) {
					} else if yym2336 {
						z.EncBinaryMarshal(yy2335)
					} else if !yym2336 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2335)
					} else {
						z.EncFallback(yy2335)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2331[2] {
					r.EncodeString(codecSelferC_UTF81234, string("lastHeartbeatTime"))
					yy2337 := &x.LastHeartbeatTime
					yym2338 := z.EncBinary()
					_ = yym2338
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2337) {
					} else if yym2338 {
						z.EncBinaryMarshal(yy2337)
					} else if !yym2338 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2337)
					} else {
						z.EncFallback(yy2337)
					}
				}
			}
			if yyr2331 || yy2arr2331 {
				if yyq2331[3] {
					yy2340 := &x.LastTransitionTime
					yym2341 := z.EncBinary()
					_ = yym2341
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2340) {
					} else if yym2341 {
						z.EncBinaryMarshal(yy2340)
					} else if !yym2341 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2340)
					} else {
						z.EncFallback(yy2340)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2331[3] {
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					yy2342 := &x.LastTransitionTime
					yym2343 := z.EncBinary()
					_ = yym2343
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2342) {
					} else if yym2343 {
						z.EncBinaryMarshal(yy2342)
					} else if !yym2343 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2342)
					} else {
						z.EncFallback(yy2342)
					}
				}
			}
			if yyr2331 || yy2arr2331 {
				if yyq2331[4] {
					yym2345 := z.EncBinary()
					_ = yym2345
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2331[4] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym2346 := z.EncBinary()
					_ = yym2346
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2331 || yy2arr2331 {
				if yyq2331[5] {
					yym2348 := z.EncBinary()
					_ = yym2348
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2331[5] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym2349 := z.EncBinary()
					_ = yym2349
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yysep2331 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2350 := z.DecBinary()
	_ = yym2350
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2351 := r.ReadMapStart()
			if yyl2351 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2351, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2351 := r.ReadArrayStart()
			if yyl2351 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2351, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2352Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2352Slc
	var yyhl2352 bool = l >= 0
	for yyj2352 := 0; ; yyj2352++ {
		if yyhl2352 {
			if yyj2352 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2352Slc = r.DecodeBytes(yys2352Slc, true, true)
		yys2352 := string(yys2352Slc)
		switch yys2352 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastHeartbeatTime":
			if r.TryDecodeAsNil() {
				x.LastHeartbeatTime = pkg2_unversioned.Time{}
			} else {
				yyv2355 := &x.LastHeartbeatTime
				yym2356 := z.DecBinary()
				_ = yym2356
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2355) {
				} else if yym2356 {
					z.DecBinaryUnmarshal(yyv2355)
				} else if !yym2356 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2355)
				} else {
					z.DecFallback(yyv2355, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv2357 := &x.LastTransitionTime
				yym2358 := z.DecBinary()
				_ = yym2358
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2357) {
				} else if yym2358 {
					z.DecBinaryUnmarshal(yyv2357)
				} else if !yym2358 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2357)
				} else {
					z.DecFallback(yyv2357, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2352)
		} // end switch yys2352
	} // end for yyj2352
	if !yyhl2352 {
		r.ReadEnd()
	}
}

func (x *NodeCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2361 int
	var yyb2361 bool
	var yyhl2361 bool = l >= 0
	yyj2361++
	if yyhl2361 {
		yyb2361 = yyj2361 > l
	} else {
		yyb2361 = r.CheckBreak()
	}
	if yyb2361 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeConditionType(r.DecodeString())
	}
	yyj2361++
	if yyhl2361 {
		yyb2361 = yyj2361 > l
	} else {
		yyb2361 = r.CheckBreak()
	}
	if yyb2361 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj2361++
	if yyhl2361 {
		yyb2361 = yyj2361 > l
	} else {
		yyb2361 = r.CheckBreak()
	}
	if yyb2361 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastHeartbeatTime = pkg2_unversioned.Time{}
	} else {
		yyv2364 := &x.LastHeartbeatTime
		yym2365 := z.DecBinary()
		_ = yym2365
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2364) {
		} else if yym2365 {
			z.DecBinaryUnmarshal(yyv2364)
		} else if !yym2365 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2364)
		} else {
			z.DecFallback(yyv2364, false)
		}
	}
	yyj2361++
	if yyhl2361 {
		yyb2361 = yyj2361 > l
	} else {
		yyb2361 = r.CheckBreak()
	}
	if yyb2361 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv2366 := &x.LastTransitionTime
		yym2367 := z.DecBinary()
		_ = yym2367
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2366) {
		} else if yym2367 {
			z.DecBinaryUnmarshal(yyv2366)
		} else if !yym2367 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2366)
		} else {
			z.DecFallback(yyv2366, false)
		}
	}
	yyj2361++
	if yyhl2361 {
		yyb2361 = yyj2361 > l
	} else {
		yyb2361 = r.CheckBreak()
	}
	if yyb2361 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2361++
	if yyhl2361 {
		yyb2361 = yyj2361 > l
	} else {
		yyb2361 = r.CheckBreak()
	}
	if yyb2361 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj2361++
		if yyhl2361 {
			yyb2361 = yyj2361 > l
		} else {
			yyb2361 = r.CheckBreak()
		}
		if yyb2361 {
			break
		}
		z.DecStructFieldNotFound(yyj2361-1, "")
	}
	r.ReadEnd()
}

func (x NodeAddressType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2370 := z.EncBinary()
	_ = yym2370
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeAddressType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2371 := z.DecBinary()
	_ = yym2371
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2372 := z.EncBinary()
		_ = yym2372
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2373 := !z.EncBinary()
			yy2arr2373 := z.EncBasicHandle().StructToArray
			var yyq2373 [2]bool
			_, _, _ = yysep2373, yyq2373, yy2arr2373
			const yyr2373 bool = false
			if yyr2373 || yy2arr2373 {
				r.EncodeArrayStart(2)
			} else {
				var yynn2373 int = 2
				for _, b := range yyq2373 {
					if b {
						yynn2373++
					}
				}
				r.EncodeMapStart(yynn2373)
			}
			if yyr2373 || yy2arr2373 {
				x.Type.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				x.Type.CodecEncodeSelf(e)
			}
			if yyr2373 || yy2arr2373 {
				yym2376 := z.EncBinary()
				_ = yym2376
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("address"))
				yym2377 := z.EncBinary()
				_ = yym2377
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			}
			if yysep2373 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2378 := z.DecBinary()
	_ = yym2378
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2379 := r.ReadMapStart()
			if yyl2379 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2379, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2379 := r.ReadArrayStart()
			if yyl2379 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2379, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2380Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2380Slc
	var yyhl2380 bool = l >= 0
	for yyj2380 := 0; ; yyj2380++ {
		if yyhl2380 {
			if yyj2380 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2380Slc = r.DecodeBytes(yys2380Slc, true, true)
		yys2380 := string(yys2380Slc)
		switch yys2380 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeAddressType(r.DecodeString())
			}
		case "address":
			if r.TryDecodeAsNil() {
				x.Address = ""
			} else {
				x.Address = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2380)
		} // end switch yys2380
	} // end for yyj2380
	if !yyhl2380 {
		r.ReadEnd()
	}
}

func (x *NodeAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2383 int
	var yyb2383 bool
	var yyhl2383 bool = l >= 0
	yyj2383++
	if yyhl2383 {
		yyb2383 = yyj2383 > l
	} else {
		yyb2383 = r.CheckBreak()
	}
	if yyb2383 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeAddressType(r.DecodeString())
	}
	yyj2383++
	if yyhl2383 {
		yyb2383 = yyj2383 > l
	} else {
		yyb2383 = r.CheckBreak()
	}
	if yyb2383 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Address = ""
	} else {
		x.Address = string(r.DecodeString())
	}
	for {
		yyj2383++
		if yyhl2383 {
			yyb2383 = yyj2383 > l
		} else {
			yyb2383 = r.CheckBreak()
		}
		if yyb2383 {
			break
		}
		z.DecStructFieldNotFound(yyj2383-1, "")
	}
	r.ReadEnd()
}

func (x ResourceName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2386 := z.EncBinary()
	_ = yym2386
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2387 := z.DecBinary()
	_ = yym2387
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2388 := z.EncBinary()
		_ = yym2388
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encResourceList((ResourceList)(x), e)
		}
	}
}

func (x *ResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2389 := z.DecBinary()
	_ = yym2389
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decResourceList((*ResourceList)(x), d)
	}
}

func (x *Node) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2390 := z.EncBinary()
		_ = yym2390
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2391 := !z.EncBinary()
			yy2arr2391 := z.EncBasicHandle().StructToArray
			var yyq2391 [5]bool
			_, _, _ = yysep2391, yyq2391, yy2arr2391
			const yyr2391 bool = false
			yyq2391[0] = x.Kind != ""
			yyq2391[1] = x.APIVersion != ""
			yyq2391[2] = true
			yyq2391[3] = true
			yyq2391[4] = true
			if yyr2391 || yy2arr2391 {
				r.EncodeArrayStart(5)
			} else {
				var yynn2391 int = 0
				for _, b := range yyq2391 {
					if b {
						yynn2391++
					}
				}
				r.EncodeMapStart(yynn2391)
			}
			if yyr2391 || yy2arr2391 {
				if yyq2391[0] {
					yym2393 := z.EncBinary()
					_ = yym2393
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2391[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2394 := z.EncBinary()
					_ = yym2394
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2391 || yy2arr2391 {
				if yyq2391[1] {
					yym2396 := z.EncBinary()
					_ = yym2396
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2391[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2397 := z.EncBinary()
					_ = yym2397
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2391 || yy2arr2391 {
				if yyq2391[2] {
					yy2399 := &x.ObjectMeta
					yy2399.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2391[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2400 := &x.ObjectMeta
					yy2400.CodecEncodeSelf(e)
				}
			}
			if yyr2391 || yy2arr2391 {
				if yyq2391[3] {
					yy2402 := &x.Spec
					yy2402.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2391[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy2403 := &x.Spec
					yy2403.CodecEncodeSelf(e)
				}
			}
			if yyr2391 || yy2arr2391 {
				if yyq2391[4] {
					yy2405 := &x.Status
					yy2405.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2391[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy2406 := &x.Status
					yy2406.CodecEncodeSelf(e)
				}
			}
			if yysep2391 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Node) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2407 := z.DecBinary()
	_ = yym2407
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2408 := r.ReadMapStart()
			if yyl2408 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2408, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2408 := r.ReadArrayStart()
			if yyl2408 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2408, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Node) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2409Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2409Slc
	var yyhl2409 bool = l >= 0
	for yyj2409 := 0; ; yyj2409++ {
		if yyhl2409 {
			if yyj2409 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2409Slc = r.DecodeBytes(yys2409Slc, true, true)
		yys2409 := string(yys2409Slc)
		switch yys2409 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2412 := &x.ObjectMeta
				yyv2412.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NodeSpec{}
			} else {
				yyv2413 := &x.Spec
				yyv2413.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NodeStatus{}
			} else {
				yyv2414 := &x.Status
				yyv2414.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2409)
		} // end switch yys2409
	} // end for yyj2409
	if !yyhl2409 {
		r.ReadEnd()
	}
}

func (x *Node) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2415 int
	var yyb2415 bool
	var yyhl2415 bool = l >= 0
	yyj2415++
	if yyhl2415 {
		yyb2415 = yyj2415 > l
	} else {
		yyb2415 = r.CheckBreak()
	}
	if yyb2415 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2415++
	if yyhl2415 {
		yyb2415 = yyj2415 > l
	} else {
		yyb2415 = r.CheckBreak()
	}
	if yyb2415 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2415++
	if yyhl2415 {
		yyb2415 = yyj2415 > l
	} else {
		yyb2415 = r.CheckBreak()
	}
	if yyb2415 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2418 := &x.ObjectMeta
		yyv2418.CodecDecodeSelf(d)
	}
	yyj2415++
	if yyhl2415 {
		yyb2415 = yyj2415 > l
	} else {
		yyb2415 = r.CheckBreak()
	}
	if yyb2415 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = NodeSpec{}
	} else {
		yyv2419 := &x.Spec
		yyv2419.CodecDecodeSelf(d)
	}
	yyj2415++
	if yyhl2415 {
		yyb2415 = yyj2415 > l
	} else {
		yyb2415 = r.CheckBreak()
	}
	if yyb2415 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = NodeStatus{}
	} else {
		yyv2420 := &x.Status
		yyv2420.CodecDecodeSelf(d)
	}
	for {
		yyj2415++
		if yyhl2415 {
			yyb2415 = yyj2415 > l
		} else {
			yyb2415 = r.CheckBreak()
		}
		if yyb2415 {
			break
		}
		z.DecStructFieldNotFound(yyj2415-1, "")
	}
	r.ReadEnd()
}

func (x *NodeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2421 := z.EncBinary()
		_ = yym2421
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2422 := !z.EncBinary()
			yy2arr2422 := z.EncBasicHandle().StructToArray
			var yyq2422 [4]bool
			_, _, _ = yysep2422, yyq2422, yy2arr2422
			const yyr2422 bool = false
			yyq2422[0] = x.Kind != ""
			yyq2422[1] = x.APIVersion != ""
			yyq2422[2] = true
			if yyr2422 || yy2arr2422 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2422 int = 1
				for _, b := range yyq2422 {
					if b {
						yynn2422++
					}
				}
				r.EncodeMapStart(yynn2422)
			}
			if yyr2422 || yy2arr2422 {
				if yyq2422[0] {
					yym2424 := z.EncBinary()
					_ = yym2424
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2422[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2425 := z.EncBinary()
					_ = yym2425
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2422 || yy2arr2422 {
				if yyq2422[1] {
					yym2427 := z.EncBinary()
					_ = yym2427
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2422[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2428 := z.EncBinary()
					_ = yym2428
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2422 || yy2arr2422 {
				if yyq2422[2] {
					yy2430 := &x.ListMeta
					yym2431 := z.EncBinary()
					_ = yym2431
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2430) {
					} else {
						z.EncFallback(yy2430)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2422[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2432 := &x.ListMeta
					yym2433 := z.EncBinary()
					_ = yym2433
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2432) {
					} else {
						z.EncFallback(yy2432)
					}
				}
			}
			if yyr2422 || yy2arr2422 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2435 := z.EncBinary()
					_ = yym2435
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2436 := z.EncBinary()
					_ = yym2436
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			}
			if yysep2422 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2437 := z.DecBinary()
	_ = yym2437
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2438 := r.ReadMapStart()
			if yyl2438 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2438, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2438 := r.ReadArrayStart()
			if yyl2438 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2438, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2439Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2439Slc
	var yyhl2439 bool = l >= 0
	for yyj2439 := 0; ; yyj2439++ {
		if yyhl2439 {
			if yyj2439 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2439Slc = r.DecodeBytes(yys2439Slc, true, true)
		yys2439 := string(yys2439Slc)
		switch yys2439 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2442 := &x.ListMeta
				yym2443 := z.DecBinary()
				_ = yym2443
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2442) {
				} else {
					z.DecFallback(yyv2442, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2444 := &x.Items
				yym2445 := z.DecBinary()
				_ = yym2445
				if false {
				} else {
					h.decSliceNode((*[]Node)(yyv2444), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2439)
		} // end switch yys2439
	} // end for yyj2439
	if !yyhl2439 {
		r.ReadEnd()
	}
}

func (x *NodeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2446 int
	var yyb2446 bool
	var yyhl2446 bool = l >= 0
	yyj2446++
	if yyhl2446 {
		yyb2446 = yyj2446 > l
	} else {
		yyb2446 = r.CheckBreak()
	}
	if yyb2446 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2446++
	if yyhl2446 {
		yyb2446 = yyj2446 > l
	} else {
		yyb2446 = r.CheckBreak()
	}
	if yyb2446 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2446++
	if yyhl2446 {
		yyb2446 = yyj2446 > l
	} else {
		yyb2446 = r.CheckBreak()
	}
	if yyb2446 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2449 := &x.ListMeta
		yym2450 := z.DecBinary()
		_ = yym2450
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2449) {
		} else {
			z.DecFallback(yyv2449, false)
		}
	}
	yyj2446++
	if yyhl2446 {
		yyb2446 = yyj2446 > l
	} else {
		yyb2446 = r.CheckBreak()
	}
	if yyb2446 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2451 := &x.Items
		yym2452 := z.DecBinary()
		_ = yym2452
		if false {
		} else {
			h.decSliceNode((*[]Node)(yyv2451), d)
		}
	}
	for {
		yyj2446++
		if yyhl2446 {
			yyb2446 = yyj2446 > l
		} else {
			yyb2446 = r.CheckBreak()
		}
		if yyb2446 {
			break
		}
		z.DecStructFieldNotFound(yyj2446-1, "")
	}
	r.ReadEnd()
}

func (x FinalizerName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2453 := z.EncBinary()
	_ = yym2453
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *FinalizerName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2454 := z.DecBinary()
	_ = yym2454
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NamespaceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2455 := z.EncBinary()
		_ = yym2455
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2456 := !z.EncBinary()
			yy2arr2456 := z.EncBasicHandle().StructToArray
			var yyq2456 [2]bool
			_, _, _ = yysep2456, yyq2456, yy2arr2456
			const yyr2456 bool = false
			yyq2456[0] = len(x.Finalizers) != 0
			yyq2456[1] = x.Network != ""
			if yyr2456 || yy2arr2456 {
				r.EncodeArrayStart(2)
			} else {
				var yynn2456 int = 0
				for _, b := range yyq2456 {
					if b {
						yynn2456++
					}
				}
				r.EncodeMapStart(yynn2456)
			}
			if yyr2456 || yy2arr2456 {
				if yyq2456[0] {
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym2458 := z.EncBinary()
						_ = yym2458
						if false {
						} else {
							h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2456[0] {
					r.EncodeString(codecSelferC_UTF81234, string("finalizers"))
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym2459 := z.EncBinary()
						_ = yym2459
						if false {
						} else {
							h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
						}
					}
				}
			}
			if yyr2456 || yy2arr2456 {
				if yyq2456[1] {
					yym2461 := z.EncBinary()
					_ = yym2461
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Network))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2456[1] {
					r.EncodeString(codecSelferC_UTF81234, string("network"))
					yym2462 := z.EncBinary()
					_ = yym2462
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Network))
					}
				}
			}
			if yysep2456 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NamespaceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2463 := z.DecBinary()
	_ = yym2463
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2464 := r.ReadMapStart()
			if yyl2464 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2464, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2464 := r.ReadArrayStart()
			if yyl2464 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2464, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2465Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2465Slc
	var yyhl2465 bool = l >= 0
	for yyj2465 := 0; ; yyj2465++ {
		if yyhl2465 {
			if yyj2465 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2465Slc = r.DecodeBytes(yys2465Slc, true, true)
		yys2465 := string(yys2465Slc)
		switch yys2465 {
		case "finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv2466 := &x.Finalizers
				yym2467 := z.DecBinary()
				_ = yym2467
				if false {
				} else {
					h.decSliceFinalizerName((*[]FinalizerName)(yyv2466), d)
				}
			}
		case "network":
			if r.TryDecodeAsNil() {
				x.Network = ""
			} else {
				x.Network = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2465)
		} // end switch yys2465
	} // end for yyj2465
	if !yyhl2465 {
		r.ReadEnd()
	}
}

func (x *NamespaceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2469 int
	var yyb2469 bool
	var yyhl2469 bool = l >= 0
	yyj2469++
	if yyhl2469 {
		yyb2469 = yyj2469 > l
	} else {
		yyb2469 = r.CheckBreak()
	}
	if yyb2469 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv2470 := &x.Finalizers
		yym2471 := z.DecBinary()
		_ = yym2471
		if false {
		} else {
			h.decSliceFinalizerName((*[]FinalizerName)(yyv2470), d)
		}
	}
	yyj2469++
	if yyhl2469 {
		yyb2469 = yyj2469 > l
	} else {
		yyb2469 = r.CheckBreak()
	}
	if yyb2469 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Network = ""
	} else {
		x.Network = string(r.DecodeString())
	}
	for {
		yyj2469++
		if yyhl2469 {
			yyb2469 = yyj2469 > l
		} else {
			yyb2469 = r.CheckBreak()
		}
		if yyb2469 {
			break
		}
		z.DecStructFieldNotFound(yyj2469-1, "")
	}
	r.ReadEnd()
}

func (x *NamespaceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2473 := z.EncBinary()
		_ = yym2473
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2474 := !z.EncBinary()
			yy2arr2474 := z.EncBasicHandle().StructToArray
			var yyq2474 [1]bool
			_, _, _ = yysep2474, yyq2474, yy2arr2474
			const yyr2474 bool = false
			yyq2474[0] = x.Phase != ""
			if yyr2474 || yy2arr2474 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2474 int = 0
				for _, b := range yyq2474 {
					if b {
						yynn2474++
					}
				}
				r.EncodeMapStart(yynn2474)
			}
			if yyr2474 || yy2arr2474 {
				if yyq2474[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2474[0] {
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yysep2474 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NamespaceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2476 := z.DecBinary()
	_ = yym2476
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2477 := r.ReadMapStart()
			if yyl2477 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2477, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2477 := r.ReadArrayStart()
			if yyl2477 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2477, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2478Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2478Slc
	var yyhl2478 bool = l >= 0
	for yyj2478 := 0; ; yyj2478++ {
		if yyhl2478 {
			if yyj2478 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2478Slc = r.DecodeBytes(yys2478Slc, true, true)
		yys2478 := string(yys2478Slc)
		switch yys2478 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NamespacePhase(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2478)
		} // end switch yys2478
	} // end for yyj2478
	if !yyhl2478 {
		r.ReadEnd()
	}
}

func (x *NamespaceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2480 int
	var yyb2480 bool
	var yyhl2480 bool = l >= 0
	yyj2480++
	if yyhl2480 {
		yyb2480 = yyj2480 > l
	} else {
		yyb2480 = r.CheckBreak()
	}
	if yyb2480 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NamespacePhase(r.DecodeString())
	}
	for {
		yyj2480++
		if yyhl2480 {
			yyb2480 = yyj2480 > l
		} else {
			yyb2480 = r.CheckBreak()
		}
		if yyb2480 {
			break
		}
		z.DecStructFieldNotFound(yyj2480-1, "")
	}
	r.ReadEnd()
}

func (x NamespacePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2482 := z.EncBinary()
	_ = yym2482
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NamespacePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2483 := z.DecBinary()
	_ = yym2483
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Namespace) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2484 := z.EncBinary()
		_ = yym2484
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2485 := !z.EncBinary()
			yy2arr2485 := z.EncBasicHandle().StructToArray
			var yyq2485 [5]bool
			_, _, _ = yysep2485, yyq2485, yy2arr2485
			const yyr2485 bool = false
			yyq2485[0] = x.Kind != ""
			yyq2485[1] = x.APIVersion != ""
			yyq2485[2] = true
			yyq2485[3] = true
			yyq2485[4] = true
			if yyr2485 || yy2arr2485 {
				r.EncodeArrayStart(5)
			} else {
				var yynn2485 int = 0
				for _, b := range yyq2485 {
					if b {
						yynn2485++
					}
				}
				r.EncodeMapStart(yynn2485)
			}
			if yyr2485 || yy2arr2485 {
				if yyq2485[0] {
					yym2487 := z.EncBinary()
					_ = yym2487
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2485[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2488 := z.EncBinary()
					_ = yym2488
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2485 || yy2arr2485 {
				if yyq2485[1] {
					yym2490 := z.EncBinary()
					_ = yym2490
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2485[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2491 := z.EncBinary()
					_ = yym2491
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2485 || yy2arr2485 {
				if yyq2485[2] {
					yy2493 := &x.ObjectMeta
					yy2493.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2485[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2494 := &x.ObjectMeta
					yy2494.CodecEncodeSelf(e)
				}
			}
			if yyr2485 || yy2arr2485 {
				if yyq2485[3] {
					yy2496 := &x.Spec
					yy2496.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2485[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy2497 := &x.Spec
					yy2497.CodecEncodeSelf(e)
				}
			}
			if yyr2485 || yy2arr2485 {
				if yyq2485[4] {
					yy2499 := &x.Status
					yy2499.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2485[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy2500 := &x.Status
					yy2500.CodecEncodeSelf(e)
				}
			}
			if yysep2485 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Namespace) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2501 := z.DecBinary()
	_ = yym2501
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2502 := r.ReadMapStart()
			if yyl2502 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2502, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2502 := r.ReadArrayStart()
			if yyl2502 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2502, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Namespace) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2503Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2503Slc
	var yyhl2503 bool = l >= 0
	for yyj2503 := 0; ; yyj2503++ {
		if yyhl2503 {
			if yyj2503 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2503Slc = r.DecodeBytes(yys2503Slc, true, true)
		yys2503 := string(yys2503Slc)
		switch yys2503 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2506 := &x.ObjectMeta
				yyv2506.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NamespaceSpec{}
			} else {
				yyv2507 := &x.Spec
				yyv2507.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NamespaceStatus{}
			} else {
				yyv2508 := &x.Status
				yyv2508.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2503)
		} // end switch yys2503
	} // end for yyj2503
	if !yyhl2503 {
		r.ReadEnd()
	}
}

func (x *Namespace) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2509 int
	var yyb2509 bool
	var yyhl2509 bool = l >= 0
	yyj2509++
	if yyhl2509 {
		yyb2509 = yyj2509 > l
	} else {
		yyb2509 = r.CheckBreak()
	}
	if yyb2509 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2509++
	if yyhl2509 {
		yyb2509 = yyj2509 > l
	} else {
		yyb2509 = r.CheckBreak()
	}
	if yyb2509 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2509++
	if yyhl2509 {
		yyb2509 = yyj2509 > l
	} else {
		yyb2509 = r.CheckBreak()
	}
	if yyb2509 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2512 := &x.ObjectMeta
		yyv2512.CodecDecodeSelf(d)
	}
	yyj2509++
	if yyhl2509 {
		yyb2509 = yyj2509 > l
	} else {
		yyb2509 = r.CheckBreak()
	}
	if yyb2509 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = NamespaceSpec{}
	} else {
		yyv2513 := &x.Spec
		yyv2513.CodecDecodeSelf(d)
	}
	yyj2509++
	if yyhl2509 {
		yyb2509 = yyj2509 > l
	} else {
		yyb2509 = r.CheckBreak()
	}
	if yyb2509 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = NamespaceStatus{}
	} else {
		yyv2514 := &x.Status
		yyv2514.CodecDecodeSelf(d)
	}
	for {
		yyj2509++
		if yyhl2509 {
			yyb2509 = yyj2509 > l
		} else {
			yyb2509 = r.CheckBreak()
		}
		if yyb2509 {
			break
		}
		z.DecStructFieldNotFound(yyj2509-1, "")
	}
	r.ReadEnd()
}

func (x *NamespaceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2515 := z.EncBinary()
		_ = yym2515
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2516 := !z.EncBinary()
			yy2arr2516 := z.EncBasicHandle().StructToArray
			var yyq2516 [4]bool
			_, _, _ = yysep2516, yyq2516, yy2arr2516
			const yyr2516 bool = false
			yyq2516[0] = x.Kind != ""
			yyq2516[1] = x.APIVersion != ""
			yyq2516[2] = true
			if yyr2516 || yy2arr2516 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2516 int = 1
				for _, b := range yyq2516 {
					if b {
						yynn2516++
					}
				}
				r.EncodeMapStart(yynn2516)
			}
			if yyr2516 || yy2arr2516 {
				if yyq2516[0] {
					yym2518 := z.EncBinary()
					_ = yym2518
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2516[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2519 := z.EncBinary()
					_ = yym2519
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2516 || yy2arr2516 {
				if yyq2516[1] {
					yym2521 := z.EncBinary()
					_ = yym2521
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2516[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2522 := z.EncBinary()
					_ = yym2522
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2516 || yy2arr2516 {
				if yyq2516[2] {
					yy2524 := &x.ListMeta
					yym2525 := z.EncBinary()
					_ = yym2525
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2524) {
					} else {
						z.EncFallback(yy2524)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2516[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2526 := &x.ListMeta
					yym2527 := z.EncBinary()
					_ = yym2527
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2526) {
					} else {
						z.EncFallback(yy2526)
					}
				}
			}
			if yyr2516 || yy2arr2516 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2529 := z.EncBinary()
					_ = yym2529
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2530 := z.EncBinary()
					_ = yym2530
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			}
			if yysep2516 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NamespaceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2531 := z.DecBinary()
	_ = yym2531
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2532 := r.ReadMapStart()
			if yyl2532 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2532, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2532 := r.ReadArrayStart()
			if yyl2532 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2532, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2533Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2533Slc
	var yyhl2533 bool = l >= 0
	for yyj2533 := 0; ; yyj2533++ {
		if yyhl2533 {
			if yyj2533 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2533Slc = r.DecodeBytes(yys2533Slc, true, true)
		yys2533 := string(yys2533Slc)
		switch yys2533 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2536 := &x.ListMeta
				yym2537 := z.DecBinary()
				_ = yym2537
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2536) {
				} else {
					z.DecFallback(yyv2536, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2538 := &x.Items
				yym2539 := z.DecBinary()
				_ = yym2539
				if false {
				} else {
					h.decSliceNamespace((*[]Namespace)(yyv2538), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2533)
		} // end switch yys2533
	} // end for yyj2533
	if !yyhl2533 {
		r.ReadEnd()
	}
}

func (x *NamespaceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2540 int
	var yyb2540 bool
	var yyhl2540 bool = l >= 0
	yyj2540++
	if yyhl2540 {
		yyb2540 = yyj2540 > l
	} else {
		yyb2540 = r.CheckBreak()
	}
	if yyb2540 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2540++
	if yyhl2540 {
		yyb2540 = yyj2540 > l
	} else {
		yyb2540 = r.CheckBreak()
	}
	if yyb2540 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2540++
	if yyhl2540 {
		yyb2540 = yyj2540 > l
	} else {
		yyb2540 = r.CheckBreak()
	}
	if yyb2540 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2543 := &x.ListMeta
		yym2544 := z.DecBinary()
		_ = yym2544
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2543) {
		} else {
			z.DecFallback(yyv2543, false)
		}
	}
	yyj2540++
	if yyhl2540 {
		yyb2540 = yyj2540 > l
	} else {
		yyb2540 = r.CheckBreak()
	}
	if yyb2540 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2545 := &x.Items
		yym2546 := z.DecBinary()
		_ = yym2546
		if false {
		} else {
			h.decSliceNamespace((*[]Namespace)(yyv2545), d)
		}
	}
	for {
		yyj2540++
		if yyhl2540 {
			yyb2540 = yyj2540 > l
		} else {
			yyb2540 = r.CheckBreak()
		}
		if yyb2540 {
			break
		}
		z.DecStructFieldNotFound(yyj2540-1, "")
	}
	r.ReadEnd()
}

func (x *NetworkStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2547 := z.EncBinary()
		_ = yym2547
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2548 := !z.EncBinary()
			yy2arr2548 := z.EncBasicHandle().StructToArray
			var yyq2548 [1]bool
			_, _, _ = yysep2548, yyq2548, yy2arr2548
			const yyr2548 bool = false
			yyq2548[0] = x.Phase != ""
			if yyr2548 || yy2arr2548 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2548 int = 0
				for _, b := range yyq2548 {
					if b {
						yynn2548++
					}
				}
				r.EncodeMapStart(yynn2548)
			}
			if yyr2548 || yy2arr2548 {
				if yyq2548[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2548[0] {
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yysep2548 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NetworkStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2550 := z.DecBinary()
	_ = yym2550
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2551 := r.ReadMapStart()
			if yyl2551 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2551, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2551 := r.ReadArrayStart()
			if yyl2551 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2551, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NetworkStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2552Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2552Slc
	var yyhl2552 bool = l >= 0
	for yyj2552 := 0; ; yyj2552++ {
		if yyhl2552 {
			if yyj2552 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2552Slc = r.DecodeBytes(yys2552Slc, true, true)
		yys2552 := string(yys2552Slc)
		switch yys2552 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NetworkPhase(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2552)
		} // end switch yys2552
	} // end for yyj2552
	if !yyhl2552 {
		r.ReadEnd()
	}
}

func (x *NetworkStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2554 int
	var yyb2554 bool
	var yyhl2554 bool = l >= 0
	yyj2554++
	if yyhl2554 {
		yyb2554 = yyj2554 > l
	} else {
		yyb2554 = r.CheckBreak()
	}
	if yyb2554 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NetworkPhase(r.DecodeString())
	}
	for {
		yyj2554++
		if yyhl2554 {
			yyb2554 = yyj2554 > l
		} else {
			yyb2554 = r.CheckBreak()
		}
		if yyb2554 {
			break
		}
		z.DecStructFieldNotFound(yyj2554-1, "")
	}
	r.ReadEnd()
}

func (x NetworkPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2556 := z.EncBinary()
	_ = yym2556
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NetworkPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2557 := z.DecBinary()
	_ = yym2557
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Subnet) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2558 := z.EncBinary()
		_ = yym2558
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2559 := !z.EncBinary()
			yy2arr2559 := z.EncBasicHandle().StructToArray
			var yyq2559 [2]bool
			_, _, _ = yysep2559, yyq2559, yy2arr2559
			const yyr2559 bool = false
			if yyr2559 || yy2arr2559 {
				r.EncodeArrayStart(2)
			} else {
				var yynn2559 int = 2
				for _, b := range yyq2559 {
					if b {
						yynn2559++
					}
				}
				r.EncodeMapStart(yynn2559)
			}
			if yyr2559 || yy2arr2559 {
				yym2561 := z.EncBinary()
				_ = yym2561
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.CIDR))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("cidr"))
				yym2562 := z.EncBinary()
				_ = yym2562
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.CIDR))
				}
			}
			if yyr2559 || yy2arr2559 {
				yym2564 := z.EncBinary()
				_ = yym2564
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Gateway))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("gateway"))
				yym2565 := z.EncBinary()
				_ = yym2565
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Gateway))
				}
			}
			if yysep2559 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Subnet) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2566 := z.DecBinary()
	_ = yym2566
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2567 := r.ReadMapStart()
			if yyl2567 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2567, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2567 := r.ReadArrayStart()
			if yyl2567 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2567, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Subnet) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2568Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2568Slc
	var yyhl2568 bool = l >= 0
	for yyj2568 := 0; ; yyj2568++ {
		if yyhl2568 {
			if yyj2568 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2568Slc = r.DecodeBytes(yys2568Slc, true, true)
		yys2568 := string(yys2568Slc)
		switch yys2568 {
		case "cidr":
			if r.TryDecodeAsNil() {
				x.CIDR = ""
			} else {
				x.CIDR = string(r.DecodeString())
			}
		case "gateway":
			if r.TryDecodeAsNil() {
				x.Gateway = ""
			} else {
				x.Gateway = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2568)
		} // end switch yys2568
	} // end for yyj2568
	if !yyhl2568 {
		r.ReadEnd()
	}
}

func (x *Subnet) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2571 int
	var yyb2571 bool
	var yyhl2571 bool = l >= 0
	yyj2571++
	if yyhl2571 {
		yyb2571 = yyj2571 > l
	} else {
		yyb2571 = r.CheckBreak()
	}
	if yyb2571 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.CIDR = ""
	} else {
		x.CIDR = string(r.DecodeString())
	}
	yyj2571++
	if yyhl2571 {
		yyb2571 = yyj2571 > l
	} else {
		yyb2571 = r.CheckBreak()
	}
	if yyb2571 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Gateway = ""
	} else {
		x.Gateway = string(r.DecodeString())
	}
	for {
		yyj2571++
		if yyhl2571 {
			yyb2571 = yyj2571 > l
		} else {
			yyb2571 = r.CheckBreak()
		}
		if yyb2571 {
			break
		}
		z.DecStructFieldNotFound(yyj2571-1, "")
	}
	r.ReadEnd()
}

func (x *NetworkSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2574 := z.EncBinary()
		_ = yym2574
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2575 := !z.EncBinary()
			yy2arr2575 := z.EncBasicHandle().StructToArray
			var yyq2575 [2]bool
			_, _, _ = yysep2575, yyq2575, yy2arr2575
			const yyr2575 bool = false
			yyq2575[0] = len(x.Subnets) != 0
			yyq2575[1] = x.ProviderNetworkID != ""
			if yyr2575 || yy2arr2575 {
				r.EncodeArrayStart(2)
			} else {
				var yynn2575 int = 0
				for _, b := range yyq2575 {
					if b {
						yynn2575++
					}
				}
				r.EncodeMapStart(yynn2575)
			}
			if yyr2575 || yy2arr2575 {
				if yyq2575[0] {
					if x.Subnets == nil {
						r.EncodeNil()
					} else {
						yym2577 := z.EncBinary()
						_ = yym2577
						if false {
						} else {
							h.encMapstringSubnet((map[string]Subnet)(x.Subnets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2575[0] {
					r.EncodeString(codecSelferC_UTF81234, string("subnets"))
					if x.Subnets == nil {
						r.EncodeNil()
					} else {
						yym2578 := z.EncBinary()
						_ = yym2578
						if false {
						} else {
							h.encMapstringSubnet((map[string]Subnet)(x.Subnets), e)
						}
					}
				}
			}
			if yyr2575 || yy2arr2575 {
				if yyq2575[1] {
					yym2580 := z.EncBinary()
					_ = yym2580
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderNetworkID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2575[1] {
					r.EncodeString(codecSelferC_UTF81234, string("providerNetworkID"))
					yym2581 := z.EncBinary()
					_ = yym2581
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderNetworkID))
					}
				}
			}
			if yysep2575 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NetworkSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2582 := z.DecBinary()
	_ = yym2582
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2583 := r.ReadMapStart()
			if yyl2583 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2583, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2583 := r.ReadArrayStart()
			if yyl2583 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2583, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NetworkSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2584Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2584Slc
	var yyhl2584 bool = l >= 0
	for yyj2584 := 0; ; yyj2584++ {
		if yyhl2584 {
			if yyj2584 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2584Slc = r.DecodeBytes(yys2584Slc, true, true)
		yys2584 := string(yys2584Slc)
		switch yys2584 {
		case "subnets":
			if r.TryDecodeAsNil() {
				x.Subnets = nil
			} else {
				yyv2585 := &x.Subnets
				yym2586 := z.DecBinary()
				_ = yym2586
				if false {
				} else {
					h.decMapstringSubnet((*map[string]Subnet)(yyv2585), d)
				}
			}
		case "providerNetworkID":
			if r.TryDecodeAsNil() {
				x.ProviderNetworkID = ""
			} else {
				x.ProviderNetworkID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2584)
		} // end switch yys2584
	} // end for yyj2584
	if !yyhl2584 {
		r.ReadEnd()
	}
}

func (x *NetworkSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2588 int
	var yyb2588 bool
	var yyhl2588 bool = l >= 0
	yyj2588++
	if yyhl2588 {
		yyb2588 = yyj2588 > l
	} else {
		yyb2588 = r.CheckBreak()
	}
	if yyb2588 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Subnets = nil
	} else {
		yyv2589 := &x.Subnets
		yym2590 := z.DecBinary()
		_ = yym2590
		if false {
		} else {
			h.decMapstringSubnet((*map[string]Subnet)(yyv2589), d)
		}
	}
	yyj2588++
	if yyhl2588 {
		yyb2588 = yyj2588 > l
	} else {
		yyb2588 = r.CheckBreak()
	}
	if yyb2588 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ProviderNetworkID = ""
	} else {
		x.ProviderNetworkID = string(r.DecodeString())
	}
	for {
		yyj2588++
		if yyhl2588 {
			yyb2588 = yyj2588 > l
		} else {
			yyb2588 = r.CheckBreak()
		}
		if yyb2588 {
			break
		}
		z.DecStructFieldNotFound(yyj2588-1, "")
	}
	r.ReadEnd()
}

func (x *Network) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2592 := z.EncBinary()
		_ = yym2592
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2593 := !z.EncBinary()
			yy2arr2593 := z.EncBasicHandle().StructToArray
			var yyq2593 [5]bool
			_, _, _ = yysep2593, yyq2593, yy2arr2593
			const yyr2593 bool = false
			yyq2593[0] = x.Kind != ""
			yyq2593[1] = x.APIVersion != ""
			yyq2593[2] = true
			yyq2593[3] = true
			yyq2593[4] = true
			if yyr2593 || yy2arr2593 {
				r.EncodeArrayStart(5)
			} else {
				var yynn2593 int = 0
				for _, b := range yyq2593 {
					if b {
						yynn2593++
					}
				}
				r.EncodeMapStart(yynn2593)
			}
			if yyr2593 || yy2arr2593 {
				if yyq2593[0] {
					yym2595 := z.EncBinary()
					_ = yym2595
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2593[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2596 := z.EncBinary()
					_ = yym2596
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2593 || yy2arr2593 {
				if yyq2593[1] {
					yym2598 := z.EncBinary()
					_ = yym2598
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2593[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2599 := z.EncBinary()
					_ = yym2599
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2593 || yy2arr2593 {
				if yyq2593[2] {
					yy2601 := &x.ObjectMeta
					yy2601.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2593[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2602 := &x.ObjectMeta
					yy2602.CodecEncodeSelf(e)
				}
			}
			if yyr2593 || yy2arr2593 {
				if yyq2593[3] {
					yy2604 := &x.Spec
					yy2604.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2593[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy2605 := &x.Spec
					yy2605.CodecEncodeSelf(e)
				}
			}
			if yyr2593 || yy2arr2593 {
				if yyq2593[4] {
					yy2607 := &x.Status
					yy2607.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2593[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy2608 := &x.Status
					yy2608.CodecEncodeSelf(e)
				}
			}
			if yysep2593 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Network) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2609 := z.DecBinary()
	_ = yym2609
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2610 := r.ReadMapStart()
			if yyl2610 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2610, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2610 := r.ReadArrayStart()
			if yyl2610 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2610, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Network) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2611Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2611Slc
	var yyhl2611 bool = l >= 0
	for yyj2611 := 0; ; yyj2611++ {
		if yyhl2611 {
			if yyj2611 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2611Slc = r.DecodeBytes(yys2611Slc, true, true)
		yys2611 := string(yys2611Slc)
		switch yys2611 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2614 := &x.ObjectMeta
				yyv2614.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NetworkSpec{}
			} else {
				yyv2615 := &x.Spec
				yyv2615.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NetworkStatus{}
			} else {
				yyv2616 := &x.Status
				yyv2616.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2611)
		} // end switch yys2611
	} // end for yyj2611
	if !yyhl2611 {
		r.ReadEnd()
	}
}

func (x *Network) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2617 int
	var yyb2617 bool
	var yyhl2617 bool = l >= 0
	yyj2617++
	if yyhl2617 {
		yyb2617 = yyj2617 > l
	} else {
		yyb2617 = r.CheckBreak()
	}
	if yyb2617 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2617++
	if yyhl2617 {
		yyb2617 = yyj2617 > l
	} else {
		yyb2617 = r.CheckBreak()
	}
	if yyb2617 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2617++
	if yyhl2617 {
		yyb2617 = yyj2617 > l
	} else {
		yyb2617 = r.CheckBreak()
	}
	if yyb2617 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2620 := &x.ObjectMeta
		yyv2620.CodecDecodeSelf(d)
	}
	yyj2617++
	if yyhl2617 {
		yyb2617 = yyj2617 > l
	} else {
		yyb2617 = r.CheckBreak()
	}
	if yyb2617 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = NetworkSpec{}
	} else {
		yyv2621 := &x.Spec
		yyv2621.CodecDecodeSelf(d)
	}
	yyj2617++
	if yyhl2617 {
		yyb2617 = yyj2617 > l
	} else {
		yyb2617 = r.CheckBreak()
	}
	if yyb2617 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = NetworkStatus{}
	} else {
		yyv2622 := &x.Status
		yyv2622.CodecDecodeSelf(d)
	}
	for {
		yyj2617++
		if yyhl2617 {
			yyb2617 = yyj2617 > l
		} else {
			yyb2617 = r.CheckBreak()
		}
		if yyb2617 {
			break
		}
		z.DecStructFieldNotFound(yyj2617-1, "")
	}
	r.ReadEnd()
}

func (x *NetworkList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2623 := z.EncBinary()
		_ = yym2623
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2624 := !z.EncBinary()
			yy2arr2624 := z.EncBasicHandle().StructToArray
			var yyq2624 [4]bool
			_, _, _ = yysep2624, yyq2624, yy2arr2624
			const yyr2624 bool = false
			yyq2624[0] = x.Kind != ""
			yyq2624[1] = x.APIVersion != ""
			yyq2624[2] = true
			if yyr2624 || yy2arr2624 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2624 int = 1
				for _, b := range yyq2624 {
					if b {
						yynn2624++
					}
				}
				r.EncodeMapStart(yynn2624)
			}
			if yyr2624 || yy2arr2624 {
				if yyq2624[0] {
					yym2626 := z.EncBinary()
					_ = yym2626
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2624[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2627 := z.EncBinary()
					_ = yym2627
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2624 || yy2arr2624 {
				if yyq2624[1] {
					yym2629 := z.EncBinary()
					_ = yym2629
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2624[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2630 := z.EncBinary()
					_ = yym2630
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2624 || yy2arr2624 {
				if yyq2624[2] {
					yy2632 := &x.ListMeta
					yym2633 := z.EncBinary()
					_ = yym2633
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2632) {
					} else {
						z.EncFallback(yy2632)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2624[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2634 := &x.ListMeta
					yym2635 := z.EncBinary()
					_ = yym2635
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2634) {
					} else {
						z.EncFallback(yy2634)
					}
				}
			}
			if yyr2624 || yy2arr2624 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2637 := z.EncBinary()
					_ = yym2637
					if false {
					} else {
						h.encSliceNetwork(([]Network)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2638 := z.EncBinary()
					_ = yym2638
					if false {
					} else {
						h.encSliceNetwork(([]Network)(x.Items), e)
					}
				}
			}
			if yysep2624 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NetworkList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2639 := z.DecBinary()
	_ = yym2639
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2640 := r.ReadMapStart()
			if yyl2640 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2640, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2640 := r.ReadArrayStart()
			if yyl2640 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2640, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NetworkList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2641Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2641Slc
	var yyhl2641 bool = l >= 0
	for yyj2641 := 0; ; yyj2641++ {
		if yyhl2641 {
			if yyj2641 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2641Slc = r.DecodeBytes(yys2641Slc, true, true)
		yys2641 := string(yys2641Slc)
		switch yys2641 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2644 := &x.ListMeta
				yym2645 := z.DecBinary()
				_ = yym2645
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2644) {
				} else {
					z.DecFallback(yyv2644, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2646 := &x.Items
				yym2647 := z.DecBinary()
				_ = yym2647
				if false {
				} else {
					h.decSliceNetwork((*[]Network)(yyv2646), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2641)
		} // end switch yys2641
	} // end for yyj2641
	if !yyhl2641 {
		r.ReadEnd()
	}
}

func (x *NetworkList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2648 int
	var yyb2648 bool
	var yyhl2648 bool = l >= 0
	yyj2648++
	if yyhl2648 {
		yyb2648 = yyj2648 > l
	} else {
		yyb2648 = r.CheckBreak()
	}
	if yyb2648 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2648++
	if yyhl2648 {
		yyb2648 = yyj2648 > l
	} else {
		yyb2648 = r.CheckBreak()
	}
	if yyb2648 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2648++
	if yyhl2648 {
		yyb2648 = yyj2648 > l
	} else {
		yyb2648 = r.CheckBreak()
	}
	if yyb2648 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2651 := &x.ListMeta
		yym2652 := z.DecBinary()
		_ = yym2652
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2651) {
		} else {
			z.DecFallback(yyv2651, false)
		}
	}
	yyj2648++
	if yyhl2648 {
		yyb2648 = yyj2648 > l
	} else {
		yyb2648 = r.CheckBreak()
	}
	if yyb2648 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2653 := &x.Items
		yym2654 := z.DecBinary()
		_ = yym2654
		if false {
		} else {
			h.decSliceNetwork((*[]Network)(yyv2653), d)
		}
	}
	for {
		yyj2648++
		if yyhl2648 {
			yyb2648 = yyj2648 > l
		} else {
			yyb2648 = r.CheckBreak()
		}
		if yyb2648 {
			break
		}
		z.DecStructFieldNotFound(yyj2648-1, "")
	}
	r.ReadEnd()
}

func (x *TenantSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2655 := z.EncBinary()
		_ = yym2655
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2656 := !z.EncBinary()
			yy2arr2656 := z.EncBasicHandle().StructToArray
			var yyq2656 [1]bool
			_, _, _ = yysep2656, yyq2656, yy2arr2656
			const yyr2656 bool = false
			if yyr2656 || yy2arr2656 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2656 int = 1
				for _, b := range yyq2656 {
					if b {
						yynn2656++
					}
				}
				r.EncodeMapStart(yynn2656)
			}
			if yyr2656 || yy2arr2656 {
				if x.Namespaces == nil {
					r.EncodeNil()
				} else {
					yym2658 := z.EncBinary()
					_ = yym2658
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Namespaces), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("namespaces"))
				if x.Namespaces == nil {
					r.EncodeNil()
				} else {
					yym2659 := z.EncBinary()
					_ = yym2659
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Namespaces), e)
					}
				}
			}
			if yysep2656 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *TenantSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2660 := z.DecBinary()
	_ = yym2660
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2661 := r.ReadMapStart()
			if yyl2661 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2661, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2661 := r.ReadArrayStart()
			if yyl2661 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2661, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *TenantSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2662Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2662Slc
	var yyhl2662 bool = l >= 0
	for yyj2662 := 0; ; yyj2662++ {
		if yyhl2662 {
			if yyj2662 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2662Slc = r.DecodeBytes(yys2662Slc, true, true)
		yys2662 := string(yys2662Slc)
		switch yys2662 {
		case "namespaces":
			if r.TryDecodeAsNil() {
				x.Namespaces = nil
			} else {
				yyv2663 := &x.Namespaces
				yym2664 := z.DecBinary()
				_ = yym2664
				if false {
				} else {
					h.decSliceNamespace((*[]Namespace)(yyv2663), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2662)
		} // end switch yys2662
	} // end for yyj2662
	if !yyhl2662 {
		r.ReadEnd()
	}
}

func (x *TenantSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2665 int
	var yyb2665 bool
	var yyhl2665 bool = l >= 0
	yyj2665++
	if yyhl2665 {
		yyb2665 = yyj2665 > l
	} else {
		yyb2665 = r.CheckBreak()
	}
	if yyb2665 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Namespaces = nil
	} else {
		yyv2666 := &x.Namespaces
		yym2667 := z.DecBinary()
		_ = yym2667
		if false {
		} else {
			h.decSliceNamespace((*[]Namespace)(yyv2666), d)
		}
	}
	for {
		yyj2665++
		if yyhl2665 {
			yyb2665 = yyj2665 > l
		} else {
			yyb2665 = r.CheckBreak()
		}
		if yyb2665 {
			break
		}
		z.DecStructFieldNotFound(yyj2665-1, "")
	}
	r.ReadEnd()
}

func (x *TenantStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2668 := z.EncBinary()
		_ = yym2668
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2669 := !z.EncBinary()
			yy2arr2669 := z.EncBasicHandle().StructToArray
			var yyq2669 [1]bool
			_, _, _ = yysep2669, yyq2669, yy2arr2669
			const yyr2669 bool = false
			yyq2669[0] = x.Phase != ""
			if yyr2669 || yy2arr2669 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2669 int = 0
				for _, b := range yyq2669 {
					if b {
						yynn2669++
					}
				}
				r.EncodeMapStart(yynn2669)
			}
			if yyr2669 || yy2arr2669 {
				if yyq2669[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2669[0] {
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yysep2669 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *TenantStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2671 := z.DecBinary()
	_ = yym2671
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2672 := r.ReadMapStart()
			if yyl2672 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2672, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2672 := r.ReadArrayStart()
			if yyl2672 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2672, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *TenantStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2673Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2673Slc
	var yyhl2673 bool = l >= 0
	for yyj2673 := 0; ; yyj2673++ {
		if yyhl2673 {
			if yyj2673 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2673Slc = r.DecodeBytes(yys2673Slc, true, true)
		yys2673 := string(yys2673Slc)
		switch yys2673 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = TenantPhase(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2673)
		} // end switch yys2673
	} // end for yyj2673
	if !yyhl2673 {
		r.ReadEnd()
	}
}

func (x *TenantStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2675 int
	var yyb2675 bool
	var yyhl2675 bool = l >= 0
	yyj2675++
	if yyhl2675 {
		yyb2675 = yyj2675 > l
	} else {
		yyb2675 = r.CheckBreak()
	}
	if yyb2675 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = TenantPhase(r.DecodeString())
	}
	for {
		yyj2675++
		if yyhl2675 {
			yyb2675 = yyj2675 > l
		} else {
			yyb2675 = r.CheckBreak()
		}
		if yyb2675 {
			break
		}
		z.DecStructFieldNotFound(yyj2675-1, "")
	}
	r.ReadEnd()
}

func (x TenantPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2677 := z.EncBinary()
	_ = yym2677
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *TenantPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2678 := z.DecBinary()
	_ = yym2678
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Tenant) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2679 := z.EncBinary()
		_ = yym2679
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2680 := !z.EncBinary()
			yy2arr2680 := z.EncBasicHandle().StructToArray
			var yyq2680 [5]bool
			_, _, _ = yysep2680, yyq2680, yy2arr2680
			const yyr2680 bool = false
			yyq2680[0] = x.Kind != ""
			yyq2680[1] = x.APIVersion != ""
			yyq2680[2] = true
			yyq2680[3] = true
			yyq2680[4] = true
			if yyr2680 || yy2arr2680 {
				r.EncodeArrayStart(5)
			} else {
				var yynn2680 int = 0
				for _, b := range yyq2680 {
					if b {
						yynn2680++
					}
				}
				r.EncodeMapStart(yynn2680)
			}
			if yyr2680 || yy2arr2680 {
				if yyq2680[0] {
					yym2682 := z.EncBinary()
					_ = yym2682
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2680[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2683 := z.EncBinary()
					_ = yym2683
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2680 || yy2arr2680 {
				if yyq2680[1] {
					yym2685 := z.EncBinary()
					_ = yym2685
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2680[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2686 := z.EncBinary()
					_ = yym2686
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2680 || yy2arr2680 {
				if yyq2680[2] {
					yy2688 := &x.ObjectMeta
					yy2688.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2680[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2689 := &x.ObjectMeta
					yy2689.CodecEncodeSelf(e)
				}
			}
			if yyr2680 || yy2arr2680 {
				if yyq2680[3] {
					yy2691 := &x.Spec
					yy2691.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2680[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy2692 := &x.Spec
					yy2692.CodecEncodeSelf(e)
				}
			}
			if yyr2680 || yy2arr2680 {
				if yyq2680[4] {
					yy2694 := &x.Status
					yy2694.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2680[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy2695 := &x.Status
					yy2695.CodecEncodeSelf(e)
				}
			}
			if yysep2680 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Tenant) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2696 := z.DecBinary()
	_ = yym2696
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2697 := r.ReadMapStart()
			if yyl2697 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2697, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2697 := r.ReadArrayStart()
			if yyl2697 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2697, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Tenant) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2698Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2698Slc
	var yyhl2698 bool = l >= 0
	for yyj2698 := 0; ; yyj2698++ {
		if yyhl2698 {
			if yyj2698 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2698Slc = r.DecodeBytes(yys2698Slc, true, true)
		yys2698 := string(yys2698Slc)
		switch yys2698 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2701 := &x.ObjectMeta
				yyv2701.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = TenantSpec{}
			} else {
				yyv2702 := &x.Spec
				yyv2702.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = TenantStatus{}
			} else {
				yyv2703 := &x.Status
				yyv2703.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2698)
		} // end switch yys2698
	} // end for yyj2698
	if !yyhl2698 {
		r.ReadEnd()
	}
}

func (x *Tenant) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2704 int
	var yyb2704 bool
	var yyhl2704 bool = l >= 0
	yyj2704++
	if yyhl2704 {
		yyb2704 = yyj2704 > l
	} else {
		yyb2704 = r.CheckBreak()
	}
	if yyb2704 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2704++
	if yyhl2704 {
		yyb2704 = yyj2704 > l
	} else {
		yyb2704 = r.CheckBreak()
	}
	if yyb2704 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2704++
	if yyhl2704 {
		yyb2704 = yyj2704 > l
	} else {
		yyb2704 = r.CheckBreak()
	}
	if yyb2704 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2707 := &x.ObjectMeta
		yyv2707.CodecDecodeSelf(d)
	}
	yyj2704++
	if yyhl2704 {
		yyb2704 = yyj2704 > l
	} else {
		yyb2704 = r.CheckBreak()
	}
	if yyb2704 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = TenantSpec{}
	} else {
		yyv2708 := &x.Spec
		yyv2708.CodecDecodeSelf(d)
	}
	yyj2704++
	if yyhl2704 {
		yyb2704 = yyj2704 > l
	} else {
		yyb2704 = r.CheckBreak()
	}
	if yyb2704 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = TenantStatus{}
	} else {
		yyv2709 := &x.Status
		yyv2709.CodecDecodeSelf(d)
	}
	for {
		yyj2704++
		if yyhl2704 {
			yyb2704 = yyj2704 > l
		} else {
			yyb2704 = r.CheckBreak()
		}
		if yyb2704 {
			break
		}
		z.DecStructFieldNotFound(yyj2704-1, "")
	}
	r.ReadEnd()
}

func (x *TenantList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2710 := z.EncBinary()
		_ = yym2710
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2711 := !z.EncBinary()
			yy2arr2711 := z.EncBasicHandle().StructToArray
			var yyq2711 [4]bool
			_, _, _ = yysep2711, yyq2711, yy2arr2711
			const yyr2711 bool = false
			yyq2711[0] = x.Kind != ""
			yyq2711[1] = x.APIVersion != ""
			yyq2711[2] = true
			if yyr2711 || yy2arr2711 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2711 int = 1
				for _, b := range yyq2711 {
					if b {
						yynn2711++
					}
				}
				r.EncodeMapStart(yynn2711)
			}
			if yyr2711 || yy2arr2711 {
				if yyq2711[0] {
					yym2713 := z.EncBinary()
					_ = yym2713
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2711[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2714 := z.EncBinary()
					_ = yym2714
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2711 || yy2arr2711 {
				if yyq2711[1] {
					yym2716 := z.EncBinary()
					_ = yym2716
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2711[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2717 := z.EncBinary()
					_ = yym2717
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2711 || yy2arr2711 {
				if yyq2711[2] {
					yy2719 := &x.ListMeta
					yym2720 := z.EncBinary()
					_ = yym2720
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2719) {
					} else {
						z.EncFallback(yy2719)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2711[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2721 := &x.ListMeta
					yym2722 := z.EncBinary()
					_ = yym2722
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2721) {
					} else {
						z.EncFallback(yy2721)
					}
				}
			}
			if yyr2711 || yy2arr2711 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2724 := z.EncBinary()
					_ = yym2724
					if false {
					} else {
						h.encSliceTenant(([]Tenant)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2725 := z.EncBinary()
					_ = yym2725
					if false {
					} else {
						h.encSliceTenant(([]Tenant)(x.Items), e)
					}
				}
			}
			if yysep2711 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *TenantList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2726 := z.DecBinary()
	_ = yym2726
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2727 := r.ReadMapStart()
			if yyl2727 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2727, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2727 := r.ReadArrayStart()
			if yyl2727 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2727, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *TenantList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2728Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2728Slc
	var yyhl2728 bool = l >= 0
	for yyj2728 := 0; ; yyj2728++ {
		if yyhl2728 {
			if yyj2728 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2728Slc = r.DecodeBytes(yys2728Slc, true, true)
		yys2728 := string(yys2728Slc)
		switch yys2728 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2731 := &x.ListMeta
				yym2732 := z.DecBinary()
				_ = yym2732
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2731) {
				} else {
					z.DecFallback(yyv2731, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2733 := &x.Items
				yym2734 := z.DecBinary()
				_ = yym2734
				if false {
				} else {
					h.decSliceTenant((*[]Tenant)(yyv2733), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2728)
		} // end switch yys2728
	} // end for yyj2728
	if !yyhl2728 {
		r.ReadEnd()
	}
}

func (x *TenantList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2735 int
	var yyb2735 bool
	var yyhl2735 bool = l >= 0
	yyj2735++
	if yyhl2735 {
		yyb2735 = yyj2735 > l
	} else {
		yyb2735 = r.CheckBreak()
	}
	if yyb2735 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2735++
	if yyhl2735 {
		yyb2735 = yyj2735 > l
	} else {
		yyb2735 = r.CheckBreak()
	}
	if yyb2735 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2735++
	if yyhl2735 {
		yyb2735 = yyj2735 > l
	} else {
		yyb2735 = r.CheckBreak()
	}
	if yyb2735 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2738 := &x.ListMeta
		yym2739 := z.DecBinary()
		_ = yym2739
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2738) {
		} else {
			z.DecFallback(yyv2738, false)
		}
	}
	yyj2735++
	if yyhl2735 {
		yyb2735 = yyj2735 > l
	} else {
		yyb2735 = r.CheckBreak()
	}
	if yyb2735 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2740 := &x.Items
		yym2741 := z.DecBinary()
		_ = yym2741
		if false {
		} else {
			h.decSliceTenant((*[]Tenant)(yyv2740), d)
		}
	}
	for {
		yyj2735++
		if yyhl2735 {
			yyb2735 = yyj2735 > l
		} else {
			yyb2735 = r.CheckBreak()
		}
		if yyb2735 {
			break
		}
		z.DecStructFieldNotFound(yyj2735-1, "")
	}
	r.ReadEnd()
}

func (x *Binding) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2742 := z.EncBinary()
		_ = yym2742
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2743 := !z.EncBinary()
			yy2arr2743 := z.EncBasicHandle().StructToArray
			var yyq2743 [4]bool
			_, _, _ = yysep2743, yyq2743, yy2arr2743
			const yyr2743 bool = false
			yyq2743[0] = x.Kind != ""
			yyq2743[1] = x.APIVersion != ""
			yyq2743[2] = true
			if yyr2743 || yy2arr2743 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2743 int = 1
				for _, b := range yyq2743 {
					if b {
						yynn2743++
					}
				}
				r.EncodeMapStart(yynn2743)
			}
			if yyr2743 || yy2arr2743 {
				if yyq2743[0] {
					yym2745 := z.EncBinary()
					_ = yym2745
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2743[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2746 := z.EncBinary()
					_ = yym2746
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2743 || yy2arr2743 {
				if yyq2743[1] {
					yym2748 := z.EncBinary()
					_ = yym2748
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2743[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2749 := z.EncBinary()
					_ = yym2749
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2743 || yy2arr2743 {
				if yyq2743[2] {
					yy2751 := &x.ObjectMeta
					yy2751.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2743[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2752 := &x.ObjectMeta
					yy2752.CodecEncodeSelf(e)
				}
			}
			if yyr2743 || yy2arr2743 {
				yy2754 := &x.Target
				yy2754.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("target"))
				yy2755 := &x.Target
				yy2755.CodecEncodeSelf(e)
			}
			if yysep2743 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Binding) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2756 := z.DecBinary()
	_ = yym2756
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2757 := r.ReadMapStart()
			if yyl2757 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2757, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2757 := r.ReadArrayStart()
			if yyl2757 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2757, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Binding) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2758Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2758Slc
	var yyhl2758 bool = l >= 0
	for yyj2758 := 0; ; yyj2758++ {
		if yyhl2758 {
			if yyj2758 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2758Slc = r.DecodeBytes(yys2758Slc, true, true)
		yys2758 := string(yys2758Slc)
		switch yys2758 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2761 := &x.ObjectMeta
				yyv2761.CodecDecodeSelf(d)
			}
		case "target":
			if r.TryDecodeAsNil() {
				x.Target = ObjectReference{}
			} else {
				yyv2762 := &x.Target
				yyv2762.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2758)
		} // end switch yys2758
	} // end for yyj2758
	if !yyhl2758 {
		r.ReadEnd()
	}
}

func (x *Binding) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2763 int
	var yyb2763 bool
	var yyhl2763 bool = l >= 0
	yyj2763++
	if yyhl2763 {
		yyb2763 = yyj2763 > l
	} else {
		yyb2763 = r.CheckBreak()
	}
	if yyb2763 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2763++
	if yyhl2763 {
		yyb2763 = yyj2763 > l
	} else {
		yyb2763 = r.CheckBreak()
	}
	if yyb2763 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2763++
	if yyhl2763 {
		yyb2763 = yyj2763 > l
	} else {
		yyb2763 = r.CheckBreak()
	}
	if yyb2763 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2766 := &x.ObjectMeta
		yyv2766.CodecDecodeSelf(d)
	}
	yyj2763++
	if yyhl2763 {
		yyb2763 = yyj2763 > l
	} else {
		yyb2763 = r.CheckBreak()
	}
	if yyb2763 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Target = ObjectReference{}
	} else {
		yyv2767 := &x.Target
		yyv2767.CodecDecodeSelf(d)
	}
	for {
		yyj2763++
		if yyhl2763 {
			yyb2763 = yyj2763 > l
		} else {
			yyb2763 = r.CheckBreak()
		}
		if yyb2763 {
			break
		}
		z.DecStructFieldNotFound(yyj2763-1, "")
	}
	r.ReadEnd()
}

func (x *DeleteOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2768 := z.EncBinary()
		_ = yym2768
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2769 := !z.EncBinary()
			yy2arr2769 := z.EncBasicHandle().StructToArray
			var yyq2769 [3]bool
			_, _, _ = yysep2769, yyq2769, yy2arr2769
			const yyr2769 bool = false
			yyq2769[0] = x.Kind != ""
			yyq2769[1] = x.APIVersion != ""
			if yyr2769 || yy2arr2769 {
				r.EncodeArrayStart(3)
			} else {
				var yynn2769 int = 1
				for _, b := range yyq2769 {
					if b {
						yynn2769++
					}
				}
				r.EncodeMapStart(yynn2769)
			}
			if yyr2769 || yy2arr2769 {
				if yyq2769[0] {
					yym2771 := z.EncBinary()
					_ = yym2771
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2769[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2772 := z.EncBinary()
					_ = yym2772
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2769 || yy2arr2769 {
				if yyq2769[1] {
					yym2774 := z.EncBinary()
					_ = yym2774
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2769[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2775 := z.EncBinary()
					_ = yym2775
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2769 || yy2arr2769 {
				if x.GracePeriodSeconds == nil {
					r.EncodeNil()
				} else {
					yy2777 := *x.GracePeriodSeconds
					yym2778 := z.EncBinary()
					_ = yym2778
					if false {
					} else {
						r.EncodeInt(int64(yy2777))
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("gracePeriodSeconds"))
				if x.GracePeriodSeconds == nil {
					r.EncodeNil()
				} else {
					yy2779 := *x.GracePeriodSeconds
					yym2780 := z.EncBinary()
					_ = yym2780
					if false {
					} else {
						r.EncodeInt(int64(yy2779))
					}
				}
			}
			if yysep2769 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DeleteOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2781 := z.DecBinary()
	_ = yym2781
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2782 := r.ReadMapStart()
			if yyl2782 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2782, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2782 := r.ReadArrayStart()
			if yyl2782 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2782, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeleteOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2783Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2783Slc
	var yyhl2783 bool = l >= 0
	for yyj2783 := 0; ; yyj2783++ {
		if yyhl2783 {
			if yyj2783 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2783Slc = r.DecodeBytes(yys2783Slc, true, true)
		yys2783 := string(yys2783Slc)
		switch yys2783 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "gracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.GracePeriodSeconds != nil {
					x.GracePeriodSeconds = nil
				}
			} else {
				if x.GracePeriodSeconds == nil {
					x.GracePeriodSeconds = new(int64)
				}
				yym2787 := z.DecBinary()
				_ = yym2787
				if false {
				} else {
					*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2783)
		} // end switch yys2783
	} // end for yyj2783
	if !yyhl2783 {
		r.ReadEnd()
	}
}

func (x *DeleteOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2788 int
	var yyb2788 bool
	var yyhl2788 bool = l >= 0
	yyj2788++
	if yyhl2788 {
		yyb2788 = yyj2788 > l
	} else {
		yyb2788 = r.CheckBreak()
	}
	if yyb2788 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2788++
	if yyhl2788 {
		yyb2788 = yyj2788 > l
	} else {
		yyb2788 = r.CheckBreak()
	}
	if yyb2788 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2788++
	if yyhl2788 {
		yyb2788 = yyj2788 > l
	} else {
		yyb2788 = r.CheckBreak()
	}
	if yyb2788 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GracePeriodSeconds != nil {
			x.GracePeriodSeconds = nil
		}
	} else {
		if x.GracePeriodSeconds == nil {
			x.GracePeriodSeconds = new(int64)
		}
		yym2792 := z.DecBinary()
		_ = yym2792
		if false {
		} else {
			*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2788++
		if yyhl2788 {
			yyb2788 = yyj2788 > l
		} else {
			yyb2788 = r.CheckBreak()
		}
		if yyb2788 {
			break
		}
		z.DecStructFieldNotFound(yyj2788-1, "")
	}
	r.ReadEnd()
}

func (x *ListOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2793 := z.EncBinary()
		_ = yym2793
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2794 := !z.EncBinary()
			yy2arr2794 := z.EncBasicHandle().StructToArray
			var yyq2794 [7]bool
			_, _, _ = yysep2794, yyq2794, yy2arr2794
			const yyr2794 bool = false
			yyq2794[0] = x.Kind != ""
			yyq2794[1] = x.APIVersion != ""
			yyq2794[2] = x.LabelSelector != ""
			yyq2794[3] = x.FieldSelector != ""
			yyq2794[4] = x.Watch != false
			yyq2794[5] = x.ResourceVersion != ""
			yyq2794[6] = x.TimeoutSeconds != nil
			if yyr2794 || yy2arr2794 {
				r.EncodeArrayStart(7)
			} else {
				var yynn2794 int = 0
				for _, b := range yyq2794 {
					if b {
						yynn2794++
					}
				}
				r.EncodeMapStart(yynn2794)
			}
			if yyr2794 || yy2arr2794 {
				if yyq2794[0] {
					yym2796 := z.EncBinary()
					_ = yym2796
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2794[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2797 := z.EncBinary()
					_ = yym2797
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2794 || yy2arr2794 {
				if yyq2794[1] {
					yym2799 := z.EncBinary()
					_ = yym2799
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2794[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2800 := z.EncBinary()
					_ = yym2800
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2794 || yy2arr2794 {
				if yyq2794[2] {
					yym2802 := z.EncBinary()
					_ = yym2802
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LabelSelector))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2794[2] {
					r.EncodeString(codecSelferC_UTF81234, string("labelSelector"))
					yym2803 := z.EncBinary()
					_ = yym2803
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LabelSelector))
					}
				}
			}
			if yyr2794 || yy2arr2794 {
				if yyq2794[3] {
					yym2805 := z.EncBinary()
					_ = yym2805
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldSelector))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2794[3] {
					r.EncodeString(codecSelferC_UTF81234, string("fieldSelector"))
					yym2806 := z.EncBinary()
					_ = yym2806
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldSelector))
					}
				}
			}
			if yyr2794 || yy2arr2794 {
				if yyq2794[4] {
					yym2808 := z.EncBinary()
					_ = yym2808
					if false {
					} else {
						r.EncodeBool(bool(x.Watch))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2794[4] {
					r.EncodeString(codecSelferC_UTF81234, string("watch"))
					yym2809 := z.EncBinary()
					_ = yym2809
					if false {
					} else {
						r.EncodeBool(bool(x.Watch))
					}
				}
			}
			if yyr2794 || yy2arr2794 {
				if yyq2794[5] {
					yym2811 := z.EncBinary()
					_ = yym2811
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2794[5] {
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					yym2812 := z.EncBinary()
					_ = yym2812
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2794 || yy2arr2794 {
				if yyq2794[6] {
					if x.TimeoutSeconds == nil {
						r.EncodeNil()
					} else {
						yy2814 := *x.TimeoutSeconds
						yym2815 := z.EncBinary()
						_ = yym2815
						if false {
						} else {
							r.EncodeInt(int64(yy2814))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2794[6] {
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					if x.TimeoutSeconds == nil {
						r.EncodeNil()
					} else {
						yy2816 := *x.TimeoutSeconds
						yym2817 := z.EncBinary()
						_ = yym2817
						if false {
						} else {
							r.EncodeInt(int64(yy2816))
						}
					}
				}
			}
			if yysep2794 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ListOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2818 := z.DecBinary()
	_ = yym2818
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2819 := r.ReadMapStart()
			if yyl2819 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2819, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2819 := r.ReadArrayStart()
			if yyl2819 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2819, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ListOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2820Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2820Slc
	var yyhl2820 bool = l >= 0
	for yyj2820 := 0; ; yyj2820++ {
		if yyhl2820 {
			if yyj2820 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2820Slc = r.DecodeBytes(yys2820Slc, true, true)
		yys2820 := string(yys2820Slc)
		switch yys2820 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "labelSelector":
			if r.TryDecodeAsNil() {
				x.LabelSelector = ""
			} else {
				x.LabelSelector = string(r.DecodeString())
			}
		case "fieldSelector":
			if r.TryDecodeAsNil() {
				x.FieldSelector = ""
			} else {
				x.FieldSelector = string(r.DecodeString())
			}
		case "watch":
			if r.TryDecodeAsNil() {
				x.Watch = false
			} else {
				x.Watch = bool(r.DecodeBool())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				if x.TimeoutSeconds != nil {
					x.TimeoutSeconds = nil
				}
			} else {
				if x.TimeoutSeconds == nil {
					x.TimeoutSeconds = new(int64)
				}
				yym2828 := z.DecBinary()
				_ = yym2828
				if false {
				} else {
					*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2820)
		} // end switch yys2820
	} // end for yyj2820
	if !yyhl2820 {
		r.ReadEnd()
	}
}

func (x *ListOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2829 int
	var yyb2829 bool
	var yyhl2829 bool = l >= 0
	yyj2829++
	if yyhl2829 {
		yyb2829 = yyj2829 > l
	} else {
		yyb2829 = r.CheckBreak()
	}
	if yyb2829 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2829++
	if yyhl2829 {
		yyb2829 = yyj2829 > l
	} else {
		yyb2829 = r.CheckBreak()
	}
	if yyb2829 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2829++
	if yyhl2829 {
		yyb2829 = yyj2829 > l
	} else {
		yyb2829 = r.CheckBreak()
	}
	if yyb2829 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LabelSelector = ""
	} else {
		x.LabelSelector = string(r.DecodeString())
	}
	yyj2829++
	if yyhl2829 {
		yyb2829 = yyj2829 > l
	} else {
		yyb2829 = r.CheckBreak()
	}
	if yyb2829 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FieldSelector = ""
	} else {
		x.FieldSelector = string(r.DecodeString())
	}
	yyj2829++
	if yyhl2829 {
		yyb2829 = yyj2829 > l
	} else {
		yyb2829 = r.CheckBreak()
	}
	if yyb2829 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Watch = false
	} else {
		x.Watch = bool(r.DecodeBool())
	}
	yyj2829++
	if yyhl2829 {
		yyb2829 = yyj2829 > l
	} else {
		yyb2829 = r.CheckBreak()
	}
	if yyb2829 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj2829++
	if yyhl2829 {
		yyb2829 = yyj2829 > l
	} else {
		yyb2829 = r.CheckBreak()
	}
	if yyb2829 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.TimeoutSeconds != nil {
			x.TimeoutSeconds = nil
		}
	} else {
		if x.TimeoutSeconds == nil {
			x.TimeoutSeconds = new(int64)
		}
		yym2837 := z.DecBinary()
		_ = yym2837
		if false {
		} else {
			*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2829++
		if yyhl2829 {
			yyb2829 = yyj2829 > l
		} else {
			yyb2829 = r.CheckBreak()
		}
		if yyb2829 {
			break
		}
		z.DecStructFieldNotFound(yyj2829-1, "")
	}
	r.ReadEnd()
}

func (x *PodLogOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2838 := z.EncBinary()
		_ = yym2838
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2839 := !z.EncBinary()
			yy2arr2839 := z.EncBasicHandle().StructToArray
			var yyq2839 [10]bool
			_, _, _ = yysep2839, yyq2839, yy2arr2839
			const yyr2839 bool = false
			yyq2839[0] = x.Kind != ""
			yyq2839[1] = x.APIVersion != ""
			yyq2839[2] = x.Container != ""
			yyq2839[3] = x.Follow != false
			yyq2839[4] = x.Previous != false
			yyq2839[5] = x.SinceSeconds != nil
			yyq2839[6] = x.SinceTime != nil
			yyq2839[7] = x.Timestamps != false
			yyq2839[8] = x.TailLines != nil
			yyq2839[9] = x.LimitBytes != nil
			if yyr2839 || yy2arr2839 {
				r.EncodeArrayStart(10)
			} else {
				var yynn2839 int = 0
				for _, b := range yyq2839 {
					if b {
						yynn2839++
					}
				}
				r.EncodeMapStart(yynn2839)
			}
			if yyr2839 || yy2arr2839 {
				if yyq2839[0] {
					yym2841 := z.EncBinary()
					_ = yym2841
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2839[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2842 := z.EncBinary()
					_ = yym2842
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2839 || yy2arr2839 {
				if yyq2839[1] {
					yym2844 := z.EncBinary()
					_ = yym2844
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2839[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2845 := z.EncBinary()
					_ = yym2845
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2839 || yy2arr2839 {
				if yyq2839[2] {
					yym2847 := z.EncBinary()
					_ = yym2847
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2839[2] {
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					yym2848 := z.EncBinary()
					_ = yym2848
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr2839 || yy2arr2839 {
				if yyq2839[3] {
					yym2850 := z.EncBinary()
					_ = yym2850
					if false {
					} else {
						r.EncodeBool(bool(x.Follow))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2839[3] {
					r.EncodeString(codecSelferC_UTF81234, string("follow"))
					yym2851 := z.EncBinary()
					_ = yym2851
					if false {
					} else {
						r.EncodeBool(bool(x.Follow))
					}
				}
			}
			if yyr2839 || yy2arr2839 {
				if yyq2839[4] {
					yym2853 := z.EncBinary()
					_ = yym2853
					if false {
					} else {
						r.EncodeBool(bool(x.Previous))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2839[4] {
					r.EncodeString(codecSelferC_UTF81234, string("previous"))
					yym2854 := z.EncBinary()
					_ = yym2854
					if false {
					} else {
						r.EncodeBool(bool(x.Previous))
					}
				}
			}
			if yyr2839 || yy2arr2839 {
				if yyq2839[5] {
					if x.SinceSeconds == nil {
						r.EncodeNil()
					} else {
						yy2856 := *x.SinceSeconds
						yym2857 := z.EncBinary()
						_ = yym2857
						if false {
						} else {
							r.EncodeInt(int64(yy2856))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2839[5] {
					r.EncodeString(codecSelferC_UTF81234, string("sinceSeconds"))
					if x.SinceSeconds == nil {
						r.EncodeNil()
					} else {
						yy2858 := *x.SinceSeconds
						yym2859 := z.EncBinary()
						_ = yym2859
						if false {
						} else {
							r.EncodeInt(int64(yy2858))
						}
					}
				}
			}
			if yyr2839 || yy2arr2839 {
				if yyq2839[6] {
					if x.SinceTime == nil {
						r.EncodeNil()
					} else {
						yym2861 := z.EncBinary()
						_ = yym2861
						if false {
						} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
						} else if yym2861 {
							z.EncBinaryMarshal(x.SinceTime)
						} else if !yym2861 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.SinceTime)
						} else {
							z.EncFallback(x.SinceTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2839[6] {
					r.EncodeString(codecSelferC_UTF81234, string("sinceTime"))
					if x.SinceTime == nil {
						r.EncodeNil()
					} else {
						yym2862 := z.EncBinary()
						_ = yym2862
						if false {
						} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
						} else if yym2862 {
							z.EncBinaryMarshal(x.SinceTime)
						} else if !yym2862 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.SinceTime)
						} else {
							z.EncFallback(x.SinceTime)
						}
					}
				}
			}
			if yyr2839 || yy2arr2839 {
				if yyq2839[7] {
					yym2864 := z.EncBinary()
					_ = yym2864
					if false {
					} else {
						r.EncodeBool(bool(x.Timestamps))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2839[7] {
					r.EncodeString(codecSelferC_UTF81234, string("timestamps"))
					yym2865 := z.EncBinary()
					_ = yym2865
					if false {
					} else {
						r.EncodeBool(bool(x.Timestamps))
					}
				}
			}
			if yyr2839 || yy2arr2839 {
				if yyq2839[8] {
					if x.TailLines == nil {
						r.EncodeNil()
					} else {
						yy2867 := *x.TailLines
						yym2868 := z.EncBinary()
						_ = yym2868
						if false {
						} else {
							r.EncodeInt(int64(yy2867))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2839[8] {
					r.EncodeString(codecSelferC_UTF81234, string("tailLines"))
					if x.TailLines == nil {
						r.EncodeNil()
					} else {
						yy2869 := *x.TailLines
						yym2870 := z.EncBinary()
						_ = yym2870
						if false {
						} else {
							r.EncodeInt(int64(yy2869))
						}
					}
				}
			}
			if yyr2839 || yy2arr2839 {
				if yyq2839[9] {
					if x.LimitBytes == nil {
						r.EncodeNil()
					} else {
						yy2872 := *x.LimitBytes
						yym2873 := z.EncBinary()
						_ = yym2873
						if false {
						} else {
							r.EncodeInt(int64(yy2872))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2839[9] {
					r.EncodeString(codecSelferC_UTF81234, string("limitBytes"))
					if x.LimitBytes == nil {
						r.EncodeNil()
					} else {
						yy2874 := *x.LimitBytes
						yym2875 := z.EncBinary()
						_ = yym2875
						if false {
						} else {
							r.EncodeInt(int64(yy2874))
						}
					}
				}
			}
			if yysep2839 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodLogOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2876 := z.DecBinary()
	_ = yym2876
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2877 := r.ReadMapStart()
			if yyl2877 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2877, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2877 := r.ReadArrayStart()
			if yyl2877 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2877, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodLogOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2878Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2878Slc
	var yyhl2878 bool = l >= 0
	for yyj2878 := 0; ; yyj2878++ {
		if yyhl2878 {
			if yyj2878 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2878Slc = r.DecodeBytes(yys2878Slc, true, true)
		yys2878 := string(yys2878Slc)
		switch yys2878 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "follow":
			if r.TryDecodeAsNil() {
				x.Follow = false
			} else {
				x.Follow = bool(r.DecodeBool())
			}
		case "previous":
			if r.TryDecodeAsNil() {
				x.Previous = false
			} else {
				x.Previous = bool(r.DecodeBool())
			}
		case "sinceSeconds":
			if r.TryDecodeAsNil() {
				if x.SinceSeconds != nil {
					x.SinceSeconds = nil
				}
			} else {
				if x.SinceSeconds == nil {
					x.SinceSeconds = new(int64)
				}
				yym2885 := z.DecBinary()
				_ = yym2885
				if false {
				} else {
					*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "sinceTime":
			if r.TryDecodeAsNil() {
				if x.SinceTime != nil {
					x.SinceTime = nil
				}
			} else {
				if x.SinceTime == nil {
					x.SinceTime = new(pkg2_unversioned.Time)
				}
				yym2887 := z.DecBinary()
				_ = yym2887
				if false {
				} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
				} else if yym2887 {
					z.DecBinaryUnmarshal(x.SinceTime)
				} else if !yym2887 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.SinceTime)
				} else {
					z.DecFallback(x.SinceTime, false)
				}
			}
		case "timestamps":
			if r.TryDecodeAsNil() {
				x.Timestamps = false
			} else {
				x.Timestamps = bool(r.DecodeBool())
			}
		case "tailLines":
			if r.TryDecodeAsNil() {
				if x.TailLines != nil {
					x.TailLines = nil
				}
			} else {
				if x.TailLines == nil {
					x.TailLines = new(int64)
				}
				yym2890 := z.DecBinary()
				_ = yym2890
				if false {
				} else {
					*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
				}
			}
		case "limitBytes":
			if r.TryDecodeAsNil() {
				if x.LimitBytes != nil {
					x.LimitBytes = nil
				}
			} else {
				if x.LimitBytes == nil {
					x.LimitBytes = new(int64)
				}
				yym2892 := z.DecBinary()
				_ = yym2892
				if false {
				} else {
					*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2878)
		} // end switch yys2878
	} // end for yyj2878
	if !yyhl2878 {
		r.ReadEnd()
	}
}

func (x *PodLogOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2893 int
	var yyb2893 bool
	var yyhl2893 bool = l >= 0
	yyj2893++
	if yyhl2893 {
		yyb2893 = yyj2893 > l
	} else {
		yyb2893 = r.CheckBreak()
	}
	if yyb2893 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2893++
	if yyhl2893 {
		yyb2893 = yyj2893 > l
	} else {
		yyb2893 = r.CheckBreak()
	}
	if yyb2893 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2893++
	if yyhl2893 {
		yyb2893 = yyj2893 > l
	} else {
		yyb2893 = r.CheckBreak()
	}
	if yyb2893 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj2893++
	if yyhl2893 {
		yyb2893 = yyj2893 > l
	} else {
		yyb2893 = r.CheckBreak()
	}
	if yyb2893 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Follow = false
	} else {
		x.Follow = bool(r.DecodeBool())
	}
	yyj2893++
	if yyhl2893 {
		yyb2893 = yyj2893 > l
	} else {
		yyb2893 = r.CheckBreak()
	}
	if yyb2893 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Previous = false
	} else {
		x.Previous = bool(r.DecodeBool())
	}
	yyj2893++
	if yyhl2893 {
		yyb2893 = yyj2893 > l
	} else {
		yyb2893 = r.CheckBreak()
	}
	if yyb2893 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SinceSeconds != nil {
			x.SinceSeconds = nil
		}
	} else {
		if x.SinceSeconds == nil {
			x.SinceSeconds = new(int64)
		}
		yym2900 := z.DecBinary()
		_ = yym2900
		if false {
		} else {
			*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj2893++
	if yyhl2893 {
		yyb2893 = yyj2893 > l
	} else {
		yyb2893 = r.CheckBreak()
	}
	if yyb2893 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SinceTime != nil {
			x.SinceTime = nil
		}
	} else {
		if x.SinceTime == nil {
			x.SinceTime = new(pkg2_unversioned.Time)
		}
		yym2902 := z.DecBinary()
		_ = yym2902
		if false {
		} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
		} else if yym2902 {
			z.DecBinaryUnmarshal(x.SinceTime)
		} else if !yym2902 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.SinceTime)
		} else {
			z.DecFallback(x.SinceTime, false)
		}
	}
	yyj2893++
	if yyhl2893 {
		yyb2893 = yyj2893 > l
	} else {
		yyb2893 = r.CheckBreak()
	}
	if yyb2893 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Timestamps = false
	} else {
		x.Timestamps = bool(r.DecodeBool())
	}
	yyj2893++
	if yyhl2893 {
		yyb2893 = yyj2893 > l
	} else {
		yyb2893 = r.CheckBreak()
	}
	if yyb2893 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.TailLines != nil {
			x.TailLines = nil
		}
	} else {
		if x.TailLines == nil {
			x.TailLines = new(int64)
		}
		yym2905 := z.DecBinary()
		_ = yym2905
		if false {
		} else {
			*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
		}
	}
	yyj2893++
	if yyhl2893 {
		yyb2893 = yyj2893 > l
	} else {
		yyb2893 = r.CheckBreak()
	}
	if yyb2893 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.LimitBytes != nil {
			x.LimitBytes = nil
		}
	} else {
		if x.LimitBytes == nil {
			x.LimitBytes = new(int64)
		}
		yym2907 := z.DecBinary()
		_ = yym2907
		if false {
		} else {
			*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2893++
		if yyhl2893 {
			yyb2893 = yyj2893 > l
		} else {
			yyb2893 = r.CheckBreak()
		}
		if yyb2893 {
			break
		}
		z.DecStructFieldNotFound(yyj2893-1, "")
	}
	r.ReadEnd()
}

func (x *PodAttachOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2908 := z.EncBinary()
		_ = yym2908
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2909 := !z.EncBinary()
			yy2arr2909 := z.EncBasicHandle().StructToArray
			var yyq2909 [7]bool
			_, _, _ = yysep2909, yyq2909, yy2arr2909
			const yyr2909 bool = false
			yyq2909[0] = x.Kind != ""
			yyq2909[1] = x.APIVersion != ""
			yyq2909[2] = x.Stdin != false
			yyq2909[3] = x.Stdout != false
			yyq2909[4] = x.Stderr != false
			yyq2909[5] = x.TTY != false
			yyq2909[6] = x.Container != ""
			if yyr2909 || yy2arr2909 {
				r.EncodeArrayStart(7)
			} else {
				var yynn2909 int = 0
				for _, b := range yyq2909 {
					if b {
						yynn2909++
					}
				}
				r.EncodeMapStart(yynn2909)
			}
			if yyr2909 || yy2arr2909 {
				if yyq2909[0] {
					yym2911 := z.EncBinary()
					_ = yym2911
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2909[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2912 := z.EncBinary()
					_ = yym2912
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2909 || yy2arr2909 {
				if yyq2909[1] {
					yym2914 := z.EncBinary()
					_ = yym2914
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2909[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2915 := z.EncBinary()
					_ = yym2915
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2909 || yy2arr2909 {
				if yyq2909[2] {
					yym2917 := z.EncBinary()
					_ = yym2917
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2909[2] {
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					yym2918 := z.EncBinary()
					_ = yym2918
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr2909 || yy2arr2909 {
				if yyq2909[3] {
					yym2920 := z.EncBinary()
					_ = yym2920
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2909[3] {
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					yym2921 := z.EncBinary()
					_ = yym2921
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr2909 || yy2arr2909 {
				if yyq2909[4] {
					yym2923 := z.EncBinary()
					_ = yym2923
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2909[4] {
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					yym2924 := z.EncBinary()
					_ = yym2924
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr2909 || yy2arr2909 {
				if yyq2909[5] {
					yym2926 := z.EncBinary()
					_ = yym2926
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2909[5] {
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					yym2927 := z.EncBinary()
					_ = yym2927
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr2909 || yy2arr2909 {
				if yyq2909[6] {
					yym2929 := z.EncBinary()
					_ = yym2929
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2909[6] {
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					yym2930 := z.EncBinary()
					_ = yym2930
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yysep2909 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodAttachOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2931 := z.DecBinary()
	_ = yym2931
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2932 := r.ReadMapStart()
			if yyl2932 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2932, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2932 := r.ReadArrayStart()
			if yyl2932 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2932, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAttachOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2933Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2933Slc
	var yyhl2933 bool = l >= 0
	for yyj2933 := 0; ; yyj2933++ {
		if yyhl2933 {
			if yyj2933 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2933Slc = r.DecodeBytes(yys2933Slc, true, true)
		yys2933 := string(yys2933Slc)
		switch yys2933 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2933)
		} // end switch yys2933
	} // end for yyj2933
	if !yyhl2933 {
		r.ReadEnd()
	}
}

func (x *PodAttachOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2941 int
	var yyb2941 bool
	var yyhl2941 bool = l >= 0
	yyj2941++
	if yyhl2941 {
		yyb2941 = yyj2941 > l
	} else {
		yyb2941 = r.CheckBreak()
	}
	if yyb2941 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2941++
	if yyhl2941 {
		yyb2941 = yyj2941 > l
	} else {
		yyb2941 = r.CheckBreak()
	}
	if yyb2941 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2941++
	if yyhl2941 {
		yyb2941 = yyj2941 > l
	} else {
		yyb2941 = r.CheckBreak()
	}
	if yyb2941 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj2941++
	if yyhl2941 {
		yyb2941 = yyj2941 > l
	} else {
		yyb2941 = r.CheckBreak()
	}
	if yyb2941 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj2941++
	if yyhl2941 {
		yyb2941 = yyj2941 > l
	} else {
		yyb2941 = r.CheckBreak()
	}
	if yyb2941 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj2941++
	if yyhl2941 {
		yyb2941 = yyj2941 > l
	} else {
		yyb2941 = r.CheckBreak()
	}
	if yyb2941 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj2941++
	if yyhl2941 {
		yyb2941 = yyj2941 > l
	} else {
		yyb2941 = r.CheckBreak()
	}
	if yyb2941 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	for {
		yyj2941++
		if yyhl2941 {
			yyb2941 = yyj2941 > l
		} else {
			yyb2941 = r.CheckBreak()
		}
		if yyb2941 {
			break
		}
		z.DecStructFieldNotFound(yyj2941-1, "")
	}
	r.ReadEnd()
}

func (x *PodExecOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2949 := z.EncBinary()
		_ = yym2949
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2950 := !z.EncBinary()
			yy2arr2950 := z.EncBasicHandle().StructToArray
			var yyq2950 [8]bool
			_, _, _ = yysep2950, yyq2950, yy2arr2950
			const yyr2950 bool = false
			yyq2950[0] = x.Kind != ""
			yyq2950[1] = x.APIVersion != ""
			yyq2950[2] = x.Stdin != false
			yyq2950[3] = x.Stdout != false
			yyq2950[4] = x.Stderr != false
			yyq2950[5] = x.TTY != false
			yyq2950[6] = x.Container != ""
			if yyr2950 || yy2arr2950 {
				r.EncodeArrayStart(8)
			} else {
				var yynn2950 int = 1
				for _, b := range yyq2950 {
					if b {
						yynn2950++
					}
				}
				r.EncodeMapStart(yynn2950)
			}
			if yyr2950 || yy2arr2950 {
				if yyq2950[0] {
					yym2952 := z.EncBinary()
					_ = yym2952
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2950[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2953 := z.EncBinary()
					_ = yym2953
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2950 || yy2arr2950 {
				if yyq2950[1] {
					yym2955 := z.EncBinary()
					_ = yym2955
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2950[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2956 := z.EncBinary()
					_ = yym2956
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2950 || yy2arr2950 {
				if yyq2950[2] {
					yym2958 := z.EncBinary()
					_ = yym2958
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2950[2] {
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					yym2959 := z.EncBinary()
					_ = yym2959
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr2950 || yy2arr2950 {
				if yyq2950[3] {
					yym2961 := z.EncBinary()
					_ = yym2961
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2950[3] {
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					yym2962 := z.EncBinary()
					_ = yym2962
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr2950 || yy2arr2950 {
				if yyq2950[4] {
					yym2964 := z.EncBinary()
					_ = yym2964
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2950[4] {
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					yym2965 := z.EncBinary()
					_ = yym2965
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr2950 || yy2arr2950 {
				if yyq2950[5] {
					yym2967 := z.EncBinary()
					_ = yym2967
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2950[5] {
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					yym2968 := z.EncBinary()
					_ = yym2968
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr2950 || yy2arr2950 {
				if yyq2950[6] {
					yym2970 := z.EncBinary()
					_ = yym2970
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2950[6] {
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					yym2971 := z.EncBinary()
					_ = yym2971
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr2950 || yy2arr2950 {
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym2973 := z.EncBinary()
					_ = yym2973
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("command"))
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym2974 := z.EncBinary()
					_ = yym2974
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			}
			if yysep2950 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodExecOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2975 := z.DecBinary()
	_ = yym2975
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2976 := r.ReadMapStart()
			if yyl2976 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2976, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2976 := r.ReadArrayStart()
			if yyl2976 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2976, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodExecOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2977Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2977Slc
	var yyhl2977 bool = l >= 0
	for yyj2977 := 0; ; yyj2977++ {
		if yyhl2977 {
			if yyj2977 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2977Slc = r.DecodeBytes(yys2977Slc, true, true)
		yys2977 := string(yys2977Slc)
		switch yys2977 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv2985 := &x.Command
				yym2986 := z.DecBinary()
				_ = yym2986
				if false {
				} else {
					z.F.DecSliceStringX(yyv2985, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2977)
		} // end switch yys2977
	} // end for yyj2977
	if !yyhl2977 {
		r.ReadEnd()
	}
}

func (x *PodExecOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2987 int
	var yyb2987 bool
	var yyhl2987 bool = l >= 0
	yyj2987++
	if yyhl2987 {
		yyb2987 = yyj2987 > l
	} else {
		yyb2987 = r.CheckBreak()
	}
	if yyb2987 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2987++
	if yyhl2987 {
		yyb2987 = yyj2987 > l
	} else {
		yyb2987 = r.CheckBreak()
	}
	if yyb2987 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2987++
	if yyhl2987 {
		yyb2987 = yyj2987 > l
	} else {
		yyb2987 = r.CheckBreak()
	}
	if yyb2987 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj2987++
	if yyhl2987 {
		yyb2987 = yyj2987 > l
	} else {
		yyb2987 = r.CheckBreak()
	}
	if yyb2987 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj2987++
	if yyhl2987 {
		yyb2987 = yyj2987 > l
	} else {
		yyb2987 = r.CheckBreak()
	}
	if yyb2987 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj2987++
	if yyhl2987 {
		yyb2987 = yyj2987 > l
	} else {
		yyb2987 = r.CheckBreak()
	}
	if yyb2987 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj2987++
	if yyhl2987 {
		yyb2987 = yyj2987 > l
	} else {
		yyb2987 = r.CheckBreak()
	}
	if yyb2987 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj2987++
	if yyhl2987 {
		yyb2987 = yyj2987 > l
	} else {
		yyb2987 = r.CheckBreak()
	}
	if yyb2987 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv2995 := &x.Command
		yym2996 := z.DecBinary()
		_ = yym2996
		if false {
		} else {
			z.F.DecSliceStringX(yyv2995, false, d)
		}
	}
	for {
		yyj2987++
		if yyhl2987 {
			yyb2987 = yyj2987 > l
		} else {
			yyb2987 = r.CheckBreak()
		}
		if yyb2987 {
			break
		}
		z.DecStructFieldNotFound(yyj2987-1, "")
	}
	r.ReadEnd()
}

func (x *PodProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2997 := z.EncBinary()
		_ = yym2997
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2998 := !z.EncBinary()
			yy2arr2998 := z.EncBasicHandle().StructToArray
			var yyq2998 [3]bool
			_, _, _ = yysep2998, yyq2998, yy2arr2998
			const yyr2998 bool = false
			yyq2998[0] = x.Kind != ""
			yyq2998[1] = x.APIVersion != ""
			yyq2998[2] = x.Path != ""
			if yyr2998 || yy2arr2998 {
				r.EncodeArrayStart(3)
			} else {
				var yynn2998 int = 0
				for _, b := range yyq2998 {
					if b {
						yynn2998++
					}
				}
				r.EncodeMapStart(yynn2998)
			}
			if yyr2998 || yy2arr2998 {
				if yyq2998[0] {
					yym3000 := z.EncBinary()
					_ = yym3000
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2998[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3001 := z.EncBinary()
					_ = yym3001
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2998 || yy2arr2998 {
				if yyq2998[1] {
					yym3003 := z.EncBinary()
					_ = yym3003
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2998[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3004 := z.EncBinary()
					_ = yym3004
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2998 || yy2arr2998 {
				if yyq2998[2] {
					yym3006 := z.EncBinary()
					_ = yym3006
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2998[2] {
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					yym3007 := z.EncBinary()
					_ = yym3007
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yysep2998 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3008 := z.DecBinary()
	_ = yym3008
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3009 := r.ReadMapStart()
			if yyl3009 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3009, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3009 := r.ReadArrayStart()
			if yyl3009 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3009, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3010Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3010Slc
	var yyhl3010 bool = l >= 0
	for yyj3010 := 0; ; yyj3010++ {
		if yyhl3010 {
			if yyj3010 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3010Slc = r.DecodeBytes(yys3010Slc, true, true)
		yys3010 := string(yys3010Slc)
		switch yys3010 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3010)
		} // end switch yys3010
	} // end for yyj3010
	if !yyhl3010 {
		r.ReadEnd()
	}
}

func (x *PodProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3014 int
	var yyb3014 bool
	var yyhl3014 bool = l >= 0
	yyj3014++
	if yyhl3014 {
		yyb3014 = yyj3014 > l
	} else {
		yyb3014 = r.CheckBreak()
	}
	if yyb3014 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3014++
	if yyhl3014 {
		yyb3014 = yyj3014 > l
	} else {
		yyb3014 = r.CheckBreak()
	}
	if yyb3014 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3014++
	if yyhl3014 {
		yyb3014 = yyj3014 > l
	} else {
		yyb3014 = r.CheckBreak()
	}
	if yyb3014 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3014++
		if yyhl3014 {
			yyb3014 = yyj3014 > l
		} else {
			yyb3014 = r.CheckBreak()
		}
		if yyb3014 {
			break
		}
		z.DecStructFieldNotFound(yyj3014-1, "")
	}
	r.ReadEnd()
}

func (x *ObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3018 := z.EncBinary()
		_ = yym3018
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3019 := !z.EncBinary()
			yy2arr3019 := z.EncBasicHandle().StructToArray
			var yyq3019 [8]bool
			_, _, _ = yysep3019, yyq3019, yy2arr3019
			const yyr3019 bool = false
			yyq3019[0] = x.Kind != ""
			yyq3019[1] = x.Namespace != ""
			yyq3019[2] = x.Tenant != ""
			yyq3019[3] = x.Name != ""
			yyq3019[4] = x.UID != ""
			yyq3019[5] = x.APIVersion != ""
			yyq3019[6] = x.ResourceVersion != ""
			yyq3019[7] = x.FieldPath != ""
			if yyr3019 || yy2arr3019 {
				r.EncodeArrayStart(8)
			} else {
				var yynn3019 int = 0
				for _, b := range yyq3019 {
					if b {
						yynn3019++
					}
				}
				r.EncodeMapStart(yynn3019)
			}
			if yyr3019 || yy2arr3019 {
				if yyq3019[0] {
					yym3021 := z.EncBinary()
					_ = yym3021
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3019[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3022 := z.EncBinary()
					_ = yym3022
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3019 || yy2arr3019 {
				if yyq3019[1] {
					yym3024 := z.EncBinary()
					_ = yym3024
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3019[1] {
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					yym3025 := z.EncBinary()
					_ = yym3025
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr3019 || yy2arr3019 {
				if yyq3019[2] {
					yym3027 := z.EncBinary()
					_ = yym3027
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Tenant))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3019[2] {
					r.EncodeString(codecSelferC_UTF81234, string("tenant"))
					yym3028 := z.EncBinary()
					_ = yym3028
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Tenant))
					}
				}
			}
			if yyr3019 || yy2arr3019 {
				if yyq3019[3] {
					yym3030 := z.EncBinary()
					_ = yym3030
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3019[3] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					yym3031 := z.EncBinary()
					_ = yym3031
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr3019 || yy2arr3019 {
				if yyq3019[4] {
					yym3033 := z.EncBinary()
					_ = yym3033
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3019[4] {
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					yym3034 := z.EncBinary()
					_ = yym3034
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr3019 || yy2arr3019 {
				if yyq3019[5] {
					yym3036 := z.EncBinary()
					_ = yym3036
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3019[5] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3037 := z.EncBinary()
					_ = yym3037
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3019 || yy2arr3019 {
				if yyq3019[6] {
					yym3039 := z.EncBinary()
					_ = yym3039
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3019[6] {
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					yym3040 := z.EncBinary()
					_ = yym3040
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr3019 || yy2arr3019 {
				if yyq3019[7] {
					yym3042 := z.EncBinary()
					_ = yym3042
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3019[7] {
					r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
					yym3043 := z.EncBinary()
					_ = yym3043
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				}
			}
			if yysep3019 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3044 := z.DecBinary()
	_ = yym3044
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3045 := r.ReadMapStart()
			if yyl3045 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3045, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3045 := r.ReadArrayStart()
			if yyl3045 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3045, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3046Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3046Slc
	var yyhl3046 bool = l >= 0
	for yyj3046 := 0; ; yyj3046++ {
		if yyhl3046 {
			if yyj3046 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3046Slc = r.DecodeBytes(yys3046Slc, true, true)
		yys3046 := string(yys3046Slc)
		switch yys3046 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "tenant":
			if r.TryDecodeAsNil() {
				x.Tenant = ""
			} else {
				x.Tenant = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3046)
		} // end switch yys3046
	} // end for yyj3046
	if !yyhl3046 {
		r.ReadEnd()
	}
}

func (x *ObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3055 int
	var yyb3055 bool
	var yyhl3055 bool = l >= 0
	yyj3055++
	if yyhl3055 {
		yyb3055 = yyj3055 > l
	} else {
		yyb3055 = r.CheckBreak()
	}
	if yyb3055 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3055++
	if yyhl3055 {
		yyb3055 = yyj3055 > l
	} else {
		yyb3055 = r.CheckBreak()
	}
	if yyb3055 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj3055++
	if yyhl3055 {
		yyb3055 = yyj3055 > l
	} else {
		yyb3055 = r.CheckBreak()
	}
	if yyb3055 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Tenant = ""
	} else {
		x.Tenant = string(r.DecodeString())
	}
	yyj3055++
	if yyhl3055 {
		yyb3055 = yyj3055 > l
	} else {
		yyb3055 = r.CheckBreak()
	}
	if yyb3055 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj3055++
	if yyhl3055 {
		yyb3055 = yyj3055 > l
	} else {
		yyb3055 = r.CheckBreak()
	}
	if yyb3055 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj3055++
	if yyhl3055 {
		yyb3055 = yyj3055 > l
	} else {
		yyb3055 = r.CheckBreak()
	}
	if yyb3055 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3055++
	if yyhl3055 {
		yyb3055 = yyj3055 > l
	} else {
		yyb3055 = r.CheckBreak()
	}
	if yyb3055 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj3055++
	if yyhl3055 {
		yyb3055 = yyj3055 > l
	} else {
		yyb3055 = r.CheckBreak()
	}
	if yyb3055 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj3055++
		if yyhl3055 {
			yyb3055 = yyj3055 > l
		} else {
			yyb3055 = r.CheckBreak()
		}
		if yyb3055 {
			break
		}
		z.DecStructFieldNotFound(yyj3055-1, "")
	}
	r.ReadEnd()
}

func (x *LocalObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3064 := z.EncBinary()
		_ = yym3064
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3065 := !z.EncBinary()
			yy2arr3065 := z.EncBasicHandle().StructToArray
			var yyq3065 [1]bool
			_, _, _ = yysep3065, yyq3065, yy2arr3065
			const yyr3065 bool = false
			yyq3065[0] = x.Name != ""
			if yyr3065 || yy2arr3065 {
				r.EncodeArrayStart(1)
			} else {
				var yynn3065 int = 0
				for _, b := range yyq3065 {
					if b {
						yynn3065++
					}
				}
				r.EncodeMapStart(yynn3065)
			}
			if yyr3065 || yy2arr3065 {
				if yyq3065[0] {
					yym3067 := z.EncBinary()
					_ = yym3067
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3065[0] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					yym3068 := z.EncBinary()
					_ = yym3068
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yysep3065 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LocalObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3069 := z.DecBinary()
	_ = yym3069
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3070 := r.ReadMapStart()
			if yyl3070 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3070, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3070 := r.ReadArrayStart()
			if yyl3070 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3070, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LocalObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3071Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3071Slc
	var yyhl3071 bool = l >= 0
	for yyj3071 := 0; ; yyj3071++ {
		if yyhl3071 {
			if yyj3071 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3071Slc = r.DecodeBytes(yys3071Slc, true, true)
		yys3071 := string(yys3071Slc)
		switch yys3071 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3071)
		} // end switch yys3071
	} // end for yyj3071
	if !yyhl3071 {
		r.ReadEnd()
	}
}

func (x *LocalObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3073 int
	var yyb3073 bool
	var yyhl3073 bool = l >= 0
	yyj3073++
	if yyhl3073 {
		yyb3073 = yyj3073 > l
	} else {
		yyb3073 = r.CheckBreak()
	}
	if yyb3073 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	for {
		yyj3073++
		if yyhl3073 {
			yyb3073 = yyj3073 > l
		} else {
			yyb3073 = r.CheckBreak()
		}
		if yyb3073 {
			break
		}
		z.DecStructFieldNotFound(yyj3073-1, "")
	}
	r.ReadEnd()
}

func (x *SerializedReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3075 := z.EncBinary()
		_ = yym3075
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3076 := !z.EncBinary()
			yy2arr3076 := z.EncBasicHandle().StructToArray
			var yyq3076 [3]bool
			_, _, _ = yysep3076, yyq3076, yy2arr3076
			const yyr3076 bool = false
			yyq3076[0] = x.Kind != ""
			yyq3076[1] = x.APIVersion != ""
			yyq3076[2] = true
			if yyr3076 || yy2arr3076 {
				r.EncodeArrayStart(3)
			} else {
				var yynn3076 int = 0
				for _, b := range yyq3076 {
					if b {
						yynn3076++
					}
				}
				r.EncodeMapStart(yynn3076)
			}
			if yyr3076 || yy2arr3076 {
				if yyq3076[0] {
					yym3078 := z.EncBinary()
					_ = yym3078
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3076[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3079 := z.EncBinary()
					_ = yym3079
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3076 || yy2arr3076 {
				if yyq3076[1] {
					yym3081 := z.EncBinary()
					_ = yym3081
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3076[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3082 := z.EncBinary()
					_ = yym3082
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3076 || yy2arr3076 {
				if yyq3076[2] {
					yy3084 := &x.Reference
					yy3084.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3076[2] {
					r.EncodeString(codecSelferC_UTF81234, string("reference"))
					yy3085 := &x.Reference
					yy3085.CodecEncodeSelf(e)
				}
			}
			if yysep3076 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *SerializedReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3086 := z.DecBinary()
	_ = yym3086
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3087 := r.ReadMapStart()
			if yyl3087 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3087, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3087 := r.ReadArrayStart()
			if yyl3087 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3087, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SerializedReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3088Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3088Slc
	var yyhl3088 bool = l >= 0
	for yyj3088 := 0; ; yyj3088++ {
		if yyhl3088 {
			if yyj3088 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3088Slc = r.DecodeBytes(yys3088Slc, true, true)
		yys3088 := string(yys3088Slc)
		switch yys3088 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "reference":
			if r.TryDecodeAsNil() {
				x.Reference = ObjectReference{}
			} else {
				yyv3091 := &x.Reference
				yyv3091.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3088)
		} // end switch yys3088
	} // end for yyj3088
	if !yyhl3088 {
		r.ReadEnd()
	}
}

func (x *SerializedReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3092 int
	var yyb3092 bool
	var yyhl3092 bool = l >= 0
	yyj3092++
	if yyhl3092 {
		yyb3092 = yyj3092 > l
	} else {
		yyb3092 = r.CheckBreak()
	}
	if yyb3092 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3092++
	if yyhl3092 {
		yyb3092 = yyj3092 > l
	} else {
		yyb3092 = r.CheckBreak()
	}
	if yyb3092 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3092++
	if yyhl3092 {
		yyb3092 = yyj3092 > l
	} else {
		yyb3092 = r.CheckBreak()
	}
	if yyb3092 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reference = ObjectReference{}
	} else {
		yyv3095 := &x.Reference
		yyv3095.CodecDecodeSelf(d)
	}
	for {
		yyj3092++
		if yyhl3092 {
			yyb3092 = yyj3092 > l
		} else {
			yyb3092 = r.CheckBreak()
		}
		if yyb3092 {
			break
		}
		z.DecStructFieldNotFound(yyj3092-1, "")
	}
	r.ReadEnd()
}

func (x *EventSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3096 := z.EncBinary()
		_ = yym3096
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3097 := !z.EncBinary()
			yy2arr3097 := z.EncBasicHandle().StructToArray
			var yyq3097 [2]bool
			_, _, _ = yysep3097, yyq3097, yy2arr3097
			const yyr3097 bool = false
			yyq3097[0] = x.Component != ""
			yyq3097[1] = x.Host != ""
			if yyr3097 || yy2arr3097 {
				r.EncodeArrayStart(2)
			} else {
				var yynn3097 int = 0
				for _, b := range yyq3097 {
					if b {
						yynn3097++
					}
				}
				r.EncodeMapStart(yynn3097)
			}
			if yyr3097 || yy2arr3097 {
				if yyq3097[0] {
					yym3099 := z.EncBinary()
					_ = yym3099
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3097[0] {
					r.EncodeString(codecSelferC_UTF81234, string("component"))
					yym3100 := z.EncBinary()
					_ = yym3100
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				}
			}
			if yyr3097 || yy2arr3097 {
				if yyq3097[1] {
					yym3102 := z.EncBinary()
					_ = yym3102
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3097[1] {
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					yym3103 := z.EncBinary()
					_ = yym3103
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yysep3097 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EventSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3104 := z.DecBinary()
	_ = yym3104
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3105 := r.ReadMapStart()
			if yyl3105 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3105, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3105 := r.ReadArrayStart()
			if yyl3105 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3105, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3106Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3106Slc
	var yyhl3106 bool = l >= 0
	for yyj3106 := 0; ; yyj3106++ {
		if yyhl3106 {
			if yyj3106 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3106Slc = r.DecodeBytes(yys3106Slc, true, true)
		yys3106 := string(yys3106Slc)
		switch yys3106 {
		case "component":
			if r.TryDecodeAsNil() {
				x.Component = ""
			} else {
				x.Component = string(r.DecodeString())
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3106)
		} // end switch yys3106
	} // end for yyj3106
	if !yyhl3106 {
		r.ReadEnd()
	}
}

func (x *EventSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3109 int
	var yyb3109 bool
	var yyhl3109 bool = l >= 0
	yyj3109++
	if yyhl3109 {
		yyb3109 = yyj3109 > l
	} else {
		yyb3109 = r.CheckBreak()
	}
	if yyb3109 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Component = ""
	} else {
		x.Component = string(r.DecodeString())
	}
	yyj3109++
	if yyhl3109 {
		yyb3109 = yyj3109 > l
	} else {
		yyb3109 = r.CheckBreak()
	}
	if yyb3109 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	for {
		yyj3109++
		if yyhl3109 {
			yyb3109 = yyj3109 > l
		} else {
			yyb3109 = r.CheckBreak()
		}
		if yyb3109 {
			break
		}
		z.DecStructFieldNotFound(yyj3109-1, "")
	}
	r.ReadEnd()
}

func (x *Event) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3112 := z.EncBinary()
		_ = yym3112
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3113 := !z.EncBinary()
			yy2arr3113 := z.EncBasicHandle().StructToArray
			var yyq3113 [10]bool
			_, _, _ = yysep3113, yyq3113, yy2arr3113
			const yyr3113 bool = false
			yyq3113[0] = x.Kind != ""
			yyq3113[1] = x.APIVersion != ""
			yyq3113[4] = x.Reason != ""
			yyq3113[5] = x.Message != ""
			yyq3113[6] = true
			yyq3113[7] = true
			yyq3113[8] = true
			yyq3113[9] = x.Count != 0
			if yyr3113 || yy2arr3113 {
				r.EncodeArrayStart(10)
			} else {
				var yynn3113 int = 2
				for _, b := range yyq3113 {
					if b {
						yynn3113++
					}
				}
				r.EncodeMapStart(yynn3113)
			}
			if yyr3113 || yy2arr3113 {
				if yyq3113[0] {
					yym3115 := z.EncBinary()
					_ = yym3115
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3113[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3116 := z.EncBinary()
					_ = yym3116
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3113 || yy2arr3113 {
				if yyq3113[1] {
					yym3118 := z.EncBinary()
					_ = yym3118
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3113[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3119 := z.EncBinary()
					_ = yym3119
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3113 || yy2arr3113 {
				yy3121 := &x.ObjectMeta
				yy3121.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("metadata"))
				yy3122 := &x.ObjectMeta
				yy3122.CodecEncodeSelf(e)
			}
			if yyr3113 || yy2arr3113 {
				yy3124 := &x.InvolvedObject
				yy3124.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("involvedObject"))
				yy3125 := &x.InvolvedObject
				yy3125.CodecEncodeSelf(e)
			}
			if yyr3113 || yy2arr3113 {
				if yyq3113[4] {
					yym3127 := z.EncBinary()
					_ = yym3127
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3113[4] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym3128 := z.EncBinary()
					_ = yym3128
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3113 || yy2arr3113 {
				if yyq3113[5] {
					yym3130 := z.EncBinary()
					_ = yym3130
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3113[5] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym3131 := z.EncBinary()
					_ = yym3131
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3113 || yy2arr3113 {
				if yyq3113[6] {
					yy3133 := &x.Source
					yy3133.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3113[6] {
					r.EncodeString(codecSelferC_UTF81234, string("source"))
					yy3134 := &x.Source
					yy3134.CodecEncodeSelf(e)
				}
			}
			if yyr3113 || yy2arr3113 {
				if yyq3113[7] {
					yy3136 := &x.FirstTimestamp
					yym3137 := z.EncBinary()
					_ = yym3137
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3136) {
					} else if yym3137 {
						z.EncBinaryMarshal(yy3136)
					} else if !yym3137 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3136)
					} else {
						z.EncFallback(yy3136)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3113[7] {
					r.EncodeString(codecSelferC_UTF81234, string("firstTimestamp"))
					yy3138 := &x.FirstTimestamp
					yym3139 := z.EncBinary()
					_ = yym3139
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3138) {
					} else if yym3139 {
						z.EncBinaryMarshal(yy3138)
					} else if !yym3139 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3138)
					} else {
						z.EncFallback(yy3138)
					}
				}
			}
			if yyr3113 || yy2arr3113 {
				if yyq3113[8] {
					yy3141 := &x.LastTimestamp
					yym3142 := z.EncBinary()
					_ = yym3142
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3141) {
					} else if yym3142 {
						z.EncBinaryMarshal(yy3141)
					} else if !yym3142 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3141)
					} else {
						z.EncFallback(yy3141)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3113[8] {
					r.EncodeString(codecSelferC_UTF81234, string("lastTimestamp"))
					yy3143 := &x.LastTimestamp
					yym3144 := z.EncBinary()
					_ = yym3144
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3143) {
					} else if yym3144 {
						z.EncBinaryMarshal(yy3143)
					} else if !yym3144 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3143)
					} else {
						z.EncFallback(yy3143)
					}
				}
			}
			if yyr3113 || yy2arr3113 {
				if yyq3113[9] {
					yym3146 := z.EncBinary()
					_ = yym3146
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq3113[9] {
					r.EncodeString(codecSelferC_UTF81234, string("count"))
					yym3147 := z.EncBinary()
					_ = yym3147
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				}
			}
			if yysep3113 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Event) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3148 := z.DecBinary()
	_ = yym3148
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3149 := r.ReadMapStart()
			if yyl3149 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3149, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3149 := r.ReadArrayStart()
			if yyl3149 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3149, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Event) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3150Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3150Slc
	var yyhl3150 bool = l >= 0
	for yyj3150 := 0; ; yyj3150++ {
		if yyhl3150 {
			if yyj3150 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3150Slc = r.DecodeBytes(yys3150Slc, true, true)
		yys3150 := string(yys3150Slc)
		switch yys3150 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3153 := &x.ObjectMeta
				yyv3153.CodecDecodeSelf(d)
			}
		case "involvedObject":
			if r.TryDecodeAsNil() {
				x.InvolvedObject = ObjectReference{}
			} else {
				yyv3154 := &x.InvolvedObject
				yyv3154.CodecDecodeSelf(d)
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "source":
			if r.TryDecodeAsNil() {
				x.Source = EventSource{}
			} else {
				yyv3157 := &x.Source
				yyv3157.CodecDecodeSelf(d)
			}
		case "firstTimestamp":
			if r.TryDecodeAsNil() {
				x.FirstTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv3158 := &x.FirstTimestamp
				yym3159 := z.DecBinary()
				_ = yym3159
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3158) {
				} else if yym3159 {
					z.DecBinaryUnmarshal(yyv3158)
				} else if !yym3159 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3158)
				} else {
					z.DecFallback(yyv3158, false)
				}
			}
		case "lastTimestamp":
			if r.TryDecodeAsNil() {
				x.LastTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv3160 := &x.LastTimestamp
				yym3161 := z.DecBinary()
				_ = yym3161
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3160) {
				} else if yym3161 {
					z.DecBinaryUnmarshal(yyv3160)
				} else if !yym3161 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3160)
				} else {
					z.DecFallback(yyv3160, false)
				}
			}
		case "count":
			if r.TryDecodeAsNil() {
				x.Count = 0
			} else {
				x.Count = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys3150)
		} // end switch yys3150
	} // end for yyj3150
	if !yyhl3150 {
		r.ReadEnd()
	}
}

func (x *Event) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3163 int
	var yyb3163 bool
	var yyhl3163 bool = l >= 0
	yyj3163++
	if yyhl3163 {
		yyb3163 = yyj3163 > l
	} else {
		yyb3163 = r.CheckBreak()
	}
	if yyb3163 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3163++
	if yyhl3163 {
		yyb3163 = yyj3163 > l
	} else {
		yyb3163 = r.CheckBreak()
	}
	if yyb3163 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3163++
	if yyhl3163 {
		yyb3163 = yyj3163 > l
	} else {
		yyb3163 = r.CheckBreak()
	}
	if yyb3163 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3166 := &x.ObjectMeta
		yyv3166.CodecDecodeSelf(d)
	}
	yyj3163++
	if yyhl3163 {
		yyb3163 = yyj3163 > l
	} else {
		yyb3163 = r.CheckBreak()
	}
	if yyb3163 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.InvolvedObject = ObjectReference{}
	} else {
		yyv3167 := &x.InvolvedObject
		yyv3167.CodecDecodeSelf(d)
	}
	yyj3163++
	if yyhl3163 {
		yyb3163 = yyj3163 > l
	} else {
		yyb3163 = r.CheckBreak()
	}
	if yyb3163 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3163++
	if yyhl3163 {
		yyb3163 = yyj3163 > l
	} else {
		yyb3163 = r.CheckBreak()
	}
	if yyb3163 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj3163++
	if yyhl3163 {
		yyb3163 = yyj3163 > l
	} else {
		yyb3163 = r.CheckBreak()
	}
	if yyb3163 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Source = EventSource{}
	} else {
		yyv3170 := &x.Source
		yyv3170.CodecDecodeSelf(d)
	}
	yyj3163++
	if yyhl3163 {
		yyb3163 = yyj3163 > l
	} else {
		yyb3163 = r.CheckBreak()
	}
	if yyb3163 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FirstTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv3171 := &x.FirstTimestamp
		yym3172 := z.DecBinary()
		_ = yym3172
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3171) {
		} else if yym3172 {
			z.DecBinaryUnmarshal(yyv3171)
		} else if !yym3172 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3171)
		} else {
			z.DecFallback(yyv3171, false)
		}
	}
	yyj3163++
	if yyhl3163 {
		yyb3163 = yyj3163 > l
	} else {
		yyb3163 = r.CheckBreak()
	}
	if yyb3163 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv3173 := &x.LastTimestamp
		yym3174 := z.DecBinary()
		_ = yym3174
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3173) {
		} else if yym3174 {
			z.DecBinaryUnmarshal(yyv3173)
		} else if !yym3174 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3173)
		} else {
			z.DecFallback(yyv3173, false)
		}
	}
	yyj3163++
	if yyhl3163 {
		yyb3163 = yyj3163 > l
	} else {
		yyb3163 = r.CheckBreak()
	}
	if yyb3163 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Count = 0
	} else {
		x.Count = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj3163++
		if yyhl3163 {
			yyb3163 = yyj3163 > l
		} else {
			yyb3163 = r.CheckBreak()
		}
		if yyb3163 {
			break
		}
		z.DecStructFieldNotFound(yyj3163-1, "")
	}
	r.ReadEnd()
}

func (x *EventList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3176 := z.EncBinary()
		_ = yym3176
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3177 := !z.EncBinary()
			yy2arr3177 := z.EncBasicHandle().StructToArray
			var yyq3177 [4]bool
			_, _, _ = yysep3177, yyq3177, yy2arr3177
			const yyr3177 bool = false
			yyq3177[0] = x.Kind != ""
			yyq3177[1] = x.APIVersion != ""
			yyq3177[2] = true
			if yyr3177 || yy2arr3177 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3177 int = 1
				for _, b := range yyq3177 {
					if b {
						yynn3177++
					}
				}
				r.EncodeMapStart(yynn3177)
			}
			if yyr3177 || yy2arr3177 {
				if yyq3177[0] {
					yym3179 := z.EncBinary()
					_ = yym3179
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3177[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3180 := z.EncBinary()
					_ = yym3180
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3177 || yy2arr3177 {
				if yyq3177[1] {
					yym3182 := z.EncBinary()
					_ = yym3182
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3177[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3183 := z.EncBinary()
					_ = yym3183
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3177 || yy2arr3177 {
				if yyq3177[2] {
					yy3185 := &x.ListMeta
					yym3186 := z.EncBinary()
					_ = yym3186
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3185) {
					} else {
						z.EncFallback(yy3185)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3177[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3187 := &x.ListMeta
					yym3188 := z.EncBinary()
					_ = yym3188
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3187) {
					} else {
						z.EncFallback(yy3187)
					}
				}
			}
			if yyr3177 || yy2arr3177 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3190 := z.EncBinary()
					_ = yym3190
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3191 := z.EncBinary()
					_ = yym3191
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			}
			if yysep3177 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EventList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3192 := z.DecBinary()
	_ = yym3192
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3193 := r.ReadMapStart()
			if yyl3193 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3193, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3193 := r.ReadArrayStart()
			if yyl3193 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3193, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3194Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3194Slc
	var yyhl3194 bool = l >= 0
	for yyj3194 := 0; ; yyj3194++ {
		if yyhl3194 {
			if yyj3194 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3194Slc = r.DecodeBytes(yys3194Slc, true, true)
		yys3194 := string(yys3194Slc)
		switch yys3194 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3197 := &x.ListMeta
				yym3198 := z.DecBinary()
				_ = yym3198
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3197) {
				} else {
					z.DecFallback(yyv3197, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3199 := &x.Items
				yym3200 := z.DecBinary()
				_ = yym3200
				if false {
				} else {
					h.decSliceEvent((*[]Event)(yyv3199), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3194)
		} // end switch yys3194
	} // end for yyj3194
	if !yyhl3194 {
		r.ReadEnd()
	}
}

func (x *EventList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3201 int
	var yyb3201 bool
	var yyhl3201 bool = l >= 0
	yyj3201++
	if yyhl3201 {
		yyb3201 = yyj3201 > l
	} else {
		yyb3201 = r.CheckBreak()
	}
	if yyb3201 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3201++
	if yyhl3201 {
		yyb3201 = yyj3201 > l
	} else {
		yyb3201 = r.CheckBreak()
	}
	if yyb3201 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3201++
	if yyhl3201 {
		yyb3201 = yyj3201 > l
	} else {
		yyb3201 = r.CheckBreak()
	}
	if yyb3201 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3204 := &x.ListMeta
		yym3205 := z.DecBinary()
		_ = yym3205
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3204) {
		} else {
			z.DecFallback(yyv3204, false)
		}
	}
	yyj3201++
	if yyhl3201 {
		yyb3201 = yyj3201 > l
	} else {
		yyb3201 = r.CheckBreak()
	}
	if yyb3201 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3206 := &x.Items
		yym3207 := z.DecBinary()
		_ = yym3207
		if false {
		} else {
			h.decSliceEvent((*[]Event)(yyv3206), d)
		}
	}
	for {
		yyj3201++
		if yyhl3201 {
			yyb3201 = yyj3201 > l
		} else {
			yyb3201 = r.CheckBreak()
		}
		if yyb3201 {
			break
		}
		z.DecStructFieldNotFound(yyj3201-1, "")
	}
	r.ReadEnd()
}

func (x *List) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3208 := z.EncBinary()
		_ = yym3208
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3209 := !z.EncBinary()
			yy2arr3209 := z.EncBasicHandle().StructToArray
			var yyq3209 [4]bool
			_, _, _ = yysep3209, yyq3209, yy2arr3209
			const yyr3209 bool = false
			yyq3209[0] = x.Kind != ""
			yyq3209[1] = x.APIVersion != ""
			yyq3209[2] = true
			if yyr3209 || yy2arr3209 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3209 int = 1
				for _, b := range yyq3209 {
					if b {
						yynn3209++
					}
				}
				r.EncodeMapStart(yynn3209)
			}
			if yyr3209 || yy2arr3209 {
				if yyq3209[0] {
					yym3211 := z.EncBinary()
					_ = yym3211
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3209[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3212 := z.EncBinary()
					_ = yym3212
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3209 || yy2arr3209 {
				if yyq3209[1] {
					yym3214 := z.EncBinary()
					_ = yym3214
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3209[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3215 := z.EncBinary()
					_ = yym3215
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3209 || yy2arr3209 {
				if yyq3209[2] {
					yy3217 := &x.ListMeta
					yym3218 := z.EncBinary()
					_ = yym3218
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3217) {
					} else {
						z.EncFallback(yy3217)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3209[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3219 := &x.ListMeta
					yym3220 := z.EncBinary()
					_ = yym3220
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3219) {
					} else {
						z.EncFallback(yy3219)
					}
				}
			}
			if yyr3209 || yy2arr3209 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3222 := z.EncBinary()
					_ = yym3222
					if false {
					} else {
						h.encSliceruntime_RawExtension(([]pkg6_runtime.RawExtension)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3223 := z.EncBinary()
					_ = yym3223
					if false {
					} else {
						h.encSliceruntime_RawExtension(([]pkg6_runtime.RawExtension)(x.Items), e)
					}
				}
			}
			if yysep3209 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *List) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3224 := z.DecBinary()
	_ = yym3224
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3225 := r.ReadMapStart()
			if yyl3225 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3225, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3225 := r.ReadArrayStart()
			if yyl3225 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3225, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *List) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3226Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3226Slc
	var yyhl3226 bool = l >= 0
	for yyj3226 := 0; ; yyj3226++ {
		if yyhl3226 {
			if yyj3226 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3226Slc = r.DecodeBytes(yys3226Slc, true, true)
		yys3226 := string(yys3226Slc)
		switch yys3226 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3229 := &x.ListMeta
				yym3230 := z.DecBinary()
				_ = yym3230
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3229) {
				} else {
					z.DecFallback(yyv3229, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3231 := &x.Items
				yym3232 := z.DecBinary()
				_ = yym3232
				if false {
				} else {
					h.decSliceruntime_RawExtension((*[]pkg6_runtime.RawExtension)(yyv3231), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3226)
		} // end switch yys3226
	} // end for yyj3226
	if !yyhl3226 {
		r.ReadEnd()
	}
}

func (x *List) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3233 int
	var yyb3233 bool
	var yyhl3233 bool = l >= 0
	yyj3233++
	if yyhl3233 {
		yyb3233 = yyj3233 > l
	} else {
		yyb3233 = r.CheckBreak()
	}
	if yyb3233 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3233++
	if yyhl3233 {
		yyb3233 = yyj3233 > l
	} else {
		yyb3233 = r.CheckBreak()
	}
	if yyb3233 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3233++
	if yyhl3233 {
		yyb3233 = yyj3233 > l
	} else {
		yyb3233 = r.CheckBreak()
	}
	if yyb3233 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3236 := &x.ListMeta
		yym3237 := z.DecBinary()
		_ = yym3237
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3236) {
		} else {
			z.DecFallback(yyv3236, false)
		}
	}
	yyj3233++
	if yyhl3233 {
		yyb3233 = yyj3233 > l
	} else {
		yyb3233 = r.CheckBreak()
	}
	if yyb3233 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3238 := &x.Items
		yym3239 := z.DecBinary()
		_ = yym3239
		if false {
		} else {
			h.decSliceruntime_RawExtension((*[]pkg6_runtime.RawExtension)(yyv3238), d)
		}
	}
	for {
		yyj3233++
		if yyhl3233 {
			yyb3233 = yyj3233 > l
		} else {
			yyb3233 = r.CheckBreak()
		}
		if yyb3233 {
			break
		}
		z.DecStructFieldNotFound(yyj3233-1, "")
	}
	r.ReadEnd()
}

func (x LimitType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3240 := z.EncBinary()
	_ = yym3240
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *LimitType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3241 := z.DecBinary()
	_ = yym3241
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *LimitRangeItem) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3242 := z.EncBinary()
		_ = yym3242
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3243 := !z.EncBinary()
			yy2arr3243 := z.EncBasicHandle().StructToArray
			var yyq3243 [6]bool
			_, _, _ = yysep3243, yyq3243, yy2arr3243
			const yyr3243 bool = false
			yyq3243[0] = x.Type != ""
			yyq3243[1] = len(x.Max) != 0
			yyq3243[2] = len(x.Min) != 0
			yyq3243[3] = len(x.Default) != 0
			yyq3243[4] = len(x.DefaultRequest) != 0
			yyq3243[5] = len(x.MaxLimitRequestRatio) != 0
			if yyr3243 || yy2arr3243 {
				r.EncodeArrayStart(6)
			} else {
				var yynn3243 int = 0
				for _, b := range yyq3243 {
					if b {
						yynn3243++
					}
				}
				r.EncodeMapStart(yynn3243)
			}
			if yyr3243 || yy2arr3243 {
				if yyq3243[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3243[0] {
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr3243 || yy2arr3243 {
				if yyq3243[1] {
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3243[1] {
					r.EncodeString(codecSelferC_UTF81234, string("max"))
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3243 || yy2arr3243 {
				if yyq3243[2] {
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3243[2] {
					r.EncodeString(codecSelferC_UTF81234, string("min"))
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3243 || yy2arr3243 {
				if yyq3243[3] {
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3243[3] {
					r.EncodeString(codecSelferC_UTF81234, string("default"))
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3243 || yy2arr3243 {
				if yyq3243[4] {
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3243[4] {
					r.EncodeString(codecSelferC_UTF81234, string("defaultRequest"))
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3243 || yy2arr3243 {
				if yyq3243[5] {
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3243[5] {
					r.EncodeString(codecSelferC_UTF81234, string("maxLimitRequestRatio"))
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				}
			}
			if yysep3243 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LimitRangeItem) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3250 := z.DecBinary()
	_ = yym3250
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3251 := r.ReadMapStart()
			if yyl3251 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3251, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3251 := r.ReadArrayStart()
			if yyl3251 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3251, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeItem) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3252Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3252Slc
	var yyhl3252 bool = l >= 0
	for yyj3252 := 0; ; yyj3252++ {
		if yyhl3252 {
			if yyj3252 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3252Slc = r.DecodeBytes(yys3252Slc, true, true)
		yys3252 := string(yys3252Slc)
		switch yys3252 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = LimitType(r.DecodeString())
			}
		case "max":
			if r.TryDecodeAsNil() {
				x.Max = nil
			} else {
				yyv3254 := &x.Max
				yyv3254.CodecDecodeSelf(d)
			}
		case "min":
			if r.TryDecodeAsNil() {
				x.Min = nil
			} else {
				yyv3255 := &x.Min
				yyv3255.CodecDecodeSelf(d)
			}
		case "default":
			if r.TryDecodeAsNil() {
				x.Default = nil
			} else {
				yyv3256 := &x.Default
				yyv3256.CodecDecodeSelf(d)
			}
		case "defaultRequest":
			if r.TryDecodeAsNil() {
				x.DefaultRequest = nil
			} else {
				yyv3257 := &x.DefaultRequest
				yyv3257.CodecDecodeSelf(d)
			}
		case "maxLimitRequestRatio":
			if r.TryDecodeAsNil() {
				x.MaxLimitRequestRatio = nil
			} else {
				yyv3258 := &x.MaxLimitRequestRatio
				yyv3258.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3252)
		} // end switch yys3252
	} // end for yyj3252
	if !yyhl3252 {
		r.ReadEnd()
	}
}

func (x *LimitRangeItem) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3259 int
	var yyb3259 bool
	var yyhl3259 bool = l >= 0
	yyj3259++
	if yyhl3259 {
		yyb3259 = yyj3259 > l
	} else {
		yyb3259 = r.CheckBreak()
	}
	if yyb3259 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = LimitType(r.DecodeString())
	}
	yyj3259++
	if yyhl3259 {
		yyb3259 = yyj3259 > l
	} else {
		yyb3259 = r.CheckBreak()
	}
	if yyb3259 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Max = nil
	} else {
		yyv3261 := &x.Max
		yyv3261.CodecDecodeSelf(d)
	}
	yyj3259++
	if yyhl3259 {
		yyb3259 = yyj3259 > l
	} else {
		yyb3259 = r.CheckBreak()
	}
	if yyb3259 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Min = nil
	} else {
		yyv3262 := &x.Min
		yyv3262.CodecDecodeSelf(d)
	}
	yyj3259++
	if yyhl3259 {
		yyb3259 = yyj3259 > l
	} else {
		yyb3259 = r.CheckBreak()
	}
	if yyb3259 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Default = nil
	} else {
		yyv3263 := &x.Default
		yyv3263.CodecDecodeSelf(d)
	}
	yyj3259++
	if yyhl3259 {
		yyb3259 = yyj3259 > l
	} else {
		yyb3259 = r.CheckBreak()
	}
	if yyb3259 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DefaultRequest = nil
	} else {
		yyv3264 := &x.DefaultRequest
		yyv3264.CodecDecodeSelf(d)
	}
	yyj3259++
	if yyhl3259 {
		yyb3259 = yyj3259 > l
	} else {
		yyb3259 = r.CheckBreak()
	}
	if yyb3259 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MaxLimitRequestRatio = nil
	} else {
		yyv3265 := &x.MaxLimitRequestRatio
		yyv3265.CodecDecodeSelf(d)
	}
	for {
		yyj3259++
		if yyhl3259 {
			yyb3259 = yyj3259 > l
		} else {
			yyb3259 = r.CheckBreak()
		}
		if yyb3259 {
			break
		}
		z.DecStructFieldNotFound(yyj3259-1, "")
	}
	r.ReadEnd()
}

func (x *LimitRangeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3266 := z.EncBinary()
		_ = yym3266
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3267 := !z.EncBinary()
			yy2arr3267 := z.EncBasicHandle().StructToArray
			var yyq3267 [1]bool
			_, _, _ = yysep3267, yyq3267, yy2arr3267
			const yyr3267 bool = false
			if yyr3267 || yy2arr3267 {
				r.EncodeArrayStart(1)
			} else {
				var yynn3267 int = 1
				for _, b := range yyq3267 {
					if b {
						yynn3267++
					}
				}
				r.EncodeMapStart(yynn3267)
			}
			if yyr3267 || yy2arr3267 {
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym3269 := z.EncBinary()
					_ = yym3269
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("limits"))
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym3270 := z.EncBinary()
					_ = yym3270
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			}
			if yysep3267 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LimitRangeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3271 := z.DecBinary()
	_ = yym3271
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3272 := r.ReadMapStart()
			if yyl3272 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3272, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3272 := r.ReadArrayStart()
			if yyl3272 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3272, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3273Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3273Slc
	var yyhl3273 bool = l >= 0
	for yyj3273 := 0; ; yyj3273++ {
		if yyhl3273 {
			if yyj3273 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3273Slc = r.DecodeBytes(yys3273Slc, true, true)
		yys3273 := string(yys3273Slc)
		switch yys3273 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv3274 := &x.Limits
				yym3275 := z.DecBinary()
				_ = yym3275
				if false {
				} else {
					h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv3274), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3273)
		} // end switch yys3273
	} // end for yyj3273
	if !yyhl3273 {
		r.ReadEnd()
	}
}

func (x *LimitRangeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3276 int
	var yyb3276 bool
	var yyhl3276 bool = l >= 0
	yyj3276++
	if yyhl3276 {
		yyb3276 = yyj3276 > l
	} else {
		yyb3276 = r.CheckBreak()
	}
	if yyb3276 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv3277 := &x.Limits
		yym3278 := z.DecBinary()
		_ = yym3278
		if false {
		} else {
			h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv3277), d)
		}
	}
	for {
		yyj3276++
		if yyhl3276 {
			yyb3276 = yyj3276 > l
		} else {
			yyb3276 = r.CheckBreak()
		}
		if yyb3276 {
			break
		}
		z.DecStructFieldNotFound(yyj3276-1, "")
	}
	r.ReadEnd()
}

func (x *LimitRange) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3279 := z.EncBinary()
		_ = yym3279
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3280 := !z.EncBinary()
			yy2arr3280 := z.EncBasicHandle().StructToArray
			var yyq3280 [4]bool
			_, _, _ = yysep3280, yyq3280, yy2arr3280
			const yyr3280 bool = false
			yyq3280[0] = x.Kind != ""
			yyq3280[1] = x.APIVersion != ""
			yyq3280[2] = true
			yyq3280[3] = true
			if yyr3280 || yy2arr3280 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3280 int = 0
				for _, b := range yyq3280 {
					if b {
						yynn3280++
					}
				}
				r.EncodeMapStart(yynn3280)
			}
			if yyr3280 || yy2arr3280 {
				if yyq3280[0] {
					yym3282 := z.EncBinary()
					_ = yym3282
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3280[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3283 := z.EncBinary()
					_ = yym3283
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3280 || yy2arr3280 {
				if yyq3280[1] {
					yym3285 := z.EncBinary()
					_ = yym3285
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3280[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3286 := z.EncBinary()
					_ = yym3286
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3280 || yy2arr3280 {
				if yyq3280[2] {
					yy3288 := &x.ObjectMeta
					yy3288.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3280[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3289 := &x.ObjectMeta
					yy3289.CodecEncodeSelf(e)
				}
			}
			if yyr3280 || yy2arr3280 {
				if yyq3280[3] {
					yy3291 := &x.Spec
					yy3291.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3280[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy3292 := &x.Spec
					yy3292.CodecEncodeSelf(e)
				}
			}
			if yysep3280 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LimitRange) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3293 := z.DecBinary()
	_ = yym3293
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3294 := r.ReadMapStart()
			if yyl3294 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3294, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3294 := r.ReadArrayStart()
			if yyl3294 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3294, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRange) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3295Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3295Slc
	var yyhl3295 bool = l >= 0
	for yyj3295 := 0; ; yyj3295++ {
		if yyhl3295 {
			if yyj3295 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3295Slc = r.DecodeBytes(yys3295Slc, true, true)
		yys3295 := string(yys3295Slc)
		switch yys3295 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3298 := &x.ObjectMeta
				yyv3298.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = LimitRangeSpec{}
			} else {
				yyv3299 := &x.Spec
				yyv3299.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3295)
		} // end switch yys3295
	} // end for yyj3295
	if !yyhl3295 {
		r.ReadEnd()
	}
}

func (x *LimitRange) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3300 int
	var yyb3300 bool
	var yyhl3300 bool = l >= 0
	yyj3300++
	if yyhl3300 {
		yyb3300 = yyj3300 > l
	} else {
		yyb3300 = r.CheckBreak()
	}
	if yyb3300 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3300++
	if yyhl3300 {
		yyb3300 = yyj3300 > l
	} else {
		yyb3300 = r.CheckBreak()
	}
	if yyb3300 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3300++
	if yyhl3300 {
		yyb3300 = yyj3300 > l
	} else {
		yyb3300 = r.CheckBreak()
	}
	if yyb3300 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3303 := &x.ObjectMeta
		yyv3303.CodecDecodeSelf(d)
	}
	yyj3300++
	if yyhl3300 {
		yyb3300 = yyj3300 > l
	} else {
		yyb3300 = r.CheckBreak()
	}
	if yyb3300 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = LimitRangeSpec{}
	} else {
		yyv3304 := &x.Spec
		yyv3304.CodecDecodeSelf(d)
	}
	for {
		yyj3300++
		if yyhl3300 {
			yyb3300 = yyj3300 > l
		} else {
			yyb3300 = r.CheckBreak()
		}
		if yyb3300 {
			break
		}
		z.DecStructFieldNotFound(yyj3300-1, "")
	}
	r.ReadEnd()
}

func (x *LimitRangeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3305 := z.EncBinary()
		_ = yym3305
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3306 := !z.EncBinary()
			yy2arr3306 := z.EncBasicHandle().StructToArray
			var yyq3306 [4]bool
			_, _, _ = yysep3306, yyq3306, yy2arr3306
			const yyr3306 bool = false
			yyq3306[0] = x.Kind != ""
			yyq3306[1] = x.APIVersion != ""
			yyq3306[2] = true
			if yyr3306 || yy2arr3306 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3306 int = 1
				for _, b := range yyq3306 {
					if b {
						yynn3306++
					}
				}
				r.EncodeMapStart(yynn3306)
			}
			if yyr3306 || yy2arr3306 {
				if yyq3306[0] {
					yym3308 := z.EncBinary()
					_ = yym3308
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3306[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3309 := z.EncBinary()
					_ = yym3309
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3306 || yy2arr3306 {
				if yyq3306[1] {
					yym3311 := z.EncBinary()
					_ = yym3311
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3306[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3312 := z.EncBinary()
					_ = yym3312
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3306 || yy2arr3306 {
				if yyq3306[2] {
					yy3314 := &x.ListMeta
					yym3315 := z.EncBinary()
					_ = yym3315
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3314) {
					} else {
						z.EncFallback(yy3314)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3306[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3316 := &x.ListMeta
					yym3317 := z.EncBinary()
					_ = yym3317
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3316) {
					} else {
						z.EncFallback(yy3316)
					}
				}
			}
			if yyr3306 || yy2arr3306 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3319 := z.EncBinary()
					_ = yym3319
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3320 := z.EncBinary()
					_ = yym3320
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			}
			if yysep3306 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LimitRangeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3321 := z.DecBinary()
	_ = yym3321
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3322 := r.ReadMapStart()
			if yyl3322 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3322, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3322 := r.ReadArrayStart()
			if yyl3322 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3322, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3323Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3323Slc
	var yyhl3323 bool = l >= 0
	for yyj3323 := 0; ; yyj3323++ {
		if yyhl3323 {
			if yyj3323 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3323Slc = r.DecodeBytes(yys3323Slc, true, true)
		yys3323 := string(yys3323Slc)
		switch yys3323 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3326 := &x.ListMeta
				yym3327 := z.DecBinary()
				_ = yym3327
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3326) {
				} else {
					z.DecFallback(yyv3326, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3328 := &x.Items
				yym3329 := z.DecBinary()
				_ = yym3329
				if false {
				} else {
					h.decSliceLimitRange((*[]LimitRange)(yyv3328), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3323)
		} // end switch yys3323
	} // end for yyj3323
	if !yyhl3323 {
		r.ReadEnd()
	}
}

func (x *LimitRangeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3330 int
	var yyb3330 bool
	var yyhl3330 bool = l >= 0
	yyj3330++
	if yyhl3330 {
		yyb3330 = yyj3330 > l
	} else {
		yyb3330 = r.CheckBreak()
	}
	if yyb3330 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3330++
	if yyhl3330 {
		yyb3330 = yyj3330 > l
	} else {
		yyb3330 = r.CheckBreak()
	}
	if yyb3330 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3330++
	if yyhl3330 {
		yyb3330 = yyj3330 > l
	} else {
		yyb3330 = r.CheckBreak()
	}
	if yyb3330 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3333 := &x.ListMeta
		yym3334 := z.DecBinary()
		_ = yym3334
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3333) {
		} else {
			z.DecFallback(yyv3333, false)
		}
	}
	yyj3330++
	if yyhl3330 {
		yyb3330 = yyj3330 > l
	} else {
		yyb3330 = r.CheckBreak()
	}
	if yyb3330 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3335 := &x.Items
		yym3336 := z.DecBinary()
		_ = yym3336
		if false {
		} else {
			h.decSliceLimitRange((*[]LimitRange)(yyv3335), d)
		}
	}
	for {
		yyj3330++
		if yyhl3330 {
			yyb3330 = yyj3330 > l
		} else {
			yyb3330 = r.CheckBreak()
		}
		if yyb3330 {
			break
		}
		z.DecStructFieldNotFound(yyj3330-1, "")
	}
	r.ReadEnd()
}

func (x *ResourceQuotaSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3337 := z.EncBinary()
		_ = yym3337
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3338 := !z.EncBinary()
			yy2arr3338 := z.EncBasicHandle().StructToArray
			var yyq3338 [1]bool
			_, _, _ = yysep3338, yyq3338, yy2arr3338
			const yyr3338 bool = false
			yyq3338[0] = len(x.Hard) != 0
			if yyr3338 || yy2arr3338 {
				r.EncodeArrayStart(1)
			} else {
				var yynn3338 int = 0
				for _, b := range yyq3338 {
					if b {
						yynn3338++
					}
				}
				r.EncodeMapStart(yynn3338)
			}
			if yyr3338 || yy2arr3338 {
				if yyq3338[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3338[0] {
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yysep3338 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ResourceQuotaSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3340 := z.DecBinary()
	_ = yym3340
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3341 := r.ReadMapStart()
			if yyl3341 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3341, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3341 := r.ReadArrayStart()
			if yyl3341 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3341, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3342Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3342Slc
	var yyhl3342 bool = l >= 0
	for yyj3342 := 0; ; yyj3342++ {
		if yyhl3342 {
			if yyj3342 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3342Slc = r.DecodeBytes(yys3342Slc, true, true)
		yys3342 := string(yys3342Slc)
		switch yys3342 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv3343 := &x.Hard
				yyv3343.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3342)
		} // end switch yys3342
	} // end for yyj3342
	if !yyhl3342 {
		r.ReadEnd()
	}
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3344 int
	var yyb3344 bool
	var yyhl3344 bool = l >= 0
	yyj3344++
	if yyhl3344 {
		yyb3344 = yyj3344 > l
	} else {
		yyb3344 = r.CheckBreak()
	}
	if yyb3344 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv3345 := &x.Hard
		yyv3345.CodecDecodeSelf(d)
	}
	for {
		yyj3344++
		if yyhl3344 {
			yyb3344 = yyj3344 > l
		} else {
			yyb3344 = r.CheckBreak()
		}
		if yyb3344 {
			break
		}
		z.DecStructFieldNotFound(yyj3344-1, "")
	}
	r.ReadEnd()
}

func (x *ResourceQuotaStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3346 := z.EncBinary()
		_ = yym3346
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3347 := !z.EncBinary()
			yy2arr3347 := z.EncBasicHandle().StructToArray
			var yyq3347 [2]bool
			_, _, _ = yysep3347, yyq3347, yy2arr3347
			const yyr3347 bool = false
			yyq3347[0] = len(x.Hard) != 0
			yyq3347[1] = len(x.Used) != 0
			if yyr3347 || yy2arr3347 {
				r.EncodeArrayStart(2)
			} else {
				var yynn3347 int = 0
				for _, b := range yyq3347 {
					if b {
						yynn3347++
					}
				}
				r.EncodeMapStart(yynn3347)
			}
			if yyr3347 || yy2arr3347 {
				if yyq3347[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3347[0] {
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3347 || yy2arr3347 {
				if yyq3347[1] {
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3347[1] {
					r.EncodeString(codecSelferC_UTF81234, string("used"))
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				}
			}
			if yysep3347 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ResourceQuotaStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3350 := z.DecBinary()
	_ = yym3350
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3351 := r.ReadMapStart()
			if yyl3351 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3351, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3351 := r.ReadArrayStart()
			if yyl3351 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3351, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3352Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3352Slc
	var yyhl3352 bool = l >= 0
	for yyj3352 := 0; ; yyj3352++ {
		if yyhl3352 {
			if yyj3352 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3352Slc = r.DecodeBytes(yys3352Slc, true, true)
		yys3352 := string(yys3352Slc)
		switch yys3352 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv3353 := &x.Hard
				yyv3353.CodecDecodeSelf(d)
			}
		case "used":
			if r.TryDecodeAsNil() {
				x.Used = nil
			} else {
				yyv3354 := &x.Used
				yyv3354.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3352)
		} // end switch yys3352
	} // end for yyj3352
	if !yyhl3352 {
		r.ReadEnd()
	}
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3355 int
	var yyb3355 bool
	var yyhl3355 bool = l >= 0
	yyj3355++
	if yyhl3355 {
		yyb3355 = yyj3355 > l
	} else {
		yyb3355 = r.CheckBreak()
	}
	if yyb3355 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv3356 := &x.Hard
		yyv3356.CodecDecodeSelf(d)
	}
	yyj3355++
	if yyhl3355 {
		yyb3355 = yyj3355 > l
	} else {
		yyb3355 = r.CheckBreak()
	}
	if yyb3355 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Used = nil
	} else {
		yyv3357 := &x.Used
		yyv3357.CodecDecodeSelf(d)
	}
	for {
		yyj3355++
		if yyhl3355 {
			yyb3355 = yyj3355 > l
		} else {
			yyb3355 = r.CheckBreak()
		}
		if yyb3355 {
			break
		}
		z.DecStructFieldNotFound(yyj3355-1, "")
	}
	r.ReadEnd()
}

func (x *ResourceQuota) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3358 := z.EncBinary()
		_ = yym3358
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3359 := !z.EncBinary()
			yy2arr3359 := z.EncBasicHandle().StructToArray
			var yyq3359 [5]bool
			_, _, _ = yysep3359, yyq3359, yy2arr3359
			const yyr3359 bool = false
			yyq3359[0] = x.Kind != ""
			yyq3359[1] = x.APIVersion != ""
			yyq3359[2] = true
			yyq3359[3] = true
			yyq3359[4] = true
			if yyr3359 || yy2arr3359 {
				r.EncodeArrayStart(5)
			} else {
				var yynn3359 int = 0
				for _, b := range yyq3359 {
					if b {
						yynn3359++
					}
				}
				r.EncodeMapStart(yynn3359)
			}
			if yyr3359 || yy2arr3359 {
				if yyq3359[0] {
					yym3361 := z.EncBinary()
					_ = yym3361
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3359[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3362 := z.EncBinary()
					_ = yym3362
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3359 || yy2arr3359 {
				if yyq3359[1] {
					yym3364 := z.EncBinary()
					_ = yym3364
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3359[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3365 := z.EncBinary()
					_ = yym3365
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3359 || yy2arr3359 {
				if yyq3359[2] {
					yy3367 := &x.ObjectMeta
					yy3367.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3359[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3368 := &x.ObjectMeta
					yy3368.CodecEncodeSelf(e)
				}
			}
			if yyr3359 || yy2arr3359 {
				if yyq3359[3] {
					yy3370 := &x.Spec
					yy3370.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3359[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy3371 := &x.Spec
					yy3371.CodecEncodeSelf(e)
				}
			}
			if yyr3359 || yy2arr3359 {
				if yyq3359[4] {
					yy3373 := &x.Status
					yy3373.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3359[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy3374 := &x.Status
					yy3374.CodecEncodeSelf(e)
				}
			}
			if yysep3359 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ResourceQuota) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3375 := z.DecBinary()
	_ = yym3375
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3376 := r.ReadMapStart()
			if yyl3376 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3376, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3376 := r.ReadArrayStart()
			if yyl3376 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3376, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuota) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3377Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3377Slc
	var yyhl3377 bool = l >= 0
	for yyj3377 := 0; ; yyj3377++ {
		if yyhl3377 {
			if yyj3377 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3377Slc = r.DecodeBytes(yys3377Slc, true, true)
		yys3377 := string(yys3377Slc)
		switch yys3377 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3380 := &x.ObjectMeta
				yyv3380.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ResourceQuotaSpec{}
			} else {
				yyv3381 := &x.Spec
				yyv3381.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ResourceQuotaStatus{}
			} else {
				yyv3382 := &x.Status
				yyv3382.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3377)
		} // end switch yys3377
	} // end for yyj3377
	if !yyhl3377 {
		r.ReadEnd()
	}
}

func (x *ResourceQuota) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3383 int
	var yyb3383 bool
	var yyhl3383 bool = l >= 0
	yyj3383++
	if yyhl3383 {
		yyb3383 = yyj3383 > l
	} else {
		yyb3383 = r.CheckBreak()
	}
	if yyb3383 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3383++
	if yyhl3383 {
		yyb3383 = yyj3383 > l
	} else {
		yyb3383 = r.CheckBreak()
	}
	if yyb3383 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3383++
	if yyhl3383 {
		yyb3383 = yyj3383 > l
	} else {
		yyb3383 = r.CheckBreak()
	}
	if yyb3383 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3386 := &x.ObjectMeta
		yyv3386.CodecDecodeSelf(d)
	}
	yyj3383++
	if yyhl3383 {
		yyb3383 = yyj3383 > l
	} else {
		yyb3383 = r.CheckBreak()
	}
	if yyb3383 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = ResourceQuotaSpec{}
	} else {
		yyv3387 := &x.Spec
		yyv3387.CodecDecodeSelf(d)
	}
	yyj3383++
	if yyhl3383 {
		yyb3383 = yyj3383 > l
	} else {
		yyb3383 = r.CheckBreak()
	}
	if yyb3383 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ResourceQuotaStatus{}
	} else {
		yyv3388 := &x.Status
		yyv3388.CodecDecodeSelf(d)
	}
	for {
		yyj3383++
		if yyhl3383 {
			yyb3383 = yyj3383 > l
		} else {
			yyb3383 = r.CheckBreak()
		}
		if yyb3383 {
			break
		}
		z.DecStructFieldNotFound(yyj3383-1, "")
	}
	r.ReadEnd()
}

func (x *ResourceQuotaList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3389 := z.EncBinary()
		_ = yym3389
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3390 := !z.EncBinary()
			yy2arr3390 := z.EncBasicHandle().StructToArray
			var yyq3390 [4]bool
			_, _, _ = yysep3390, yyq3390, yy2arr3390
			const yyr3390 bool = false
			yyq3390[0] = x.Kind != ""
			yyq3390[1] = x.APIVersion != ""
			yyq3390[2] = true
			if yyr3390 || yy2arr3390 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3390 int = 1
				for _, b := range yyq3390 {
					if b {
						yynn3390++
					}
				}
				r.EncodeMapStart(yynn3390)
			}
			if yyr3390 || yy2arr3390 {
				if yyq3390[0] {
					yym3392 := z.EncBinary()
					_ = yym3392
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3390[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3393 := z.EncBinary()
					_ = yym3393
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3390 || yy2arr3390 {
				if yyq3390[1] {
					yym3395 := z.EncBinary()
					_ = yym3395
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3390[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3396 := z.EncBinary()
					_ = yym3396
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3390 || yy2arr3390 {
				if yyq3390[2] {
					yy3398 := &x.ListMeta
					yym3399 := z.EncBinary()
					_ = yym3399
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3398) {
					} else {
						z.EncFallback(yy3398)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3390[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3400 := &x.ListMeta
					yym3401 := z.EncBinary()
					_ = yym3401
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3400) {
					} else {
						z.EncFallback(yy3400)
					}
				}
			}
			if yyr3390 || yy2arr3390 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3403 := z.EncBinary()
					_ = yym3403
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3404 := z.EncBinary()
					_ = yym3404
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			}
			if yysep3390 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ResourceQuotaList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3405 := z.DecBinary()
	_ = yym3405
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3406 := r.ReadMapStart()
			if yyl3406 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3406, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3406 := r.ReadArrayStart()
			if yyl3406 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3406, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3407Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3407Slc
	var yyhl3407 bool = l >= 0
	for yyj3407 := 0; ; yyj3407++ {
		if yyhl3407 {
			if yyj3407 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3407Slc = r.DecodeBytes(yys3407Slc, true, true)
		yys3407 := string(yys3407Slc)
		switch yys3407 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3410 := &x.ListMeta
				yym3411 := z.DecBinary()
				_ = yym3411
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3410) {
				} else {
					z.DecFallback(yyv3410, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3412 := &x.Items
				yym3413 := z.DecBinary()
				_ = yym3413
				if false {
				} else {
					h.decSliceResourceQuota((*[]ResourceQuota)(yyv3412), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3407)
		} // end switch yys3407
	} // end for yyj3407
	if !yyhl3407 {
		r.ReadEnd()
	}
}

func (x *ResourceQuotaList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3414 int
	var yyb3414 bool
	var yyhl3414 bool = l >= 0
	yyj3414++
	if yyhl3414 {
		yyb3414 = yyj3414 > l
	} else {
		yyb3414 = r.CheckBreak()
	}
	if yyb3414 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3414++
	if yyhl3414 {
		yyb3414 = yyj3414 > l
	} else {
		yyb3414 = r.CheckBreak()
	}
	if yyb3414 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3414++
	if yyhl3414 {
		yyb3414 = yyj3414 > l
	} else {
		yyb3414 = r.CheckBreak()
	}
	if yyb3414 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3417 := &x.ListMeta
		yym3418 := z.DecBinary()
		_ = yym3418
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3417) {
		} else {
			z.DecFallback(yyv3417, false)
		}
	}
	yyj3414++
	if yyhl3414 {
		yyb3414 = yyj3414 > l
	} else {
		yyb3414 = r.CheckBreak()
	}
	if yyb3414 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3419 := &x.Items
		yym3420 := z.DecBinary()
		_ = yym3420
		if false {
		} else {
			h.decSliceResourceQuota((*[]ResourceQuota)(yyv3419), d)
		}
	}
	for {
		yyj3414++
		if yyhl3414 {
			yyb3414 = yyj3414 > l
		} else {
			yyb3414 = r.CheckBreak()
		}
		if yyb3414 {
			break
		}
		z.DecStructFieldNotFound(yyj3414-1, "")
	}
	r.ReadEnd()
}

func (x *Secret) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3421 := z.EncBinary()
		_ = yym3421
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3422 := !z.EncBinary()
			yy2arr3422 := z.EncBasicHandle().StructToArray
			var yyq3422 [5]bool
			_, _, _ = yysep3422, yyq3422, yy2arr3422
			const yyr3422 bool = false
			yyq3422[0] = x.Kind != ""
			yyq3422[1] = x.APIVersion != ""
			yyq3422[2] = true
			yyq3422[3] = len(x.Data) != 0
			yyq3422[4] = x.Type != ""
			if yyr3422 || yy2arr3422 {
				r.EncodeArrayStart(5)
			} else {
				var yynn3422 int = 0
				for _, b := range yyq3422 {
					if b {
						yynn3422++
					}
				}
				r.EncodeMapStart(yynn3422)
			}
			if yyr3422 || yy2arr3422 {
				if yyq3422[0] {
					yym3424 := z.EncBinary()
					_ = yym3424
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3422[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3425 := z.EncBinary()
					_ = yym3425
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3422 || yy2arr3422 {
				if yyq3422[1] {
					yym3427 := z.EncBinary()
					_ = yym3427
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3422[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3428 := z.EncBinary()
					_ = yym3428
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3422 || yy2arr3422 {
				if yyq3422[2] {
					yy3430 := &x.ObjectMeta
					yy3430.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3422[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3431 := &x.ObjectMeta
					yy3431.CodecEncodeSelf(e)
				}
			}
			if yyr3422 || yy2arr3422 {
				if yyq3422[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym3433 := z.EncBinary()
						_ = yym3433
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3422[3] {
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym3434 := z.EncBinary()
						_ = yym3434
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				}
			}
			if yyr3422 || yy2arr3422 {
				if yyq3422[4] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3422[4] {
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yysep3422 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Secret) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3436 := z.DecBinary()
	_ = yym3436
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3437 := r.ReadMapStart()
			if yyl3437 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3437, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3437 := r.ReadArrayStart()
			if yyl3437 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3437, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Secret) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3438Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3438Slc
	var yyhl3438 bool = l >= 0
	for yyj3438 := 0; ; yyj3438++ {
		if yyhl3438 {
			if yyj3438 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3438Slc = r.DecodeBytes(yys3438Slc, true, true)
		yys3438 := string(yys3438Slc)
		switch yys3438 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3441 := &x.ObjectMeta
				yyv3441.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv3442 := &x.Data
				yym3443 := z.DecBinary()
				_ = yym3443
				if false {
				} else {
					h.decMapstringSliceuint8((*map[string][]uint8)(yyv3442), d)
				}
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = SecretType(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3438)
		} // end switch yys3438
	} // end for yyj3438
	if !yyhl3438 {
		r.ReadEnd()
	}
}

func (x *Secret) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3445 int
	var yyb3445 bool
	var yyhl3445 bool = l >= 0
	yyj3445++
	if yyhl3445 {
		yyb3445 = yyj3445 > l
	} else {
		yyb3445 = r.CheckBreak()
	}
	if yyb3445 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3445++
	if yyhl3445 {
		yyb3445 = yyj3445 > l
	} else {
		yyb3445 = r.CheckBreak()
	}
	if yyb3445 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3445++
	if yyhl3445 {
		yyb3445 = yyj3445 > l
	} else {
		yyb3445 = r.CheckBreak()
	}
	if yyb3445 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3448 := &x.ObjectMeta
		yyv3448.CodecDecodeSelf(d)
	}
	yyj3445++
	if yyhl3445 {
		yyb3445 = yyj3445 > l
	} else {
		yyb3445 = r.CheckBreak()
	}
	if yyb3445 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv3449 := &x.Data
		yym3450 := z.DecBinary()
		_ = yym3450
		if false {
		} else {
			h.decMapstringSliceuint8((*map[string][]uint8)(yyv3449), d)
		}
	}
	yyj3445++
	if yyhl3445 {
		yyb3445 = yyj3445 > l
	} else {
		yyb3445 = r.CheckBreak()
	}
	if yyb3445 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = SecretType(r.DecodeString())
	}
	for {
		yyj3445++
		if yyhl3445 {
			yyb3445 = yyj3445 > l
		} else {
			yyb3445 = r.CheckBreak()
		}
		if yyb3445 {
			break
		}
		z.DecStructFieldNotFound(yyj3445-1, "")
	}
	r.ReadEnd()
}

func (x SecretType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3452 := z.EncBinary()
	_ = yym3452
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *SecretType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3453 := z.DecBinary()
	_ = yym3453
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *SecretList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3454 := z.EncBinary()
		_ = yym3454
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3455 := !z.EncBinary()
			yy2arr3455 := z.EncBasicHandle().StructToArray
			var yyq3455 [4]bool
			_, _, _ = yysep3455, yyq3455, yy2arr3455
			const yyr3455 bool = false
			yyq3455[0] = x.Kind != ""
			yyq3455[1] = x.APIVersion != ""
			yyq3455[2] = true
			if yyr3455 || yy2arr3455 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3455 int = 1
				for _, b := range yyq3455 {
					if b {
						yynn3455++
					}
				}
				r.EncodeMapStart(yynn3455)
			}
			if yyr3455 || yy2arr3455 {
				if yyq3455[0] {
					yym3457 := z.EncBinary()
					_ = yym3457
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3455[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3458 := z.EncBinary()
					_ = yym3458
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3455 || yy2arr3455 {
				if yyq3455[1] {
					yym3460 := z.EncBinary()
					_ = yym3460
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3455[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3461 := z.EncBinary()
					_ = yym3461
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3455 || yy2arr3455 {
				if yyq3455[2] {
					yy3463 := &x.ListMeta
					yym3464 := z.EncBinary()
					_ = yym3464
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3463) {
					} else {
						z.EncFallback(yy3463)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3455[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3465 := &x.ListMeta
					yym3466 := z.EncBinary()
					_ = yym3466
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3465) {
					} else {
						z.EncFallback(yy3465)
					}
				}
			}
			if yyr3455 || yy2arr3455 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3468 := z.EncBinary()
					_ = yym3468
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3469 := z.EncBinary()
					_ = yym3469
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			}
			if yysep3455 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *SecretList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3470 := z.DecBinary()
	_ = yym3470
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3471 := r.ReadMapStart()
			if yyl3471 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3471, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3471 := r.ReadArrayStart()
			if yyl3471 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3471, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3472Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3472Slc
	var yyhl3472 bool = l >= 0
	for yyj3472 := 0; ; yyj3472++ {
		if yyhl3472 {
			if yyj3472 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3472Slc = r.DecodeBytes(yys3472Slc, true, true)
		yys3472 := string(yys3472Slc)
		switch yys3472 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3475 := &x.ListMeta
				yym3476 := z.DecBinary()
				_ = yym3476
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3475) {
				} else {
					z.DecFallback(yyv3475, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3477 := &x.Items
				yym3478 := z.DecBinary()
				_ = yym3478
				if false {
				} else {
					h.decSliceSecret((*[]Secret)(yyv3477), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3472)
		} // end switch yys3472
	} // end for yyj3472
	if !yyhl3472 {
		r.ReadEnd()
	}
}

func (x *SecretList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3479 int
	var yyb3479 bool
	var yyhl3479 bool = l >= 0
	yyj3479++
	if yyhl3479 {
		yyb3479 = yyj3479 > l
	} else {
		yyb3479 = r.CheckBreak()
	}
	if yyb3479 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3479++
	if yyhl3479 {
		yyb3479 = yyj3479 > l
	} else {
		yyb3479 = r.CheckBreak()
	}
	if yyb3479 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3479++
	if yyhl3479 {
		yyb3479 = yyj3479 > l
	} else {
		yyb3479 = r.CheckBreak()
	}
	if yyb3479 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3482 := &x.ListMeta
		yym3483 := z.DecBinary()
		_ = yym3483
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3482) {
		} else {
			z.DecFallback(yyv3482, false)
		}
	}
	yyj3479++
	if yyhl3479 {
		yyb3479 = yyj3479 > l
	} else {
		yyb3479 = r.CheckBreak()
	}
	if yyb3479 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3484 := &x.Items
		yym3485 := z.DecBinary()
		_ = yym3485
		if false {
		} else {
			h.decSliceSecret((*[]Secret)(yyv3484), d)
		}
	}
	for {
		yyj3479++
		if yyhl3479 {
			yyb3479 = yyj3479 > l
		} else {
			yyb3479 = r.CheckBreak()
		}
		if yyb3479 {
			break
		}
		z.DecStructFieldNotFound(yyj3479-1, "")
	}
	r.ReadEnd()
}

func (x ComponentConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3486 := z.EncBinary()
	_ = yym3486
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ComponentConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3487 := z.DecBinary()
	_ = yym3487
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ComponentCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3488 := z.EncBinary()
		_ = yym3488
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3489 := !z.EncBinary()
			yy2arr3489 := z.EncBasicHandle().StructToArray
			var yyq3489 [4]bool
			_, _, _ = yysep3489, yyq3489, yy2arr3489
			const yyr3489 bool = false
			yyq3489[2] = x.Message != ""
			yyq3489[3] = x.Error != ""
			if yyr3489 || yy2arr3489 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3489 int = 2
				for _, b := range yyq3489 {
					if b {
						yynn3489++
					}
				}
				r.EncodeMapStart(yynn3489)
			}
			if yyr3489 || yy2arr3489 {
				x.Type.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3489 || yy2arr3489 {
				x.Status.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				x.Status.CodecEncodeSelf(e)
			}
			if yyr3489 || yy2arr3489 {
				if yyq3489[2] {
					yym3493 := z.EncBinary()
					_ = yym3493
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3489[2] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym3494 := z.EncBinary()
					_ = yym3494
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3489 || yy2arr3489 {
				if yyq3489[3] {
					yym3496 := z.EncBinary()
					_ = yym3496
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3489[3] {
					r.EncodeString(codecSelferC_UTF81234, string("error"))
					yym3497 := z.EncBinary()
					_ = yym3497
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				}
			}
			if yysep3489 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ComponentCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3498 := z.DecBinary()
	_ = yym3498
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3499 := r.ReadMapStart()
			if yyl3499 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3499, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3499 := r.ReadArrayStart()
			if yyl3499 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3499, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3500Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3500Slc
	var yyhl3500 bool = l >= 0
	for yyj3500 := 0; ; yyj3500++ {
		if yyhl3500 {
			if yyj3500 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3500Slc = r.DecodeBytes(yys3500Slc, true, true)
		yys3500 := string(yys3500Slc)
		switch yys3500 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ComponentConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "error":
			if r.TryDecodeAsNil() {
				x.Error = ""
			} else {
				x.Error = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3500)
		} // end switch yys3500
	} // end for yyj3500
	if !yyhl3500 {
		r.ReadEnd()
	}
}

func (x *ComponentCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3505 int
	var yyb3505 bool
	var yyhl3505 bool = l >= 0
	yyj3505++
	if yyhl3505 {
		yyb3505 = yyj3505 > l
	} else {
		yyb3505 = r.CheckBreak()
	}
	if yyb3505 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ComponentConditionType(r.DecodeString())
	}
	yyj3505++
	if yyhl3505 {
		yyb3505 = yyj3505 > l
	} else {
		yyb3505 = r.CheckBreak()
	}
	if yyb3505 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj3505++
	if yyhl3505 {
		yyb3505 = yyj3505 > l
	} else {
		yyb3505 = r.CheckBreak()
	}
	if yyb3505 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj3505++
	if yyhl3505 {
		yyb3505 = yyj3505 > l
	} else {
		yyb3505 = r.CheckBreak()
	}
	if yyb3505 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Error = ""
	} else {
		x.Error = string(r.DecodeString())
	}
	for {
		yyj3505++
		if yyhl3505 {
			yyb3505 = yyj3505 > l
		} else {
			yyb3505 = r.CheckBreak()
		}
		if yyb3505 {
			break
		}
		z.DecStructFieldNotFound(yyj3505-1, "")
	}
	r.ReadEnd()
}

func (x *ComponentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3510 := z.EncBinary()
		_ = yym3510
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3511 := !z.EncBinary()
			yy2arr3511 := z.EncBasicHandle().StructToArray
			var yyq3511 [4]bool
			_, _, _ = yysep3511, yyq3511, yy2arr3511
			const yyr3511 bool = false
			yyq3511[0] = x.Kind != ""
			yyq3511[1] = x.APIVersion != ""
			yyq3511[2] = true
			yyq3511[3] = len(x.Conditions) != 0
			if yyr3511 || yy2arr3511 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3511 int = 0
				for _, b := range yyq3511 {
					if b {
						yynn3511++
					}
				}
				r.EncodeMapStart(yynn3511)
			}
			if yyr3511 || yy2arr3511 {
				if yyq3511[0] {
					yym3513 := z.EncBinary()
					_ = yym3513
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3511[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3514 := z.EncBinary()
					_ = yym3514
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3511 || yy2arr3511 {
				if yyq3511[1] {
					yym3516 := z.EncBinary()
					_ = yym3516
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3511[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3517 := z.EncBinary()
					_ = yym3517
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3511 || yy2arr3511 {
				if yyq3511[2] {
					yy3519 := &x.ObjectMeta
					yy3519.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3511[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3520 := &x.ObjectMeta
					yy3520.CodecEncodeSelf(e)
				}
			}
			if yyr3511 || yy2arr3511 {
				if yyq3511[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3522 := z.EncBinary()
						_ = yym3522
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3511[3] {
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3523 := z.EncBinary()
						_ = yym3523
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yysep3511 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ComponentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3524 := z.DecBinary()
	_ = yym3524
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3525 := r.ReadMapStart()
			if yyl3525 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3525, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3525 := r.ReadArrayStart()
			if yyl3525 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3525, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3526Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3526Slc
	var yyhl3526 bool = l >= 0
	for yyj3526 := 0; ; yyj3526++ {
		if yyhl3526 {
			if yyj3526 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3526Slc = r.DecodeBytes(yys3526Slc, true, true)
		yys3526 := string(yys3526Slc)
		switch yys3526 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3529 := &x.ObjectMeta
				yyv3529.CodecDecodeSelf(d)
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv3530 := &x.Conditions
				yym3531 := z.DecBinary()
				_ = yym3531
				if false {
				} else {
					h.decSliceComponentCondition((*[]ComponentCondition)(yyv3530), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3526)
		} // end switch yys3526
	} // end for yyj3526
	if !yyhl3526 {
		r.ReadEnd()
	}
}

func (x *ComponentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3532 int
	var yyb3532 bool
	var yyhl3532 bool = l >= 0
	yyj3532++
	if yyhl3532 {
		yyb3532 = yyj3532 > l
	} else {
		yyb3532 = r.CheckBreak()
	}
	if yyb3532 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3532++
	if yyhl3532 {
		yyb3532 = yyj3532 > l
	} else {
		yyb3532 = r.CheckBreak()
	}
	if yyb3532 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3532++
	if yyhl3532 {
		yyb3532 = yyj3532 > l
	} else {
		yyb3532 = r.CheckBreak()
	}
	if yyb3532 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3535 := &x.ObjectMeta
		yyv3535.CodecDecodeSelf(d)
	}
	yyj3532++
	if yyhl3532 {
		yyb3532 = yyj3532 > l
	} else {
		yyb3532 = r.CheckBreak()
	}
	if yyb3532 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv3536 := &x.Conditions
		yym3537 := z.DecBinary()
		_ = yym3537
		if false {
		} else {
			h.decSliceComponentCondition((*[]ComponentCondition)(yyv3536), d)
		}
	}
	for {
		yyj3532++
		if yyhl3532 {
			yyb3532 = yyj3532 > l
		} else {
			yyb3532 = r.CheckBreak()
		}
		if yyb3532 {
			break
		}
		z.DecStructFieldNotFound(yyj3532-1, "")
	}
	r.ReadEnd()
}

func (x *ComponentStatusList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3538 := z.EncBinary()
		_ = yym3538
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3539 := !z.EncBinary()
			yy2arr3539 := z.EncBasicHandle().StructToArray
			var yyq3539 [4]bool
			_, _, _ = yysep3539, yyq3539, yy2arr3539
			const yyr3539 bool = false
			yyq3539[0] = x.Kind != ""
			yyq3539[1] = x.APIVersion != ""
			yyq3539[2] = true
			if yyr3539 || yy2arr3539 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3539 int = 1
				for _, b := range yyq3539 {
					if b {
						yynn3539++
					}
				}
				r.EncodeMapStart(yynn3539)
			}
			if yyr3539 || yy2arr3539 {
				if yyq3539[0] {
					yym3541 := z.EncBinary()
					_ = yym3541
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3539[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3542 := z.EncBinary()
					_ = yym3542
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3539 || yy2arr3539 {
				if yyq3539[1] {
					yym3544 := z.EncBinary()
					_ = yym3544
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3539[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3545 := z.EncBinary()
					_ = yym3545
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3539 || yy2arr3539 {
				if yyq3539[2] {
					yy3547 := &x.ListMeta
					yym3548 := z.EncBinary()
					_ = yym3548
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3547) {
					} else {
						z.EncFallback(yy3547)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3539[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3549 := &x.ListMeta
					yym3550 := z.EncBinary()
					_ = yym3550
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3549) {
					} else {
						z.EncFallback(yy3549)
					}
				}
			}
			if yyr3539 || yy2arr3539 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3552 := z.EncBinary()
					_ = yym3552
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3553 := z.EncBinary()
					_ = yym3553
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			}
			if yysep3539 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ComponentStatusList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3554 := z.DecBinary()
	_ = yym3554
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3555 := r.ReadMapStart()
			if yyl3555 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3555, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3555 := r.ReadArrayStart()
			if yyl3555 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3555, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatusList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3556Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3556Slc
	var yyhl3556 bool = l >= 0
	for yyj3556 := 0; ; yyj3556++ {
		if yyhl3556 {
			if yyj3556 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3556Slc = r.DecodeBytes(yys3556Slc, true, true)
		yys3556 := string(yys3556Slc)
		switch yys3556 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3559 := &x.ListMeta
				yym3560 := z.DecBinary()
				_ = yym3560
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3559) {
				} else {
					z.DecFallback(yyv3559, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3561 := &x.Items
				yym3562 := z.DecBinary()
				_ = yym3562
				if false {
				} else {
					h.decSliceComponentStatus((*[]ComponentStatus)(yyv3561), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3556)
		} // end switch yys3556
	} // end for yyj3556
	if !yyhl3556 {
		r.ReadEnd()
	}
}

func (x *ComponentStatusList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3563 int
	var yyb3563 bool
	var yyhl3563 bool = l >= 0
	yyj3563++
	if yyhl3563 {
		yyb3563 = yyj3563 > l
	} else {
		yyb3563 = r.CheckBreak()
	}
	if yyb3563 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3563++
	if yyhl3563 {
		yyb3563 = yyj3563 > l
	} else {
		yyb3563 = r.CheckBreak()
	}
	if yyb3563 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3563++
	if yyhl3563 {
		yyb3563 = yyj3563 > l
	} else {
		yyb3563 = r.CheckBreak()
	}
	if yyb3563 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3566 := &x.ListMeta
		yym3567 := z.DecBinary()
		_ = yym3567
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3566) {
		} else {
			z.DecFallback(yyv3566, false)
		}
	}
	yyj3563++
	if yyhl3563 {
		yyb3563 = yyj3563 > l
	} else {
		yyb3563 = r.CheckBreak()
	}
	if yyb3563 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3568 := &x.Items
		yym3569 := z.DecBinary()
		_ = yym3569
		if false {
		} else {
			h.decSliceComponentStatus((*[]ComponentStatus)(yyv3568), d)
		}
	}
	for {
		yyj3563++
		if yyhl3563 {
			yyb3563 = yyj3563 > l
		} else {
			yyb3563 = r.CheckBreak()
		}
		if yyb3563 {
			break
		}
		z.DecStructFieldNotFound(yyj3563-1, "")
	}
	r.ReadEnd()
}

func (x *DownwardAPIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3570 := z.EncBinary()
		_ = yym3570
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3571 := !z.EncBinary()
			yy2arr3571 := z.EncBasicHandle().StructToArray
			var yyq3571 [1]bool
			_, _, _ = yysep3571, yyq3571, yy2arr3571
			const yyr3571 bool = false
			yyq3571[0] = len(x.Items) != 0
			if yyr3571 || yy2arr3571 {
				r.EncodeArrayStart(1)
			} else {
				var yynn3571 int = 0
				for _, b := range yyq3571 {
					if b {
						yynn3571++
					}
				}
				r.EncodeMapStart(yynn3571)
			}
			if yyr3571 || yy2arr3571 {
				if yyq3571[0] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym3573 := z.EncBinary()
						_ = yym3573
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3571[0] {
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym3574 := z.EncBinary()
						_ = yym3574
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				}
			}
			if yysep3571 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DownwardAPIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3575 := z.DecBinary()
	_ = yym3575
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3576 := r.ReadMapStart()
			if yyl3576 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3576, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3576 := r.ReadArrayStart()
			if yyl3576 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3576, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3577Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3577Slc
	var yyhl3577 bool = l >= 0
	for yyj3577 := 0; ; yyj3577++ {
		if yyhl3577 {
			if yyj3577 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3577Slc = r.DecodeBytes(yys3577Slc, true, true)
		yys3577 := string(yys3577Slc)
		switch yys3577 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3578 := &x.Items
				yym3579 := z.DecBinary()
				_ = yym3579
				if false {
				} else {
					h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv3578), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3577)
		} // end switch yys3577
	} // end for yyj3577
	if !yyhl3577 {
		r.ReadEnd()
	}
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3580 int
	var yyb3580 bool
	var yyhl3580 bool = l >= 0
	yyj3580++
	if yyhl3580 {
		yyb3580 = yyj3580 > l
	} else {
		yyb3580 = r.CheckBreak()
	}
	if yyb3580 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3581 := &x.Items
		yym3582 := z.DecBinary()
		_ = yym3582
		if false {
		} else {
			h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv3581), d)
		}
	}
	for {
		yyj3580++
		if yyhl3580 {
			yyb3580 = yyj3580 > l
		} else {
			yyb3580 = r.CheckBreak()
		}
		if yyb3580 {
			break
		}
		z.DecStructFieldNotFound(yyj3580-1, "")
	}
	r.ReadEnd()
}

func (x *DownwardAPIVolumeFile) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3583 := z.EncBinary()
		_ = yym3583
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3584 := !z.EncBinary()
			yy2arr3584 := z.EncBasicHandle().StructToArray
			var yyq3584 [2]bool
			_, _, _ = yysep3584, yyq3584, yy2arr3584
			const yyr3584 bool = false
			if yyr3584 || yy2arr3584 {
				r.EncodeArrayStart(2)
			} else {
				var yynn3584 int = 2
				for _, b := range yyq3584 {
					if b {
						yynn3584++
					}
				}
				r.EncodeMapStart(yynn3584)
			}
			if yyr3584 || yy2arr3584 {
				yym3586 := z.EncBinary()
				_ = yym3586
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				yym3587 := z.EncBinary()
				_ = yym3587
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr3584 || yy2arr3584 {
				yy3589 := &x.FieldRef
				yy3589.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
				yy3590 := &x.FieldRef
				yy3590.CodecEncodeSelf(e)
			}
			if yysep3584 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DownwardAPIVolumeFile) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3591 := z.DecBinary()
	_ = yym3591
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3592 := r.ReadMapStart()
			if yyl3592 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3592, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3592 := r.ReadArrayStart()
			if yyl3592 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3592, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3593Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3593Slc
	var yyhl3593 bool = l >= 0
	for yyj3593 := 0; ; yyj3593++ {
		if yyhl3593 {
			if yyj3593 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3593Slc = r.DecodeBytes(yys3593Slc, true, true)
		yys3593 := string(yys3593Slc)
		switch yys3593 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "fieldRef":
			if r.TryDecodeAsNil() {
				x.FieldRef = ObjectFieldSelector{}
			} else {
				yyv3595 := &x.FieldRef
				yyv3595.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3593)
		} // end switch yys3593
	} // end for yyj3593
	if !yyhl3593 {
		r.ReadEnd()
	}
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3596 int
	var yyb3596 bool
	var yyhl3596 bool = l >= 0
	yyj3596++
	if yyhl3596 {
		yyb3596 = yyj3596 > l
	} else {
		yyb3596 = r.CheckBreak()
	}
	if yyb3596 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj3596++
	if yyhl3596 {
		yyb3596 = yyj3596 > l
	} else {
		yyb3596 = r.CheckBreak()
	}
	if yyb3596 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FieldRef = ObjectFieldSelector{}
	} else {
		yyv3598 := &x.FieldRef
		yyv3598.CodecDecodeSelf(d)
	}
	for {
		yyj3596++
		if yyhl3596 {
			yyb3596 = yyj3596 > l
		} else {
			yyb3596 = r.CheckBreak()
		}
		if yyb3596 {
			break
		}
		z.DecStructFieldNotFound(yyj3596-1, "")
	}
	r.ReadEnd()
}

func (x *SecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3599 := z.EncBinary()
		_ = yym3599
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3600 := !z.EncBinary()
			yy2arr3600 := z.EncBasicHandle().StructToArray
			var yyq3600 [5]bool
			_, _, _ = yysep3600, yyq3600, yy2arr3600
			const yyr3600 bool = false
			yyq3600[0] = x.Capabilities != nil
			yyq3600[1] = x.Privileged != nil
			yyq3600[2] = x.SELinuxOptions != nil
			yyq3600[3] = x.RunAsUser != nil
			yyq3600[4] = x.RunAsNonRoot != nil
			if yyr3600 || yy2arr3600 {
				r.EncodeArrayStart(5)
			} else {
				var yynn3600 int = 0
				for _, b := range yyq3600 {
					if b {
						yynn3600++
					}
				}
				r.EncodeMapStart(yynn3600)
			}
			if yyr3600 || yy2arr3600 {
				if yyq3600[0] {
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3600[0] {
					r.EncodeString(codecSelferC_UTF81234, string("capabilities"))
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3600 || yy2arr3600 {
				if yyq3600[1] {
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy3603 := *x.Privileged
						yym3604 := z.EncBinary()
						_ = yym3604
						if false {
						} else {
							r.EncodeBool(bool(yy3603))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3600[1] {
					r.EncodeString(codecSelferC_UTF81234, string("privileged"))
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy3605 := *x.Privileged
						yym3606 := z.EncBinary()
						_ = yym3606
						if false {
						} else {
							r.EncodeBool(bool(yy3605))
						}
					}
				}
			}
			if yyr3600 || yy2arr3600 {
				if yyq3600[2] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3600[2] {
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3600 || yy2arr3600 {
				if yyq3600[3] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy3609 := *x.RunAsUser
						yym3610 := z.EncBinary()
						_ = yym3610
						if false {
						} else {
							r.EncodeInt(int64(yy3609))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3600[3] {
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy3611 := *x.RunAsUser
						yym3612 := z.EncBinary()
						_ = yym3612
						if false {
						} else {
							r.EncodeInt(int64(yy3611))
						}
					}
				}
			}
			if yyr3600 || yy2arr3600 {
				if yyq3600[4] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy3614 := *x.RunAsNonRoot
						yym3615 := z.EncBinary()
						_ = yym3615
						if false {
						} else {
							r.EncodeBool(bool(yy3614))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3600[4] {
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy3616 := *x.RunAsNonRoot
						yym3617 := z.EncBinary()
						_ = yym3617
						if false {
						} else {
							r.EncodeBool(bool(yy3616))
						}
					}
				}
			}
			if yysep3600 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *SecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3618 := z.DecBinary()
	_ = yym3618
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3619 := r.ReadMapStart()
			if yyl3619 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3619, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3619 := r.ReadArrayStart()
			if yyl3619 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3619, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3620Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3620Slc
	var yyhl3620 bool = l >= 0
	for yyj3620 := 0; ; yyj3620++ {
		if yyhl3620 {
			if yyj3620 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3620Slc = r.DecodeBytes(yys3620Slc, true, true)
		yys3620 := string(yys3620Slc)
		switch yys3620 {
		case "capabilities":
			if r.TryDecodeAsNil() {
				if x.Capabilities != nil {
					x.Capabilities = nil
				}
			} else {
				if x.Capabilities == nil {
					x.Capabilities = new(Capabilities)
				}
				x.Capabilities.CodecDecodeSelf(d)
			}
		case "privileged":
			if r.TryDecodeAsNil() {
				if x.Privileged != nil {
					x.Privileged = nil
				}
			} else {
				if x.Privileged == nil {
					x.Privileged = new(bool)
				}
				yym3623 := z.DecBinary()
				_ = yym3623
				if false {
				} else {
					*((*bool)(x.Privileged)) = r.DecodeBool()
				}
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym3626 := z.DecBinary()
				_ = yym3626
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym3628 := z.DecBinary()
				_ = yym3628
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3620)
		} // end switch yys3620
	} // end for yyj3620
	if !yyhl3620 {
		r.ReadEnd()
	}
}

func (x *SecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3629 int
	var yyb3629 bool
	var yyhl3629 bool = l >= 0
	yyj3629++
	if yyhl3629 {
		yyb3629 = yyj3629 > l
	} else {
		yyb3629 = r.CheckBreak()
	}
	if yyb3629 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Capabilities != nil {
			x.Capabilities = nil
		}
	} else {
		if x.Capabilities == nil {
			x.Capabilities = new(Capabilities)
		}
		x.Capabilities.CodecDecodeSelf(d)
	}
	yyj3629++
	if yyhl3629 {
		yyb3629 = yyj3629 > l
	} else {
		yyb3629 = r.CheckBreak()
	}
	if yyb3629 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Privileged != nil {
			x.Privileged = nil
		}
	} else {
		if x.Privileged == nil {
			x.Privileged = new(bool)
		}
		yym3632 := z.DecBinary()
		_ = yym3632
		if false {
		} else {
			*((*bool)(x.Privileged)) = r.DecodeBool()
		}
	}
	yyj3629++
	if yyhl3629 {
		yyb3629 = yyj3629 > l
	} else {
		yyb3629 = r.CheckBreak()
	}
	if yyb3629 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj3629++
	if yyhl3629 {
		yyb3629 = yyj3629 > l
	} else {
		yyb3629 = r.CheckBreak()
	}
	if yyb3629 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym3635 := z.DecBinary()
		_ = yym3635
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj3629++
	if yyhl3629 {
		yyb3629 = yyj3629 > l
	} else {
		yyb3629 = r.CheckBreak()
	}
	if yyb3629 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym3637 := z.DecBinary()
		_ = yym3637
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	for {
		yyj3629++
		if yyhl3629 {
			yyb3629 = yyj3629 > l
		} else {
			yyb3629 = r.CheckBreak()
		}
		if yyb3629 {
			break
		}
		z.DecStructFieldNotFound(yyj3629-1, "")
	}
	r.ReadEnd()
}

func (x *SELinuxOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3638 := z.EncBinary()
		_ = yym3638
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3639 := !z.EncBinary()
			yy2arr3639 := z.EncBasicHandle().StructToArray
			var yyq3639 [4]bool
			_, _, _ = yysep3639, yyq3639, yy2arr3639
			const yyr3639 bool = false
			yyq3639[0] = x.User != ""
			yyq3639[1] = x.Role != ""
			yyq3639[2] = x.Type != ""
			yyq3639[3] = x.Level != ""
			if yyr3639 || yy2arr3639 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3639 int = 0
				for _, b := range yyq3639 {
					if b {
						yynn3639++
					}
				}
				r.EncodeMapStart(yynn3639)
			}
			if yyr3639 || yy2arr3639 {
				if yyq3639[0] {
					yym3641 := z.EncBinary()
					_ = yym3641
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3639[0] {
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					yym3642 := z.EncBinary()
					_ = yym3642
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr3639 || yy2arr3639 {
				if yyq3639[1] {
					yym3644 := z.EncBinary()
					_ = yym3644
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3639[1] {
					r.EncodeString(codecSelferC_UTF81234, string("role"))
					yym3645 := z.EncBinary()
					_ = yym3645
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				}
			}
			if yyr3639 || yy2arr3639 {
				if yyq3639[2] {
					yym3647 := z.EncBinary()
					_ = yym3647
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3639[2] {
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					yym3648 := z.EncBinary()
					_ = yym3648
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr3639 || yy2arr3639 {
				if yyq3639[3] {
					yym3650 := z.EncBinary()
					_ = yym3650
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3639[3] {
					r.EncodeString(codecSelferC_UTF81234, string("level"))
					yym3651 := z.EncBinary()
					_ = yym3651
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				}
			}
			if yysep3639 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *SELinuxOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3652 := z.DecBinary()
	_ = yym3652
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3653 := r.ReadMapStart()
			if yyl3653 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3653, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3653 := r.ReadArrayStart()
			if yyl3653 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3653, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SELinuxOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3654Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3654Slc
	var yyhl3654 bool = l >= 0
	for yyj3654 := 0; ; yyj3654++ {
		if yyhl3654 {
			if yyj3654 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3654Slc = r.DecodeBytes(yys3654Slc, true, true)
		yys3654 := string(yys3654Slc)
		switch yys3654 {
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "role":
			if r.TryDecodeAsNil() {
				x.Role = ""
			} else {
				x.Role = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		case "level":
			if r.TryDecodeAsNil() {
				x.Level = ""
			} else {
				x.Level = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3654)
		} // end switch yys3654
	} // end for yyj3654
	if !yyhl3654 {
		r.ReadEnd()
	}
}

func (x *SELinuxOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3659 int
	var yyb3659 bool
	var yyhl3659 bool = l >= 0
	yyj3659++
	if yyhl3659 {
		yyb3659 = yyj3659 > l
	} else {
		yyb3659 = r.CheckBreak()
	}
	if yyb3659 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj3659++
	if yyhl3659 {
		yyb3659 = yyj3659 > l
	} else {
		yyb3659 = r.CheckBreak()
	}
	if yyb3659 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Role = ""
	} else {
		x.Role = string(r.DecodeString())
	}
	yyj3659++
	if yyhl3659 {
		yyb3659 = yyj3659 > l
	} else {
		yyb3659 = r.CheckBreak()
	}
	if yyb3659 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	yyj3659++
	if yyhl3659 {
		yyb3659 = yyj3659 > l
	} else {
		yyb3659 = r.CheckBreak()
	}
	if yyb3659 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Level = ""
	} else {
		x.Level = string(r.DecodeString())
	}
	for {
		yyj3659++
		if yyhl3659 {
			yyb3659 = yyj3659 > l
		} else {
			yyb3659 = r.CheckBreak()
		}
		if yyb3659 {
			break
		}
		z.DecStructFieldNotFound(yyj3659-1, "")
	}
	r.ReadEnd()
}

func (x *RangeAllocation) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3664 := z.EncBinary()
		_ = yym3664
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3665 := !z.EncBinary()
			yy2arr3665 := z.EncBasicHandle().StructToArray
			var yyq3665 [5]bool
			_, _, _ = yysep3665, yyq3665, yy2arr3665
			const yyr3665 bool = false
			yyq3665[0] = x.Kind != ""
			yyq3665[1] = x.APIVersion != ""
			yyq3665[2] = true
			if yyr3665 || yy2arr3665 {
				r.EncodeArrayStart(5)
			} else {
				var yynn3665 int = 2
				for _, b := range yyq3665 {
					if b {
						yynn3665++
					}
				}
				r.EncodeMapStart(yynn3665)
			}
			if yyr3665 || yy2arr3665 {
				if yyq3665[0] {
					yym3667 := z.EncBinary()
					_ = yym3667
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3665[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3668 := z.EncBinary()
					_ = yym3668
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3665 || yy2arr3665 {
				if yyq3665[1] {
					yym3670 := z.EncBinary()
					_ = yym3670
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3665[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3671 := z.EncBinary()
					_ = yym3671
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3665 || yy2arr3665 {
				if yyq3665[2] {
					yy3673 := &x.ObjectMeta
					yy3673.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3665[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3674 := &x.ObjectMeta
					yy3674.CodecEncodeSelf(e)
				}
			}
			if yyr3665 || yy2arr3665 {
				yym3676 := z.EncBinary()
				_ = yym3676
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("range"))
				yym3677 := z.EncBinary()
				_ = yym3677
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			}
			if yyr3665 || yy2arr3665 {
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym3679 := z.EncBinary()
					_ = yym3679
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("data"))
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym3680 := z.EncBinary()
					_ = yym3680
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			}
			if yysep3665 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *RangeAllocation) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3681 := z.DecBinary()
	_ = yym3681
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3682 := r.ReadMapStart()
			if yyl3682 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3682, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3682 := r.ReadArrayStart()
			if yyl3682 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3682, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RangeAllocation) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3683Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3683Slc
	var yyhl3683 bool = l >= 0
	for yyj3683 := 0; ; yyj3683++ {
		if yyhl3683 {
			if yyj3683 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3683Slc = r.DecodeBytes(yys3683Slc, true, true)
		yys3683 := string(yys3683Slc)
		switch yys3683 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3686 := &x.ObjectMeta
				yyv3686.CodecDecodeSelf(d)
			}
		case "range":
			if r.TryDecodeAsNil() {
				x.Range = ""
			} else {
				x.Range = string(r.DecodeString())
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv3688 := &x.Data
				yym3689 := z.DecBinary()
				_ = yym3689
				if false {
				} else {
					*yyv3688 = r.DecodeBytes(*(*[]byte)(yyv3688), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3683)
		} // end switch yys3683
	} // end for yyj3683
	if !yyhl3683 {
		r.ReadEnd()
	}
}

func (x *RangeAllocation) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3690 int
	var yyb3690 bool
	var yyhl3690 bool = l >= 0
	yyj3690++
	if yyhl3690 {
		yyb3690 = yyj3690 > l
	} else {
		yyb3690 = r.CheckBreak()
	}
	if yyb3690 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3690++
	if yyhl3690 {
		yyb3690 = yyj3690 > l
	} else {
		yyb3690 = r.CheckBreak()
	}
	if yyb3690 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3690++
	if yyhl3690 {
		yyb3690 = yyj3690 > l
	} else {
		yyb3690 = r.CheckBreak()
	}
	if yyb3690 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3693 := &x.ObjectMeta
		yyv3693.CodecDecodeSelf(d)
	}
	yyj3690++
	if yyhl3690 {
		yyb3690 = yyj3690 > l
	} else {
		yyb3690 = r.CheckBreak()
	}
	if yyb3690 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Range = ""
	} else {
		x.Range = string(r.DecodeString())
	}
	yyj3690++
	if yyhl3690 {
		yyb3690 = yyj3690 > l
	} else {
		yyb3690 = r.CheckBreak()
	}
	if yyb3690 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv3695 := &x.Data
		yym3696 := z.DecBinary()
		_ = yym3696
		if false {
		} else {
			*yyv3695 = r.DecodeBytes(*(*[]byte)(yyv3695), false, false)
		}
	}
	for {
		yyj3690++
		if yyhl3690 {
			yyb3690 = yyj3690 > l
		} else {
			yyb3690 = r.CheckBreak()
		}
		if yyb3690 {
			break
		}
		z.DecStructFieldNotFound(yyj3690-1, "")
	}
	r.ReadEnd()
}

func (x codecSelfer1234) encSlicePersistentVolumeAccessMode(v []PersistentVolumeAccessMode, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3697 := range v {
		yyv3697.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePersistentVolumeAccessMode(v *[]PersistentVolumeAccessMode, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3698 := *v
	yyh3698, yyl3698 := z.DecSliceHelperStart()

	var yyrr3698, yyrl3698 int
	var yyc3698, yyrt3698 bool
	_, _, _ = yyc3698, yyrt3698, yyrl3698
	yyrr3698 = yyl3698

	if yyv3698 == nil {
		if yyrl3698, yyrt3698 = z.DecInferLen(yyl3698, z.DecBasicHandle().MaxInitLen, 16); yyrt3698 {
			yyrr3698 = yyrl3698
		}
		yyv3698 = make([]PersistentVolumeAccessMode, yyrl3698)
		yyc3698 = true
	}

	if yyl3698 == 0 {
		if len(yyv3698) != 0 {
			yyv3698 = yyv3698[:0]
			yyc3698 = true
		}
	} else if yyl3698 > 0 {

		if yyl3698 > cap(yyv3698) {
			yyrl3698, yyrt3698 = z.DecInferLen(yyl3698, z.DecBasicHandle().MaxInitLen, 16)

			yyv23698 := yyv3698
			yyv3698 = make([]PersistentVolumeAccessMode, yyrl3698)
			if len(yyv3698) > 0 {
				copy(yyv3698, yyv23698[:cap(yyv23698)])
			}
			yyc3698 = true

			yyrr3698 = len(yyv3698)
		} else if yyl3698 != len(yyv3698) {
			yyv3698 = yyv3698[:yyl3698]
			yyc3698 = true
		}
		yyj3698 := 0
		for ; yyj3698 < yyrr3698; yyj3698++ {
			if r.TryDecodeAsNil() {
				yyv3698[yyj3698] = ""
			} else {
				yyv3698[yyj3698] = PersistentVolumeAccessMode(r.DecodeString())
			}

		}
		if yyrt3698 {
			for ; yyj3698 < yyl3698; yyj3698++ {
				yyv3698 = append(yyv3698, "")
				if r.TryDecodeAsNil() {
					yyv3698[yyj3698] = ""
				} else {
					yyv3698[yyj3698] = PersistentVolumeAccessMode(r.DecodeString())
				}

			}
		}

	} else {
		for yyj3698 := 0; !r.CheckBreak(); yyj3698++ {
			if yyj3698 >= len(yyv3698) {
				yyv3698 = append(yyv3698, "") // var yyz3698 PersistentVolumeAccessMode
				yyc3698 = true
			}

			if yyj3698 < len(yyv3698) {
				if r.TryDecodeAsNil() {
					yyv3698[yyj3698] = ""
				} else {
					yyv3698[yyj3698] = PersistentVolumeAccessMode(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3698.End()
	}
	if yyc3698 {
		*v = yyv3698
	}

}

func (x codecSelfer1234) encSlicePersistentVolume(v []PersistentVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3702 := range v {
		yy3703 := &yyv3702
		yy3703.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePersistentVolume(v *[]PersistentVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3704 := *v
	yyh3704, yyl3704 := z.DecSliceHelperStart()

	var yyrr3704, yyrl3704 int
	var yyc3704, yyrt3704 bool
	_, _, _ = yyc3704, yyrt3704, yyrl3704
	yyrr3704 = yyl3704

	if yyv3704 == nil {
		if yyrl3704, yyrt3704 = z.DecInferLen(yyl3704, z.DecBasicHandle().MaxInitLen, 400); yyrt3704 {
			yyrr3704 = yyrl3704
		}
		yyv3704 = make([]PersistentVolume, yyrl3704)
		yyc3704 = true
	}

	if yyl3704 == 0 {
		if len(yyv3704) != 0 {
			yyv3704 = yyv3704[:0]
			yyc3704 = true
		}
	} else if yyl3704 > 0 {

		if yyl3704 > cap(yyv3704) {
			yyrl3704, yyrt3704 = z.DecInferLen(yyl3704, z.DecBasicHandle().MaxInitLen, 400)
			yyv3704 = make([]PersistentVolume, yyrl3704)
			yyc3704 = true

			yyrr3704 = len(yyv3704)
		} else if yyl3704 != len(yyv3704) {
			yyv3704 = yyv3704[:yyl3704]
			yyc3704 = true
		}
		yyj3704 := 0
		for ; yyj3704 < yyrr3704; yyj3704++ {
			if r.TryDecodeAsNil() {
				yyv3704[yyj3704] = PersistentVolume{}
			} else {
				yyv3705 := &yyv3704[yyj3704]
				yyv3705.CodecDecodeSelf(d)
			}

		}
		if yyrt3704 {
			for ; yyj3704 < yyl3704; yyj3704++ {
				yyv3704 = append(yyv3704, PersistentVolume{})
				if r.TryDecodeAsNil() {
					yyv3704[yyj3704] = PersistentVolume{}
				} else {
					yyv3706 := &yyv3704[yyj3704]
					yyv3706.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3704 := 0; !r.CheckBreak(); yyj3704++ {
			if yyj3704 >= len(yyv3704) {
				yyv3704 = append(yyv3704, PersistentVolume{}) // var yyz3704 PersistentVolume
				yyc3704 = true
			}

			if yyj3704 < len(yyv3704) {
				if r.TryDecodeAsNil() {
					yyv3704[yyj3704] = PersistentVolume{}
				} else {
					yyv3707 := &yyv3704[yyj3704]
					yyv3707.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3704.End()
	}
	if yyc3704 {
		*v = yyv3704
	}

}

func (x codecSelfer1234) encSlicePersistentVolumeClaim(v []PersistentVolumeClaim, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3708 := range v {
		yy3709 := &yyv3708
		yy3709.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePersistentVolumeClaim(v *[]PersistentVolumeClaim, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3710 := *v
	yyh3710, yyl3710 := z.DecSliceHelperStart()

	var yyrr3710, yyrl3710 int
	var yyc3710, yyrt3710 bool
	_, _, _ = yyc3710, yyrt3710, yyrl3710
	yyrr3710 = yyl3710

	if yyv3710 == nil {
		if yyrl3710, yyrt3710 = z.DecInferLen(yyl3710, z.DecBasicHandle().MaxInitLen, 312); yyrt3710 {
			yyrr3710 = yyrl3710
		}
		yyv3710 = make([]PersistentVolumeClaim, yyrl3710)
		yyc3710 = true
	}

	if yyl3710 == 0 {
		if len(yyv3710) != 0 {
			yyv3710 = yyv3710[:0]
			yyc3710 = true
		}
	} else if yyl3710 > 0 {

		if yyl3710 > cap(yyv3710) {
			yyrl3710, yyrt3710 = z.DecInferLen(yyl3710, z.DecBasicHandle().MaxInitLen, 312)
			yyv3710 = make([]PersistentVolumeClaim, yyrl3710)
			yyc3710 = true

			yyrr3710 = len(yyv3710)
		} else if yyl3710 != len(yyv3710) {
			yyv3710 = yyv3710[:yyl3710]
			yyc3710 = true
		}
		yyj3710 := 0
		for ; yyj3710 < yyrr3710; yyj3710++ {
			if r.TryDecodeAsNil() {
				yyv3710[yyj3710] = PersistentVolumeClaim{}
			} else {
				yyv3711 := &yyv3710[yyj3710]
				yyv3711.CodecDecodeSelf(d)
			}

		}
		if yyrt3710 {
			for ; yyj3710 < yyl3710; yyj3710++ {
				yyv3710 = append(yyv3710, PersistentVolumeClaim{})
				if r.TryDecodeAsNil() {
					yyv3710[yyj3710] = PersistentVolumeClaim{}
				} else {
					yyv3712 := &yyv3710[yyj3710]
					yyv3712.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3710 := 0; !r.CheckBreak(); yyj3710++ {
			if yyj3710 >= len(yyv3710) {
				yyv3710 = append(yyv3710, PersistentVolumeClaim{}) // var yyz3710 PersistentVolumeClaim
				yyc3710 = true
			}

			if yyj3710 < len(yyv3710) {
				if r.TryDecodeAsNil() {
					yyv3710[yyj3710] = PersistentVolumeClaim{}
				} else {
					yyv3713 := &yyv3710[yyj3710]
					yyv3713.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3710.End()
	}
	if yyc3710 {
		*v = yyv3710
	}

}

func (x codecSelfer1234) encSliceCapability(v []Capability, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3714 := range v {
		yyv3714.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceCapability(v *[]Capability, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3715 := *v
	yyh3715, yyl3715 := z.DecSliceHelperStart()

	var yyrr3715, yyrl3715 int
	var yyc3715, yyrt3715 bool
	_, _, _ = yyc3715, yyrt3715, yyrl3715
	yyrr3715 = yyl3715

	if yyv3715 == nil {
		if yyrl3715, yyrt3715 = z.DecInferLen(yyl3715, z.DecBasicHandle().MaxInitLen, 16); yyrt3715 {
			yyrr3715 = yyrl3715
		}
		yyv3715 = make([]Capability, yyrl3715)
		yyc3715 = true
	}

	if yyl3715 == 0 {
		if len(yyv3715) != 0 {
			yyv3715 = yyv3715[:0]
			yyc3715 = true
		}
	} else if yyl3715 > 0 {

		if yyl3715 > cap(yyv3715) {
			yyrl3715, yyrt3715 = z.DecInferLen(yyl3715, z.DecBasicHandle().MaxInitLen, 16)

			yyv23715 := yyv3715
			yyv3715 = make([]Capability, yyrl3715)
			if len(yyv3715) > 0 {
				copy(yyv3715, yyv23715[:cap(yyv23715)])
			}
			yyc3715 = true

			yyrr3715 = len(yyv3715)
		} else if yyl3715 != len(yyv3715) {
			yyv3715 = yyv3715[:yyl3715]
			yyc3715 = true
		}
		yyj3715 := 0
		for ; yyj3715 < yyrr3715; yyj3715++ {
			if r.TryDecodeAsNil() {
				yyv3715[yyj3715] = ""
			} else {
				yyv3715[yyj3715] = Capability(r.DecodeString())
			}

		}
		if yyrt3715 {
			for ; yyj3715 < yyl3715; yyj3715++ {
				yyv3715 = append(yyv3715, "")
				if r.TryDecodeAsNil() {
					yyv3715[yyj3715] = ""
				} else {
					yyv3715[yyj3715] = Capability(r.DecodeString())
				}

			}
		}

	} else {
		for yyj3715 := 0; !r.CheckBreak(); yyj3715++ {
			if yyj3715 >= len(yyv3715) {
				yyv3715 = append(yyv3715, "") // var yyz3715 Capability
				yyc3715 = true
			}

			if yyj3715 < len(yyv3715) {
				if r.TryDecodeAsNil() {
					yyv3715[yyj3715] = ""
				} else {
					yyv3715[yyj3715] = Capability(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3715.End()
	}
	if yyc3715 {
		*v = yyv3715
	}

}

func (x codecSelfer1234) encSliceContainerPort(v []ContainerPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3719 := range v {
		yy3720 := &yyv3719
		yy3720.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceContainerPort(v *[]ContainerPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3721 := *v
	yyh3721, yyl3721 := z.DecSliceHelperStart()

	var yyrr3721, yyrl3721 int
	var yyc3721, yyrt3721 bool
	_, _, _ = yyc3721, yyrt3721, yyrl3721
	yyrr3721 = yyl3721

	if yyv3721 == nil {
		if yyrl3721, yyrt3721 = z.DecInferLen(yyl3721, z.DecBasicHandle().MaxInitLen, 64); yyrt3721 {
			yyrr3721 = yyrl3721
		}
		yyv3721 = make([]ContainerPort, yyrl3721)
		yyc3721 = true
	}

	if yyl3721 == 0 {
		if len(yyv3721) != 0 {
			yyv3721 = yyv3721[:0]
			yyc3721 = true
		}
	} else if yyl3721 > 0 {

		if yyl3721 > cap(yyv3721) {
			yyrl3721, yyrt3721 = z.DecInferLen(yyl3721, z.DecBasicHandle().MaxInitLen, 64)
			yyv3721 = make([]ContainerPort, yyrl3721)
			yyc3721 = true

			yyrr3721 = len(yyv3721)
		} else if yyl3721 != len(yyv3721) {
			yyv3721 = yyv3721[:yyl3721]
			yyc3721 = true
		}
		yyj3721 := 0
		for ; yyj3721 < yyrr3721; yyj3721++ {
			if r.TryDecodeAsNil() {
				yyv3721[yyj3721] = ContainerPort{}
			} else {
				yyv3722 := &yyv3721[yyj3721]
				yyv3722.CodecDecodeSelf(d)
			}

		}
		if yyrt3721 {
			for ; yyj3721 < yyl3721; yyj3721++ {
				yyv3721 = append(yyv3721, ContainerPort{})
				if r.TryDecodeAsNil() {
					yyv3721[yyj3721] = ContainerPort{}
				} else {
					yyv3723 := &yyv3721[yyj3721]
					yyv3723.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3721 := 0; !r.CheckBreak(); yyj3721++ {
			if yyj3721 >= len(yyv3721) {
				yyv3721 = append(yyv3721, ContainerPort{}) // var yyz3721 ContainerPort
				yyc3721 = true
			}

			if yyj3721 < len(yyv3721) {
				if r.TryDecodeAsNil() {
					yyv3721[yyj3721] = ContainerPort{}
				} else {
					yyv3724 := &yyv3721[yyj3721]
					yyv3724.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3721.End()
	}
	if yyc3721 {
		*v = yyv3721
	}

}

func (x codecSelfer1234) encSliceEnvVar(v []EnvVar, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3725 := range v {
		yy3726 := &yyv3725
		yy3726.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEnvVar(v *[]EnvVar, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3727 := *v
	yyh3727, yyl3727 := z.DecSliceHelperStart()

	var yyrr3727, yyrl3727 int
	var yyc3727, yyrt3727 bool
	_, _, _ = yyc3727, yyrt3727, yyrl3727
	yyrr3727 = yyl3727

	if yyv3727 == nil {
		if yyrl3727, yyrt3727 = z.DecInferLen(yyl3727, z.DecBasicHandle().MaxInitLen, 40); yyrt3727 {
			yyrr3727 = yyrl3727
		}
		yyv3727 = make([]EnvVar, yyrl3727)
		yyc3727 = true
	}

	if yyl3727 == 0 {
		if len(yyv3727) != 0 {
			yyv3727 = yyv3727[:0]
			yyc3727 = true
		}
	} else if yyl3727 > 0 {

		if yyl3727 > cap(yyv3727) {
			yyrl3727, yyrt3727 = z.DecInferLen(yyl3727, z.DecBasicHandle().MaxInitLen, 40)
			yyv3727 = make([]EnvVar, yyrl3727)
			yyc3727 = true

			yyrr3727 = len(yyv3727)
		} else if yyl3727 != len(yyv3727) {
			yyv3727 = yyv3727[:yyl3727]
			yyc3727 = true
		}
		yyj3727 := 0
		for ; yyj3727 < yyrr3727; yyj3727++ {
			if r.TryDecodeAsNil() {
				yyv3727[yyj3727] = EnvVar{}
			} else {
				yyv3728 := &yyv3727[yyj3727]
				yyv3728.CodecDecodeSelf(d)
			}

		}
		if yyrt3727 {
			for ; yyj3727 < yyl3727; yyj3727++ {
				yyv3727 = append(yyv3727, EnvVar{})
				if r.TryDecodeAsNil() {
					yyv3727[yyj3727] = EnvVar{}
				} else {
					yyv3729 := &yyv3727[yyj3727]
					yyv3729.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3727 := 0; !r.CheckBreak(); yyj3727++ {
			if yyj3727 >= len(yyv3727) {
				yyv3727 = append(yyv3727, EnvVar{}) // var yyz3727 EnvVar
				yyc3727 = true
			}

			if yyj3727 < len(yyv3727) {
				if r.TryDecodeAsNil() {
					yyv3727[yyj3727] = EnvVar{}
				} else {
					yyv3730 := &yyv3727[yyj3727]
					yyv3730.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3727.End()
	}
	if yyc3727 {
		*v = yyv3727
	}

}

func (x codecSelfer1234) encSliceVolumeMount(v []VolumeMount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3731 := range v {
		yy3732 := &yyv3731
		yy3732.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceVolumeMount(v *[]VolumeMount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3733 := *v
	yyh3733, yyl3733 := z.DecSliceHelperStart()

	var yyrr3733, yyrl3733 int
	var yyc3733, yyrt3733 bool
	_, _, _ = yyc3733, yyrt3733, yyrl3733
	yyrr3733 = yyl3733

	if yyv3733 == nil {
		if yyrl3733, yyrt3733 = z.DecInferLen(yyl3733, z.DecBasicHandle().MaxInitLen, 40); yyrt3733 {
			yyrr3733 = yyrl3733
		}
		yyv3733 = make([]VolumeMount, yyrl3733)
		yyc3733 = true
	}

	if yyl3733 == 0 {
		if len(yyv3733) != 0 {
			yyv3733 = yyv3733[:0]
			yyc3733 = true
		}
	} else if yyl3733 > 0 {

		if yyl3733 > cap(yyv3733) {
			yyrl3733, yyrt3733 = z.DecInferLen(yyl3733, z.DecBasicHandle().MaxInitLen, 40)
			yyv3733 = make([]VolumeMount, yyrl3733)
			yyc3733 = true

			yyrr3733 = len(yyv3733)
		} else if yyl3733 != len(yyv3733) {
			yyv3733 = yyv3733[:yyl3733]
			yyc3733 = true
		}
		yyj3733 := 0
		for ; yyj3733 < yyrr3733; yyj3733++ {
			if r.TryDecodeAsNil() {
				yyv3733[yyj3733] = VolumeMount{}
			} else {
				yyv3734 := &yyv3733[yyj3733]
				yyv3734.CodecDecodeSelf(d)
			}

		}
		if yyrt3733 {
			for ; yyj3733 < yyl3733; yyj3733++ {
				yyv3733 = append(yyv3733, VolumeMount{})
				if r.TryDecodeAsNil() {
					yyv3733[yyj3733] = VolumeMount{}
				} else {
					yyv3735 := &yyv3733[yyj3733]
					yyv3735.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3733 := 0; !r.CheckBreak(); yyj3733++ {
			if yyj3733 >= len(yyv3733) {
				yyv3733 = append(yyv3733, VolumeMount{}) // var yyz3733 VolumeMount
				yyc3733 = true
			}

			if yyj3733 < len(yyv3733) {
				if r.TryDecodeAsNil() {
					yyv3733[yyj3733] = VolumeMount{}
				} else {
					yyv3736 := &yyv3733[yyj3733]
					yyv3736.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3733.End()
	}
	if yyc3733 {
		*v = yyv3733
	}

}

func (x codecSelfer1234) encSliceVolume(v []Volume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3737 := range v {
		yy3738 := &yyv3737
		yy3738.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceVolume(v *[]Volume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3739 := *v
	yyh3739, yyl3739 := z.DecSliceHelperStart()

	var yyrr3739, yyrl3739 int
	var yyc3739, yyrt3739 bool
	_, _, _ = yyc3739, yyrt3739, yyrl3739
	yyrr3739 = yyl3739

	if yyv3739 == nil {
		if yyrl3739, yyrt3739 = z.DecInferLen(yyl3739, z.DecBasicHandle().MaxInitLen, 144); yyrt3739 {
			yyrr3739 = yyrl3739
		}
		yyv3739 = make([]Volume, yyrl3739)
		yyc3739 = true
	}

	if yyl3739 == 0 {
		if len(yyv3739) != 0 {
			yyv3739 = yyv3739[:0]
			yyc3739 = true
		}
	} else if yyl3739 > 0 {

		if yyl3739 > cap(yyv3739) {
			yyrl3739, yyrt3739 = z.DecInferLen(yyl3739, z.DecBasicHandle().MaxInitLen, 144)
			yyv3739 = make([]Volume, yyrl3739)
			yyc3739 = true

			yyrr3739 = len(yyv3739)
		} else if yyl3739 != len(yyv3739) {
			yyv3739 = yyv3739[:yyl3739]
			yyc3739 = true
		}
		yyj3739 := 0
		for ; yyj3739 < yyrr3739; yyj3739++ {
			if r.TryDecodeAsNil() {
				yyv3739[yyj3739] = Volume{}
			} else {
				yyv3740 := &yyv3739[yyj3739]
				yyv3740.CodecDecodeSelf(d)
			}

		}
		if yyrt3739 {
			for ; yyj3739 < yyl3739; yyj3739++ {
				yyv3739 = append(yyv3739, Volume{})
				if r.TryDecodeAsNil() {
					yyv3739[yyj3739] = Volume{}
				} else {
					yyv3741 := &yyv3739[yyj3739]
					yyv3741.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3739 := 0; !r.CheckBreak(); yyj3739++ {
			if yyj3739 >= len(yyv3739) {
				yyv3739 = append(yyv3739, Volume{}) // var yyz3739 Volume
				yyc3739 = true
			}

			if yyj3739 < len(yyv3739) {
				if r.TryDecodeAsNil() {
					yyv3739[yyj3739] = Volume{}
				} else {
					yyv3742 := &yyv3739[yyj3739]
					yyv3742.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3739.End()
	}
	if yyc3739 {
		*v = yyv3739
	}

}

func (x codecSelfer1234) encSliceContainer(v []Container, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3743 := range v {
		yy3744 := &yyv3743
		yy3744.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceContainer(v *[]Container, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3745 := *v
	yyh3745, yyl3745 := z.DecSliceHelperStart()

	var yyrr3745, yyrl3745 int
	var yyc3745, yyrt3745 bool
	_, _, _ = yyc3745, yyrt3745, yyrl3745
	yyrr3745 = yyl3745

	if yyv3745 == nil {
		if yyrl3745, yyrt3745 = z.DecInferLen(yyl3745, z.DecBasicHandle().MaxInitLen, 256); yyrt3745 {
			yyrr3745 = yyrl3745
		}
		yyv3745 = make([]Container, yyrl3745)
		yyc3745 = true
	}

	if yyl3745 == 0 {
		if len(yyv3745) != 0 {
			yyv3745 = yyv3745[:0]
			yyc3745 = true
		}
	} else if yyl3745 > 0 {

		if yyl3745 > cap(yyv3745) {
			yyrl3745, yyrt3745 = z.DecInferLen(yyl3745, z.DecBasicHandle().MaxInitLen, 256)
			yyv3745 = make([]Container, yyrl3745)
			yyc3745 = true

			yyrr3745 = len(yyv3745)
		} else if yyl3745 != len(yyv3745) {
			yyv3745 = yyv3745[:yyl3745]
			yyc3745 = true
		}
		yyj3745 := 0
		for ; yyj3745 < yyrr3745; yyj3745++ {
			if r.TryDecodeAsNil() {
				yyv3745[yyj3745] = Container{}
			} else {
				yyv3746 := &yyv3745[yyj3745]
				yyv3746.CodecDecodeSelf(d)
			}

		}
		if yyrt3745 {
			for ; yyj3745 < yyl3745; yyj3745++ {
				yyv3745 = append(yyv3745, Container{})
				if r.TryDecodeAsNil() {
					yyv3745[yyj3745] = Container{}
				} else {
					yyv3747 := &yyv3745[yyj3745]
					yyv3747.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3745 := 0; !r.CheckBreak(); yyj3745++ {
			if yyj3745 >= len(yyv3745) {
				yyv3745 = append(yyv3745, Container{}) // var yyz3745 Container
				yyc3745 = true
			}

			if yyj3745 < len(yyv3745) {
				if r.TryDecodeAsNil() {
					yyv3745[yyj3745] = Container{}
				} else {
					yyv3748 := &yyv3745[yyj3745]
					yyv3748.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3745.End()
	}
	if yyc3745 {
		*v = yyv3745
	}

}

func (x codecSelfer1234) encSliceLocalObjectReference(v []LocalObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3749 := range v {
		yy3750 := &yyv3749
		yy3750.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceLocalObjectReference(v *[]LocalObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3751 := *v
	yyh3751, yyl3751 := z.DecSliceHelperStart()

	var yyrr3751, yyrl3751 int
	var yyc3751, yyrt3751 bool
	_, _, _ = yyc3751, yyrt3751, yyrl3751
	yyrr3751 = yyl3751

	if yyv3751 == nil {
		if yyrl3751, yyrt3751 = z.DecInferLen(yyl3751, z.DecBasicHandle().MaxInitLen, 16); yyrt3751 {
			yyrr3751 = yyrl3751
		}
		yyv3751 = make([]LocalObjectReference, yyrl3751)
		yyc3751 = true
	}

	if yyl3751 == 0 {
		if len(yyv3751) != 0 {
			yyv3751 = yyv3751[:0]
			yyc3751 = true
		}
	} else if yyl3751 > 0 {

		if yyl3751 > cap(yyv3751) {
			yyrl3751, yyrt3751 = z.DecInferLen(yyl3751, z.DecBasicHandle().MaxInitLen, 16)
			yyv3751 = make([]LocalObjectReference, yyrl3751)
			yyc3751 = true

			yyrr3751 = len(yyv3751)
		} else if yyl3751 != len(yyv3751) {
			yyv3751 = yyv3751[:yyl3751]
			yyc3751 = true
		}
		yyj3751 := 0
		for ; yyj3751 < yyrr3751; yyj3751++ {
			if r.TryDecodeAsNil() {
				yyv3751[yyj3751] = LocalObjectReference{}
			} else {
				yyv3752 := &yyv3751[yyj3751]
				yyv3752.CodecDecodeSelf(d)
			}

		}
		if yyrt3751 {
			for ; yyj3751 < yyl3751; yyj3751++ {
				yyv3751 = append(yyv3751, LocalObjectReference{})
				if r.TryDecodeAsNil() {
					yyv3751[yyj3751] = LocalObjectReference{}
				} else {
					yyv3753 := &yyv3751[yyj3751]
					yyv3753.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3751 := 0; !r.CheckBreak(); yyj3751++ {
			if yyj3751 >= len(yyv3751) {
				yyv3751 = append(yyv3751, LocalObjectReference{}) // var yyz3751 LocalObjectReference
				yyc3751 = true
			}

			if yyj3751 < len(yyv3751) {
				if r.TryDecodeAsNil() {
					yyv3751[yyj3751] = LocalObjectReference{}
				} else {
					yyv3754 := &yyv3751[yyj3751]
					yyv3754.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3751.End()
	}
	if yyc3751 {
		*v = yyv3751
	}

}

func (x codecSelfer1234) encSlicePodCondition(v []PodCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3755 := range v {
		yy3756 := &yyv3755
		yy3756.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePodCondition(v *[]PodCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3757 := *v
	yyh3757, yyl3757 := z.DecSliceHelperStart()

	var yyrr3757, yyrl3757 int
	var yyc3757, yyrt3757 bool
	_, _, _ = yyc3757, yyrt3757, yyrl3757
	yyrr3757 = yyl3757

	if yyv3757 == nil {
		if yyrl3757, yyrt3757 = z.DecInferLen(yyl3757, z.DecBasicHandle().MaxInitLen, 112); yyrt3757 {
			yyrr3757 = yyrl3757
		}
		yyv3757 = make([]PodCondition, yyrl3757)
		yyc3757 = true
	}

	if yyl3757 == 0 {
		if len(yyv3757) != 0 {
			yyv3757 = yyv3757[:0]
			yyc3757 = true
		}
	} else if yyl3757 > 0 {

		if yyl3757 > cap(yyv3757) {
			yyrl3757, yyrt3757 = z.DecInferLen(yyl3757, z.DecBasicHandle().MaxInitLen, 112)
			yyv3757 = make([]PodCondition, yyrl3757)
			yyc3757 = true

			yyrr3757 = len(yyv3757)
		} else if yyl3757 != len(yyv3757) {
			yyv3757 = yyv3757[:yyl3757]
			yyc3757 = true
		}
		yyj3757 := 0
		for ; yyj3757 < yyrr3757; yyj3757++ {
			if r.TryDecodeAsNil() {
				yyv3757[yyj3757] = PodCondition{}
			} else {
				yyv3758 := &yyv3757[yyj3757]
				yyv3758.CodecDecodeSelf(d)
			}

		}
		if yyrt3757 {
			for ; yyj3757 < yyl3757; yyj3757++ {
				yyv3757 = append(yyv3757, PodCondition{})
				if r.TryDecodeAsNil() {
					yyv3757[yyj3757] = PodCondition{}
				} else {
					yyv3759 := &yyv3757[yyj3757]
					yyv3759.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3757 := 0; !r.CheckBreak(); yyj3757++ {
			if yyj3757 >= len(yyv3757) {
				yyv3757 = append(yyv3757, PodCondition{}) // var yyz3757 PodCondition
				yyc3757 = true
			}

			if yyj3757 < len(yyv3757) {
				if r.TryDecodeAsNil() {
					yyv3757[yyj3757] = PodCondition{}
				} else {
					yyv3760 := &yyv3757[yyj3757]
					yyv3760.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3757.End()
	}
	if yyc3757 {
		*v = yyv3757
	}

}

func (x codecSelfer1234) encSliceContainerStatus(v []ContainerStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3761 := range v {
		yy3762 := &yyv3761
		yy3762.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceContainerStatus(v *[]ContainerStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3763 := *v
	yyh3763, yyl3763 := z.DecSliceHelperStart()

	var yyrr3763, yyrl3763 int
	var yyc3763, yyrt3763 bool
	_, _, _ = yyc3763, yyrt3763, yyrl3763
	yyrr3763 = yyl3763

	if yyv3763 == nil {
		if yyrl3763, yyrt3763 = z.DecInferLen(yyl3763, z.DecBasicHandle().MaxInitLen, 128); yyrt3763 {
			yyrr3763 = yyrl3763
		}
		yyv3763 = make([]ContainerStatus, yyrl3763)
		yyc3763 = true
	}

	if yyl3763 == 0 {
		if len(yyv3763) != 0 {
			yyv3763 = yyv3763[:0]
			yyc3763 = true
		}
	} else if yyl3763 > 0 {

		if yyl3763 > cap(yyv3763) {
			yyrl3763, yyrt3763 = z.DecInferLen(yyl3763, z.DecBasicHandle().MaxInitLen, 128)
			yyv3763 = make([]ContainerStatus, yyrl3763)
			yyc3763 = true

			yyrr3763 = len(yyv3763)
		} else if yyl3763 != len(yyv3763) {
			yyv3763 = yyv3763[:yyl3763]
			yyc3763 = true
		}
		yyj3763 := 0
		for ; yyj3763 < yyrr3763; yyj3763++ {
			if r.TryDecodeAsNil() {
				yyv3763[yyj3763] = ContainerStatus{}
			} else {
				yyv3764 := &yyv3763[yyj3763]
				yyv3764.CodecDecodeSelf(d)
			}

		}
		if yyrt3763 {
			for ; yyj3763 < yyl3763; yyj3763++ {
				yyv3763 = append(yyv3763, ContainerStatus{})
				if r.TryDecodeAsNil() {
					yyv3763[yyj3763] = ContainerStatus{}
				} else {
					yyv3765 := &yyv3763[yyj3763]
					yyv3765.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3763 := 0; !r.CheckBreak(); yyj3763++ {
			if yyj3763 >= len(yyv3763) {
				yyv3763 = append(yyv3763, ContainerStatus{}) // var yyz3763 ContainerStatus
				yyc3763 = true
			}

			if yyj3763 < len(yyv3763) {
				if r.TryDecodeAsNil() {
					yyv3763[yyj3763] = ContainerStatus{}
				} else {
					yyv3766 := &yyv3763[yyj3763]
					yyv3766.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3763.End()
	}
	if yyc3763 {
		*v = yyv3763
	}

}

func (x codecSelfer1234) encSlicePod(v []Pod, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3767 := range v {
		yy3768 := &yyv3767
		yy3768.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePod(v *[]Pod, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3769 := *v
	yyh3769, yyl3769 := z.DecSliceHelperStart()

	var yyrr3769, yyrl3769 int
	var yyc3769, yyrt3769 bool
	_, _, _ = yyc3769, yyrt3769, yyrl3769
	yyrr3769 = yyl3769

	if yyv3769 == nil {
		if yyrl3769, yyrt3769 = z.DecInferLen(yyl3769, z.DecBasicHandle().MaxInitLen, 536); yyrt3769 {
			yyrr3769 = yyrl3769
		}
		yyv3769 = make([]Pod, yyrl3769)
		yyc3769 = true
	}

	if yyl3769 == 0 {
		if len(yyv3769) != 0 {
			yyv3769 = yyv3769[:0]
			yyc3769 = true
		}
	} else if yyl3769 > 0 {

		if yyl3769 > cap(yyv3769) {
			yyrl3769, yyrt3769 = z.DecInferLen(yyl3769, z.DecBasicHandle().MaxInitLen, 536)
			yyv3769 = make([]Pod, yyrl3769)
			yyc3769 = true

			yyrr3769 = len(yyv3769)
		} else if yyl3769 != len(yyv3769) {
			yyv3769 = yyv3769[:yyl3769]
			yyc3769 = true
		}
		yyj3769 := 0
		for ; yyj3769 < yyrr3769; yyj3769++ {
			if r.TryDecodeAsNil() {
				yyv3769[yyj3769] = Pod{}
			} else {
				yyv3770 := &yyv3769[yyj3769]
				yyv3770.CodecDecodeSelf(d)
			}

		}
		if yyrt3769 {
			for ; yyj3769 < yyl3769; yyj3769++ {
				yyv3769 = append(yyv3769, Pod{})
				if r.TryDecodeAsNil() {
					yyv3769[yyj3769] = Pod{}
				} else {
					yyv3771 := &yyv3769[yyj3769]
					yyv3771.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3769 := 0; !r.CheckBreak(); yyj3769++ {
			if yyj3769 >= len(yyv3769) {
				yyv3769 = append(yyv3769, Pod{}) // var yyz3769 Pod
				yyc3769 = true
			}

			if yyj3769 < len(yyv3769) {
				if r.TryDecodeAsNil() {
					yyv3769[yyj3769] = Pod{}
				} else {
					yyv3772 := &yyv3769[yyj3769]
					yyv3772.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3769.End()
	}
	if yyc3769 {
		*v = yyv3769
	}

}

func (x codecSelfer1234) encSlicePodTemplate(v []PodTemplate, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3773 := range v {
		yy3774 := &yyv3773
		yy3774.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePodTemplate(v *[]PodTemplate, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3775 := *v
	yyh3775, yyl3775 := z.DecSliceHelperStart()

	var yyrr3775, yyrl3775 int
	var yyc3775, yyrt3775 bool
	_, _, _ = yyc3775, yyrt3775, yyrl3775
	yyrr3775 = yyl3775

	if yyv3775 == nil {
		if yyrl3775, yyrt3775 = z.DecInferLen(yyl3775, z.DecBasicHandle().MaxInitLen, 576); yyrt3775 {
			yyrr3775 = yyrl3775
		}
		yyv3775 = make([]PodTemplate, yyrl3775)
		yyc3775 = true
	}

	if yyl3775 == 0 {
		if len(yyv3775) != 0 {
			yyv3775 = yyv3775[:0]
			yyc3775 = true
		}
	} else if yyl3775 > 0 {

		if yyl3775 > cap(yyv3775) {
			yyrl3775, yyrt3775 = z.DecInferLen(yyl3775, z.DecBasicHandle().MaxInitLen, 576)
			yyv3775 = make([]PodTemplate, yyrl3775)
			yyc3775 = true

			yyrr3775 = len(yyv3775)
		} else if yyl3775 != len(yyv3775) {
			yyv3775 = yyv3775[:yyl3775]
			yyc3775 = true
		}
		yyj3775 := 0
		for ; yyj3775 < yyrr3775; yyj3775++ {
			if r.TryDecodeAsNil() {
				yyv3775[yyj3775] = PodTemplate{}
			} else {
				yyv3776 := &yyv3775[yyj3775]
				yyv3776.CodecDecodeSelf(d)
			}

		}
		if yyrt3775 {
			for ; yyj3775 < yyl3775; yyj3775++ {
				yyv3775 = append(yyv3775, PodTemplate{})
				if r.TryDecodeAsNil() {
					yyv3775[yyj3775] = PodTemplate{}
				} else {
					yyv3777 := &yyv3775[yyj3775]
					yyv3777.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3775 := 0; !r.CheckBreak(); yyj3775++ {
			if yyj3775 >= len(yyv3775) {
				yyv3775 = append(yyv3775, PodTemplate{}) // var yyz3775 PodTemplate
				yyc3775 = true
			}

			if yyj3775 < len(yyv3775) {
				if r.TryDecodeAsNil() {
					yyv3775[yyj3775] = PodTemplate{}
				} else {
					yyv3778 := &yyv3775[yyj3775]
					yyv3778.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3775.End()
	}
	if yyc3775 {
		*v = yyv3775
	}

}

func (x codecSelfer1234) encSliceReplicationController(v []ReplicationController, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3779 := range v {
		yy3780 := &yyv3779
		yy3780.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceReplicationController(v *[]ReplicationController, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3781 := *v
	yyh3781, yyl3781 := z.DecSliceHelperStart()

	var yyrr3781, yyrl3781 int
	var yyc3781, yyrt3781 bool
	_, _, _ = yyc3781, yyrt3781, yyrl3781
	yyrr3781 = yyl3781

	if yyv3781 == nil {
		if yyrl3781, yyrt3781 = z.DecInferLen(yyl3781, z.DecBasicHandle().MaxInitLen, 248); yyrt3781 {
			yyrr3781 = yyrl3781
		}
		yyv3781 = make([]ReplicationController, yyrl3781)
		yyc3781 = true
	}

	if yyl3781 == 0 {
		if len(yyv3781) != 0 {
			yyv3781 = yyv3781[:0]
			yyc3781 = true
		}
	} else if yyl3781 > 0 {

		if yyl3781 > cap(yyv3781) {
			yyrl3781, yyrt3781 = z.DecInferLen(yyl3781, z.DecBasicHandle().MaxInitLen, 248)
			yyv3781 = make([]ReplicationController, yyrl3781)
			yyc3781 = true

			yyrr3781 = len(yyv3781)
		} else if yyl3781 != len(yyv3781) {
			yyv3781 = yyv3781[:yyl3781]
			yyc3781 = true
		}
		yyj3781 := 0
		for ; yyj3781 < yyrr3781; yyj3781++ {
			if r.TryDecodeAsNil() {
				yyv3781[yyj3781] = ReplicationController{}
			} else {
				yyv3782 := &yyv3781[yyj3781]
				yyv3782.CodecDecodeSelf(d)
			}

		}
		if yyrt3781 {
			for ; yyj3781 < yyl3781; yyj3781++ {
				yyv3781 = append(yyv3781, ReplicationController{})
				if r.TryDecodeAsNil() {
					yyv3781[yyj3781] = ReplicationController{}
				} else {
					yyv3783 := &yyv3781[yyj3781]
					yyv3783.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3781 := 0; !r.CheckBreak(); yyj3781++ {
			if yyj3781 >= len(yyv3781) {
				yyv3781 = append(yyv3781, ReplicationController{}) // var yyz3781 ReplicationController
				yyc3781 = true
			}

			if yyj3781 < len(yyv3781) {
				if r.TryDecodeAsNil() {
					yyv3781[yyj3781] = ReplicationController{}
				} else {
					yyv3784 := &yyv3781[yyj3781]
					yyv3784.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3781.End()
	}
	if yyc3781 {
		*v = yyv3781
	}

}

func (x codecSelfer1234) encSliceLoadBalancerIngress(v []LoadBalancerIngress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3785 := range v {
		yy3786 := &yyv3785
		yy3786.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceLoadBalancerIngress(v *[]LoadBalancerIngress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3787 := *v
	yyh3787, yyl3787 := z.DecSliceHelperStart()

	var yyrr3787, yyrl3787 int
	var yyc3787, yyrt3787 bool
	_, _, _ = yyc3787, yyrt3787, yyrl3787
	yyrr3787 = yyl3787

	if yyv3787 == nil {
		if yyrl3787, yyrt3787 = z.DecInferLen(yyl3787, z.DecBasicHandle().MaxInitLen, 32); yyrt3787 {
			yyrr3787 = yyrl3787
		}
		yyv3787 = make([]LoadBalancerIngress, yyrl3787)
		yyc3787 = true
	}

	if yyl3787 == 0 {
		if len(yyv3787) != 0 {
			yyv3787 = yyv3787[:0]
			yyc3787 = true
		}
	} else if yyl3787 > 0 {

		if yyl3787 > cap(yyv3787) {
			yyrl3787, yyrt3787 = z.DecInferLen(yyl3787, z.DecBasicHandle().MaxInitLen, 32)
			yyv3787 = make([]LoadBalancerIngress, yyrl3787)
			yyc3787 = true

			yyrr3787 = len(yyv3787)
		} else if yyl3787 != len(yyv3787) {
			yyv3787 = yyv3787[:yyl3787]
			yyc3787 = true
		}
		yyj3787 := 0
		for ; yyj3787 < yyrr3787; yyj3787++ {
			if r.TryDecodeAsNil() {
				yyv3787[yyj3787] = LoadBalancerIngress{}
			} else {
				yyv3788 := &yyv3787[yyj3787]
				yyv3788.CodecDecodeSelf(d)
			}

		}
		if yyrt3787 {
			for ; yyj3787 < yyl3787; yyj3787++ {
				yyv3787 = append(yyv3787, LoadBalancerIngress{})
				if r.TryDecodeAsNil() {
					yyv3787[yyj3787] = LoadBalancerIngress{}
				} else {
					yyv3789 := &yyv3787[yyj3787]
					yyv3789.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3787 := 0; !r.CheckBreak(); yyj3787++ {
			if yyj3787 >= len(yyv3787) {
				yyv3787 = append(yyv3787, LoadBalancerIngress{}) // var yyz3787 LoadBalancerIngress
				yyc3787 = true
			}

			if yyj3787 < len(yyv3787) {
				if r.TryDecodeAsNil() {
					yyv3787[yyj3787] = LoadBalancerIngress{}
				} else {
					yyv3790 := &yyv3787[yyj3787]
					yyv3790.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3787.End()
	}
	if yyc3787 {
		*v = yyv3787
	}

}

func (x codecSelfer1234) encSliceServicePort(v []ServicePort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3791 := range v {
		yy3792 := &yyv3791
		yy3792.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceServicePort(v *[]ServicePort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3793 := *v
	yyh3793, yyl3793 := z.DecSliceHelperStart()

	var yyrr3793, yyrl3793 int
	var yyc3793, yyrt3793 bool
	_, _, _ = yyc3793, yyrt3793, yyrl3793
	yyrr3793 = yyl3793

	if yyv3793 == nil {
		if yyrl3793, yyrt3793 = z.DecInferLen(yyl3793, z.DecBasicHandle().MaxInitLen, 80); yyrt3793 {
			yyrr3793 = yyrl3793
		}
		yyv3793 = make([]ServicePort, yyrl3793)
		yyc3793 = true
	}

	if yyl3793 == 0 {
		if len(yyv3793) != 0 {
			yyv3793 = yyv3793[:0]
			yyc3793 = true
		}
	} else if yyl3793 > 0 {

		if yyl3793 > cap(yyv3793) {
			yyrl3793, yyrt3793 = z.DecInferLen(yyl3793, z.DecBasicHandle().MaxInitLen, 80)
			yyv3793 = make([]ServicePort, yyrl3793)
			yyc3793 = true

			yyrr3793 = len(yyv3793)
		} else if yyl3793 != len(yyv3793) {
			yyv3793 = yyv3793[:yyl3793]
			yyc3793 = true
		}
		yyj3793 := 0
		for ; yyj3793 < yyrr3793; yyj3793++ {
			if r.TryDecodeAsNil() {
				yyv3793[yyj3793] = ServicePort{}
			} else {
				yyv3794 := &yyv3793[yyj3793]
				yyv3794.CodecDecodeSelf(d)
			}

		}
		if yyrt3793 {
			for ; yyj3793 < yyl3793; yyj3793++ {
				yyv3793 = append(yyv3793, ServicePort{})
				if r.TryDecodeAsNil() {
					yyv3793[yyj3793] = ServicePort{}
				} else {
					yyv3795 := &yyv3793[yyj3793]
					yyv3795.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3793 := 0; !r.CheckBreak(); yyj3793++ {
			if yyj3793 >= len(yyv3793) {
				yyv3793 = append(yyv3793, ServicePort{}) // var yyz3793 ServicePort
				yyc3793 = true
			}

			if yyj3793 < len(yyv3793) {
				if r.TryDecodeAsNil() {
					yyv3793[yyj3793] = ServicePort{}
				} else {
					yyv3796 := &yyv3793[yyj3793]
					yyv3796.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3793.End()
	}
	if yyc3793 {
		*v = yyv3793
	}

}

func (x codecSelfer1234) encSliceService(v []Service, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3797 := range v {
		yy3798 := &yyv3797
		yy3798.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceService(v *[]Service, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3799 := *v
	yyh3799, yyl3799 := z.DecSliceHelperStart()

	var yyrr3799, yyrl3799 int
	var yyc3799, yyrt3799 bool
	_, _, _ = yyc3799, yyrt3799, yyrl3799
	yyrr3799 = yyl3799

	if yyv3799 == nil {
		if yyrl3799, yyrt3799 = z.DecInferLen(yyl3799, z.DecBasicHandle().MaxInitLen, 376); yyrt3799 {
			yyrr3799 = yyrl3799
		}
		yyv3799 = make([]Service, yyrl3799)
		yyc3799 = true
	}

	if yyl3799 == 0 {
		if len(yyv3799) != 0 {
			yyv3799 = yyv3799[:0]
			yyc3799 = true
		}
	} else if yyl3799 > 0 {

		if yyl3799 > cap(yyv3799) {
			yyrl3799, yyrt3799 = z.DecInferLen(yyl3799, z.DecBasicHandle().MaxInitLen, 376)
			yyv3799 = make([]Service, yyrl3799)
			yyc3799 = true

			yyrr3799 = len(yyv3799)
		} else if yyl3799 != len(yyv3799) {
			yyv3799 = yyv3799[:yyl3799]
			yyc3799 = true
		}
		yyj3799 := 0
		for ; yyj3799 < yyrr3799; yyj3799++ {
			if r.TryDecodeAsNil() {
				yyv3799[yyj3799] = Service{}
			} else {
				yyv3800 := &yyv3799[yyj3799]
				yyv3800.CodecDecodeSelf(d)
			}

		}
		if yyrt3799 {
			for ; yyj3799 < yyl3799; yyj3799++ {
				yyv3799 = append(yyv3799, Service{})
				if r.TryDecodeAsNil() {
					yyv3799[yyj3799] = Service{}
				} else {
					yyv3801 := &yyv3799[yyj3799]
					yyv3801.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3799 := 0; !r.CheckBreak(); yyj3799++ {
			if yyj3799 >= len(yyv3799) {
				yyv3799 = append(yyv3799, Service{}) // var yyz3799 Service
				yyc3799 = true
			}

			if yyj3799 < len(yyv3799) {
				if r.TryDecodeAsNil() {
					yyv3799[yyj3799] = Service{}
				} else {
					yyv3802 := &yyv3799[yyj3799]
					yyv3802.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3799.End()
	}
	if yyc3799 {
		*v = yyv3799
	}

}

func (x codecSelfer1234) encSliceObjectReference(v []ObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3803 := range v {
		yy3804 := &yyv3803
		yy3804.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceObjectReference(v *[]ObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3805 := *v
	yyh3805, yyl3805 := z.DecSliceHelperStart()

	var yyrr3805, yyrl3805 int
	var yyc3805, yyrt3805 bool
	_, _, _ = yyc3805, yyrt3805, yyrl3805
	yyrr3805 = yyl3805

	if yyv3805 == nil {
		if yyrl3805, yyrt3805 = z.DecInferLen(yyl3805, z.DecBasicHandle().MaxInitLen, 128); yyrt3805 {
			yyrr3805 = yyrl3805
		}
		yyv3805 = make([]ObjectReference, yyrl3805)
		yyc3805 = true
	}

	if yyl3805 == 0 {
		if len(yyv3805) != 0 {
			yyv3805 = yyv3805[:0]
			yyc3805 = true
		}
	} else if yyl3805 > 0 {

		if yyl3805 > cap(yyv3805) {
			yyrl3805, yyrt3805 = z.DecInferLen(yyl3805, z.DecBasicHandle().MaxInitLen, 128)
			yyv3805 = make([]ObjectReference, yyrl3805)
			yyc3805 = true

			yyrr3805 = len(yyv3805)
		} else if yyl3805 != len(yyv3805) {
			yyv3805 = yyv3805[:yyl3805]
			yyc3805 = true
		}
		yyj3805 := 0
		for ; yyj3805 < yyrr3805; yyj3805++ {
			if r.TryDecodeAsNil() {
				yyv3805[yyj3805] = ObjectReference{}
			} else {
				yyv3806 := &yyv3805[yyj3805]
				yyv3806.CodecDecodeSelf(d)
			}

		}
		if yyrt3805 {
			for ; yyj3805 < yyl3805; yyj3805++ {
				yyv3805 = append(yyv3805, ObjectReference{})
				if r.TryDecodeAsNil() {
					yyv3805[yyj3805] = ObjectReference{}
				} else {
					yyv3807 := &yyv3805[yyj3805]
					yyv3807.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3805 := 0; !r.CheckBreak(); yyj3805++ {
			if yyj3805 >= len(yyv3805) {
				yyv3805 = append(yyv3805, ObjectReference{}) // var yyz3805 ObjectReference
				yyc3805 = true
			}

			if yyj3805 < len(yyv3805) {
				if r.TryDecodeAsNil() {
					yyv3805[yyj3805] = ObjectReference{}
				} else {
					yyv3808 := &yyv3805[yyj3805]
					yyv3808.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3805.End()
	}
	if yyc3805 {
		*v = yyv3805
	}

}

func (x codecSelfer1234) encSliceServiceAccount(v []ServiceAccount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3809 := range v {
		yy3810 := &yyv3809
		yy3810.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceServiceAccount(v *[]ServiceAccount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3811 := *v
	yyh3811, yyl3811 := z.DecSliceHelperStart()

	var yyrr3811, yyrl3811 int
	var yyc3811, yyrt3811 bool
	_, _, _ = yyc3811, yyrt3811, yyrl3811
	yyrr3811 = yyl3811

	if yyv3811 == nil {
		if yyrl3811, yyrt3811 = z.DecInferLen(yyl3811, z.DecBasicHandle().MaxInitLen, 256); yyrt3811 {
			yyrr3811 = yyrl3811
		}
		yyv3811 = make([]ServiceAccount, yyrl3811)
		yyc3811 = true
	}

	if yyl3811 == 0 {
		if len(yyv3811) != 0 {
			yyv3811 = yyv3811[:0]
			yyc3811 = true
		}
	} else if yyl3811 > 0 {

		if yyl3811 > cap(yyv3811) {
			yyrl3811, yyrt3811 = z.DecInferLen(yyl3811, z.DecBasicHandle().MaxInitLen, 256)
			yyv3811 = make([]ServiceAccount, yyrl3811)
			yyc3811 = true

			yyrr3811 = len(yyv3811)
		} else if yyl3811 != len(yyv3811) {
			yyv3811 = yyv3811[:yyl3811]
			yyc3811 = true
		}
		yyj3811 := 0
		for ; yyj3811 < yyrr3811; yyj3811++ {
			if r.TryDecodeAsNil() {
				yyv3811[yyj3811] = ServiceAccount{}
			} else {
				yyv3812 := &yyv3811[yyj3811]
				yyv3812.CodecDecodeSelf(d)
			}

		}
		if yyrt3811 {
			for ; yyj3811 < yyl3811; yyj3811++ {
				yyv3811 = append(yyv3811, ServiceAccount{})
				if r.TryDecodeAsNil() {
					yyv3811[yyj3811] = ServiceAccount{}
				} else {
					yyv3813 := &yyv3811[yyj3811]
					yyv3813.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3811 := 0; !r.CheckBreak(); yyj3811++ {
			if yyj3811 >= len(yyv3811) {
				yyv3811 = append(yyv3811, ServiceAccount{}) // var yyz3811 ServiceAccount
				yyc3811 = true
			}

			if yyj3811 < len(yyv3811) {
				if r.TryDecodeAsNil() {
					yyv3811[yyj3811] = ServiceAccount{}
				} else {
					yyv3814 := &yyv3811[yyj3811]
					yyv3814.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3811.End()
	}
	if yyc3811 {
		*v = yyv3811
	}

}

func (x codecSelfer1234) encSliceEndpointSubset(v []EndpointSubset, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3815 := range v {
		yy3816 := &yyv3815
		yy3816.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEndpointSubset(v *[]EndpointSubset, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3817 := *v
	yyh3817, yyl3817 := z.DecSliceHelperStart()

	var yyrr3817, yyrl3817 int
	var yyc3817, yyrt3817 bool
	_, _, _ = yyc3817, yyrt3817, yyrl3817
	yyrr3817 = yyl3817

	if yyv3817 == nil {
		if yyrl3817, yyrt3817 = z.DecInferLen(yyl3817, z.DecBasicHandle().MaxInitLen, 72); yyrt3817 {
			yyrr3817 = yyrl3817
		}
		yyv3817 = make([]EndpointSubset, yyrl3817)
		yyc3817 = true
	}

	if yyl3817 == 0 {
		if len(yyv3817) != 0 {
			yyv3817 = yyv3817[:0]
			yyc3817 = true
		}
	} else if yyl3817 > 0 {

		if yyl3817 > cap(yyv3817) {
			yyrl3817, yyrt3817 = z.DecInferLen(yyl3817, z.DecBasicHandle().MaxInitLen, 72)
			yyv3817 = make([]EndpointSubset, yyrl3817)
			yyc3817 = true

			yyrr3817 = len(yyv3817)
		} else if yyl3817 != len(yyv3817) {
			yyv3817 = yyv3817[:yyl3817]
			yyc3817 = true
		}
		yyj3817 := 0
		for ; yyj3817 < yyrr3817; yyj3817++ {
			if r.TryDecodeAsNil() {
				yyv3817[yyj3817] = EndpointSubset{}
			} else {
				yyv3818 := &yyv3817[yyj3817]
				yyv3818.CodecDecodeSelf(d)
			}

		}
		if yyrt3817 {
			for ; yyj3817 < yyl3817; yyj3817++ {
				yyv3817 = append(yyv3817, EndpointSubset{})
				if r.TryDecodeAsNil() {
					yyv3817[yyj3817] = EndpointSubset{}
				} else {
					yyv3819 := &yyv3817[yyj3817]
					yyv3819.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3817 := 0; !r.CheckBreak(); yyj3817++ {
			if yyj3817 >= len(yyv3817) {
				yyv3817 = append(yyv3817, EndpointSubset{}) // var yyz3817 EndpointSubset
				yyc3817 = true
			}

			if yyj3817 < len(yyv3817) {
				if r.TryDecodeAsNil() {
					yyv3817[yyj3817] = EndpointSubset{}
				} else {
					yyv3820 := &yyv3817[yyj3817]
					yyv3820.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3817.End()
	}
	if yyc3817 {
		*v = yyv3817
	}

}

func (x codecSelfer1234) encSliceEndpointAddress(v []EndpointAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3821 := range v {
		yy3822 := &yyv3821
		yy3822.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEndpointAddress(v *[]EndpointAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3823 := *v
	yyh3823, yyl3823 := z.DecSliceHelperStart()

	var yyrr3823, yyrl3823 int
	var yyc3823, yyrt3823 bool
	_, _, _ = yyc3823, yyrt3823, yyrl3823
	yyrr3823 = yyl3823

	if yyv3823 == nil {
		if yyrl3823, yyrt3823 = z.DecInferLen(yyl3823, z.DecBasicHandle().MaxInitLen, 24); yyrt3823 {
			yyrr3823 = yyrl3823
		}
		yyv3823 = make([]EndpointAddress, yyrl3823)
		yyc3823 = true
	}

	if yyl3823 == 0 {
		if len(yyv3823) != 0 {
			yyv3823 = yyv3823[:0]
			yyc3823 = true
		}
	} else if yyl3823 > 0 {

		if yyl3823 > cap(yyv3823) {
			yyrl3823, yyrt3823 = z.DecInferLen(yyl3823, z.DecBasicHandle().MaxInitLen, 24)
			yyv3823 = make([]EndpointAddress, yyrl3823)
			yyc3823 = true

			yyrr3823 = len(yyv3823)
		} else if yyl3823 != len(yyv3823) {
			yyv3823 = yyv3823[:yyl3823]
			yyc3823 = true
		}
		yyj3823 := 0
		for ; yyj3823 < yyrr3823; yyj3823++ {
			if r.TryDecodeAsNil() {
				yyv3823[yyj3823] = EndpointAddress{}
			} else {
				yyv3824 := &yyv3823[yyj3823]
				yyv3824.CodecDecodeSelf(d)
			}

		}
		if yyrt3823 {
			for ; yyj3823 < yyl3823; yyj3823++ {
				yyv3823 = append(yyv3823, EndpointAddress{})
				if r.TryDecodeAsNil() {
					yyv3823[yyj3823] = EndpointAddress{}
				} else {
					yyv3825 := &yyv3823[yyj3823]
					yyv3825.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3823 := 0; !r.CheckBreak(); yyj3823++ {
			if yyj3823 >= len(yyv3823) {
				yyv3823 = append(yyv3823, EndpointAddress{}) // var yyz3823 EndpointAddress
				yyc3823 = true
			}

			if yyj3823 < len(yyv3823) {
				if r.TryDecodeAsNil() {
					yyv3823[yyj3823] = EndpointAddress{}
				} else {
					yyv3826 := &yyv3823[yyj3823]
					yyv3826.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3823.End()
	}
	if yyc3823 {
		*v = yyv3823
	}

}

func (x codecSelfer1234) encSliceEndpointPort(v []EndpointPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3827 := range v {
		yy3828 := &yyv3827
		yy3828.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEndpointPort(v *[]EndpointPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3829 := *v
	yyh3829, yyl3829 := z.DecSliceHelperStart()

	var yyrr3829, yyrl3829 int
	var yyc3829, yyrt3829 bool
	_, _, _ = yyc3829, yyrt3829, yyrl3829
	yyrr3829 = yyl3829

	if yyv3829 == nil {
		if yyrl3829, yyrt3829 = z.DecInferLen(yyl3829, z.DecBasicHandle().MaxInitLen, 40); yyrt3829 {
			yyrr3829 = yyrl3829
		}
		yyv3829 = make([]EndpointPort, yyrl3829)
		yyc3829 = true
	}

	if yyl3829 == 0 {
		if len(yyv3829) != 0 {
			yyv3829 = yyv3829[:0]
			yyc3829 = true
		}
	} else if yyl3829 > 0 {

		if yyl3829 > cap(yyv3829) {
			yyrl3829, yyrt3829 = z.DecInferLen(yyl3829, z.DecBasicHandle().MaxInitLen, 40)
			yyv3829 = make([]EndpointPort, yyrl3829)
			yyc3829 = true

			yyrr3829 = len(yyv3829)
		} else if yyl3829 != len(yyv3829) {
			yyv3829 = yyv3829[:yyl3829]
			yyc3829 = true
		}
		yyj3829 := 0
		for ; yyj3829 < yyrr3829; yyj3829++ {
			if r.TryDecodeAsNil() {
				yyv3829[yyj3829] = EndpointPort{}
			} else {
				yyv3830 := &yyv3829[yyj3829]
				yyv3830.CodecDecodeSelf(d)
			}

		}
		if yyrt3829 {
			for ; yyj3829 < yyl3829; yyj3829++ {
				yyv3829 = append(yyv3829, EndpointPort{})
				if r.TryDecodeAsNil() {
					yyv3829[yyj3829] = EndpointPort{}
				} else {
					yyv3831 := &yyv3829[yyj3829]
					yyv3831.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3829 := 0; !r.CheckBreak(); yyj3829++ {
			if yyj3829 >= len(yyv3829) {
				yyv3829 = append(yyv3829, EndpointPort{}) // var yyz3829 EndpointPort
				yyc3829 = true
			}

			if yyj3829 < len(yyv3829) {
				if r.TryDecodeAsNil() {
					yyv3829[yyj3829] = EndpointPort{}
				} else {
					yyv3832 := &yyv3829[yyj3829]
					yyv3832.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3829.End()
	}
	if yyc3829 {
		*v = yyv3829
	}

}

func (x codecSelfer1234) encSliceEndpoints(v []Endpoints, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3833 := range v {
		yy3834 := &yyv3833
		yy3834.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEndpoints(v *[]Endpoints, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3835 := *v
	yyh3835, yyl3835 := z.DecSliceHelperStart()

	var yyrr3835, yyrl3835 int
	var yyc3835, yyrt3835 bool
	_, _, _ = yyc3835, yyrt3835, yyrl3835
	yyrr3835 = yyl3835

	if yyv3835 == nil {
		if yyrl3835, yyrt3835 = z.DecInferLen(yyl3835, z.DecBasicHandle().MaxInitLen, 232); yyrt3835 {
			yyrr3835 = yyrl3835
		}
		yyv3835 = make([]Endpoints, yyrl3835)
		yyc3835 = true
	}

	if yyl3835 == 0 {
		if len(yyv3835) != 0 {
			yyv3835 = yyv3835[:0]
			yyc3835 = true
		}
	} else if yyl3835 > 0 {

		if yyl3835 > cap(yyv3835) {
			yyrl3835, yyrt3835 = z.DecInferLen(yyl3835, z.DecBasicHandle().MaxInitLen, 232)
			yyv3835 = make([]Endpoints, yyrl3835)
			yyc3835 = true

			yyrr3835 = len(yyv3835)
		} else if yyl3835 != len(yyv3835) {
			yyv3835 = yyv3835[:yyl3835]
			yyc3835 = true
		}
		yyj3835 := 0
		for ; yyj3835 < yyrr3835; yyj3835++ {
			if r.TryDecodeAsNil() {
				yyv3835[yyj3835] = Endpoints{}
			} else {
				yyv3836 := &yyv3835[yyj3835]
				yyv3836.CodecDecodeSelf(d)
			}

		}
		if yyrt3835 {
			for ; yyj3835 < yyl3835; yyj3835++ {
				yyv3835 = append(yyv3835, Endpoints{})
				if r.TryDecodeAsNil() {
					yyv3835[yyj3835] = Endpoints{}
				} else {
					yyv3837 := &yyv3835[yyj3835]
					yyv3837.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3835 := 0; !r.CheckBreak(); yyj3835++ {
			if yyj3835 >= len(yyv3835) {
				yyv3835 = append(yyv3835, Endpoints{}) // var yyz3835 Endpoints
				yyc3835 = true
			}

			if yyj3835 < len(yyv3835) {
				if r.TryDecodeAsNil() {
					yyv3835[yyj3835] = Endpoints{}
				} else {
					yyv3838 := &yyv3835[yyj3835]
					yyv3838.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3835.End()
	}
	if yyc3835 {
		*v = yyv3835
	}

}

func (x codecSelfer1234) encSliceNodeCondition(v []NodeCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3839 := range v {
		yy3840 := &yyv3839
		yy3840.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceNodeCondition(v *[]NodeCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3841 := *v
	yyh3841, yyl3841 := z.DecSliceHelperStart()

	var yyrr3841, yyrl3841 int
	var yyc3841, yyrt3841 bool
	_, _, _ = yyc3841, yyrt3841, yyrl3841
	yyrr3841 = yyl3841

	if yyv3841 == nil {
		if yyrl3841, yyrt3841 = z.DecInferLen(yyl3841, z.DecBasicHandle().MaxInitLen, 112); yyrt3841 {
			yyrr3841 = yyrl3841
		}
		yyv3841 = make([]NodeCondition, yyrl3841)
		yyc3841 = true
	}

	if yyl3841 == 0 {
		if len(yyv3841) != 0 {
			yyv3841 = yyv3841[:0]
			yyc3841 = true
		}
	} else if yyl3841 > 0 {

		if yyl3841 > cap(yyv3841) {
			yyrl3841, yyrt3841 = z.DecInferLen(yyl3841, z.DecBasicHandle().MaxInitLen, 112)
			yyv3841 = make([]NodeCondition, yyrl3841)
			yyc3841 = true

			yyrr3841 = len(yyv3841)
		} else if yyl3841 != len(yyv3841) {
			yyv3841 = yyv3841[:yyl3841]
			yyc3841 = true
		}
		yyj3841 := 0
		for ; yyj3841 < yyrr3841; yyj3841++ {
			if r.TryDecodeAsNil() {
				yyv3841[yyj3841] = NodeCondition{}
			} else {
				yyv3842 := &yyv3841[yyj3841]
				yyv3842.CodecDecodeSelf(d)
			}

		}
		if yyrt3841 {
			for ; yyj3841 < yyl3841; yyj3841++ {
				yyv3841 = append(yyv3841, NodeCondition{})
				if r.TryDecodeAsNil() {
					yyv3841[yyj3841] = NodeCondition{}
				} else {
					yyv3843 := &yyv3841[yyj3841]
					yyv3843.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3841 := 0; !r.CheckBreak(); yyj3841++ {
			if yyj3841 >= len(yyv3841) {
				yyv3841 = append(yyv3841, NodeCondition{}) // var yyz3841 NodeCondition
				yyc3841 = true
			}

			if yyj3841 < len(yyv3841) {
				if r.TryDecodeAsNil() {
					yyv3841[yyj3841] = NodeCondition{}
				} else {
					yyv3844 := &yyv3841[yyj3841]
					yyv3844.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3841.End()
	}
	if yyc3841 {
		*v = yyv3841
	}

}

func (x codecSelfer1234) encSliceNodeAddress(v []NodeAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3845 := range v {
		yy3846 := &yyv3845
		yy3846.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceNodeAddress(v *[]NodeAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3847 := *v
	yyh3847, yyl3847 := z.DecSliceHelperStart()

	var yyrr3847, yyrl3847 int
	var yyc3847, yyrt3847 bool
	_, _, _ = yyc3847, yyrt3847, yyrl3847
	yyrr3847 = yyl3847

	if yyv3847 == nil {
		if yyrl3847, yyrt3847 = z.DecInferLen(yyl3847, z.DecBasicHandle().MaxInitLen, 32); yyrt3847 {
			yyrr3847 = yyrl3847
		}
		yyv3847 = make([]NodeAddress, yyrl3847)
		yyc3847 = true
	}

	if yyl3847 == 0 {
		if len(yyv3847) != 0 {
			yyv3847 = yyv3847[:0]
			yyc3847 = true
		}
	} else if yyl3847 > 0 {

		if yyl3847 > cap(yyv3847) {
			yyrl3847, yyrt3847 = z.DecInferLen(yyl3847, z.DecBasicHandle().MaxInitLen, 32)
			yyv3847 = make([]NodeAddress, yyrl3847)
			yyc3847 = true

			yyrr3847 = len(yyv3847)
		} else if yyl3847 != len(yyv3847) {
			yyv3847 = yyv3847[:yyl3847]
			yyc3847 = true
		}
		yyj3847 := 0
		for ; yyj3847 < yyrr3847; yyj3847++ {
			if r.TryDecodeAsNil() {
				yyv3847[yyj3847] = NodeAddress{}
			} else {
				yyv3848 := &yyv3847[yyj3847]
				yyv3848.CodecDecodeSelf(d)
			}

		}
		if yyrt3847 {
			for ; yyj3847 < yyl3847; yyj3847++ {
				yyv3847 = append(yyv3847, NodeAddress{})
				if r.TryDecodeAsNil() {
					yyv3847[yyj3847] = NodeAddress{}
				} else {
					yyv3849 := &yyv3847[yyj3847]
					yyv3849.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3847 := 0; !r.CheckBreak(); yyj3847++ {
			if yyj3847 >= len(yyv3847) {
				yyv3847 = append(yyv3847, NodeAddress{}) // var yyz3847 NodeAddress
				yyc3847 = true
			}

			if yyj3847 < len(yyv3847) {
				if r.TryDecodeAsNil() {
					yyv3847[yyj3847] = NodeAddress{}
				} else {
					yyv3850 := &yyv3847[yyj3847]
					yyv3850.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3847.End()
	}
	if yyc3847 {
		*v = yyv3847
	}

}

func (x codecSelfer1234) encResourceList(v ResourceList, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk3851, yyv3851 := range v {
		yyk3851.CodecEncodeSelf(e)
		yy3852 := &yyv3851
		yym3853 := z.EncBinary()
		_ = yym3853
		if false {
		} else if z.HasExtensions() && z.EncExt(yy3852) {
		} else if !yym3853 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy3852)
		} else {
			z.EncFallback(yy3852)
		}
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decResourceList(v *ResourceList, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3854 := *v
	yyl3854 := r.ReadMapStart()
	yybh3854 := z.DecBasicHandle()
	if yyv3854 == nil {
		yyrl3854, _ := z.DecInferLen(yyl3854, yybh3854.MaxInitLen, 40)
		yyv3854 = make(map[ResourceName]pkg3_resource.Quantity, yyrl3854)
		*v = yyv3854
	}
	var yymk3854 ResourceName
	var yymv3854 pkg3_resource.Quantity
	var yymg3854 bool
	if yybh3854.MapValueReset {
		yymg3854 = true
	}
	if yyl3854 > 0 {
		for yyj3854 := 0; yyj3854 < yyl3854; yyj3854++ {
			if r.TryDecodeAsNil() {
				yymk3854 = ""
			} else {
				yymk3854 = ResourceName(r.DecodeString())
			}

			if yymg3854 {
				yymv3854 = yyv3854[yymk3854]
			} else {
				yymv3854 = pkg3_resource.Quantity{}
			}
			if r.TryDecodeAsNil() {
				yymv3854 = pkg3_resource.Quantity{}
			} else {
				yyv3856 := &yymv3854
				yym3857 := z.DecBinary()
				_ = yym3857
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3856) {
				} else if !yym3857 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3856)
				} else {
					z.DecFallback(yyv3856, false)
				}
			}

			if yyv3854 != nil {
				yyv3854[yymk3854] = yymv3854
			}
		}
	} else if yyl3854 < 0 {
		for yyj3854 := 0; !r.CheckBreak(); yyj3854++ {
			if r.TryDecodeAsNil() {
				yymk3854 = ""
			} else {
				yymk3854 = ResourceName(r.DecodeString())
			}

			if yymg3854 {
				yymv3854 = yyv3854[yymk3854]
			} else {
				yymv3854 = pkg3_resource.Quantity{}
			}
			if r.TryDecodeAsNil() {
				yymv3854 = pkg3_resource.Quantity{}
			} else {
				yyv3859 := &yymv3854
				yym3860 := z.DecBinary()
				_ = yym3860
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3859) {
				} else if !yym3860 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3859)
				} else {
					z.DecFallback(yyv3859, false)
				}
			}

			if yyv3854 != nil {
				yyv3854[yymk3854] = yymv3854
			}
		}
		r.ReadEnd()
	} // else len==0: TODO: Should we clear map entries?
}

func (x codecSelfer1234) encSliceNode(v []Node, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3861 := range v {
		yy3862 := &yyv3861
		yy3862.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceNode(v *[]Node, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3863 := *v
	yyh3863, yyl3863 := z.DecSliceHelperStart()

	var yyrr3863, yyrl3863 int
	var yyc3863, yyrt3863 bool
	_, _, _ = yyc3863, yyrt3863, yyrl3863
	yyrr3863 = yyl3863

	if yyv3863 == nil {
		if yyrl3863, yyrt3863 = z.DecInferLen(yyl3863, z.DecBasicHandle().MaxInitLen, 472); yyrt3863 {
			yyrr3863 = yyrl3863
		}
		yyv3863 = make([]Node, yyrl3863)
		yyc3863 = true
	}

	if yyl3863 == 0 {
		if len(yyv3863) != 0 {
			yyv3863 = yyv3863[:0]
			yyc3863 = true
		}
	} else if yyl3863 > 0 {

		if yyl3863 > cap(yyv3863) {
			yyrl3863, yyrt3863 = z.DecInferLen(yyl3863, z.DecBasicHandle().MaxInitLen, 472)
			yyv3863 = make([]Node, yyrl3863)
			yyc3863 = true

			yyrr3863 = len(yyv3863)
		} else if yyl3863 != len(yyv3863) {
			yyv3863 = yyv3863[:yyl3863]
			yyc3863 = true
		}
		yyj3863 := 0
		for ; yyj3863 < yyrr3863; yyj3863++ {
			if r.TryDecodeAsNil() {
				yyv3863[yyj3863] = Node{}
			} else {
				yyv3864 := &yyv3863[yyj3863]
				yyv3864.CodecDecodeSelf(d)
			}

		}
		if yyrt3863 {
			for ; yyj3863 < yyl3863; yyj3863++ {
				yyv3863 = append(yyv3863, Node{})
				if r.TryDecodeAsNil() {
					yyv3863[yyj3863] = Node{}
				} else {
					yyv3865 := &yyv3863[yyj3863]
					yyv3865.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3863 := 0; !r.CheckBreak(); yyj3863++ {
			if yyj3863 >= len(yyv3863) {
				yyv3863 = append(yyv3863, Node{}) // var yyz3863 Node
				yyc3863 = true
			}

			if yyj3863 < len(yyv3863) {
				if r.TryDecodeAsNil() {
					yyv3863[yyj3863] = Node{}
				} else {
					yyv3866 := &yyv3863[yyj3863]
					yyv3866.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3863.End()
	}
	if yyc3863 {
		*v = yyv3863
	}

}

func (x codecSelfer1234) encSliceFinalizerName(v []FinalizerName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3867 := range v {
		yyv3867.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceFinalizerName(v *[]FinalizerName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3868 := *v
	yyh3868, yyl3868 := z.DecSliceHelperStart()

	var yyrr3868, yyrl3868 int
	var yyc3868, yyrt3868 bool
	_, _, _ = yyc3868, yyrt3868, yyrl3868
	yyrr3868 = yyl3868

	if yyv3868 == nil {
		if yyrl3868, yyrt3868 = z.DecInferLen(yyl3868, z.DecBasicHandle().MaxInitLen, 16); yyrt3868 {
			yyrr3868 = yyrl3868
		}
		yyv3868 = make([]FinalizerName, yyrl3868)
		yyc3868 = true
	}

	if yyl3868 == 0 {
		if len(yyv3868) != 0 {
			yyv3868 = yyv3868[:0]
			yyc3868 = true
		}
	} else if yyl3868 > 0 {

		if yyl3868 > cap(yyv3868) {
			yyrl3868, yyrt3868 = z.DecInferLen(yyl3868, z.DecBasicHandle().MaxInitLen, 16)

			yyv23868 := yyv3868
			yyv3868 = make([]FinalizerName, yyrl3868)
			if len(yyv3868) > 0 {
				copy(yyv3868, yyv23868[:cap(yyv23868)])
			}
			yyc3868 = true

			yyrr3868 = len(yyv3868)
		} else if yyl3868 != len(yyv3868) {
			yyv3868 = yyv3868[:yyl3868]
			yyc3868 = true
		}
		yyj3868 := 0
		for ; yyj3868 < yyrr3868; yyj3868++ {
			if r.TryDecodeAsNil() {
				yyv3868[yyj3868] = ""
			} else {
				yyv3868[yyj3868] = FinalizerName(r.DecodeString())
			}

		}
		if yyrt3868 {
			for ; yyj3868 < yyl3868; yyj3868++ {
				yyv3868 = append(yyv3868, "")
				if r.TryDecodeAsNil() {
					yyv3868[yyj3868] = ""
				} else {
					yyv3868[yyj3868] = FinalizerName(r.DecodeString())
				}

			}
		}

	} else {
		for yyj3868 := 0; !r.CheckBreak(); yyj3868++ {
			if yyj3868 >= len(yyv3868) {
				yyv3868 = append(yyv3868, "") // var yyz3868 FinalizerName
				yyc3868 = true
			}

			if yyj3868 < len(yyv3868) {
				if r.TryDecodeAsNil() {
					yyv3868[yyj3868] = ""
				} else {
					yyv3868[yyj3868] = FinalizerName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3868.End()
	}
	if yyc3868 {
		*v = yyv3868
	}

}

func (x codecSelfer1234) encSliceNamespace(v []Namespace, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3872 := range v {
		yy3873 := &yyv3872
		yy3873.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceNamespace(v *[]Namespace, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3874 := *v
	yyh3874, yyl3874 := z.DecSliceHelperStart()

	var yyrr3874, yyrl3874 int
	var yyc3874, yyrt3874 bool
	_, _, _ = yyc3874, yyrt3874, yyrl3874
	yyrr3874 = yyl3874

	if yyv3874 == nil {
		if yyrl3874, yyrt3874 = z.DecInferLen(yyl3874, z.DecBasicHandle().MaxInitLen, 264); yyrt3874 {
			yyrr3874 = yyrl3874
		}
		yyv3874 = make([]Namespace, yyrl3874)
		yyc3874 = true
	}

	if yyl3874 == 0 {
		if len(yyv3874) != 0 {
			yyv3874 = yyv3874[:0]
			yyc3874 = true
		}
	} else if yyl3874 > 0 {

		if yyl3874 > cap(yyv3874) {
			yyrl3874, yyrt3874 = z.DecInferLen(yyl3874, z.DecBasicHandle().MaxInitLen, 264)
			yyv3874 = make([]Namespace, yyrl3874)
			yyc3874 = true

			yyrr3874 = len(yyv3874)
		} else if yyl3874 != len(yyv3874) {
			yyv3874 = yyv3874[:yyl3874]
			yyc3874 = true
		}
		yyj3874 := 0
		for ; yyj3874 < yyrr3874; yyj3874++ {
			if r.TryDecodeAsNil() {
				yyv3874[yyj3874] = Namespace{}
			} else {
				yyv3875 := &yyv3874[yyj3874]
				yyv3875.CodecDecodeSelf(d)
			}

		}
		if yyrt3874 {
			for ; yyj3874 < yyl3874; yyj3874++ {
				yyv3874 = append(yyv3874, Namespace{})
				if r.TryDecodeAsNil() {
					yyv3874[yyj3874] = Namespace{}
				} else {
					yyv3876 := &yyv3874[yyj3874]
					yyv3876.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3874 := 0; !r.CheckBreak(); yyj3874++ {
			if yyj3874 >= len(yyv3874) {
				yyv3874 = append(yyv3874, Namespace{}) // var yyz3874 Namespace
				yyc3874 = true
			}

			if yyj3874 < len(yyv3874) {
				if r.TryDecodeAsNil() {
					yyv3874[yyj3874] = Namespace{}
				} else {
					yyv3877 := &yyv3874[yyj3874]
					yyv3877.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3874.End()
	}
	if yyc3874 {
		*v = yyv3874
	}

}

func (x codecSelfer1234) encMapstringSubnet(v map[string]Subnet, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk3878, yyv3878 := range v {
		yym3879 := z.EncBinary()
		_ = yym3879
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF81234, string(yyk3878))
		}
		yy3880 := &yyv3878
		yy3880.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decMapstringSubnet(v *map[string]Subnet, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3881 := *v
	yyl3881 := r.ReadMapStart()
	yybh3881 := z.DecBasicHandle()
	if yyv3881 == nil {
		yyrl3881, _ := z.DecInferLen(yyl3881, yybh3881.MaxInitLen, 48)
		yyv3881 = make(map[string]Subnet, yyrl3881)
		*v = yyv3881
	}
	var yymk3881 string
	var yymv3881 Subnet
	var yymg3881 bool
	if yybh3881.MapValueReset {
		yymg3881 = true
	}
	if yyl3881 > 0 {
		for yyj3881 := 0; yyj3881 < yyl3881; yyj3881++ {
			if r.TryDecodeAsNil() {
				yymk3881 = ""
			} else {
				yymk3881 = string(r.DecodeString())
			}

			if yymg3881 {
				yymv3881 = yyv3881[yymk3881]
			} else {
				yymv3881 = Subnet{}
			}
			if r.TryDecodeAsNil() {
				yymv3881 = Subnet{}
			} else {
				yyv3883 := &yymv3881
				yyv3883.CodecDecodeSelf(d)
			}

			if yyv3881 != nil {
				yyv3881[yymk3881] = yymv3881
			}
		}
	} else if yyl3881 < 0 {
		for yyj3881 := 0; !r.CheckBreak(); yyj3881++ {
			if r.TryDecodeAsNil() {
				yymk3881 = ""
			} else {
				yymk3881 = string(r.DecodeString())
			}

			if yymg3881 {
				yymv3881 = yyv3881[yymk3881]
			} else {
				yymv3881 = Subnet{}
			}
			if r.TryDecodeAsNil() {
				yymv3881 = Subnet{}
			} else {
				yyv3885 := &yymv3881
				yyv3885.CodecDecodeSelf(d)
			}

			if yyv3881 != nil {
				yyv3881[yymk3881] = yymv3881
			}
		}
		r.ReadEnd()
	} // else len==0: TODO: Should we clear map entries?
}

func (x codecSelfer1234) encSliceNetwork(v []Network, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3886 := range v {
		yy3887 := &yyv3886
		yy3887.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceNetwork(v *[]Network, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3888 := *v
	yyh3888, yyl3888 := z.DecSliceHelperStart()

	var yyrr3888, yyrl3888 int
	var yyc3888, yyrt3888 bool
	_, _, _ = yyc3888, yyrt3888, yyrl3888
	yyrr3888 = yyl3888

	if yyv3888 == nil {
		if yyrl3888, yyrt3888 = z.DecInferLen(yyl3888, z.DecBasicHandle().MaxInitLen, 248); yyrt3888 {
			yyrr3888 = yyrl3888
		}
		yyv3888 = make([]Network, yyrl3888)
		yyc3888 = true
	}

	if yyl3888 == 0 {
		if len(yyv3888) != 0 {
			yyv3888 = yyv3888[:0]
			yyc3888 = true
		}
	} else if yyl3888 > 0 {

		if yyl3888 > cap(yyv3888) {
			yyrl3888, yyrt3888 = z.DecInferLen(yyl3888, z.DecBasicHandle().MaxInitLen, 248)
			yyv3888 = make([]Network, yyrl3888)
			yyc3888 = true

			yyrr3888 = len(yyv3888)
		} else if yyl3888 != len(yyv3888) {
			yyv3888 = yyv3888[:yyl3888]
			yyc3888 = true
		}
		yyj3888 := 0
		for ; yyj3888 < yyrr3888; yyj3888++ {
			if r.TryDecodeAsNil() {
				yyv3888[yyj3888] = Network{}
			} else {
				yyv3889 := &yyv3888[yyj3888]
				yyv3889.CodecDecodeSelf(d)
			}

		}
		if yyrt3888 {
			for ; yyj3888 < yyl3888; yyj3888++ {
				yyv3888 = append(yyv3888, Network{})
				if r.TryDecodeAsNil() {
					yyv3888[yyj3888] = Network{}
				} else {
					yyv3890 := &yyv3888[yyj3888]
					yyv3890.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3888 := 0; !r.CheckBreak(); yyj3888++ {
			if yyj3888 >= len(yyv3888) {
				yyv3888 = append(yyv3888, Network{}) // var yyz3888 Network
				yyc3888 = true
			}

			if yyj3888 < len(yyv3888) {
				if r.TryDecodeAsNil() {
					yyv3888[yyj3888] = Network{}
				} else {
					yyv3891 := &yyv3888[yyj3888]
					yyv3891.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3888.End()
	}
	if yyc3888 {
		*v = yyv3888
	}

}

func (x codecSelfer1234) encSliceTenant(v []Tenant, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3892 := range v {
		yy3893 := &yyv3892
		yy3893.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceTenant(v *[]Tenant, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3894 := *v
	yyh3894, yyl3894 := z.DecSliceHelperStart()

	var yyrr3894, yyrl3894 int
	var yyc3894, yyrt3894 bool
	_, _, _ = yyc3894, yyrt3894, yyrl3894
	yyrr3894 = yyl3894

	if yyv3894 == nil {
		if yyrl3894, yyrt3894 = z.DecInferLen(yyl3894, z.DecBasicHandle().MaxInitLen, 248); yyrt3894 {
			yyrr3894 = yyrl3894
		}
		yyv3894 = make([]Tenant, yyrl3894)
		yyc3894 = true
	}

	if yyl3894 == 0 {
		if len(yyv3894) != 0 {
			yyv3894 = yyv3894[:0]
			yyc3894 = true
		}
	} else if yyl3894 > 0 {

		if yyl3894 > cap(yyv3894) {
			yyrl3894, yyrt3894 = z.DecInferLen(yyl3894, z.DecBasicHandle().MaxInitLen, 248)
			yyv3894 = make([]Tenant, yyrl3894)
			yyc3894 = true

			yyrr3894 = len(yyv3894)
		} else if yyl3894 != len(yyv3894) {
			yyv3894 = yyv3894[:yyl3894]
			yyc3894 = true
		}
		yyj3894 := 0
		for ; yyj3894 < yyrr3894; yyj3894++ {
			if r.TryDecodeAsNil() {
				yyv3894[yyj3894] = Tenant{}
			} else {
				yyv3895 := &yyv3894[yyj3894]
				yyv3895.CodecDecodeSelf(d)
			}

		}
		if yyrt3894 {
			for ; yyj3894 < yyl3894; yyj3894++ {
				yyv3894 = append(yyv3894, Tenant{})
				if r.TryDecodeAsNil() {
					yyv3894[yyj3894] = Tenant{}
				} else {
					yyv3896 := &yyv3894[yyj3894]
					yyv3896.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3894 := 0; !r.CheckBreak(); yyj3894++ {
			if yyj3894 >= len(yyv3894) {
				yyv3894 = append(yyv3894, Tenant{}) // var yyz3894 Tenant
				yyc3894 = true
			}

			if yyj3894 < len(yyv3894) {
				if r.TryDecodeAsNil() {
					yyv3894[yyj3894] = Tenant{}
				} else {
					yyv3897 := &yyv3894[yyj3894]
					yyv3897.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3894.End()
	}
	if yyc3894 {
		*v = yyv3894
	}

}

func (x codecSelfer1234) encSliceEvent(v []Event, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3898 := range v {
		yy3899 := &yyv3898
		yy3899.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEvent(v *[]Event, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3900 := *v
	yyh3900, yyl3900 := z.DecSliceHelperStart()

	var yyrr3900, yyrl3900 int
	var yyc3900, yyrt3900 bool
	_, _, _ = yyc3900, yyrt3900, yyrl3900
	yyrr3900 = yyl3900

	if yyv3900 == nil {
		if yyrl3900, yyrt3900 = z.DecInferLen(yyl3900, z.DecBasicHandle().MaxInitLen, 456); yyrt3900 {
			yyrr3900 = yyrl3900
		}
		yyv3900 = make([]Event, yyrl3900)
		yyc3900 = true
	}

	if yyl3900 == 0 {
		if len(yyv3900) != 0 {
			yyv3900 = yyv3900[:0]
			yyc3900 = true
		}
	} else if yyl3900 > 0 {

		if yyl3900 > cap(yyv3900) {
			yyrl3900, yyrt3900 = z.DecInferLen(yyl3900, z.DecBasicHandle().MaxInitLen, 456)
			yyv3900 = make([]Event, yyrl3900)
			yyc3900 = true

			yyrr3900 = len(yyv3900)
		} else if yyl3900 != len(yyv3900) {
			yyv3900 = yyv3900[:yyl3900]
			yyc3900 = true
		}
		yyj3900 := 0
		for ; yyj3900 < yyrr3900; yyj3900++ {
			if r.TryDecodeAsNil() {
				yyv3900[yyj3900] = Event{}
			} else {
				yyv3901 := &yyv3900[yyj3900]
				yyv3901.CodecDecodeSelf(d)
			}

		}
		if yyrt3900 {
			for ; yyj3900 < yyl3900; yyj3900++ {
				yyv3900 = append(yyv3900, Event{})
				if r.TryDecodeAsNil() {
					yyv3900[yyj3900] = Event{}
				} else {
					yyv3902 := &yyv3900[yyj3900]
					yyv3902.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3900 := 0; !r.CheckBreak(); yyj3900++ {
			if yyj3900 >= len(yyv3900) {
				yyv3900 = append(yyv3900, Event{}) // var yyz3900 Event
				yyc3900 = true
			}

			if yyj3900 < len(yyv3900) {
				if r.TryDecodeAsNil() {
					yyv3900[yyj3900] = Event{}
				} else {
					yyv3903 := &yyv3900[yyj3900]
					yyv3903.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3900.End()
	}
	if yyc3900 {
		*v = yyv3900
	}

}

func (x codecSelfer1234) encSliceruntime_RawExtension(v []pkg6_runtime.RawExtension, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3904 := range v {
		yy3905 := &yyv3904
		yym3906 := z.EncBinary()
		_ = yym3906
		if false {
		} else if z.HasExtensions() && z.EncExt(yy3905) {
		} else if !yym3906 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy3905)
		} else {
			z.EncFallback(yy3905)
		}
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceruntime_RawExtension(v *[]pkg6_runtime.RawExtension, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3907 := *v
	yyh3907, yyl3907 := z.DecSliceHelperStart()

	var yyrr3907, yyrl3907 int
	var yyc3907, yyrt3907 bool
	_, _, _ = yyc3907, yyrt3907, yyrl3907
	yyrr3907 = yyl3907

	if yyv3907 == nil {
		if yyrl3907, yyrt3907 = z.DecInferLen(yyl3907, z.DecBasicHandle().MaxInitLen, 24); yyrt3907 {
			yyrr3907 = yyrl3907
		}
		yyv3907 = make([]pkg6_runtime.RawExtension, yyrl3907)
		yyc3907 = true
	}

	if yyl3907 == 0 {
		if len(yyv3907) != 0 {
			yyv3907 = yyv3907[:0]
			yyc3907 = true
		}
	} else if yyl3907 > 0 {

		if yyl3907 > cap(yyv3907) {
			yyrl3907, yyrt3907 = z.DecInferLen(yyl3907, z.DecBasicHandle().MaxInitLen, 24)
			yyv3907 = make([]pkg6_runtime.RawExtension, yyrl3907)
			yyc3907 = true

			yyrr3907 = len(yyv3907)
		} else if yyl3907 != len(yyv3907) {
			yyv3907 = yyv3907[:yyl3907]
			yyc3907 = true
		}
		yyj3907 := 0
		for ; yyj3907 < yyrr3907; yyj3907++ {
			if r.TryDecodeAsNil() {
				yyv3907[yyj3907] = pkg6_runtime.RawExtension{}
			} else {
				yyv3908 := &yyv3907[yyj3907]
				yym3909 := z.DecBinary()
				_ = yym3909
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3908) {
				} else if !yym3909 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3908)
				} else {
					z.DecFallback(yyv3908, false)
				}
			}

		}
		if yyrt3907 {
			for ; yyj3907 < yyl3907; yyj3907++ {
				yyv3907 = append(yyv3907, pkg6_runtime.RawExtension{})
				if r.TryDecodeAsNil() {
					yyv3907[yyj3907] = pkg6_runtime.RawExtension{}
				} else {
					yyv3910 := &yyv3907[yyj3907]
					yym3911 := z.DecBinary()
					_ = yym3911
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv3910) {
					} else if !yym3911 && z.IsJSONHandle() {
						z.DecJSONUnmarshal(yyv3910)
					} else {
						z.DecFallback(yyv3910, false)
					}
				}

			}
		}

	} else {
		for yyj3907 := 0; !r.CheckBreak(); yyj3907++ {
			if yyj3907 >= len(yyv3907) {
				yyv3907 = append(yyv3907, pkg6_runtime.RawExtension{}) // var yyz3907 pkg6_runtime.RawExtension
				yyc3907 = true
			}

			if yyj3907 < len(yyv3907) {
				if r.TryDecodeAsNil() {
					yyv3907[yyj3907] = pkg6_runtime.RawExtension{}
				} else {
					yyv3912 := &yyv3907[yyj3907]
					yym3913 := z.DecBinary()
					_ = yym3913
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv3912) {
					} else if !yym3913 && z.IsJSONHandle() {
						z.DecJSONUnmarshal(yyv3912)
					} else {
						z.DecFallback(yyv3912, false)
					}
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3907.End()
	}
	if yyc3907 {
		*v = yyv3907
	}

}

func (x codecSelfer1234) encSliceLimitRangeItem(v []LimitRangeItem, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3914 := range v {
		yy3915 := &yyv3914
		yy3915.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceLimitRangeItem(v *[]LimitRangeItem, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3916 := *v
	yyh3916, yyl3916 := z.DecSliceHelperStart()

	var yyrr3916, yyrl3916 int
	var yyc3916, yyrt3916 bool
	_, _, _ = yyc3916, yyrt3916, yyrl3916
	yyrr3916 = yyl3916

	if yyv3916 == nil {
		if yyrl3916, yyrt3916 = z.DecInferLen(yyl3916, z.DecBasicHandle().MaxInitLen, 56); yyrt3916 {
			yyrr3916 = yyrl3916
		}
		yyv3916 = make([]LimitRangeItem, yyrl3916)
		yyc3916 = true
	}

	if yyl3916 == 0 {
		if len(yyv3916) != 0 {
			yyv3916 = yyv3916[:0]
			yyc3916 = true
		}
	} else if yyl3916 > 0 {

		if yyl3916 > cap(yyv3916) {
			yyrl3916, yyrt3916 = z.DecInferLen(yyl3916, z.DecBasicHandle().MaxInitLen, 56)
			yyv3916 = make([]LimitRangeItem, yyrl3916)
			yyc3916 = true

			yyrr3916 = len(yyv3916)
		} else if yyl3916 != len(yyv3916) {
			yyv3916 = yyv3916[:yyl3916]
			yyc3916 = true
		}
		yyj3916 := 0
		for ; yyj3916 < yyrr3916; yyj3916++ {
			if r.TryDecodeAsNil() {
				yyv3916[yyj3916] = LimitRangeItem{}
			} else {
				yyv3917 := &yyv3916[yyj3916]
				yyv3917.CodecDecodeSelf(d)
			}

		}
		if yyrt3916 {
			for ; yyj3916 < yyl3916; yyj3916++ {
				yyv3916 = append(yyv3916, LimitRangeItem{})
				if r.TryDecodeAsNil() {
					yyv3916[yyj3916] = LimitRangeItem{}
				} else {
					yyv3918 := &yyv3916[yyj3916]
					yyv3918.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3916 := 0; !r.CheckBreak(); yyj3916++ {
			if yyj3916 >= len(yyv3916) {
				yyv3916 = append(yyv3916, LimitRangeItem{}) // var yyz3916 LimitRangeItem
				yyc3916 = true
			}

			if yyj3916 < len(yyv3916) {
				if r.TryDecodeAsNil() {
					yyv3916[yyj3916] = LimitRangeItem{}
				} else {
					yyv3919 := &yyv3916[yyj3916]
					yyv3919.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3916.End()
	}
	if yyc3916 {
		*v = yyv3916
	}

}

func (x codecSelfer1234) encSliceLimitRange(v []LimitRange, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3920 := range v {
		yy3921 := &yyv3920
		yy3921.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceLimitRange(v *[]LimitRange, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3922 := *v
	yyh3922, yyl3922 := z.DecSliceHelperStart()

	var yyrr3922, yyrl3922 int
	var yyc3922, yyrt3922 bool
	_, _, _ = yyc3922, yyrt3922, yyrl3922
	yyrr3922 = yyl3922

	if yyv3922 == nil {
		if yyrl3922, yyrt3922 = z.DecInferLen(yyl3922, z.DecBasicHandle().MaxInitLen, 232); yyrt3922 {
			yyrr3922 = yyrl3922
		}
		yyv3922 = make([]LimitRange, yyrl3922)
		yyc3922 = true
	}

	if yyl3922 == 0 {
		if len(yyv3922) != 0 {
			yyv3922 = yyv3922[:0]
			yyc3922 = true
		}
	} else if yyl3922 > 0 {

		if yyl3922 > cap(yyv3922) {
			yyrl3922, yyrt3922 = z.DecInferLen(yyl3922, z.DecBasicHandle().MaxInitLen, 232)
			yyv3922 = make([]LimitRange, yyrl3922)
			yyc3922 = true

			yyrr3922 = len(yyv3922)
		} else if yyl3922 != len(yyv3922) {
			yyv3922 = yyv3922[:yyl3922]
			yyc3922 = true
		}
		yyj3922 := 0
		for ; yyj3922 < yyrr3922; yyj3922++ {
			if r.TryDecodeAsNil() {
				yyv3922[yyj3922] = LimitRange{}
			} else {
				yyv3923 := &yyv3922[yyj3922]
				yyv3923.CodecDecodeSelf(d)
			}

		}
		if yyrt3922 {
			for ; yyj3922 < yyl3922; yyj3922++ {
				yyv3922 = append(yyv3922, LimitRange{})
				if r.TryDecodeAsNil() {
					yyv3922[yyj3922] = LimitRange{}
				} else {
					yyv3924 := &yyv3922[yyj3922]
					yyv3924.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3922 := 0; !r.CheckBreak(); yyj3922++ {
			if yyj3922 >= len(yyv3922) {
				yyv3922 = append(yyv3922, LimitRange{}) // var yyz3922 LimitRange
				yyc3922 = true
			}

			if yyj3922 < len(yyv3922) {
				if r.TryDecodeAsNil() {
					yyv3922[yyj3922] = LimitRange{}
				} else {
					yyv3925 := &yyv3922[yyj3922]
					yyv3925.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3922.End()
	}
	if yyc3922 {
		*v = yyv3922
	}

}

func (x codecSelfer1234) encSliceResourceQuota(v []ResourceQuota, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3926 := range v {
		yy3927 := &yyv3926
		yy3927.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceResourceQuota(v *[]ResourceQuota, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3928 := *v
	yyh3928, yyl3928 := z.DecSliceHelperStart()

	var yyrr3928, yyrl3928 int
	var yyc3928, yyrt3928 bool
	_, _, _ = yyc3928, yyrt3928, yyrl3928
	yyrr3928 = yyl3928

	if yyv3928 == nil {
		if yyrl3928, yyrt3928 = z.DecInferLen(yyl3928, z.DecBasicHandle().MaxInitLen, 232); yyrt3928 {
			yyrr3928 = yyrl3928
		}
		yyv3928 = make([]ResourceQuota, yyrl3928)
		yyc3928 = true
	}

	if yyl3928 == 0 {
		if len(yyv3928) != 0 {
			yyv3928 = yyv3928[:0]
			yyc3928 = true
		}
	} else if yyl3928 > 0 {

		if yyl3928 > cap(yyv3928) {
			yyrl3928, yyrt3928 = z.DecInferLen(yyl3928, z.DecBasicHandle().MaxInitLen, 232)
			yyv3928 = make([]ResourceQuota, yyrl3928)
			yyc3928 = true

			yyrr3928 = len(yyv3928)
		} else if yyl3928 != len(yyv3928) {
			yyv3928 = yyv3928[:yyl3928]
			yyc3928 = true
		}
		yyj3928 := 0
		for ; yyj3928 < yyrr3928; yyj3928++ {
			if r.TryDecodeAsNil() {
				yyv3928[yyj3928] = ResourceQuota{}
			} else {
				yyv3929 := &yyv3928[yyj3928]
				yyv3929.CodecDecodeSelf(d)
			}

		}
		if yyrt3928 {
			for ; yyj3928 < yyl3928; yyj3928++ {
				yyv3928 = append(yyv3928, ResourceQuota{})
				if r.TryDecodeAsNil() {
					yyv3928[yyj3928] = ResourceQuota{}
				} else {
					yyv3930 := &yyv3928[yyj3928]
					yyv3930.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3928 := 0; !r.CheckBreak(); yyj3928++ {
			if yyj3928 >= len(yyv3928) {
				yyv3928 = append(yyv3928, ResourceQuota{}) // var yyz3928 ResourceQuota
				yyc3928 = true
			}

			if yyj3928 < len(yyv3928) {
				if r.TryDecodeAsNil() {
					yyv3928[yyj3928] = ResourceQuota{}
				} else {
					yyv3931 := &yyv3928[yyj3928]
					yyv3931.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3928.End()
	}
	if yyc3928 {
		*v = yyv3928
	}

}

func (x codecSelfer1234) encMapstringSliceuint8(v map[string][]uint8, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk3932, yyv3932 := range v {
		yym3933 := z.EncBinary()
		_ = yym3933
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF81234, string(yyk3932))
		}
		if yyv3932 == nil {
			r.EncodeNil()
		} else {
			yym3934 := z.EncBinary()
			_ = yym3934
			if false {
			} else {
				r.EncodeStringBytes(codecSelferC_RAW1234, []byte(yyv3932))
			}
		}
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decMapstringSliceuint8(v *map[string][]uint8, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3935 := *v
	yyl3935 := r.ReadMapStart()
	yybh3935 := z.DecBasicHandle()
	if yyv3935 == nil {
		yyrl3935, _ := z.DecInferLen(yyl3935, yybh3935.MaxInitLen, 40)
		yyv3935 = make(map[string][]uint8, yyrl3935)
		*v = yyv3935
	}
	var yymk3935 string
	var yymv3935 []uint8
	var yymg3935 bool
	if yybh3935.MapValueReset {
		yymg3935 = true
	}
	if yyl3935 > 0 {
		for yyj3935 := 0; yyj3935 < yyl3935; yyj3935++ {
			if r.TryDecodeAsNil() {
				yymk3935 = ""
			} else {
				yymk3935 = string(r.DecodeString())
			}

			if yymg3935 {
				yymv3935 = yyv3935[yymk3935]
			} else {
				yymv3935 = nil
			}
			if r.TryDecodeAsNil() {
				yymv3935 = nil
			} else {
				yyv3937 := &yymv3935
				yym3938 := z.DecBinary()
				_ = yym3938
				if false {
				} else {
					*yyv3937 = r.DecodeBytes(*(*[]byte)(yyv3937), false, false)
				}
			}

			if yyv3935 != nil {
				yyv3935[yymk3935] = yymv3935
			}
		}
	} else if yyl3935 < 0 {
		for yyj3935 := 0; !r.CheckBreak(); yyj3935++ {
			if r.TryDecodeAsNil() {
				yymk3935 = ""
			} else {
				yymk3935 = string(r.DecodeString())
			}

			if yymg3935 {
				yymv3935 = yyv3935[yymk3935]
			} else {
				yymv3935 = nil
			}
			if r.TryDecodeAsNil() {
				yymv3935 = nil
			} else {
				yyv3940 := &yymv3935
				yym3941 := z.DecBinary()
				_ = yym3941
				if false {
				} else {
					*yyv3940 = r.DecodeBytes(*(*[]byte)(yyv3940), false, false)
				}
			}

			if yyv3935 != nil {
				yyv3935[yymk3935] = yymv3935
			}
		}
		r.ReadEnd()
	} // else len==0: TODO: Should we clear map entries?
}

func (x codecSelfer1234) encSliceSecret(v []Secret, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3942 := range v {
		yy3943 := &yyv3942
		yy3943.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceSecret(v *[]Secret, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3944 := *v
	yyh3944, yyl3944 := z.DecSliceHelperStart()

	var yyrr3944, yyrl3944 int
	var yyc3944, yyrt3944 bool
	_, _, _ = yyc3944, yyrt3944, yyrl3944
	yyrr3944 = yyl3944

	if yyv3944 == nil {
		if yyrl3944, yyrt3944 = z.DecInferLen(yyl3944, z.DecBasicHandle().MaxInitLen, 232); yyrt3944 {
			yyrr3944 = yyrl3944
		}
		yyv3944 = make([]Secret, yyrl3944)
		yyc3944 = true
	}

	if yyl3944 == 0 {
		if len(yyv3944) != 0 {
			yyv3944 = yyv3944[:0]
			yyc3944 = true
		}
	} else if yyl3944 > 0 {

		if yyl3944 > cap(yyv3944) {
			yyrl3944, yyrt3944 = z.DecInferLen(yyl3944, z.DecBasicHandle().MaxInitLen, 232)
			yyv3944 = make([]Secret, yyrl3944)
			yyc3944 = true

			yyrr3944 = len(yyv3944)
		} else if yyl3944 != len(yyv3944) {
			yyv3944 = yyv3944[:yyl3944]
			yyc3944 = true
		}
		yyj3944 := 0
		for ; yyj3944 < yyrr3944; yyj3944++ {
			if r.TryDecodeAsNil() {
				yyv3944[yyj3944] = Secret{}
			} else {
				yyv3945 := &yyv3944[yyj3944]
				yyv3945.CodecDecodeSelf(d)
			}

		}
		if yyrt3944 {
			for ; yyj3944 < yyl3944; yyj3944++ {
				yyv3944 = append(yyv3944, Secret{})
				if r.TryDecodeAsNil() {
					yyv3944[yyj3944] = Secret{}
				} else {
					yyv3946 := &yyv3944[yyj3944]
					yyv3946.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3944 := 0; !r.CheckBreak(); yyj3944++ {
			if yyj3944 >= len(yyv3944) {
				yyv3944 = append(yyv3944, Secret{}) // var yyz3944 Secret
				yyc3944 = true
			}

			if yyj3944 < len(yyv3944) {
				if r.TryDecodeAsNil() {
					yyv3944[yyj3944] = Secret{}
				} else {
					yyv3947 := &yyv3944[yyj3944]
					yyv3947.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3944.End()
	}
	if yyc3944 {
		*v = yyv3944
	}

}

func (x codecSelfer1234) encSliceComponentCondition(v []ComponentCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3948 := range v {
		yy3949 := &yyv3948
		yy3949.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceComponentCondition(v *[]ComponentCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3950 := *v
	yyh3950, yyl3950 := z.DecSliceHelperStart()

	var yyrr3950, yyrl3950 int
	var yyc3950, yyrt3950 bool
	_, _, _ = yyc3950, yyrt3950, yyrl3950
	yyrr3950 = yyl3950

	if yyv3950 == nil {
		if yyrl3950, yyrt3950 = z.DecInferLen(yyl3950, z.DecBasicHandle().MaxInitLen, 64); yyrt3950 {
			yyrr3950 = yyrl3950
		}
		yyv3950 = make([]ComponentCondition, yyrl3950)
		yyc3950 = true
	}

	if yyl3950 == 0 {
		if len(yyv3950) != 0 {
			yyv3950 = yyv3950[:0]
			yyc3950 = true
		}
	} else if yyl3950 > 0 {

		if yyl3950 > cap(yyv3950) {
			yyrl3950, yyrt3950 = z.DecInferLen(yyl3950, z.DecBasicHandle().MaxInitLen, 64)
			yyv3950 = make([]ComponentCondition, yyrl3950)
			yyc3950 = true

			yyrr3950 = len(yyv3950)
		} else if yyl3950 != len(yyv3950) {
			yyv3950 = yyv3950[:yyl3950]
			yyc3950 = true
		}
		yyj3950 := 0
		for ; yyj3950 < yyrr3950; yyj3950++ {
			if r.TryDecodeAsNil() {
				yyv3950[yyj3950] = ComponentCondition{}
			} else {
				yyv3951 := &yyv3950[yyj3950]
				yyv3951.CodecDecodeSelf(d)
			}

		}
		if yyrt3950 {
			for ; yyj3950 < yyl3950; yyj3950++ {
				yyv3950 = append(yyv3950, ComponentCondition{})
				if r.TryDecodeAsNil() {
					yyv3950[yyj3950] = ComponentCondition{}
				} else {
					yyv3952 := &yyv3950[yyj3950]
					yyv3952.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3950 := 0; !r.CheckBreak(); yyj3950++ {
			if yyj3950 >= len(yyv3950) {
				yyv3950 = append(yyv3950, ComponentCondition{}) // var yyz3950 ComponentCondition
				yyc3950 = true
			}

			if yyj3950 < len(yyv3950) {
				if r.TryDecodeAsNil() {
					yyv3950[yyj3950] = ComponentCondition{}
				} else {
					yyv3953 := &yyv3950[yyj3950]
					yyv3953.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3950.End()
	}
	if yyc3950 {
		*v = yyv3950
	}

}

func (x codecSelfer1234) encSliceComponentStatus(v []ComponentStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3954 := range v {
		yy3955 := &yyv3954
		yy3955.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceComponentStatus(v *[]ComponentStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3956 := *v
	yyh3956, yyl3956 := z.DecSliceHelperStart()

	var yyrr3956, yyrl3956 int
	var yyc3956, yyrt3956 bool
	_, _, _ = yyc3956, yyrt3956, yyrl3956
	yyrr3956 = yyl3956

	if yyv3956 == nil {
		if yyrl3956, yyrt3956 = z.DecInferLen(yyl3956, z.DecBasicHandle().MaxInitLen, 232); yyrt3956 {
			yyrr3956 = yyrl3956
		}
		yyv3956 = make([]ComponentStatus, yyrl3956)
		yyc3956 = true
	}

	if yyl3956 == 0 {
		if len(yyv3956) != 0 {
			yyv3956 = yyv3956[:0]
			yyc3956 = true
		}
	} else if yyl3956 > 0 {

		if yyl3956 > cap(yyv3956) {
			yyrl3956, yyrt3956 = z.DecInferLen(yyl3956, z.DecBasicHandle().MaxInitLen, 232)
			yyv3956 = make([]ComponentStatus, yyrl3956)
			yyc3956 = true

			yyrr3956 = len(yyv3956)
		} else if yyl3956 != len(yyv3956) {
			yyv3956 = yyv3956[:yyl3956]
			yyc3956 = true
		}
		yyj3956 := 0
		for ; yyj3956 < yyrr3956; yyj3956++ {
			if r.TryDecodeAsNil() {
				yyv3956[yyj3956] = ComponentStatus{}
			} else {
				yyv3957 := &yyv3956[yyj3956]
				yyv3957.CodecDecodeSelf(d)
			}

		}
		if yyrt3956 {
			for ; yyj3956 < yyl3956; yyj3956++ {
				yyv3956 = append(yyv3956, ComponentStatus{})
				if r.TryDecodeAsNil() {
					yyv3956[yyj3956] = ComponentStatus{}
				} else {
					yyv3958 := &yyv3956[yyj3956]
					yyv3958.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3956 := 0; !r.CheckBreak(); yyj3956++ {
			if yyj3956 >= len(yyv3956) {
				yyv3956 = append(yyv3956, ComponentStatus{}) // var yyz3956 ComponentStatus
				yyc3956 = true
			}

			if yyj3956 < len(yyv3956) {
				if r.TryDecodeAsNil() {
					yyv3956[yyj3956] = ComponentStatus{}
				} else {
					yyv3959 := &yyv3956[yyj3956]
					yyv3959.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3956.End()
	}
	if yyc3956 {
		*v = yyv3956
	}

}

func (x codecSelfer1234) encSliceDownwardAPIVolumeFile(v []DownwardAPIVolumeFile, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3960 := range v {
		yy3961 := &yyv3960
		yy3961.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceDownwardAPIVolumeFile(v *[]DownwardAPIVolumeFile, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3962 := *v
	yyh3962, yyl3962 := z.DecSliceHelperStart()

	var yyrr3962, yyrl3962 int
	var yyc3962, yyrt3962 bool
	_, _, _ = yyc3962, yyrt3962, yyrl3962
	yyrr3962 = yyl3962

	if yyv3962 == nil {
		if yyrl3962, yyrt3962 = z.DecInferLen(yyl3962, z.DecBasicHandle().MaxInitLen, 48); yyrt3962 {
			yyrr3962 = yyrl3962
		}
		yyv3962 = make([]DownwardAPIVolumeFile, yyrl3962)
		yyc3962 = true
	}

	if yyl3962 == 0 {
		if len(yyv3962) != 0 {
			yyv3962 = yyv3962[:0]
			yyc3962 = true
		}
	} else if yyl3962 > 0 {

		if yyl3962 > cap(yyv3962) {
			yyrl3962, yyrt3962 = z.DecInferLen(yyl3962, z.DecBasicHandle().MaxInitLen, 48)
			yyv3962 = make([]DownwardAPIVolumeFile, yyrl3962)
			yyc3962 = true

			yyrr3962 = len(yyv3962)
		} else if yyl3962 != len(yyv3962) {
			yyv3962 = yyv3962[:yyl3962]
			yyc3962 = true
		}
		yyj3962 := 0
		for ; yyj3962 < yyrr3962; yyj3962++ {
			if r.TryDecodeAsNil() {
				yyv3962[yyj3962] = DownwardAPIVolumeFile{}
			} else {
				yyv3963 := &yyv3962[yyj3962]
				yyv3963.CodecDecodeSelf(d)
			}

		}
		if yyrt3962 {
			for ; yyj3962 < yyl3962; yyj3962++ {
				yyv3962 = append(yyv3962, DownwardAPIVolumeFile{})
				if r.TryDecodeAsNil() {
					yyv3962[yyj3962] = DownwardAPIVolumeFile{}
				} else {
					yyv3964 := &yyv3962[yyj3962]
					yyv3964.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3962 := 0; !r.CheckBreak(); yyj3962++ {
			if yyj3962 >= len(yyv3962) {
				yyv3962 = append(yyv3962, DownwardAPIVolumeFile{}) // var yyz3962 DownwardAPIVolumeFile
				yyc3962 = true
			}

			if yyj3962 < len(yyv3962) {
				if r.TryDecodeAsNil() {
					yyv3962[yyj3962] = DownwardAPIVolumeFile{}
				} else {
					yyv3965 := &yyv3962[yyj3962]
					yyv3965.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3962.End()
	}
	if yyc3962 {
		*v = yyv3962
	}

}
